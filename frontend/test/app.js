(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
/*!
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Mykhailo Stadnyk <mikhus@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * @version 2.1.5
 */
!function(e){"use strict";function t(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(t||(t="undefined"==typeof window?global:window),void 0!==t[e])return t[e];for(var i=["webkit","moz","ms","o"],r=0,o=i.length,n=e.charAt(0).toUpperCase()+e.substr(1);r<o;r++){var a=t[i[r]+n];if(void 0!==a)return a}return null}function a(e,t,i,r,o,n,l){if("function"!=typeof r)throw new TypeError("Invalid animation rule:",r);var s=e-i,d=s/o,c=0;d>1&&(d=1),1!==d&&(c=r(d),isFinite(c)&&!isNaN(c)&&(d=c)),t&&t(d),s<o?l.frame=ue(function(e){return a(e,t,i,r,o,n,l)}):(n&&n(),l.inProgress=!1)}function l(){Array.prototype.constructor.apply(this,arguments)}function s(e){if(!(e instanceof DOMException&&2152923147===e.result))throw e}function d(e){return e.majorTicks instanceof Array||(e.majorTicks=e.majorTicks?[e.majorTicks]:[]),e.majorTicks.length||(e.majorTicks.push(Te.formatMajorTickNumber(e.minValue,e)),e.majorTicks.push(Te.formatMajorTickNumber(e.maxValue,e))),["right"!==e.tickSide,"left"!==e.tickSide]}function c(e,t,i,r,o,n){e.beginPath(),e.moveTo(t+n,i),e.lineTo(t+r-n,i),e.quadraticCurveTo(t+r,i,t+r,i+n),e.lineTo(t+r,i+o-n),e.quadraticCurveTo(t+r,i+o,t+r-n,i+o),e.lineTo(t+n,i+o),e.quadraticCurveTo(t,i+o,t,i+o-n),e.lineTo(t,i+n),e.quadraticCurveTo(t,i,t+n,i),e.closePath()}function h(e,t){var i=t.valueDec,r=t.valueInt,o=0,n=void 0,a=void 0,l=void 0;if(e=parseFloat(e),l=e<0,e=Math.abs(e),i>0){for(a=e.toFixed(i).toString().split("."),n=r-a[0].length;o<n;++o)a[0]="0"+a[0];a=(l?"-":"")+a[0]+"."+a[1]}else{for(a=Math.round(e).toString(),n=r-a.length;o<n;++o)a="0"+a;a=(l?"-":"")+a}return a}function u(e,t){var i=void 0,r=!1;return i=0===t.majorTicksDec?Math.round(e).toString():e.toFixed(t.majorTicksDec),t.majorTicksInt>1?(r=~i.indexOf("."),~i.indexOf("-")?"-"+[t.majorTicksInt+t.majorTicksDec+2+(r?1:0)-i.length].join("0")+i.replace("-",""):[t.majorTicksInt+t.majorTicksDec+1+(r?1:0)-i.length].join("0")+i):i}function f(e){return e*Math.PI/180}function m(e,t){return{x:-e*Math.sin(t),y:e*Math.cos(t)}}function v(e,t,i,r){var o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=e.createLinearGradient(o?0:n,o?n:0,o?0:r,o?r:0);return a.addColorStop(0,t),a.addColorStop(1,i),a}function b(e,t){if(arguments.length>2&&void 0!==arguments[2]&&arguments[2])return e.restore(),!0;e.save();var i=t.borderShadowWidth;return i&&(e.shadowBlur=i,e.shadowColor=t.colorBorderShadow),!0}function g(e,t){t.needleShadow&&(e.shadowOffsetX=2,e.shadowOffsetY=2,e.shadowBlur=10,e.shadowColor=t.colorNeedleShadowDown)}function p(e,t,i){return e["font"+t+"Style"]+" "+e["font"+t+"Weight"]+" "+e["font"+t+"Size"]*i+"px "+e["font"+t]}function w(e){e.shadowOffsetX=null,e.shadowOffsetY=null,e.shadowBlur=null,e.shadowColor="",e.strokeStyle=null,e.lineWidth=0,e.save()}function y(e,t,i,r){t.valueTextShadow&&(e.shadowOffsetX=i,e.shadowOffsetY=i,e.shadowBlur=r,e.shadowColor=t.colorValueTextShadow)}function k(e,t,i,r,o,n){if(t.valueBox){w(e);var a=t.valueDec?1+t.valueDec:0,l="9".repeat(Math.max.apply(null,[String(parseInt(i)).length+a].concat(t.majorTicks.map(function(e){return String(parseInt(e,10)).length+a})))),s=t.valueText||h(i,t),d=n/200,u=n/100,f=.4*u,m=1.2*u;e.font=p(t,"Value",d),y(e,t,f,m);var v=e.measureText(t.valueText?s:"-"+h(Number(l),t)).width;w(e);var b=parseFloat(t.fontValueSize)*d+f+m,g=u*parseFloat(t.valueBoxStroke),k=2*n-2*g,x=v+10*u,T=1.1*b+f+m,S=u*t.valueBoxBorderRadius,W=(parseFloat(t.valueBoxWidth)||0)/100*k;W>x&&(x=W),x>k&&(x=k);var O=r-x/2,V=o-T/2,P=o-5.75*u;if(e.beginPath(),S?c(e,O,V,x,T,S):e.rect(O,V,x,T),g){var M=e.createRadialGradient(r,P,10*u,r,P,20*u);M.addColorStop(0,t.colorValueBoxRect),M.addColorStop(1,t.colorValueBoxRectEnd),e.strokeStyle=M,e.lineWidth=g,e.stroke()}t.colorValueBoxShadow&&(e.shadowBlur=1.2*u,e.shadowColor=t.colorValueBoxShadow),t.colorValueBoxBackground&&(e.fillStyle=t.colorValueBoxBackground,e.fill()),e.closePath(),e.restore(),y(e,t,f,m),e.fillStyle=t.colorValueText,e.textAlign="center",e.textBaseline="alphabetic",e.fillText(s,O+x/2,o+T/2-b/3),e.restore()}}function x(e){var t=e.value,i=e.minValue,r=e.maxValue,o=.01*(r-i);return{normal:t<i?i:t>r?r:t,indented:t<i?i-o:t>r?r+o:t}}function T(e,t,i,r,o){i.beginPath(),i.arc(0,0,ye(e),0,2*Se,!0),i.lineWidth=t,i.strokeStyle=o?Te.linearGradient(i,r,o,e):r,i.stroke(),i.closePath()}function S(e,t){var i=be.pixelRatio;return e.maxRadius||(e.maxRadius=e.max-t.borderShadowWidth-t.borderOuterWidth*i-t.borderMiddleWidth*i-t.borderInnerWidth*i+(t.borderOuterWidth?.5:0)+(t.borderMiddleWidth?.5:0)+(t.borderInnerWidth?.5:0)),e.maxRadius}function W(e,t){var i=be.pixelRatio,r=t.borderShadowWidth*i,o=e.max-r-t.borderOuterWidth*i/2,n=o-t.borderOuterWidth*i/2-t.borderMiddleWidth*i/2+.5,a=n-t.borderMiddleWidth*i/2-t.borderInnerWidth*i/2+.5,l=S(e,t),s=void 0,d=!1;e.save(),t.borderOuterWidth&&(d=Te.drawShadow(e,t,d),T(o,t.borderOuterWidth*i,e,t.colorBorderOuter,t.colorBorderOuterEnd)),t.borderMiddleWidth&&(d=Te.drawShadow(e,t,d),T(n,t.borderMiddleWidth*i,e,t.colorBorderMiddle,t.colorBorderMiddleEnd)),t.borderInnerWidth&&(d=Te.drawShadow(e,t,d),T(a,t.borderInnerWidth*i,e,t.colorBorderInner,t.colorBorderInnerEnd)),Te.drawShadow(e,t,d),e.beginPath(),e.arc(0,0,ye(l),0,2*Se,!0),t.colorPlateEnd?(s=e.createRadialGradient(0,0,l/2,0,0,l),s.addColorStop(0,t.colorPlate),s.addColorStop(1,t.colorPlateEnd)):s=t.colorPlate,e.fillStyle=s,e.fill(),e.closePath(),e.restore()}function O(e,t){var i=e.max*(parseFloat(t.highlightsWidth)||0)/100;if(i){var r=ye(P(e,t)-i/2),o=0,n=t.highlights.length,a=(t.maxValue-t.minValue)/t.ticksAngle;for(e.save();o<n;o++){var l=t.highlights[o];e.beginPath(),e.rotate(We),e.arc(0,0,r,Te.radians(t.startAngle+(l.from-t.minValue)/a),Te.radians(t.startAngle+(l.to-t.minValue)/a),!1),e.strokeStyle=l.color,e.lineWidth=i,e.stroke(),e.closePath(),e.restore(),e.save()}}}function V(e,t){var i=P(e,t),r=void 0,o=void 0,n=void 0,a=0,l=0,s=Math.abs(t.minorTicks)||0,d=t.ticksAngle/(t.maxValue-t.minValue);for(e.lineWidth=be.pixelRatio,e.strokeStyle=t.colorMinorTicks||t.colorStrokeTicks,e.save(),t.exactTicks?(o=t.maxValue-t.minValue,r=s?o/s:0,l=(xe.mod(t.majorTicks[0],s)||0)*d):r=s*(t.majorTicks.length-1);a<r;++a)(n=t.startAngle+l+a*(t.ticksAngle/r))<=t.ticksAngle+t.startAngle&&(e.rotate(Te.radians(n)),e.beginPath(),e.moveTo(0,i),e.lineTo(0,i-.075*e.max),B(e))}function P(e,t){var i=e.max/100;return S(e,t)-5*i-(t.barWidth?2*(parseFloat(t.barStrokeWidth)||0)+((parseFloat(t.barWidth)||0)+5)*i:0)}function M(e,t){Te.prepareTicks(t);var i=ye(P(e,t)),r=void 0,o=void 0,n=t.majorTicks.length,a=be.pixelRatio;for(e.lineWidth=2*a,e.save(),o=t.colorMajorTicks instanceof Array?t.colorMajorTicks:new Array(n).fill(t.colorStrokeTicks||t.colorMajorTicks),r=0;r<n;++r)e.strokeStyle=o[r],e.rotate(Te.radians(A(t,t.exactTicks?t.majorTicks[r]:r,n))),e.beginPath(),e.moveTo(0,i),e.lineTo(0,i-.15*e.max),B(e);t.strokeTicks&&(e.strokeStyle=t.colorStrokeTicks||o[0],e.rotate(We),e.beginPath(),e.arc(0,0,i,Te.radians(t.startAngle),Te.radians(t.startAngle+t.ticksAngle),!1),B(e))}function A(e,t,i){if(e.exactTicks){var r=e.ticksAngle/(e.maxValue-e.minValue);return e.startAngle+r*(t-e.minValue)}return e.startAngle+t*(e.ticksAngle/(i-1))}function B(e){e.stroke(),e.restore(),e.closePath(),e.save()}function j(e,t){var i=P(e,t)-.15*e.max,r={},o=0,n=t.majorTicks.length,a="needle"!==t.animationTarget,l=t.colorNumbers instanceof Array?t.colorNumbers:new Array(n).fill(t.colorNumbers),s=a?-(t.value-t.minValue)/(t.maxValue-t.minValue)*t.ticksAngle:0;for(a&&(e.save(),e.rotate(-Te.radians(s))),e.font=Te.font(t,"Numbers",e.max/200),e.lineWidth=0,e.textAlign="center",e.textBaseline="middle";o<n;++o){var d=s+A(t,t.exactTicks?t.majorTicks[o]:o,n),c=e.measureText(t.majorTicks[o]).width,h=t.fontNumbersSize,u=Math.sqrt(c*c+h*h)/2,f=Te.radialPoint(i-u-t.numbersMargin/100*e.max,Te.radians(d));360===d&&(d=0),r[d]||(r[d]=!0,e.fillStyle=l[o],e.fillText(t.majorTicks[o],f.x,f.y))}a&&e.restore()}function C(e,t){t.title&&(e.save(),e.font=Te.font(t,"Title",e.max/200),e.fillStyle=t.colorTitle,e.textAlign="center",e.fillText(t.title,0,-e.max/4.25,.8*e.max),e.restore())}function N(e,t){t.units&&(e.save(),e.font=Te.font(t,"Units",e.max/200),e.fillStyle=t.colorUnits,e.textAlign="center",e.fillText(t.units,0,e.max/3.25,.8*e.max),e.restore())}function E(e,t){if(t.needle){var i=t.ticksAngle<360?Te.normalizedValue(t).indented:t.value,r=S(e,t),o=ye(r/100*t.needleCircleSize),n=ye(r/100*t.needleCircleSize*.75),a=ye(r/100*t.needleEnd),l=ye(t.needleStart?r/100*t.needleStart:0),s=r/100*t.needleWidth,d=r/100*t.needleWidth/2,c=be.pixelRatio,h="needle"!==t.animationTarget;e.save(),Te.drawNeedleShadow(e,t),e.rotate(Te.radians(h?t.startAngle:t.startAngle+(i-t.minValue)/(t.maxValue-t.minValue)*t.ticksAngle)),e.fillStyle=Te.linearGradient(e,t.colorNeedle,t.colorNeedleEnd,a-l),"arrow"===t.needleType?(e.beginPath(),e.moveTo(-d,-l),e.lineTo(-s,0),e.lineTo(-1*c,a),e.lineTo(c,a),e.lineTo(s,0),e.lineTo(d,-l),e.closePath(),e.fill(),e.beginPath(),e.lineTo(-.5*c,a),e.lineTo(-1*c,a),e.lineTo(-s,0),e.lineTo(-d,-l),e.lineTo(d/2*c-2*c,-l),e.closePath(),e.fillStyle=t.colorNeedleShadowUp,e.fill()):(e.beginPath(),e.moveTo(-d,a),e.lineTo(-d,l),e.lineTo(d,l),e.lineTo(d,a),e.closePath(),e.fill()),t.needleCircleSize&&(e.restore(),Te.drawNeedleShadow(e,t),t.needleCircleOuter&&(e.beginPath(),e.arc(0,0,o,0,2*Se,!0),e.fillStyle=Te.linearGradient(e,t.colorNeedleCircleOuter,t.colorNeedleCircleOuterEnd,o),e.fill(),e.closePath()),t.needleCircleInner&&(e.beginPath(),e.arc(0,0,n,0,2*Se,!0),e.fillStyle=Te.linearGradient(e,t.colorNeedleCircleInner,t.colorNeedleCircleInnerEnd,n),e.fill(),e.closePath()),e.restore())}}function _(e,t,i){Te.drawValueBox(e,t,i,0,e.max-.33*e.max,e.max)}function R(e,t){var i=e.max/100,r=S(e,t)-5*i,o=parseFloat(t.barStrokeWidth)||0,n=(parseFloat(t.barWidth)||0)*i,a=r-2*o-n,l=(r-a)/2,s=a+l,d=o/s,c=t.startAngle,h=t.startAngle+t.ticksAngle;e.save(),e.rotate(We),o&&(e.beginPath(),e.arc(0,0,s,Te.radians(c)-d,Te.radians(h)+d,!1),e.strokeStyle=t.colorBarStroke,e.lineWidth=2*l,e.stroke(),e.closePath()),n&&(e.beginPath(),e.arc(0,0,s,Te.radians(c),Te.radians(h),!1),e.strokeStyle=t.colorBar,e.lineWidth=n,e.stroke(),e.closePath(),t.barShadow&&(e.beginPath(),e.arc(0,0,r,Te.radians(c),Te.radians(h),!1),e.clip(),e.beginPath(),e.strokeStyle=t.colorBar,e.lineWidth=1,e.shadowBlur=t.barShadow,e.shadowColor=t.colorBarShadow,e.shadowOffsetX=0,e.shadowOffsetY=0,e.arc(0,0,r,Te.radians(t.startAngle),Te.radians(t.startAngle+t.ticksAngle),!1),e.stroke(),e.closePath(),e.restore(),e.rotate(We)),t.barProgress&&(e.beginPath(),e.arc(0,0,s,Te.radians(c),Te.radians(c+(Te.normalizedValue(t).normal-t.minValue)/(t.maxValue-t.minValue)*t.ticksAngle),!1),e.strokeStyle=t.colorBarProgress,e.lineWidth=n,e.stroke(),e.closePath())),e.restore()}function I(e){return e.options.animatedValue?e.options.value:e.value}function D(e,t,i,r,o,n,a,l){e.beginPath(),e.fillStyle=l?Te.linearGradient(e,a,l,o>n?o:n,n>o,o>n?i:r):a,t>0?Te.roundRect(e,i,r,o,n,t):e.rect(i,r,o,n),e.fill(),e.closePath()}function z(e,t,i,r,o,n,a,l,s){e.beginPath(),e.lineWidth=t,e.strokeStyle=s?Te.linearGradient(e,l,s,a,!0,o):l,i>0?Te.roundRect(e,r,o,n,a,i):e.rect(r,o,n,a),e.stroke(),e.closePath()}function L(e,t,i,r,o,n){var a=be.pixelRatio;e.save();var l=t.borderRadius*a,s=o-t.borderShadowWidth-t.borderOuterWidth*a,d=s-t.borderOuterWidth*a-t.borderMiddleWidth*a,c=d-t.borderMiddleWidth*a-t.borderInnerWidth*a,h=c-t.borderInnerWidth*a,u=n-t.borderShadowWidth-t.borderOuterWidth*a,f=u-t.borderOuterWidth*a-t.borderMiddleWidth*a,m=f-t.borderMiddleWidth*a-t.borderInnerWidth*a,v=m-t.borderInnerWidth*a,b=i-(d-s)/2,g=b-(c-d)/2,p=g-(h-c)/2,w=r-(f-u)/2,y=w-(m-f)/2,k=y-(v-m)/2,x=0,T=!1;return t.borderOuterWidth&&(T=Te.drawShadow(e,t,T),z(e,t.borderOuterWidth*a,l,i+t.borderOuterWidth*a/2-x,r+t.borderOuterWidth*a/2-x,s,u,t.colorBorderOuter,t.colorBorderOuterEnd),x+=.5*a),t.borderMiddleWidth&&(T=Te.drawShadow(e,t,T),z(e,t.borderMiddleWidth*a,l-=1+2*x,b+t.borderMiddleWidth*a/2-x,w+t.borderMiddleWidth*a/2-x,d+2*x,f+2*x,t.colorBorderMiddle,t.colorBorderMiddleEnd),x+=.5*a),t.borderInnerWidth&&(T=Te.drawShadow(e,t,T),z(e,t.borderInnerWidth*a,l-=1+2*x,g+t.borderInnerWidth*a/2-x,y+t.borderInnerWidth*a/2-x,c+2*x,m+2*x,t.colorBorderInner,t.colorBorderInnerEnd),x+=.5*a),Te.drawShadow(e,t,T),D(e,l,p,k,h+2*x,v+2*x,t.colorPlate,t.colorPlateEnd),e.restore(),[p,k,h,v]}function G(e,t,i,r,o,n){var a=be.pixelRatio,l=n>=o,s=l?.85*o:n,d=l?n:o;i=l?we(i+(o-s)/2):i;var c=!!t.title,h=!!t.units,u=!!t.valueBox,f=void 0,m=void 0,v=void 0;l?(m=we(.05*d),f=we(.075*d),v=we(.11*d),c&&(d-=f,r+=f),h&&(d-=m),u&&(d-=v)):(m=f=we(.15*s),c&&(s-=f,r+=f),h&&(s-=m));var b=2*t.barStrokeWidth,g=t.barBeginCircle?we(s*t.barBeginCircle/200-b/2):0,p=we(s*t.barWidth/100-b),w=we(d*t.barLength/100-b),y=we((d-w)/2),k=we(i+(l?s/2:y+g)),x=we(r+(l?d-y-g+b/2:s/2)),T=!l||t.hasLeft&&t.hasRight?0:(t.hasRight?-1:1)*t.ticksWidth/100*s,S=l||t.hasLeft&&t.hasRight?0:(t.hasRight?-1:1)*t.ticksWidth/100*s;return e.barDimensions={isVertical:l,width:s,length:d,barWidth:p,barLength:w,strokeWidth:b,barMargin:y,radius:g,pixelRatio:a,barOffset:null,titleMargin:c?f:0,unitsMargin:h?m:0,get ticksLength(){return this.barLength-this.barOffset-this.strokeWidth},X:i+T,Y:r+S,x0:k+T,y0:x+S,baseX:i,baseY:r,ticksPadding:t.ticksPadding/100},e.barDimensions}function F(e,t,i,r,o,n,a){var l=G(e,t,r,o,n,a),s=l.isVertical,d=l.width,c=l.barWidth,h=l.barLength,u=l.strokeWidth,f=l.barMargin,m=l.radius,v=l.x0,b=l.y0,g=l.X,p=l.Y,w=h;if(e.save(),e.beginPath(),t.barBeginCircle){var y=Te.radians(s?270:0),k=Math.asin(c/2/m),x=Math.cos(k),T=Math.sin(k),S=v+(s?m*T:m*x-u/2),W=s?b-m*x:b+m*T,O=ye(s?W-b:S-v);e.barDimensions.barOffset=we(O+m);var V=s?we(v-m*T):S,P=s?W:we(b-m*T);"progress"===i&&(h=e.barDimensions.barOffset+(h-e.barDimensions.barOffset)*(Te.normalizedValue(t).normal-t.minValue)/(t.maxValue-t.minValue));var M=we(S+h-e.barDimensions.barOffset+u/2),A=we(W-h+e.barDimensions.barOffset-u/2);e.arc(v,b,m,y+k,y-k),s?(e.moveTo(S,P),e.lineTo(S,A),e.lineTo(V,A),e.lineTo(V,P)):(e.moveTo(S,P),e.lineTo(M,P),e.lineTo(M,W),e.lineTo(S,W))}else{var B=we(s?g+(d-c)/2:g+f),j=we(s?p+h+f:p+(d-c)/2);"progress"===i&&(h*=(t.value-t.minValue)/(t.maxValue-t.minValue)),s?e.rect(B,j,c,-h):e.rect(B,j,h,c)}"progress"!==i&&t.barStrokeWidth&&(e.lineWidth=u,e.strokeStyle=t.colorBarStroke,e.stroke()),"progress"!==i&&t.colorBar?(e.fillStyle=t.colorBarEnd?Te.linearGradient(e,t.colorBar,t.colorBarEnd,h,s,s?p:g):t.colorBar,e.fill()):"progress"===i&&t.colorBarProgress&&(e.fillStyle=t.colorBarProgressEnd?Te.linearGradient(e,t.colorBarProgress,t.colorBarProgressEnd,w,s,s?p:g):t.colorBarProgress,e.fill()),e.closePath(),t.barBeginCircle&&(e.barDimensions.radius+=u),e.barDimensions.barWidth+=u,e.barDimensions.barLength+=u}function X(e,t,i,r,o,n){F(e,t,"",i,r,o,n)}function Y(e,t){return t.needleSide!==e||t.tickSide!==e||t.numberSide!==e}function U(e,t,i,r,o,n){t.barProgress&&F(e,t,"progress",i,r,o,n)}function q(e,t){var i=e.barDimensions,r=i.isVertical,o=i.width,n=i.length,a=i.barWidth,l=i.barOffset,s=i.barMargin,d=i.X,c=i.Y,h=i.ticksLength,u=i.ticksPadding,f=o*(parseFloat(t.highlightsWidth)||0)/100;if(t.highlights&&f){var m="right"!==t.tickSide,v="left"!==t.tickSide,b=0,g=t.highlights.length,p=(o-a)/2,w=t.maxValue-t.minValue,y=we(r?d+p:d+s+l),k=f,x=r?c+n-s-l:c+p,T=we((t.ticksWidth/100+u)*o)+(f-t.ticksWidth/100*o),S=we(a+u*o);for(e.save();b<g;b++){var W=t.highlights[b],O=h*ye(t.minValue-W.from)/w,V=h*ye((W.to-W.from)/w);e.beginPath(),e.fillStyle=W.color,r?(m&&e.rect(y-T,x-O,k,-V),v&&e.rect(y+S,x-O,k,-V)):(m&&e.rect(y+O,x-T,V,k),v&&e.rect(y+O,x+S,V,k)),e.fill(),e.closePath()}}}function H(e,t,i,r,o){e.beginPath(),e.moveTo(t,i),e.lineTo(r,o),e.stroke(),e.closePath(),e.save()}function J(e,t,i,r,o,n,a,l,s){var d=e.barDimensions,c=d.isVertical,h=d.length,u=d.barWidth,f=d.barOffset,m=d.barMargin,v=d.pixelRatio,b=d.width,g=d.X,p=d.Y,w=d.ticksLength,y=d.ticksPadding,k=(b-u)/2,x=void 0,T=void 0,S=0,W=i.length,O=void 0,V=s*b,P=k-y*b,M=k+u+V+y*b,A=t instanceof Array?t:new Array(i.length).fill(t);e.lineWidth=l*v,e.save();for(var B=w/(o-r);S<W;S++)O=i[S],e.strokeStyle=A[S],c?(T=p+h-m-f+(r-O)*B,n&&(x=g+P,H(e,x,T,we(x-V),T)),a&&(x=g+M,H(e,x,T,we(x-V),T))):(x=g+m+f-(r-O)*B,n&&(T=p+P,H(e,x,T,x,we(T-V))),a&&(T=p+M,H(e,x,we(T),x,T-V)))}function $(e,t){var i=Te.prepareTicks(t),r=le(i,2),o=r[0],n=r[1],a=2,l=(t.maxValue-t.minValue)/(t.majorTicks.length-1),s=t.colorMajorTicks instanceof Array?t.colorMajorTicks:new Array(t.majorTicks.length).fill(t.colorStrokeTicks||t.colorMajorTicks);if(J(e,s,t.exactTicks?t.majorTicks:t.majorTicks.map(function(e,i){return t.minValue+l*i}),t.minValue,t.maxValue,o,n,a,t.ticksWidth/100),t.strokeTicks){var d=e.barDimensions,c=d.isVertical,h=d.length,u=d.width,f=d.barWidth,m=d.barMargin,v=d.barOffset,b=d.X,g=d.Y,p=d.ticksLength,w=d.pixelRatio,y=d.ticksPadding,k=(u-f)/2+f+y*u,x=(u-f)/2-y*u,T=void 0,S=void 0,W=void 0,O=void 0;e.strokeStyle=t.colorStrokeTicks||s[0],a*=w,c?(S=g+h-m-v+a/2,O=S-p-a,o&&(W=T=we(b+x),Z(e,T,S,W,O)),n&&(W=T=we(b+k),Z(e,T,S,W,O))):(T=b+m+v-a/2,W=T+p+a,o&&(O=S=we(g+x),Z(e,T,S,W,O)),n&&(O=S=we(g+k),Z(e,T,S,W,O)))}}function Z(e,t,i,r,o){e.beginPath(),e.moveTo(t,i),e.lineTo(r,o),e.stroke(),e.closePath()}function K(e,t){var i=Te.prepareTicks(t),r=le(i,2),o=r[0],n=r[1],a=[],l=t.minValue,s=Math.abs(t.minorTicks)||0,d=s?(t.maxValue-t.minValue)/(s*(t.majorTicks.length-1)):0;if(s)if(t.exactTicks)for(var c=xe.mod(t.majorTicks[0],s)||0;l<t.maxValue;l+=s)c+l<t.maxValue&&a.push(c+l);else for(;l<t.maxValue;l+=d)a.push(l);J(e,t.colorMinorTicks||t.colorStrokeTicks,a,t.minValue,t.maxValue,o,n,1,t.ticksWidthMinor/100)}function Q(e,t){var i=e.barDimensions,r=i.isVertical,o=i.length,n=i.width,a=i.barWidth,l=i.barMargin,s=i.barOffset,d=i.X,c=i.Y,h=i.ticksLength,u=i.ticksPadding,f=t.maxValue-t.minValue,m=f/(t.majorTicks.length-1),v=t.exactTicks?t.majorTicks:t.majorTicks.map(function(e,i){return t.minValue+m*i}),b=v.length,g="right"!==t.numberSide,p="left"!==t.numberSide,w=t.fontNumbersSize*n/200,y=0,k=(t.ticksWidth/100+2*u)*n,x=(n-a)/2-k,T=(n-a)/2+a+k,S=void 0,W=void 0,O=void 0,V=void 0,P=t.colorNumbers instanceof Array?t.colorNumbers:new Array(b).fill(t.colorNumbers),M=t.numbersMargin/100*n;for(e.font=Te.font(t,"Numbers",n/200),e.lineWidth=0,e.textAlign="center";y<b;y++)e.fillStyle=P[y],V=t.majorTicks[y],O=t.exactTicks?h*((v[y]-t.minValue)/f):y*h/(b-1),r?(W=c+o-l-s-O+w/3,g&&(e.textAlign="right",e.fillText(V,d+x-M,W)),p&&(e.textAlign="left",e.fillText(V,d+T+M,W))):(e.measureText(V).width,S=d+l+s+O,g&&e.fillText(V,S,c+x-M),p&&e.fillText(V,S,c+T+w+M))}function ee(e,t){if(t.title){var i=e.barDimensions,r=i.isVertical,o=i.width,n=i.length,a=i.baseX,l=i.baseY,s=i.titleMargin,d=t.fontTitleSize*o/200,c=we(a+(r?o:n)/2),h=we(l+s/2-(r?d:d/2)-.025*(r?n:o));e.save(),e.textAlign="center",e.fillStyle=t.colorTitle,e.font=Te.font(t,"Title",o/200),e.lineWidth=0,e.fillText(t.title,c,h,r?o:n)}}function te(e,t){if(t.units){var i=e.barDimensions,r=i.isVertical,o=i.width,n=i.length,a=i.baseX,l=i.baseY,s=i.unitsMargin,d=t.fontUnitsSize*o/200,c=we(a+(r?o:n)/2),h=we(l+(r?n:o)+s/2-d/2);e.save(),e.textAlign="center",e.fillStyle=t.colorUnits,e.font=Te.font(t,"Units",o/200),e.lineWidth=0,e.fillText(t.units,c,h,r?o:n)}}function ie(e,t){if(t.needle){var i=e.barDimensions,r=i.isVertical,o=i.width,n=i.length,a=i.barWidth,l=i.barOffset,s=i.barMargin,d=i.ticksLength,c=i.X,h=i.Y,u=i.ticksPadding,f="right"!==t.needleSide,m="left"!==t.needleSide,v=d*(Te.normalizedValue(t).indented-t.minValue)/(t.maxValue-t.minValue),b=(t.ticksWidth/100+u)*o,g=a/2+b,p=g*(t.needleEnd/100),w=void 0,y=void 0,k=void 0,x=void 0,T="arrow"===t.needleType.toLowerCase()?ne:oe,S=(o-a)/2,W=g*(t.needleStart/100),O=S-b-W,V=S+a+b+W;e.save(),Te.drawNeedleShadow(e,t),r?(k=we(h+n-s-l-v),f&&(w=we(c+O),y=w+p,T(e,t,w,k,y,k,p)),m&&(w=we(c+V),y=w-p,T(e,t,w,k,y,k,p,!0))):(w=we(c+s+l+v),f&&(k=we(h+O),x=k+p,T(e,t,w,k,w,x,p)),m&&(k=we(h+V),x=k-p,T(e,t,w,k,w,x,p,!0))),e.restore()}}function re(e,t,i,r){return t.colorNeedleEnd?Te.linearGradient(e,r?t.colorNeedleEnd:t.colorNeedle,r?t.colorNeedle:t.colorNeedleEnd,i,!e.barDimensions.isVertical):t.colorNeedle}function oe(e,t,i,r,o,n,a,l){e.lineWidth=t.needleWidth,e.strokeStyle=re(e,t,a,l),e.beginPath(),e.moveTo(i,r),e.lineTo(o,n),e.stroke(),e.closePath()}function ne(e,t,i,r,o,n,a,l){var s=we(.4*a),d=a-s,c=i===o,h=t.needleWidth/2;e.fillStyle=re(e,t,a,l),e.beginPath(),c?(r>n&&(d*=-1),e.moveTo(i-h,r),e.lineTo(i+h,r),e.lineTo(i+h,r+d),e.lineTo(i,n),e.lineTo(i-h,r+d),e.lineTo(i-h,r)):(i>o&&(d*=-1),e.moveTo(i,r-h),e.lineTo(i,r+h),e.lineTo(i+d,r+h),e.lineTo(o,r),e.lineTo(i+d,r-h),e.lineTo(i,r-h)),e.fill(),e.closePath()}function ae(e,t,i,r,o,n,a){var l=(parseFloat(t.fontValueSize)||0)*n/200,s=(.11*a-l)/2;e.barDimensions.isVertical&&Te.drawValueBox(e,t,i,r+n/2,o+a-l-s,n)}var le=function(){function e(e,t){var i=[],r=!0,o=!1,n=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(i.push(a.value),!t||i.length!==t);r=!0);}catch(e){o=!0,n=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw n}}return i}return function(t,i){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),se=function e(t,i,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,i);if(void 0===o){var n=Object.getPrototypeOf(t);return null===n?void 0:e(n,i,r)}if("value"in o)return o.value;var a=o.get;if(void 0!==a)return a.call(r)},de=function e(t,i,r,o){var n=Object.getOwnPropertyDescriptor(t,i);if(void 0===n){var a=Object.getPrototypeOf(t);null!==a&&e(a,i,r,o)}else if("value"in n&&n.writable)n.value=r;else{var l=n.set;void 0!==l&&l.call(o,r)}return r},ce=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}();Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){if(void 0===e||null===e)throw new TypeError("Cannot convert first argument to object");for(var i=Object(e),r=1;r<arguments.length;r++){var o=arguments[r];if(void 0!==o&&null!==o)for(var n=Object.keys(Object(o)),a=0,l=n.length;a<l;a++){var s=n[a],d=Object.getOwnPropertyDescriptor(o,s);void 0!==d&&d.enumerable&&(i[s]=o[s])}}return i}}),Array.prototype.indexOf||Object.defineProperty(Array.prototype,"indexOf",{value:function(e,t){var i;if(null===this)throw new TypeError('"this" is null or not defined');var r=Object(this),o=r.length>>>0;if(0===o)return-1;var n=+t||0;if(Math.abs(n)===1/0&&(n=0),n>=o)return-1;for(i=Math.max(n>=0?n:o-Math.abs(n),0);i<o;){if(i in r&&r[i]===e)return i;i++}return-1}}),Array.prototype.fill||Object.defineProperty(Array.prototype,"fill",{value:function(e){if(null===this)throw new TypeError("this is null or not defined");for(var t=Object(this),i=t.length>>>0,r=arguments[1],o=r>>0,n=o<0?Math.max(i+o,0):Math.min(o,i),a=arguments[2],l=void 0===a?i:a>>0,s=l<0?Math.max(i+l,0):Math.min(l,i);n<s;)t[n]=e,n++;return t}}),"undefined"==typeof window&&(window="undefined"==typeof global?{}:global);var he=function(){function e(){o(this,e),this._events={},this.addListener=this.on,this.removeListener=this.off}return ce(e,[{key:"emit",value:function(e){if(this._events[e]){for(var t=0,i=this._events[e].length,r=arguments.length,o=Array(r>1?r-1:0),n=1;n<r;n++)o[n-1]=arguments[n];for(;t<i;t++)this._events[e][t]&&this._events[e][t].apply(this,o)}}},{key:"once",value:function(e){for(var t=arguments.length,i=Array(t>1?t-1:0),r=1;r<t;r++)i[r-1]=arguments[r];for(var o=0,n=i.length,a=this;o<n;o++)!function(){var t=i[o],r=function i(){a.off(e,i),t.apply(a,arguments)};i[o]=r}();this.on.apply(this,[e].concat(i))}},{key:"on",value:function(e){this._events[e]||(this._events[e]=[]);for(var t=0,i=arguments.length<=1?0:arguments.length-1;t<i;t++)this._events[e].push(arguments.length<=t+1?void 0:arguments[t+1])}},{key:"off",value:function(e){if(this._events[e])for(var t=0,i=arguments.length<=1?0:arguments.length-1;t<i;t++)for(var r=arguments.length<=t+1?void 0:arguments[t+1],o=void 0;~(o=this._events[e].indexOf(r));)this._events[e].splice(o,1)}},{key:"removeAllListeners",value:function(e){delete this._events[e]}},{key:"listeners",get:function(){return this._events}}]),e}(),ue=n("requestAnimationFrame")||function(e){return setTimeout(function(){return e((new Date).getTime())},1e3/60)},fe={linear:function(e){return e},quad:function(e){return Math.pow(e,2)},dequad:function(e){return 1-fe.quad(1-e)},quint:function(e){return Math.pow(e,5)},dequint:function(e){return 1-Math.pow(1-e,5)},cycle:function(e){return 1-Math.sin(Math.acos(e))},decycle:function(e){return Math.sin(Math.acos(1-e))},bounce:function(e){return 1-fe.debounce(1-e)},debounce:function(e){for(var t=0,i=1;1;t+=i,i/=2)if(e>=(7-4*t)/11)return-Math.pow((11-6*t-11*e)/4,2)+Math.pow(i,2)},elastic:function(e){return 1-fe.delastic(1-e)},delastic:function(e){return Math.pow(2,10*(e-1))*Math.cos(20*Math.PI*1.5/3*e)}},me=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"linear",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:250,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};if(o(this,e),this.duration=i,this.rule=t,this.draw=r,this.end=n,"function"!=typeof this.draw)throw new TypeError("Invalid animation draw callback:",r);if("function"!=typeof this.end)throw new TypeError("Invalid animation end callback:",n)}return ce(e,[{key:"animate",value:function(e,t){var i=this;this.frame&&this.cancel();var r=window.performance&&window.performance.now?window.performance.now():n("animationStartTime")||Date.now();e=e||this.draw,t=t||this.end,this.draw=e,this.end=t,this.frame=ue(function(o){return a(o,e,r,fe[i.rule]||i.rule,i.duration,t,i)})}},{key:"cancel",value:function(){if(this.frame){(n("cancelAnimationFrame")||function(e){})(this.frame),this.frame=null}}},{key:"destroy",value:function(){this.cancel(),this.draw=null,this.end=null}}]),e}();me.rules=fe;var ve=function(){function t(i,r,n){o(this,t),this.options=i,this.element=r.toLowerCase(),this.type=t.toDashed(n),this.Type=e[n],this.mutationsObserved=!1,this.isObservable=!!window.MutationObserver,window.GAUGES_NO_AUTO_INIT||t.domReady(this.traverse.bind(this))}return ce(t,[{key:"isValidNode",value:function(e){return!(!e.tagName||e.tagName.toLowerCase()!==this.element||e.getAttribute("data-type")!==this.type)}},{key:"traverse",value:function(){for(var e=document.getElementsByTagName(this.element),t=0,i=e.length;t<i;t++)this.process(e[t]);this.isObservable&&!this.mutationsObserved&&(new MutationObserver(this.observe.bind(this)).observe(document.body,{childList:!0,subtree:!0,attributes:!0,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0}),this.mutationsObserved=!0)}},{key:"observe",value:function(e){for(var t=0,i=e.length;t<i;t++){var r=e[t];if("attributes"===r.type&&"data-type"===r.attributeName&&this.isValidNode(r.target)&&r.oldValue!==this.type)setTimeout(this.process.bind(this,r.target));else if(r.addedNodes&&r.addedNodes.length)for(var o=0,n=r.addedNodes.length;o<n;o++)setTimeout(this.process.bind(this,r.addedNodes[o]))}}},{key:"process",value:function(e){var i=this;if(!this.isValidNode(e))return null;var r=void 0,o=JSON.parse(JSON.stringify(this.options)),n=null;for(r in o)if(o.hasOwnProperty(r)){var a=t.toAttributeName(r),l=t.parse(e.getAttribute(a));null!==l&&void 0!==l&&(o[r]=l)}return o.renderTo=e,n=new this.Type(o),n.draw&&n.draw(),this.isObservable?(n.observer=new MutationObserver(function(r){r.forEach(function(r){if("attributes"===r.type){var o=r.attributeName.toLowerCase(),a=e.getAttribute(o).toLowerCase();if("data-type"===o&&a&&a!==i.type)n.observer.disconnect(),delete n.observer,n.destroy&&n.destroy();else if("data-"===o.substr(0,5)){var l=o.substr(5).split("-").map(function(e,t){return t?e.charAt(0).toUpperCase()+e.substr(1):e}).join(""),s={};s[l]=t.parse(e.getAttribute(r.attributeName)),"value"===l?n&&(n.value=s[l]):n.update&&n.update(s)}}})}),n.observer.observe(e,{attributes:!0}),n):n}}],[{key:"parse",value:function(e){if("true"===e)return!0;if("false"===e)return!1;if("undefined"!==e){if("null"===e)return null;if(/^[-+#.\w\d\s]+(?:,[-+#.\w\d\s]*)+$/.test(e))return e.split(",");try{return JSON.parse(e)}catch(e){}return e}}},{key:"toDashed",value:function(e){for(var t=e.split(/(?=[A-Z])/),i=1,r=t.length,o=t[0].toLowerCase();i<r;i++)o+="-"+t[i].toLowerCase();return o}},{key:"toCamelCase",value:function(e){for(var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=e.split(/-/),r=0,o=i.length,n="";r<o;r++)n+=r||t?i[r][0].toUpperCase()+i[r].substr(1).toLowerCase():i[r].toLowerCase();return n}},{key:"toAttributeName",value:function(e){return"data-"+t.toDashed(e)}},{key:"domReady",value:function(e){if(/comp|inter|loaded/.test((window.document||{}).readyState+""))return e();window.addEventListener?window.addEventListener("DOMContentLoaded",e,!1):window.attachEvent&&window.attachEvent("onload",e)}}]),t}(),be=function(){function e(t,i,r){o(this,e),e.collection.push(this),this.width=i||0,this.height=r||0,this.element=t,this.init()}return ce(e,[{key:"init",value:function(){var t=e.pixelRatio;this.element.width=this.width*t,this.element.height=this.height*t,this.element.style.width=this.width+"px",this.element.style.height=this.height+"px",this.elementClone=this.element.cloneNode(!0),this.context=this.element.getContext("2d"),this.contextClone=this.elementClone.getContext("2d"),this.drawWidth=this.element.width,this.drawHeight=this.element.height,this.drawX=this.drawWidth/2,this.drawY=this.drawHeight/2,this.minSide=this.drawX<this.drawY?this.drawX:this.drawY,this.elementClone.initialized=!1,this.contextClone.translate(this.drawX,this.drawY),this.contextClone.save(),this.context.translate(this.drawX,this.drawY),this.context.save(),this.context.max=this.contextClone.max=this.minSide,this.context.maxRadius=this.contextClone.maxRadius=null}},{key:"destroy",value:function(){var t=e.collection.indexOf(this);~t&&e.collection.splice(t,1),this.context.clearRect(-this.drawX,-this.drawY,this.drawWidth,this.drawHeight),this.context.max=null,delete this.context.max,this.context.maxRadius=null,delete this.context.maxRadius,this.context=null,this.contextClone=null,this.elementClone=null,this.element=null,this.onRedraw=null}},{key:"commit",value:function(){var t=e.pixelRatio;return 1!==t&&(this.contextClone.scale(t,t),this.contextClone.save()),this}},{key:"redraw",value:function(){return this.init(),this.onRedraw&&this.onRedraw(),this}}],[{key:"redraw",value:function(){for(var t=0,i=e.collection.length;t<i;t++)e.collection[t].redraw()}},{key:"pixelRatio",get:function(){return window.devicePixelRatio||1}}]),e}();be.collection=[],window.matchMedia&&window.matchMedia("screen and (min-resolution: 2dppx)").addListener(be.redraw);var ge={renderTo:null,width:0,height:0,minValue:0,maxValue:100,value:0,units:!1,exactTicks:!1,majorTicks:[0,20,40,60,80,100],minorTicks:10,strokeTicks:!0,animatedValue:!1,animateOnInit:!1,title:!1,borders:!0,numbersMargin:1,listeners:null,valueInt:3,valueDec:2,majorTicksInt:1,majorTicksDec:0,animation:!0,animationDuration:500,animationRule:"cycle",colorPlate:"#fff",colorPlateEnd:"",colorMajorTicks:"#444",
colorMinorTicks:"#666",colorStrokeTicks:"",colorTitle:"#888",colorUnits:"#888",colorNumbers:"#444",colorNeedle:"rgba(240,128,128,1)",colorNeedleEnd:"rgba(255,160,122,.9)",colorValueText:"#444",colorValueTextShadow:"rgba(0,0,0,0.3)",colorBorderShadow:"rgba(0,0,0,0.5)",colorBorderOuter:"#ddd",colorBorderOuterEnd:"#aaa",colorBorderMiddle:"#eee",colorBorderMiddleEnd:"#f0f0f0",colorBorderInner:"#fafafa",colorBorderInnerEnd:"#ccc",colorValueBoxRect:"#888",colorValueBoxRectEnd:"#666",colorValueBoxBackground:"#babab2",colorValueBoxShadow:"rgba(0,0,0,1)",colorNeedleShadowUp:"rgba(2,255,255,0.2)",colorNeedleShadowDown:"rgba(188,143,143,0.45)",colorBarStroke:"#222",colorBar:"#ccc",colorBarProgress:"#888",colorBarShadow:"#000",fontNumbers:"Arial",fontTitle:"Arial",fontUnits:"Arial",fontValue:"Arial",fontNumbersSize:20,fontTitleSize:24,fontUnitsSize:22,fontValueSize:26,fontNumbersStyle:"normal",fontTitleStyle:"normal",fontUnitsStyle:"normal",fontValueStyle:"normal",fontNumbersWeight:"normal",fontTitleWeight:"normal",fontUnitsWeight:"normal",fontValueWeight:"normal",needle:!0,needleShadow:!0,needleType:"arrow",needleStart:5,needleEnd:85,needleWidth:4,borderOuterWidth:3,borderMiddleWidth:3,borderInnerWidth:3,borderShadowWidth:3,valueBox:!0,valueBoxStroke:5,valueBoxWidth:0,valueText:"",valueTextShadow:!0,valueBoxBorderRadius:2.5,highlights:[{from:20,to:60,color:"#eee"},{from:60,to:80,color:"#ccc"},{from:80,to:100,color:"#999"}],highlightsWidth:15,barWidth:20,barStrokeWidth:0,barProgress:!0,barShadow:0};l.prototype=Object.create(Array.prototype),l.prototype.constructor=l,l.prototype.get=function(e){if("string"==typeof e)for(var t=0,i=this.length;t<i;t++){var r=this[t].options.renderTo.tagName?this[t].options.renderTo:document.getElementById(this[t].options.renderTo||"");if(r.getAttribute("id")===e)return this[t]}else if("number"==typeof e)return this[e];return null};var pe="2.1.5",we=Math.round,ye=Math.abs,ke=new l;ke.version=pe;var xe=function(t){function n(t){o(this,n);var r=i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this)),a=r.constructor.name;if("BaseGauge"===a)throw new TypeError("Attempt to instantiate abstract class!");if(ke.push(r),t.listeners&&Object.keys(t.listeners).forEach(function(e){(t.listeners[e]instanceof Array?t.listeners[e]:[t.listeners[e]]).forEach(function(t){r.on(e,t)})}),r.version=pe,r.type=e[a]||n,r.initialized=!1,t.minValue=parseFloat(t.minValue),t.maxValue=parseFloat(t.maxValue),t.value=parseFloat(t.value)||0,t.borders||(t.borderInnerWidth=t.borderMiddleWidth=t.borderOuterWidth=0),!t.renderTo)throw TypeError("Canvas element was not specified when creating the Gauge object!");var l=t.renderTo.tagName?t.renderTo:document.getElementById(t.renderTo);if(!(l instanceof HTMLCanvasElement))throw TypeError("Given gauge canvas element is invalid!");return t.width=parseFloat(t.width)||0,t.height=parseFloat(t.height)||0,t.width&&t.height||(t.width||(t.width=l.parentNode?l.parentNode.offsetWidth:l.offsetWidth),t.height||(t.height=l.parentNode?l.parentNode.offsetHeight:l.offsetHeight)),r.options=t||{},r.options.animateOnInit&&(r._value=r.options.value,r.options.value=r.options.minValue),r.canvas=new be(l,t.width,t.height),r.canvas.onRedraw=r.draw.bind(r),r.animation=new me(t.animationRule,t.animationDuration),r}return r(n,t),ce(n,[{key:"update",value:function(e){return Object.assign(this.options,this.type.configure(e||{})),this.canvas.width=this.options.width,this.canvas.height=this.options.height,this.animation.rule=this.options.animationRule,this.animation.duration=this.options.animationDuration,this.canvas.redraw(),this}},{key:"destroy",value:function(){var e=ke.indexOf(this);~e&&ke.splice(e,1),this.canvas.destroy(),this.canvas=null,this.animation.destroy(),this.animation=null,this.emit("destroy")}},{key:"draw",value:function(){return this.options.animateOnInit&&!this.initialized&&(this.value=this._value,this.initialized=!0,this.emit("init")),this.emit("render"),this}},{key:"value",set:function(e){var t=this;e=n.ensureValue(e,this.options.minValue);var i=this.options.value;if(e!==i)if(this.options.animation){if(this.animation.frame&&(this.options.value=this._value,this._value===e))return this.animation.cancel(),void delete this._value;void 0===this._value&&(this._value=e),this.emit("animationStart"),this.animation.animate(function(r){var o=i+(e-i)*r;t.options.animatedValue&&t.emit("value",o,t.value),t.options.value=o,t.draw(),t.emit("animate",r,t.options.value)},function(){void 0!==t._value&&(t.emit("value",t._value,t.value),t.options.value=t._value,delete t._value),t.draw(),t.emit("animationEnd")})}else this.emit("value",e,this.value),this.options.value=e,this.draw()},get:function(){return void 0===this._value?this.options.value:this._value}}],[{key:"configure",value:function(e){return e}},{key:"initialize",value:function(e,t){return new ve(t,"canvas",e)}},{key:"fromElement",value:function(e){var t=ve.toCamelCase(e.getAttribute("data-type")),i=e.attributes,r=0,o=i.length,n={};if(t){for(/Gauge$/.test(t)||(t+="Gauge");r<o;r++)n[ve.toCamelCase(i[r].name.replace(/^data-/,""),!1)]=ve.parse(i[r].value);new ve(n,e.tagName,t).process(e)}}},{key:"ensureValue",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e=parseFloat(e),!isNaN(e)&&isFinite(e)||(e=parseFloat(t)||0),e}},{key:"mod",value:function(e,t){return(e%t+t)%t}},{key:"version",get:function(){return pe}}]),n}(he);void 0!==e&&(e.BaseGauge=xe,e.gauges=(window.document||{}).gauges=ke);var Te={roundRect:c,padValue:h,formatMajorTickNumber:u,radians:f,radialPoint:m,linearGradient:v,drawNeedleShadow:g,drawValueBox:k,verifyError:s,prepareTicks:d,drawShadow:b,font:p,normalizedValue:x},Se=Math.PI,We=Se/2,Oe=Object.assign({},ge,{ticksAngle:270,startAngle:45,colorNeedleCircleOuter:"#f0f0f0",colorNeedleCircleOuterEnd:"#ccc",colorNeedleCircleInner:"#e8e8e8",colorNeedleCircleInnerEnd:"#f5f5f5",needleCircleSize:10,needleCircleInner:!0,needleCircleOuter:!0,needleStart:20,animationTarget:"needle",useMinPath:!1,barWidth:0}),Ve=function(e){function t(e){return o(this,t),e=Object.assign({},Oe,e||{}),i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,t.configure(e)))}return r(t,e),ce(t,[{key:"draw",value:function(){try{var e=this.canvas,i=[-e.drawX,-e.drawY,e.drawWidth,e.drawHeight],r=i[0],o=i[1],n=i[2],a=i[3],l=this.options;if("needle"===l.animationTarget){if(!e.elementClone.initialized){var s=e.contextClone;s.clearRect(r,o,n,a),s.save(),this.emit("beforePlate"),W(s,l),this.emit("beforeHighlights"),O(s,l),this.emit("beforeMinorTicks"),V(s,l),this.emit("beforeMajorTicks"),M(s,l),this.emit("beforeNumbers"),j(s,l),this.emit("beforeTitle"),C(s,l),this.emit("beforeUnits"),N(s,l),e.elementClone.initialized=!0}this.canvas.commit(),e.context.clearRect(r,o,n,a),e.context.save(),e.context.drawImage(e.elementClone,r,o,n,a),e.context.save(),this.emit("beforeProgressBar"),R(e.context,l),this.emit("beforeValueBox"),_(e.context,l,I(this)),this.emit("beforeNeedle"),E(e.context,l)}else{var d=-Te.radians((l.value-l.minValue)/(l.maxValue-l.minValue)*l.ticksAngle);if(e.context.clearRect(r,o,n,a),e.context.save(),this.emit("beforePlate"),W(e.context,l),e.context.rotate(d),this.emit("beforeHighlights"),O(e.context,l),this.emit("beforeMinorTicks"),V(e.context,l),this.emit("beforeMajorTicks"),M(e.context,l),this.emit("beforeNumbers"),j(e.context,l),this.emit("beforeProgressBar"),R(e.context,l),e.context.rotate(-d),e.context.save(),!e.elementClone.initialized){var c=e.contextClone;c.clearRect(r,o,n,a),c.save(),this.emit("beforeTitle"),C(c,l),this.emit("beforeUnits"),N(c,l),this.emit("beforeNeedle"),E(c,l),e.elementClone.initialized=!0}e.context.drawImage(e.elementClone,r,o,n,a)}this.emit("beforeValueBox"),_(e.context,l,I(this)),se(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"draw",this).call(this)}catch(e){Te.verifyError(e)}return this}},{key:"value",set:function(e){e=xe.ensureValue(e,this.options.minValue),this.options.animation&&360===this.options.ticksAngle&&this.options.useMinPath&&(this._value=e,e=this.options.value+((e-this.options.value)%360+540)%360-180),de(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"value",e,this)},get:function(){return se(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"value",this)}}],[{key:"configure",value:function(e){return e.barWidth>50&&(e.barWidth=50),isNaN(e.startAngle)&&(e.startAngle=45),isNaN(e.ticksAngle)&&(e.ticksAngle=270),e.ticksAngle>360&&(e.ticksAngle=360),e.ticksAngle<0&&(e.ticksAngle=0),e.startAngle<0&&(e.startAngle=0),e.startAngle>360&&(e.startAngle=360),e}}]),t}(xe);void 0!==e&&(e.RadialGauge=Ve),xe.initialize("RadialGauge",Oe);var Pe=Object.assign({},ge,{borderRadius:0,barBeginCircle:30,colorBarEnd:"",colorBarProgressEnd:"",needleWidth:6,tickSide:"both",needleSide:"both",numberSide:"both",ticksWidth:10,ticksWidthMinor:5,ticksPadding:5,barLength:85,fontTitleSize:26,highlightsWidth:10}),Me=function(e){function n(e){return o(this,n),e=Object.assign({},Pe,e||{}),i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,n.configure(e)))}return r(n,e),ce(n,[{key:"draw",value:function(){try{var e=this.canvas,i=[-e.drawX,-e.drawY,e.drawWidth,e.drawHeight],r=i[0],o=i[1],a=i[2],l=i[3],s=this.options;if(!e.elementClone.initialized){var d=e.contextClone;d.clearRect(r,o,a,l),d.save(),this.emit("beforePlate"),this.drawBox=L(d,s,r,o,a,l),this.emit("beforeBar"),X.apply(void 0,[d,s].concat(t(this.drawBox))),e.context.barDimensions=d.barDimensions,this.emit("beforeHighlights"),q(d,s),this.emit("beforeMinorTicks"),K(d,s),this.emit("beforeMajorTicks"),$(d,s),this.emit("beforeNumbers"),Q(d,s),this.emit("beforeTitle"),ee(d,s),this.emit("beforeUnits"),te(d,s),e.elementClone.initialized=!0}this.canvas.commit(),e.context.clearRect(r,o,a,l),e.context.save(),e.context.drawImage(e.elementClone,r,o,a,l),e.context.save(),this.emit("beforeProgressBar"),U.apply(void 0,[e.context,s].concat(t(this.drawBox))),this.emit("beforeNeedle"),ie(e.context,s),this.emit("beforeValueBox"),ae.apply(void 0,[e.context,s,s.animatedValue?this.options.value:this.value].concat(t(this.drawBox))),se(n.prototype.__proto__||Object.getPrototypeOf(n.prototype),"draw",this).call(this)}catch(e){Te.verifyError(e)}return this}}],[{key:"configure",value:function(e){return e.barStrokeWidth>=e.barWidth&&(e.barStrokeWidth=we(e.barWidth/2)),e.hasLeft=Y("right",e),e.hasRight=Y("left",e),e.value>e.maxValue&&(e.value=e.maxValue),e.value<e.minValue&&(e.value=e.minValue),xe.configure(e)}}]),n}(xe);void 0!==e&&(e.LinearGauge=Me),xe.initialize("LinearGauge",Pe),"undefined"!=typeof module&&Object.assign(e,{Collection:l,GenericOptions:ge,Animation:me,BaseGauge:xe,drawings:Te,SmartCanvas:be,DomObserver:ve,vendorize:n})}("undefined"!=typeof module?module.exports:window);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
/*!
 * Chart.js v2.9.3
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :
typeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :
(global = global || self, global.Chart = factory(global.moment));
}(this, (function (moment) { 'use strict';

moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var conversions = createCommonjsModule(function (module) {
/* MIT license */


// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in colorName) {
	if (colorName.hasOwnProperty(key)) {
		reverseKeywords[colorName[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in colorName) {
		if (colorName.hasOwnProperty(keyword)) {
			var value = colorName[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return colorName[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
});
var conversions_1 = conversions.rgb;
var conversions_2 = conversions.hsl;
var conversions_3 = conversions.hsv;
var conversions_4 = conversions.hwb;
var conversions_5 = conversions.cmyk;
var conversions_6 = conversions.xyz;
var conversions_7 = conversions.lab;
var conversions_8 = conversions.lch;
var conversions_9 = conversions.hex;
var conversions_10 = conversions.keyword;
var conversions_11 = conversions.ansi16;
var conversions_12 = conversions.ansi256;
var conversions_13 = conversions.hcg;
var conversions_14 = conversions.apple;
var conversions_15 = conversions.gray;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

var colorName$1 = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

/* MIT license */


var colorString = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
};

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       keyword = /(\w+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr),
       hexAlpha = "";
   if (match) {
      match = match[1];
      hexAlpha = match[3];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorName$1[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgba, a) {
   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
   return "#" + hexDouble(rgba[0]) 
              + hexDouble(rgba[1])
              + hexDouble(rgba[2])
              + (
                 (a >= 0 && a < 1)
                 ? hexDouble(Math.round(a * 255))
                 : ""
              );
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorName$1) {
   reverseNames[colorName$1[name]] = name;
}

/* MIT license */



var Color = function (obj) {
	if (obj instanceof Color) {
		return obj;
	}
	if (!(this instanceof Color)) {
		return new Color(obj);
	}

	this.valid = false;
	this.values = {
		rgb: [0, 0, 0],
		hsl: [0, 0, 0],
		hsv: [0, 0, 0],
		hwb: [0, 0, 0],
		cmyk: [0, 0, 0, 0],
		alpha: 1
	};

	// parse Color() argument
	var vals;
	if (typeof obj === 'string') {
		vals = colorString.getRgba(obj);
		if (vals) {
			this.setValues('rgb', vals);
		} else if (vals = colorString.getHsla(obj)) {
			this.setValues('hsl', vals);
		} else if (vals = colorString.getHwb(obj)) {
			this.setValues('hwb', vals);
		}
	} else if (typeof obj === 'object') {
		vals = obj;
		if (vals.r !== undefined || vals.red !== undefined) {
			this.setValues('rgb', vals);
		} else if (vals.l !== undefined || vals.lightness !== undefined) {
			this.setValues('hsl', vals);
		} else if (vals.v !== undefined || vals.value !== undefined) {
			this.setValues('hsv', vals);
		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
			this.setValues('hwb', vals);
		} else if (vals.c !== undefined || vals.cyan !== undefined) {
			this.setValues('cmyk', vals);
		}
	}
};

Color.prototype = {
	isValid: function () {
		return this.valid;
	},
	rgb: function () {
		return this.setSpace('rgb', arguments);
	},
	hsl: function () {
		return this.setSpace('hsl', arguments);
	},
	hsv: function () {
		return this.setSpace('hsv', arguments);
	},
	hwb: function () {
		return this.setSpace('hwb', arguments);
	},
	cmyk: function () {
		return this.setSpace('cmyk', arguments);
	},

	rgbArray: function () {
		return this.values.rgb;
	},
	hslArray: function () {
		return this.values.hsl;
	},
	hsvArray: function () {
		return this.values.hsv;
	},
	hwbArray: function () {
		var values = this.values;
		if (values.alpha !== 1) {
			return values.hwb.concat([values.alpha]);
		}
		return values.hwb;
	},
	cmykArray: function () {
		return this.values.cmyk;
	},
	rgbaArray: function () {
		var values = this.values;
		return values.rgb.concat([values.alpha]);
	},
	hslaArray: function () {
		var values = this.values;
		return values.hsl.concat([values.alpha]);
	},
	alpha: function (val) {
		if (val === undefined) {
			return this.values.alpha;
		}
		this.setValues('alpha', val);
		return this;
	},

	red: function (val) {
		return this.setChannel('rgb', 0, val);
	},
	green: function (val) {
		return this.setChannel('rgb', 1, val);
	},
	blue: function (val) {
		return this.setChannel('rgb', 2, val);
	},
	hue: function (val) {
		if (val) {
			val %= 360;
			val = val < 0 ? 360 + val : val;
		}
		return this.setChannel('hsl', 0, val);
	},
	saturation: function (val) {
		return this.setChannel('hsl', 1, val);
	},
	lightness: function (val) {
		return this.setChannel('hsl', 2, val);
	},
	saturationv: function (val) {
		return this.setChannel('hsv', 1, val);
	},
	whiteness: function (val) {
		return this.setChannel('hwb', 1, val);
	},
	blackness: function (val) {
		return this.setChannel('hwb', 2, val);
	},
	value: function (val) {
		return this.setChannel('hsv', 2, val);
	},
	cyan: function (val) {
		return this.setChannel('cmyk', 0, val);
	},
	magenta: function (val) {
		return this.setChannel('cmyk', 1, val);
	},
	yellow: function (val) {
		return this.setChannel('cmyk', 2, val);
	},
	black: function (val) {
		return this.setChannel('cmyk', 3, val);
	},

	hexString: function () {
		return colorString.hexString(this.values.rgb);
	},
	rgbString: function () {
		return colorString.rgbString(this.values.rgb, this.values.alpha);
	},
	rgbaString: function () {
		return colorString.rgbaString(this.values.rgb, this.values.alpha);
	},
	percentString: function () {
		return colorString.percentString(this.values.rgb, this.values.alpha);
	},
	hslString: function () {
		return colorString.hslString(this.values.hsl, this.values.alpha);
	},
	hslaString: function () {
		return colorString.hslaString(this.values.hsl, this.values.alpha);
	},
	hwbString: function () {
		return colorString.hwbString(this.values.hwb, this.values.alpha);
	},
	keyword: function () {
		return colorString.keyword(this.values.rgb, this.values.alpha);
	},

	rgbNumber: function () {
		var rgb = this.values.rgb;
		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.values.rgb;
		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}
		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();
		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}
		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.values.rgb;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = 255 - this.values.rgb[i];
		}
		this.setValues('rgb', rgb);
		return this;
	},

	lighten: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] += hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	darken: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] -= hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	saturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] += hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	desaturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] -= hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	whiten: function (ratio) {
		var hwb = this.values.hwb;
		hwb[1] += hwb[1] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	blacken: function (ratio) {
		var hwb = this.values.hwb;
		hwb[2] += hwb[2] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	greyscale: function () {
		var rgb = this.values.rgb;
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		this.setValues('rgb', [val, val, val]);
		return this;
	},

	clearer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha - (alpha * ratio));
		return this;
	},

	opaquer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha + (alpha * ratio));
		return this;
	},

	rotate: function (degrees) {
		var hsl = this.values.hsl;
		var hue = (hsl[0] + degrees) % 360;
		hsl[0] = hue < 0 ? 360 + hue : hue;
		this.setValues('hsl', hsl);
		return this;
	},

	/**
	 * Ported from sass implementation in C
	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
	 */
	mix: function (mixinColor, weight) {
		var color1 = this;
		var color2 = mixinColor;
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return this
			.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue()
			)
			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
	},

	toJSON: function () {
		return this.rgb();
	},

	clone: function () {
		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
		// making the final build way to big to embed in Chart.js. So let's do it manually,
		// assuming that values to clone are 1 dimension arrays containing only numbers,
		// except 'alpha' which is a number.
		var result = new Color();
		var source = this.values;
		var target = result.values;
		var value, type;

		for (var prop in source) {
			if (source.hasOwnProperty(prop)) {
				value = source[prop];
				type = ({}).toString.call(value);
				if (type === '[object Array]') {
					target[prop] = value.slice(0);
				} else if (type === '[object Number]') {
					target[prop] = value;
				} else {
					console.error('unexpected color value:', value);
				}
			}
		}

		return result;
	}
};

Color.prototype.spaces = {
	rgb: ['red', 'green', 'blue'],
	hsl: ['hue', 'saturation', 'lightness'],
	hsv: ['hue', 'saturation', 'value'],
	hwb: ['hue', 'whiteness', 'blackness'],
	cmyk: ['cyan', 'magenta', 'yellow', 'black']
};

Color.prototype.maxes = {
	rgb: [255, 255, 255],
	hsl: [360, 100, 100],
	hsv: [360, 100, 100],
	hwb: [360, 100, 100],
	cmyk: [100, 100, 100, 100]
};

Color.prototype.getValues = function (space) {
	var values = this.values;
	var vals = {};

	for (var i = 0; i < space.length; i++) {
		vals[space.charAt(i)] = values[space][i];
	}

	if (values.alpha !== 1) {
		vals.a = values.alpha;
	}

	// {r: 255, g: 255, b: 255, a: 0.4}
	return vals;
};

Color.prototype.setValues = function (space, vals) {
	var values = this.values;
	var spaces = this.spaces;
	var maxes = this.maxes;
	var alpha = 1;
	var i;

	this.valid = true;

	if (space === 'alpha') {
		alpha = vals;
	} else if (vals.length) {
		// [10, 10, 10]
		values[space] = vals.slice(0, space.length);
		alpha = vals[space.length];
	} else if (vals[space.charAt(0)] !== undefined) {
		// {r: 10, g: 10, b: 10}
		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[space.charAt(i)];
		}

		alpha = vals.a;
	} else if (vals[spaces[space][0]] !== undefined) {
		// {red: 10, green: 10, blue: 10}
		var chans = spaces[space];

		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[chans[i]];
		}

		alpha = vals.alpha;
	}

	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

	if (space === 'alpha') {
		return false;
	}

	var capped;

	// cap values of the space prior converting all values
	for (i = 0; i < space.length; i++) {
		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
		values[space][i] = Math.round(capped);
	}

	// convert to all the other color spaces
	for (var sname in spaces) {
		if (sname !== space) {
			values[sname] = colorConvert[space][sname](values[space]);
		}
	}

	return true;
};

Color.prototype.setSpace = function (space, args) {
	var vals = args[0];

	if (vals === undefined) {
		// color.rgb()
		return this.getValues(space);
	}

	// color.rgb(10, 10, 10)
	if (typeof vals === 'number') {
		vals = Array.prototype.slice.call(args);
	}

	this.setValues(space, vals);
	return this;
};

Color.prototype.setChannel = function (space, index, val) {
	var svalues = this.values[space];
	if (val === undefined) {
		// color.red()
		return svalues[index];
	} else if (val === svalues[index]) {
		// color.red(color.red())
		return this;
	}

	// color.red(100)
	svalues[index] = val;
	this.setValues(space, svalues);

	return this;
};

if (typeof window !== 'undefined') {
	window.Color = Color;
}

var chartjsColor = Color;

/**
 * @namespace Chart.helpers
 */
var helpers = {
	/**
	 * An empty function that can be used, for example, for optional callback.
	 */
	noop: function() {},

	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 * @returns {number}
	 * @function
	 */
	uid: (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}()),

	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isNullOrUndef: function(value) {
		return value === null || typeof value === 'undefined';
	},

	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @function
	 */
	isArray: function(value) {
		if (Array.isArray && Array.isArray(value)) {
			return true;
		}
		var type = Object.prototype.toString.call(value);
		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
			return true;
		}
		return false;
	},

	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isObject: function(value) {
		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	},

	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param {*} value  - The value to test.
	 * @returns {boolean}
	 */
	isFinite: function(value) {
		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
	},

	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param {*} value - The value to return if defined.
	 * @param {*} defaultValue - The value to return if `value` is undefined.
	 * @returns {*}
	 */
	valueOrDefault: function(value, defaultValue) {
		return typeof value === 'undefined' ? defaultValue : value;
	},

	/**
	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
	 * @param {Array} value - The array to lookup for value at `index`.
	 * @param {number} index - The index in `value` to lookup for value.
	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
	 * @returns {*}
	 */
	valueAtIndexOrDefault: function(value, index, defaultValue) {
		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
	},

	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param {function} fn - The function to call.
	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @returns {*}
	 */
	callback: function(fn, args, thisArg) {
		if (fn && typeof fn.call === 'function') {
			return fn.apply(thisArg, args);
		}
	},

	/**
	 * Note(SB) for performance sake, this method should only be used when loopable type
	 * is unknown or in none intensive code (not called often and small loopable). Else
	 * it's preferable to use a regular for() loop and save extra function calls.
	 * @param {object|Array} loopable - The object or array to be iterated.
	 * @param {function} fn - The function to call for each item.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
	 */
	each: function(loopable, fn, thisArg, reverse) {
		var i, len, keys;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					fn.call(thisArg, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					fn.call(thisArg, loopable[i], i);
				}
			}
		} else if (helpers.isObject(loopable)) {
			keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				fn.call(thisArg, loopable[keys[i]], keys[i]);
			}
		}
	},

	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @see https://stackoverflow.com/a/14853974
	 * @param {Array} a0 - The array to compare
	 * @param {Array} a1 - The array to compare
	 * @returns {boolean}
	 */
	arrayEquals: function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen = a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	},

	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param {*} source - The value to clone.
	 * @returns {*}
	 */
	clone: function(source) {
		if (helpers.isArray(source)) {
			return source.map(helpers.clone);
		}

		if (helpers.isObject(source)) {
			var target = {};
			var keys = Object.keys(source);
			var klen = keys.length;
			var k = 0;

			for (; k < klen; ++k) {
				target[keys[k]] = helpers.clone(source[keys[k]]);
			}

			return target;
		}

		return source;
	},

	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */
	_merger: function(key, target, source, options) {
		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.merge(tval, sval, options);
		} else {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */
	_mergerIf: function(key, target, source) {
		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.mergeIf(tval, sval);
		} else if (!target.hasOwnProperty(key)) {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Recursively deep copies `source` properties into `target` with the given `options`.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @param {object} [options] - Merging options:
	 * @param {function} [options.merger] - The merge method (key, target, source, options)
	 * @returns {object} The `target` object.
	 */
	merge: function(target, source, options) {
		var sources = helpers.isArray(source) ? source : [source];
		var ilen = sources.length;
		var merge, i, keys, klen, k;

		if (!helpers.isObject(target)) {
			return target;
		}

		options = options || {};
		merge = options.merger || helpers._merger;

		for (i = 0; i < ilen; ++i) {
			source = sources[i];
			if (!helpers.isObject(source)) {
				continue;
			}

			keys = Object.keys(source);
			for (k = 0, klen = keys.length; k < klen; ++k) {
				merge(keys[k], target, source, options);
			}
		}

		return target;
	},

	/**
	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @returns {object} The `target` object.
	 */
	mergeIf: function(target, source) {
		return helpers.merge(target, source, {merger: helpers._mergerIf});
	},

	/**
	 * Applies the contents of two or more objects together into the first object.
	 * @param {object} target - The target object in which all objects are merged into.
	 * @param {object} arg1 - Object containing additional properties to merge in target.
	 * @param {object} argN - Additional objects containing properties to merge in target.
	 * @returns {object} The `target` object.
	 */
	extend: Object.assign || function(target) {
		return helpers.merge(target, [].slice.call(arguments, 1), {
			merger: function(key, dst, src) {
				dst[key] = src[key];
			}
		});
	},

	/**
	 * Basic javascript inheritance based on the model created in Backbone.js
	 */
	inherits: function(extensions) {
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};

		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();
		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;
		return ChartElement;
	},

	_deprecated: function(scope, value, previous, current) {
		if (value !== undefined) {
			console.warn(scope + ': "' + previous +
				'" is deprecated. Please use "' + current + '" instead');
		}
	}
};

var helpers_core = helpers;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.callback instead.
 * @function Chart.helpers.callCallback
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
helpers.callCallback = helpers.callback;

/**
 * Provided for backward compatibility, use Array.prototype.indexOf instead.
 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
 * @function Chart.helpers.indexOf
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.indexOf = function(array, item, fromIndex) {
	return Array.prototype.indexOf.call(array, item, fromIndex);
};

/**
 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
 * @function Chart.helpers.getValueOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueOrDefault = helpers.valueOrDefault;

/**
 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
 * @function Chart.helpers.getValueAtIndexOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easingEffects
 * @see http://www.robertpenner.com/easing/
 */
var effects = {
	linear: function(t) {
		return t;
	},

	easeInQuad: function(t) {
		return t * t;
	},

	easeOutQuad: function(t) {
		return -t * (t - 2);
	},

	easeInOutQuad: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t;
		}
		return -0.5 * ((--t) * (t - 2) - 1);
	},

	easeInCubic: function(t) {
		return t * t * t;
	},

	easeOutCubic: function(t) {
		return (t = t - 1) * t * t + 1;
	},

	easeInOutCubic: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t + 2);
	},

	easeInQuart: function(t) {
		return t * t * t * t;
	},

	easeOutQuart: function(t) {
		return -((t = t - 1) * t * t * t - 1);
	},

	easeInOutQuart: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t;
		}
		return -0.5 * ((t -= 2) * t * t * t - 2);
	},

	easeInQuint: function(t) {
		return t * t * t * t * t;
	},

	easeOutQuint: function(t) {
		return (t = t - 1) * t * t * t * t + 1;
	},

	easeInOutQuint: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t * t * t + 2);
	},

	easeInSine: function(t) {
		return -Math.cos(t * (Math.PI / 2)) + 1;
	},

	easeOutSine: function(t) {
		return Math.sin(t * (Math.PI / 2));
	},

	easeInOutSine: function(t) {
		return -0.5 * (Math.cos(Math.PI * t) - 1);
	},

	easeInExpo: function(t) {
		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
	},

	easeOutExpo: function(t) {
		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
	},

	easeInOutExpo: function(t) {
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if ((t /= 0.5) < 1) {
			return 0.5 * Math.pow(2, 10 * (t - 1));
		}
		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
	},

	easeInCirc: function(t) {
		if (t >= 1) {
			return t;
		}
		return -(Math.sqrt(1 - t * t) - 1);
	},

	easeOutCirc: function(t) {
		return Math.sqrt(1 - (t = t - 1) * t);
	},

	easeInOutCirc: function(t) {
		if ((t /= 0.5) < 1) {
			return -0.5 * (Math.sqrt(1 - t * t) - 1);
		}
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	},

	easeInElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
	},

	easeOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	},

	easeInOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if ((t /= 0.5) === 2) {
			return 1;
		}
		if (!p) {
			p = 0.45;
		}
		if (a < 1) {
			a = 1;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		if (t < 1) {
			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
		}
		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
	},
	easeInBack: function(t) {
		var s = 1.70158;
		return t * t * ((s + 1) * t - s);
	},

	easeOutBack: function(t) {
		var s = 1.70158;
		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	},

	easeInOutBack: function(t) {
		var s = 1.70158;
		if ((t /= 0.5) < 1) {
			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
		}
		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
	},

	easeInBounce: function(t) {
		return 1 - effects.easeOutBounce(1 - t);
	},

	easeOutBounce: function(t) {
		if (t < (1 / 2.75)) {
			return 7.5625 * t * t;
		}
		if (t < (2 / 2.75)) {
			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
		}
		if (t < (2.5 / 2.75)) {
			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
		}
		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
	},

	easeInOutBounce: function(t) {
		if (t < 0.5) {
			return effects.easeInBounce(t * 2) * 0.5;
		}
		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
	}
};

var helpers_easing = {
	effects: effects
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
 * @function Chart.helpers.easingEffects
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.easingEffects = effects;

var PI = Math.PI;
var RAD_PER_DEG = PI / 180;
var DOUBLE_PI = PI * 2;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;

/**
 * @namespace Chart.helpers.canvas
 */
var exports$1 = {
	/**
	 * Clears the entire canvas associated to the given `chart`.
	 * @param {Chart} chart - The chart for which to clear the canvas.
	 */
	clear: function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	},

	/**
	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
	 * given size (width, height) and the same `radius` for all corners.
	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
	 * @param {number} width - The rectangle's width.
	 * @param {number} height - The rectangle's height.
	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
	 */
	roundedRect: function(ctx, x, y, width, height, radius) {
		if (radius) {
			var r = Math.min(radius, height / 2, width / 2);
			var left = x + r;
			var top = y + r;
			var right = x + width - r;
			var bottom = y + height - r;

			ctx.moveTo(x, top);
			if (left < right && top < bottom) {
				ctx.arc(left, top, r, -PI, -HALF_PI);
				ctx.arc(right, top, r, -HALF_PI, 0);
				ctx.arc(right, bottom, r, 0, HALF_PI);
				ctx.arc(left, bottom, r, HALF_PI, PI);
			} else if (left < right) {
				ctx.moveTo(left, y);
				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
			} else if (top < bottom) {
				ctx.arc(left, top, r, -PI, 0);
				ctx.arc(left, bottom, r, 0, PI);
			} else {
				ctx.arc(left, top, r, -PI, PI);
			}
			ctx.closePath();
			ctx.moveTo(x, y);
		} else {
			ctx.rect(x, y, width, height);
		}
	},

	drawPoint: function(ctx, style, radius, x, y, rotation) {
		var type, xOffset, yOffset, size, cornerRadius;
		var rad = (rotation || 0) * RAD_PER_DEG;

		if (style && typeof style === 'object') {
			type = style.toString();
			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
				ctx.save();
				ctx.translate(x, y);
				ctx.rotate(rad);
				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
				ctx.restore();
				return;
			}
		}

		if (isNaN(radius) || radius <= 0) {
			return;
		}

		ctx.beginPath();

		switch (style) {
		// Default includes circle
		default:
			ctx.arc(x, y, radius, 0, DOUBLE_PI);
			ctx.closePath();
			break;
		case 'triangle':
			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			ctx.closePath();
			break;
		case 'rectRounded':
			// NOTE: the rounded rect implementation changed to use `arc` instead of
			// `quadraticCurveTo` since it generates better results when rect is
			// almost a circle. 0.516 (instead of 0.5) produces results with visually
			// closer proportion to the previous impl and it is inscribed in the
			// circle with `radius`. For more details, see the following PRs:
			// https://github.com/chartjs/Chart.js/issues/5597
			// https://github.com/chartjs/Chart.js/issues/5858
			cornerRadius = radius * 0.516;
			size = radius - cornerRadius;
			xOffset = Math.cos(rad + QUARTER_PI) * size;
			yOffset = Math.sin(rad + QUARTER_PI) * size;
			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
			ctx.closePath();
			break;
		case 'rect':
			if (!rotation) {
				size = Math.SQRT1_2 * radius;
				ctx.rect(x - size, y - size, 2 * size, 2 * size);
				break;
			}
			rad += QUARTER_PI;
			/* falls through */
		case 'rectRot':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + yOffset, y - xOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			ctx.closePath();
			break;
		case 'crossRot':
			rad += QUARTER_PI;
			/* falls through */
		case 'cross':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'star':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			rad += QUARTER_PI;
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'line':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			break;
		case 'dash':
			ctx.moveTo(x, y);
			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
			break;
		}

		ctx.fill();
		ctx.stroke();
	},

	/**
	 * Returns true if the point is inside the rectangle
	 * @param {object} point - The point to test
	 * @param {object} area - The rectangle
	 * @returns {boolean}
	 * @private
	 */
	_isPointInArea: function(point, area) {
		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
	},

	clipArea: function(ctx, area) {
		ctx.save();
		ctx.beginPath();
		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
		ctx.clip();
	},

	unclipArea: function(ctx) {
		ctx.restore();
	},

	lineTo: function(ctx, previous, target, flip) {
		var stepped = target.steppedLine;
		if (stepped) {
			if (stepped === 'middle') {
				var midpoint = (previous.x + target.x) / 2.0;
				ctx.lineTo(midpoint, flip ? target.y : previous.y);
				ctx.lineTo(midpoint, flip ? previous.y : target.y);
			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
				ctx.lineTo(previous.x, target.y);
			} else {
				ctx.lineTo(target.x, previous.y);
			}
			ctx.lineTo(target.x, target.y);
			return;
		}

		if (!target.tension) {
			ctx.lineTo(target.x, target.y);
			return;
		}

		ctx.bezierCurveTo(
			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
			flip ? target.controlPointNextX : target.controlPointPreviousX,
			flip ? target.controlPointNextY : target.controlPointPreviousY,
			target.x,
			target.y);
	}
};

var helpers_canvas = exports$1;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
 * @namespace Chart.helpers.clear
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.clear = exports$1.clear;

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
 * @namespace Chart.helpers.drawRoundedRectangle
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.drawRoundedRectangle = function(ctx) {
	ctx.beginPath();
	exports$1.roundedRect.apply(exports$1, arguments);
};

var defaults = {
	/**
	 * @private
	 */
	_set: function(scope, values) {
		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
	}
};

// TODO(v3): remove 'global' from namespace.  all default are global and
// there's inconsistency around which options are under 'global'
defaults._set('global', {
	defaultColor: 'rgba(0,0,0,0.1)',
	defaultFontColor: '#666',
	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	defaultFontSize: 12,
	defaultFontStyle: 'normal',
	defaultLineHeight: 1.2,
	showLines: true
});

var core_defaults = defaults;

var valueOrDefault = helpers_core.valueOrDefault;

/**
 * Converts the given font object into a CSS font string.
 * @param {object} font - A font object.
 * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */
function toFontString(font) {
	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
		return null;
	}

	return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}

/**
 * @alias Chart.helpers.options
 * @namespace
 */
var helpers_options = {
	/**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */
	toLineHeight: function(value, size) {
		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
		if (!matches || matches[1] === 'normal') {
			return size * 1.2;
		}

		value = +matches[2];

		switch (matches[3]) {
		case 'px':
			return value;
		case '%':
			value /= 100;
			break;
		}

		return size * value;
	},

	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param {number|object} value - If a number, set the value to all TRBL component,
	 *  else, if and object, use defined properties and sets undefined ones to 0.
	 * @returns {object} The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */
	toPadding: function(value) {
		var t, r, b, l;

		if (helpers_core.isObject(value)) {
			t = +value.top || 0;
			r = +value.right || 0;
			b = +value.bottom || 0;
			l = +value.left || 0;
		} else {
			t = r = b = l = +value || 0;
		}

		return {
			top: t,
			right: r,
			bottom: b,
			left: l,
			height: t + b,
			width: l + r
		};
	},

	/**
	 * Parses font options and returns the font object.
	 * @param {object} options - A object that contains font options to be parsed.
	 * @return {object} The font object.
	 * @todo Support font.* options and renamed to toFont().
	 * @private
	 */
	_parseFont: function(options) {
		var globalDefaults = core_defaults.global;
		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
		var font = {
			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
			size: size,
			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
			weight: null,
			string: ''
		};

		font.string = toFontString(font);
		return font;
	},

	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param {Array} inputs - An array of values, falling back to the last value.
	 * @param {object} [context] - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param {number} [index] - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param {object} [info] - object to return information about resolution in
	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */
	resolve: function(inputs, context, index, info) {
		var cacheable = true;
		var i, ilen, value;

		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
			value = inputs[i];
			if (value === undefined) {
				continue;
			}
			if (context !== undefined && typeof value === 'function') {
				value = value(context);
				cacheable = false;
			}
			if (index !== undefined && helpers_core.isArray(value)) {
				value = value[index];
				cacheable = false;
			}
			if (value !== undefined) {
				if (info && !cacheable) {
					info.cacheable = false;
				}
				return value;
			}
		}
	}
};

/**
 * @alias Chart.helpers.math
 * @namespace
 */
var exports$2 = {
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */
	_factorize: function(value) {
		var result = [];
		var sqrt = Math.sqrt(value);
		var i;

		for (i = 1; i < sqrt; i++) {
			if (value % i === 0) {
				result.push(i);
				result.push(value / i);
			}
		}
		if (sqrt === (sqrt | 0)) { // if value is a square number
			result.push(sqrt);
		}

		result.sort(function(a, b) {
			return a - b;
		}).pop();
		return result;
	},

	log10: Math.log10 || function(x) {
		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
		// Check for whole powers of 10,
		// which due to floating point rounding error should be corrected.
		var powerOf10 = Math.round(exponent);
		var isPowerOf10 = x === Math.pow(10, powerOf10);

		return isPowerOf10 ? powerOf10 : exponent;
	}
};

var helpers_math = exports$2;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
 * @namespace Chart.helpers.log10
 * @deprecated since version 2.9.0
 * @todo remove at version 3
 * @private
 */
helpers_core.log10 = exports$2.log10;

var getRtlAdapter = function(rectX, width) {
	return {
		x: function(x) {
			return rectX + rectX + width - x;
		},
		setWidth: function(w) {
			width = w;
		},
		textAlign: function(align) {
			if (align === 'center') {
				return align;
			}
			return align === 'right' ? 'left' : 'right';
		},
		xPlus: function(x, value) {
			return x - value;
		},
		leftForLtr: function(x, itemWidth) {
			return x - itemWidth;
		},
	};
};

var getLtrAdapter = function() {
	return {
		x: function(x) {
			return x;
		},
		setWidth: function(w) { // eslint-disable-line no-unused-vars
		},
		textAlign: function(align) {
			return align;
		},
		xPlus: function(x, value) {
			return x + value;
		},
		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
			return x;
		},
	};
};

var getAdapter = function(rtl, rectX, width) {
	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
};

var overrideTextDirection = function(ctx, direction) {
	var style, original;
	if (direction === 'ltr' || direction === 'rtl') {
		style = ctx.canvas.style;
		original = [
			style.getPropertyValue('direction'),
			style.getPropertyPriority('direction'),
		];

		style.setProperty('direction', direction, 'important');
		ctx.prevTextDirection = original;
	}
};

var restoreTextDirection = function(ctx) {
	var original = ctx.prevTextDirection;
	if (original !== undefined) {
		delete ctx.prevTextDirection;
		ctx.canvas.style.setProperty('direction', original[0], original[1]);
	}
};

var helpers_rtl = {
	getRtlAdapter: getAdapter,
	overrideTextDirection: overrideTextDirection,
	restoreTextDirection: restoreTextDirection,
};

var helpers$1 = helpers_core;
var easing = helpers_easing;
var canvas = helpers_canvas;
var options = helpers_options;
var math = helpers_math;
var rtl = helpers_rtl;
helpers$1.easing = easing;
helpers$1.canvas = canvas;
helpers$1.options = options;
helpers$1.math = math;
helpers$1.rtl = rtl;

function interpolate(start, view, model, ease) {
	var keys = Object.keys(model);
	var i, ilen, key, actual, origin, target, type, c0, c1;

	for (i = 0, ilen = keys.length; i < ilen; ++i) {
		key = keys[i];

		target = model[key];

		// if a value is added to the model after pivot() has been called, the view
		// doesn't contain it, so let's initialize the view to the target value.
		if (!view.hasOwnProperty(key)) {
			view[key] = target;
		}

		actual = view[key];

		if (actual === target || key[0] === '_') {
			continue;
		}

		if (!start.hasOwnProperty(key)) {
			start[key] = actual;
		}

		origin = start[key];

		type = typeof target;

		if (type === typeof origin) {
			if (type === 'string') {
				c0 = chartjsColor(origin);
				if (c0.valid) {
					c1 = chartjsColor(target);
					if (c1.valid) {
						view[key] = c1.mix(c0, ease).rgbString();
						continue;
					}
				}
			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
				view[key] = origin + (target - origin) * ease;
				continue;
			}
		}

		view[key] = target;
	}
}

var Element = function(configuration) {
	helpers$1.extend(this, configuration);
	this.initialize.apply(this, arguments);
};

helpers$1.extend(Element.prototype, {
	_type: undefined,

	initialize: function() {
		this.hidden = false;
	},

	pivot: function() {
		var me = this;
		if (!me._view) {
			me._view = helpers$1.extend({}, me._model);
		}
		me._start = {};
		return me;
	},

	transition: function(ease) {
		var me = this;
		var model = me._model;
		var start = me._start;
		var view = me._view;

		// No animation -> No Transition
		if (!model || ease === 1) {
			me._view = helpers$1.extend({}, model);
			me._start = null;
			return me;
		}

		if (!view) {
			view = me._view = {};
		}

		if (!start) {
			start = me._start = {};
		}

		interpolate(start, view, model, ease);

		return me;
	},

	tooltipPosition: function() {
		return {
			x: this._model.x,
			y: this._model.y
		};
	},

	hasValue: function() {
		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
	}
});

Element.extend = helpers$1.inherits;

var core_element = Element;

var exports$3 = core_element.extend({
	chart: null, // the animation associated chart instance
	currentStep: 0, // the current animation step
	numSteps: 60, // default number of steps
	easing: '', // the easing to use for this animation
	render: null, // render function used by the animation service

	onAnimationProgress: null, // user specified callback to fire on each step of the animation
	onAnimationComplete: null, // user specified callback to fire when the animation finishes
});

var core_animation = exports$3;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.Animation instead
 * @prop Chart.Animation#animationObject
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'animationObject', {
	get: function() {
		return this;
	}
});

/**
 * Provided for backward compatibility, use Chart.Animation#chart instead
 * @prop Chart.Animation#chartInstance
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'chartInstance', {
	get: function() {
		return this.chart;
	},
	set: function(value) {
		this.chart = value;
	}
});

core_defaults._set('global', {
	animation: {
		duration: 1000,
		easing: 'easeOutQuart',
		onProgress: helpers$1.noop,
		onComplete: helpers$1.noop
	}
});

var core_animations = {
	animations: [],
	request: null,

	/**
	 * @param {Chart} chart - The chart to animate.
	 * @param {Chart.Animation} animation - The animation that we will animate.
	 * @param {number} duration - The animation duration in ms.
	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
	 */
	addAnimation: function(chart, animation, duration, lazy) {
		var animations = this.animations;
		var i, ilen;

		animation.chart = chart;
		animation.startTime = Date.now();
		animation.duration = duration;

		if (!lazy) {
			chart.animating = true;
		}

		for (i = 0, ilen = animations.length; i < ilen; ++i) {
			if (animations[i].chart === chart) {
				animations[i] = animation;
				return;
			}
		}

		animations.push(animation);

		// If there are no animations queued, manually kickstart a digest, for lack of a better word
		if (animations.length === 1) {
			this.requestAnimationFrame();
		}
	},

	cancelAnimation: function(chart) {
		var index = helpers$1.findIndex(this.animations, function(animation) {
			return animation.chart === chart;
		});

		if (index !== -1) {
			this.animations.splice(index, 1);
			chart.animating = false;
		}
	},

	requestAnimationFrame: function() {
		var me = this;
		if (me.request === null) {
			// Skip animation frame requests until the active one is executed.
			// This can happen when processing mouse events, e.g. 'mousemove'
			// and 'mouseout' events will trigger multiple renders.
			me.request = helpers$1.requestAnimFrame.call(window, function() {
				me.request = null;
				me.startDigest();
			});
		}
	},

	/**
	 * @private
	 */
	startDigest: function() {
		var me = this;

		me.advance();

		// Do we have more stuff to animate?
		if (me.animations.length > 0) {
			me.requestAnimationFrame();
		}
	},

	/**
	 * @private
	 */
	advance: function() {
		var animations = this.animations;
		var animation, chart, numSteps, nextStep;
		var i = 0;

		// 1 animation per chart, so we are looping charts here
		while (i < animations.length) {
			animation = animations[i];
			chart = animation.chart;
			numSteps = animation.numSteps;

			// Make sure that currentStep starts at 1
			// https://github.com/chartjs/Chart.js/issues/6104
			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
			animation.currentStep = Math.min(nextStep, numSteps);

			helpers$1.callback(animation.render, [chart, animation], chart);
			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

			if (animation.currentStep >= numSteps) {
				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
				chart.animating = false;
				animations.splice(i, 1);
			} else {
				++i;
			}
		}
	}
};

var resolve = helpers$1.options.resolve;

var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

/**
 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
 */
function listenArrayEvents(array, listener) {
	if (array._chartjs) {
		array._chartjs.listeners.push(listener);
		return;
	}

	Object.defineProperty(array, '_chartjs', {
		configurable: true,
		enumerable: false,
		value: {
			listeners: [listener]
		}
	});

	arrayEvents.forEach(function(key) {
		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
		var base = array[key];

		Object.defineProperty(array, key, {
			configurable: true,
			enumerable: false,
			value: function() {
				var args = Array.prototype.slice.call(arguments);
				var res = base.apply(this, args);

				helpers$1.each(array._chartjs.listeners, function(object) {
					if (typeof object[method] === 'function') {
						object[method].apply(object, args);
					}
				});

				return res;
			}
		});
	});
}

/**
 * Removes the given array event listener and cleanup extra attached properties (such as
 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
 */
function unlistenArrayEvents(array, listener) {
	var stub = array._chartjs;
	if (!stub) {
		return;
	}

	var listeners = stub.listeners;
	var index = listeners.indexOf(listener);
	if (index !== -1) {
		listeners.splice(index, 1);
	}

	if (listeners.length > 0) {
		return;
	}

	arrayEvents.forEach(function(key) {
		delete array[key];
	});

	delete array._chartjs;
}

// Base class for all dataset controllers (line, bar, etc)
var DatasetController = function(chart, datasetIndex) {
	this.initialize(chart, datasetIndex);
};

helpers$1.extend(DatasetController.prototype, {

	/**
	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
	 * @type {Chart.core.element}
	 */
	datasetElementType: null,

	/**
	 * Element type used to generate a meta data (e.g. Chart.element.Point).
	 * @type {Chart.core.element}
	 */
	dataElementType: null,

	/**
	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth'
	],

	/**
	 * Data element option keys to be resolved in _resolveDataElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'pointStyle'
	],

	initialize: function(chart, datasetIndex) {
		var me = this;
		me.chart = chart;
		me.index = datasetIndex;
		me.linkScales();
		me.addElements();
		me._type = me.getMeta().type;
	},

	updateIndex: function(datasetIndex) {
		this.index = datasetIndex;
	},

	linkScales: function() {
		var me = this;
		var meta = me.getMeta();
		var chart = me.chart;
		var scales = chart.scales;
		var dataset = me.getDataset();
		var scalesOpts = chart.options.scales;

		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
		}
		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
		}
	},

	getDataset: function() {
		return this.chart.data.datasets[this.index];
	},

	getMeta: function() {
		return this.chart.getDatasetMeta(this.index);
	},

	getScaleForId: function(scaleID) {
		return this.chart.scales[scaleID];
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().yAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getValueScale: function() {
		return this.getScaleForId(this._getValueScaleId());
	},

	/**
	 * @private
	 */
	_getIndexScale: function() {
		return this.getScaleForId(this._getIndexScaleId());
	},

	reset: function() {
		this._update(true);
	},

	/**
	 * @private
	 */
	destroy: function() {
		if (this._data) {
			unlistenArrayEvents(this._data, this);
		}
	},

	createMetaDataset: function() {
		var me = this;
		var type = me.datasetElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index
		});
	},

	createMetaData: function(index) {
		var me = this;
		var type = me.dataElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index,
			_index: index
		});
	},

	addElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data || [];
		var metaData = meta.data;
		var i, ilen;

		for (i = 0, ilen = data.length; i < ilen; ++i) {
			metaData[i] = metaData[i] || me.createMetaData(i);
		}

		meta.dataset = meta.dataset || me.createMetaDataset();
	},

	addElementAndReset: function(index) {
		var element = this.createMetaData(index);
		this.getMeta().data.splice(index, 0, element);
		this.updateElement(element, index, true);
	},

	buildOrUpdateElements: function() {
		var me = this;
		var dataset = me.getDataset();
		var data = dataset.data || (dataset.data = []);

		// In order to correctly handle data addition/deletion animation (an thus simulate
		// real-time charts), we need to monitor these data modifications and synchronize
		// the internal meta data accordingly.
		if (me._data !== data) {
			if (me._data) {
				// This case happens when the user replaced the data array instance.
				unlistenArrayEvents(me._data, me);
			}

			if (data && Object.isExtensible(data)) {
				listenArrayEvents(data, me);
			}
			me._data = data;
		}

		// Re-sync meta data in case the user replaced the data array or if we missed
		// any updates and so make sure that we handle number of datapoints changing.
		me.resyncElements();
	},

	/**
	 * Returns the merged user-supplied and default dataset-level options
	 * @private
	 */
	_configure: function() {
		var me = this;
		me._config = helpers$1.merge({}, [
			me.chart.options.datasets[me._type],
			me.getDataset(),
		], {
			merger: function(key, target, source) {
				if (key !== '_meta' && key !== 'data') {
					helpers$1._merger(key, target, source);
				}
			}
		});
	},

	_update: function(reset) {
		var me = this;
		me._configure();
		me._cachedDataOpts = null;
		me.update(reset);
	},

	update: helpers$1.noop,

	transition: function(easingValue) {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		for (; i < ilen; ++i) {
			elements[i].transition(easingValue);
		}

		if (meta.dataset) {
			meta.dataset.transition(easingValue);
		}
	},

	draw: function() {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		if (meta.dataset) {
			meta.dataset.draw();
		}

		for (; i < ilen; ++i) {
			elements[i].draw();
		}
	},

	/**
	 * Returns a set of predefined style properties that should be used to represent the dataset
	 * or the data if the index is specified
	 * @param {number} index - data index
	 * @return {IStyleInterface} style object
	 */
	getStyle: function(index) {
		var me = this;
		var meta = me.getMeta();
		var dataset = meta.dataset;
		var style;

		me._configure();
		if (dataset && index === undefined) {
			style = me._resolveDatasetElementOptions(dataset || {});
		} else {
			index = index || 0;
			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
		}

		if (style.fill === false || style.fill === null) {
			style.backgroundColor = style.borderColor;
		}

		return style;
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element, hover) {
		var me = this;
		var chart = me.chart;
		var datasetOpts = me._config;
		var custom = element.custom || {};
		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
		var elementOptions = me._datasetElementOptions;
		var values = {};
		var i, ilen, key, readKey;

		// Scriptable options
		var context = {
			chart: chart,
			dataset: me.getDataset(),
			datasetIndex: me.index,
			hover: hover
		};

		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
			key = elementOptions[i];
			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
			values[key] = resolve([
				custom[readKey],
				datasetOpts[readKey],
				options[readKey]
			], context);
		}

		return values;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(element, index) {
		var me = this;
		var custom = element && element.custom;
		var cached = me._cachedDataOpts;
		if (cached && !custom) {
			return cached;
		}
		var chart = me.chart;
		var datasetOpts = me._config;
		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
		var elementOptions = me._dataElementOptions;
		var values = {};

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: me.getDataset(),
			datasetIndex: me.index
		};

		// `resolve` sets cacheable to `false` if any option is indexed or scripted
		var info = {cacheable: !custom};

		var keys, i, ilen, key;

		custom = custom || {};

		if (helpers$1.isArray(elementOptions)) {
			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
				key = elementOptions[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		} else {
			keys = Object.keys(elementOptions);
			for (i = 0, ilen = keys.length; i < ilen; ++i) {
				key = keys[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[elementOptions[key]],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		}

		if (info.cacheable) {
			me._cachedDataOpts = Object.freeze(values);
		}

		return values;
	},

	removeHoverStyle: function(element) {
		helpers$1.merge(element._model, element.$previousStyle || {});
		delete element.$previousStyle;
	},

	setHoverStyle: function(element) {
		var dataset = this.chart.data.datasets[element._datasetIndex];
		var index = element._index;
		var custom = element.custom || {};
		var model = element._model;
		var getHoverColor = helpers$1.getHoverColor;

		element.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth
		};

		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
	},

	/**
	 * @private
	 */
	_removeDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;

		if (element) {
			this.removeHoverStyle(element);
		}
	},

	/**
	 * @private
	 */
	_setDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;
		var prev = {};
		var i, ilen, key, keys, hoverOptions, model;

		if (!element) {
			return;
		}

		model = element._model;
		hoverOptions = this._resolveDatasetElementOptions(element, true);

		keys = Object.keys(hoverOptions);
		for (i = 0, ilen = keys.length; i < ilen; ++i) {
			key = keys[i];
			prev[key] = model[key];
			model[key] = hoverOptions[key];
		}

		element.$previousStyle = prev;
	},

	/**
	 * @private
	 */
	resyncElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data;
		var numMeta = meta.data.length;
		var numData = data.length;

		if (numData < numMeta) {
			meta.data.splice(numData, numMeta - numData);
		} else if (numData > numMeta) {
			me.insertElements(numMeta, numData - numMeta);
		}
	},

	/**
	 * @private
	 */
	insertElements: function(start, count) {
		for (var i = 0; i < count; ++i) {
			this.addElementAndReset(start + i);
		}
	},

	/**
	 * @private
	 */
	onDataPush: function() {
		var count = arguments.length;
		this.insertElements(this.getDataset().data.length - count, count);
	},

	/**
	 * @private
	 */
	onDataPop: function() {
		this.getMeta().data.pop();
	},

	/**
	 * @private
	 */
	onDataShift: function() {
		this.getMeta().data.shift();
	},

	/**
	 * @private
	 */
	onDataSplice: function(start, count) {
		this.getMeta().data.splice(start, count);
		this.insertElements(start, arguments.length - 2);
	},

	/**
	 * @private
	 */
	onDataUnshift: function() {
		this.insertElements(0, arguments.length);
	}
});

DatasetController.extend = helpers$1.inherits;

var core_datasetController = DatasetController;

var TAU = Math.PI * 2;

core_defaults._set('global', {
	elements: {
		arc: {
			backgroundColor: core_defaults.global.defaultColor,
			borderColor: '#fff',
			borderWidth: 2,
			borderAlign: 'center'
		}
	}
});

function clipArc(ctx, arc) {
	var startAngle = arc.startAngle;
	var endAngle = arc.endAngle;
	var pixelMargin = arc.pixelMargin;
	var angleMargin = pixelMargin / arc.outerRadius;
	var x = arc.x;
	var y = arc.y;

	// Draw an inner border by cliping the arc and drawing a double-width border
	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
	ctx.beginPath();
	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
	if (arc.innerRadius > pixelMargin) {
		angleMargin = pixelMargin / arc.innerRadius;
		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
	} else {
		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
	}
	ctx.closePath();
	ctx.clip();
}

function drawFullCircleBorders(ctx, vm, arc, inner) {
	var endAngle = arc.endAngle;
	var i;

	if (inner) {
		arc.endAngle = arc.startAngle + TAU;
		clipArc(ctx, arc);
		arc.endAngle = endAngle;
		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
			arc.endAngle += TAU;
			arc.fullCircles--;
		}
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}
}

function drawBorder(ctx, vm, arc) {
	var inner = vm.borderAlign === 'inner';

	if (inner) {
		ctx.lineWidth = vm.borderWidth * 2;
		ctx.lineJoin = 'round';
	} else {
		ctx.lineWidth = vm.borderWidth;
		ctx.lineJoin = 'bevel';
	}

	if (arc.fullCircles) {
		drawFullCircleBorders(ctx, vm, arc, inner);
	}

	if (inner) {
		clipArc(ctx, arc);
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
	ctx.closePath();
	ctx.stroke();
}

var element_arc = core_element.extend({
	_type: 'arc',

	inLabelRange: function(mouseX) {
		var vm = this._view;

		if (vm) {
			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
		}
		return false;
	},

	inRange: function(chartX, chartY) {
		var vm = this._view;

		if (vm) {
			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
			var angle = pointRelativePosition.angle;
			var distance = pointRelativePosition.distance;

			// Sanitise angle range
			var startAngle = vm.startAngle;
			var endAngle = vm.endAngle;
			while (endAngle < startAngle) {
				endAngle += TAU;
			}
			while (angle > endAngle) {
				angle -= TAU;
			}
			while (angle < startAngle) {
				angle += TAU;
			}

			// Check if within the range of the open/close angle
			var betweenAngles = (angle >= startAngle && angle <= endAngle);
			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

			return (betweenAngles && withinRadius);
		}
		return false;
	},

	getCenterPoint: function() {
		var vm = this._view;
		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
		return {
			x: vm.x + Math.cos(halfAngle) * halfRadius,
			y: vm.y + Math.sin(halfAngle) * halfRadius
		};
	},

	getArea: function() {
		var vm = this._view;
		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
	},

	tooltipPosition: function() {
		var vm = this._view;
		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

		return {
			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
		};
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
		var arc = {
			x: vm.x,
			y: vm.y,
			innerRadius: vm.innerRadius,
			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
			pixelMargin: pixelMargin,
			startAngle: vm.startAngle,
			endAngle: vm.endAngle,
			fullCircles: Math.floor(vm.circumference / TAU)
		};
		var i;

		ctx.save();

		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;

		if (arc.fullCircles) {
			arc.endAngle = arc.startAngle + TAU;
			ctx.beginPath();
			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
			ctx.closePath();
			for (i = 0; i < arc.fullCircles; ++i) {
				ctx.fill();
			}
			arc.endAngle = arc.startAngle + vm.circumference % TAU;
		}

		ctx.beginPath();
		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
		ctx.closePath();
		ctx.fill();

		if (vm.borderWidth) {
			drawBorder(ctx, vm, arc);
		}

		ctx.restore();
	}
});

var valueOrDefault$1 = helpers$1.valueOrDefault;

var defaultColor = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		line: {
			tension: 0.4,
			backgroundColor: defaultColor,
			borderWidth: 3,
			borderColor: defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		}
	}
});

var element_line = core_element.extend({
	_type: 'line',

	draw: function() {
		var me = this;
		var vm = me._view;
		var ctx = me._chart.ctx;
		var spanGaps = vm.spanGaps;
		var points = me._children.slice(); // clone array
		var globalDefaults = core_defaults.global;
		var globalOptionLineElements = globalDefaults.elements.line;
		var lastDrawnIndex = -1;
		var closePath = me._loop;
		var index, previous, currentVM;

		if (!points.length) {
			return;
		}

		if (me._loop) {
			for (index = 0; index < points.length; ++index) {
				previous = helpers$1.previousItem(points, index);
				// If the line has an open path, shift the point array
				if (!points[index]._view.skip && previous._view.skip) {
					points = points.slice(index).concat(points.slice(0, index));
					closePath = spanGaps;
					break;
				}
			}
			// If the line has a close path, add the first point again
			if (closePath) {
				points.push(points[0]);
			}
		}

		ctx.save();

		// Stroke Line Options
		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

		// IE 9 and 10 do not support line dash
		if (ctx.setLineDash) {
			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
		}

		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

		// Stroke Line
		ctx.beginPath();

		// First point moves to it's starting position no matter what
		currentVM = points[0]._view;
		if (!currentVM.skip) {
			ctx.moveTo(currentVM.x, currentVM.y);
			lastDrawnIndex = 0;
		}

		for (index = 1; index < points.length; ++index) {
			currentVM = points[index]._view;
			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

			if (!currentVM.skip) {
				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
					// There was a gap and this is the first point after the gap
					ctx.moveTo(currentVM.x, currentVM.y);
				} else {
					// Line to next point
					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
				}
				lastDrawnIndex = index;
			}
		}

		if (closePath) {
			ctx.closePath();
		}

		ctx.stroke();
		ctx.restore();
	}
});

var valueOrDefault$2 = helpers$1.valueOrDefault;

var defaultColor$1 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		point: {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor$1,
			borderColor: defaultColor$1,
			borderWidth: 1,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		}
	}
});

function xRange(mouseX) {
	var vm = this._view;
	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
}

function yRange(mouseY) {
	var vm = this._view;
	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
}

var element_point = core_element.extend({
	_type: 'point',

	inRange: function(mouseX, mouseY) {
		var vm = this._view;
		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
	},

	inLabelRange: xRange,
	inXRange: xRange,
	inYRange: yRange,

	getCenterPoint: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	},

	getArea: function() {
		return Math.PI * Math.pow(this._view.radius, 2);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y,
			padding: vm.radius + vm.borderWidth
		};
	},

	draw: function(chartArea) {
		var vm = this._view;
		var ctx = this._chart.ctx;
		var pointStyle = vm.pointStyle;
		var rotation = vm.rotation;
		var radius = vm.radius;
		var x = vm.x;
		var y = vm.y;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

		if (vm.skip) {
			return;
		}

		// Clipping for Points.
		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
			ctx.strokeStyle = vm.borderColor || defaultColor;
			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
			ctx.fillStyle = vm.backgroundColor || defaultColor;
			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
		}
	}
});

var defaultColor$2 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		rectangle: {
			backgroundColor: defaultColor$2,
			borderColor: defaultColor$2,
			borderSkipped: 'bottom',
			borderWidth: 0
		}
	}
});

function isVertical(vm) {
	return vm && vm.width !== undefined;
}

/**
 * Helper function to get the bounds of the bar regardless of the orientation
 * @param bar {Chart.Element.Rectangle} the bar
 * @return {Bounds} bounds of the bar
 * @private
 */
function getBarBounds(vm) {
	var x1, x2, y1, y2, half;

	if (isVertical(vm)) {
		half = vm.width / 2;
		x1 = vm.x - half;
		x2 = vm.x + half;
		y1 = Math.min(vm.y, vm.base);
		y2 = Math.max(vm.y, vm.base);
	} else {
		half = vm.height / 2;
		x1 = Math.min(vm.x, vm.base);
		x2 = Math.max(vm.x, vm.base);
		y1 = vm.y - half;
		y2 = vm.y + half;
	}

	return {
		left: x1,
		top: y1,
		right: x2,
		bottom: y2
	};
}

function swap(orig, v1, v2) {
	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}

function parseBorderSkipped(vm) {
	var edge = vm.borderSkipped;
	var res = {};

	if (!edge) {
		return res;
	}

	if (vm.horizontal) {
		if (vm.base > vm.x) {
			edge = swap(edge, 'left', 'right');
		}
	} else if (vm.base < vm.y) {
		edge = swap(edge, 'bottom', 'top');
	}

	res[edge] = true;
	return res;
}

function parseBorderWidth(vm, maxW, maxH) {
	var value = vm.borderWidth;
	var skip = parseBorderSkipped(vm);
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = +value.top || 0;
		r = +value.right || 0;
		b = +value.bottom || 0;
		l = +value.left || 0;
	} else {
		t = r = b = l = +value || 0;
	}

	return {
		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
	};
}

function boundingRects(vm) {
	var bounds = getBarBounds(vm);
	var width = bounds.right - bounds.left;
	var height = bounds.bottom - bounds.top;
	var border = parseBorderWidth(vm, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		}
	};
}

function inRange(vm, x, y) {
	var skipX = x === null;
	var skipY = y === null;
	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

	return bounds
		&& (skipX || x >= bounds.left && x <= bounds.right)
		&& (skipY || y >= bounds.top && y <= bounds.bottom);
}

var element_rectangle = core_element.extend({
	_type: 'rectangle',

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var rects = boundingRects(vm);
		var outer = rects.outer;
		var inner = rects.inner;

		ctx.fillStyle = vm.backgroundColor;
		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

		if (outer.w === inner.w && outer.h === inner.h) {
			return;
		}

		ctx.save();
		ctx.beginPath();
		ctx.rect(outer.x, outer.y, outer.w, outer.h);
		ctx.clip();
		ctx.fillStyle = vm.borderColor;
		ctx.rect(inner.x, inner.y, inner.w, inner.h);
		ctx.fill('evenodd');
		ctx.restore();
	},

	height: function() {
		var vm = this._view;
		return vm.base - vm.y;
	},

	inRange: function(mouseX, mouseY) {
		return inRange(this._view, mouseX, mouseY);
	},

	inLabelRange: function(mouseX, mouseY) {
		var vm = this._view;
		return isVertical(vm)
			? inRange(vm, mouseX, null)
			: inRange(vm, null, mouseY);
	},

	inXRange: function(mouseX) {
		return inRange(this._view, mouseX, null);
	},

	inYRange: function(mouseY) {
		return inRange(this._view, null, mouseY);
	},

	getCenterPoint: function() {
		var vm = this._view;
		var x, y;
		if (isVertical(vm)) {
			x = vm.x;
			y = (vm.y + vm.base) / 2;
		} else {
			x = (vm.x + vm.base) / 2;
			y = vm.y;
		}

		return {x: x, y: y};
	},

	getArea: function() {
		var vm = this._view;

		return isVertical(vm)
			? vm.width * Math.abs(vm.y - vm.base)
			: vm.height * Math.abs(vm.x - vm.base);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	}
});

var elements = {};
var Arc = element_arc;
var Line = element_line;
var Point = element_point;
var Rectangle = element_rectangle;
elements.Arc = Arc;
elements.Line = Line;
elements.Point = Point;
elements.Rectangle = Rectangle;

var deprecated = helpers$1._deprecated;
var valueOrDefault$3 = helpers$1.valueOrDefault;

core_defaults._set('bar', {
	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}],

		yAxes: [{
			type: 'linear'
		}]
	}
});

core_defaults._set('global', {
	datasets: {
		bar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

/**
 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
 * @private
 */
function computeMinSampleSize(scale, pixels) {
	var min = scale._length;
	var prev, curr, i, ilen;

	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
	}

	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
		curr = scale.getPixelForTick(i);
		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
		prev = curr;
	}

	return min;
}

/**
 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
 * mode currently always generates bars equally sized (until we introduce scriptable options?).
 * @private
 */
function computeFitCategoryTraits(index, ruler, options) {
	var thickness = options.barThickness;
	var count = ruler.stackCount;
	var curr = ruler.pixels[index];
	var min = helpers$1.isNullOrUndef(thickness)
		? computeMinSampleSize(ruler.scale, ruler.pixels)
		: -1;
	var size, ratio;

	if (helpers$1.isNullOrUndef(thickness)) {
		size = min * options.categoryPercentage;
		ratio = options.barPercentage;
	} else {
		// When bar thickness is enforced, category and bar percentages are ignored.
		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
		// and deprecate barPercentage since this value is ignored when thickness is absolute.
		size = thickness * count;
		ratio = 1;
	}

	return {
		chunk: size / count,
		ratio: ratio,
		start: curr - (size / 2)
	};
}

/**
 * Computes an "optimal" category that globally arranges bars side by side (no gap when
 * percentage options are 1), based on the previous and following categories. This mode
 * generates bars with different widths when data are not evenly spaced.
 * @private
 */
function computeFlexCategoryTraits(index, ruler, options) {
	var pixels = ruler.pixels;
	var curr = pixels[index];
	var prev = index > 0 ? pixels[index - 1] : null;
	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
	var percent = options.categoryPercentage;
	var start, size;

	if (prev === null) {
		// first data: its size is double based on the next point or,
		// if it's also the last data, we use the scale size.
		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
	}

	if (next === null) {
		// last data: its size is also double based on the previous point.
		next = curr + curr - prev;
	}

	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
	size = Math.abs(next - prev) / 2 * percent;

	return {
		chunk: size / ruler.stackCount,
		ratio: options.barPercentage,
		start: start
	};
}

var controller_bar = core_datasetController.extend({

	dataElementType: elements.Rectangle,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderSkipped',
		'borderWidth',
		'barPercentage',
		'barThickness',
		'categoryPercentage',
		'maxBarThickness',
		'minBarLength'
	],

	initialize: function() {
		var me = this;
		var meta, scaleOpts;

		core_datasetController.prototype.initialize.apply(me, arguments);

		meta = me.getMeta();
		meta.stack = me.getDataset().stack;
		meta.bar = true;

		scaleOpts = me._getIndexScale().options;
		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
	},

	update: function(reset) {
		var me = this;
		var rects = me.getMeta().data;
		var i, ilen;

		me._ruler = me.getRuler();

		for (i = 0, ilen = rects.length; i < ilen; ++i) {
			me.updateElement(rects[i], i, reset);
		}
	},

	updateElement: function(rectangle, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var dataset = me.getDataset();
		var options = me._resolveDataElementOptions(rectangle, index);

		rectangle._xScale = me.getScaleForId(meta.xAxisID);
		rectangle._yScale = me.getScaleForId(meta.yAxisID);
		rectangle._datasetIndex = me.index;
		rectangle._index = index;
		rectangle._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderSkipped: options.borderSkipped,
			borderWidth: options.borderWidth,
			datasetLabel: dataset.label,
			label: me.chart.data.labels[index]
		};

		if (helpers$1.isArray(dataset.data[index])) {
			rectangle._model.borderSkipped = null;
		}

		me._updateElementGeometry(rectangle, index, reset, options);

		rectangle.pivot();
	},

	/**
	 * @private
	 */
	_updateElementGeometry: function(rectangle, index, reset, options) {
		var me = this;
		var model = rectangle._model;
		var vscale = me._getValueScale();
		var base = vscale.getBasePixel();
		var horizontal = vscale.isHorizontal();
		var ruler = me._ruler || me.getRuler();
		var vpixels = me.calculateBarValuePixels(me.index, index, options);
		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

		model.horizontal = horizontal;
		model.base = reset ? base : vpixels.base;
		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
		model.height = horizontal ? ipixels.size : undefined;
		model.width = horizontal ? undefined : ipixels.size;
	},

	/**
	 * Returns the stacks based on groups and bar visibility.
	 * @param {number} [last] - The dataset index
	 * @returns {string[]} The list of stack IDs
	 * @private
	 */
	_getStacks: function(last) {
		var me = this;
		var scale = me._getIndexScale();
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var stacked = scale.options.stacked;
		var ilen = metasets.length;
		var stacks = [];
		var i, meta;

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			// stacked   | meta.stack
			//           | found | not found | undefined
			// false     |   x   |     x     |     x
			// true      |       |     x     |
			// undefined |       |     x     |     x
			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
				(stacked === undefined && meta.stack === undefined)) {
				stacks.push(meta.stack);
			}
			if (meta.index === last) {
				break;
			}
		}

		return stacks;
	},

	/**
	 * Returns the effective number of stacks based on groups and bar visibility.
	 * @private
	 */
	getStackCount: function() {
		return this._getStacks().length;
	},

	/**
	 * Returns the stack index for the given dataset based on groups and bar visibility.
	 * @param {number} [datasetIndex] - The dataset index
	 * @param {string} [name] - The stack name to find
	 * @returns {number} The stack index
	 * @private
	 */
	getStackIndex: function(datasetIndex, name) {
		var stacks = this._getStacks(datasetIndex);
		var index = (name !== undefined)
			? stacks.indexOf(name)
			: -1; // indexOf returns -1 if element is not present

		return (index === -1)
			? stacks.length - 1
			: index;
	},

	/**
	 * @private
	 */
	getRuler: function() {
		var me = this;
		var scale = me._getIndexScale();
		var pixels = [];
		var i, ilen;

		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
			pixels.push(scale.getPixelForValue(null, i, me.index));
		}

		return {
			pixels: pixels,
			start: scale._startPixel,
			end: scale._endPixel,
			stackCount: me.getStackCount(),
			scale: scale
		};
	},

	/**
	 * Note: pixel values are not clamped to the scale area.
	 * @private
	 */
	calculateBarValuePixels: function(datasetIndex, index, options) {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var isHorizontal = scale.isHorizontal();
		var datasets = chart.data.datasets;
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var value = scale._parseValue(datasets[datasetIndex].data[index]);
		var minBarLength = options.minBarLength;
		var stacked = scale.options.stacked;
		var stack = me.getMeta().stack;
		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
		var ilen = metasets.length;
		var i, imeta, ivalue, base, head, size, stackLength;

		if (stacked || (stacked === undefined && stack !== undefined)) {
			for (i = 0; i < ilen; ++i) {
				imeta = metasets[i];

				if (imeta.index === datasetIndex) {
					break;
				}

				if (imeta.stack === stack) {
					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
						start += ivalue;
					}
				}
			}
		}

		base = scale.getPixelForValue(start);
		head = scale.getPixelForValue(start + length);
		size = head - base;

		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
			size = minBarLength;
			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
				head = base - minBarLength;
			} else {
				head = base + minBarLength;
			}
		}

		return {
			size: size,
			base: base,
			head: head,
			center: head + size / 2
		};
	},

	/**
	 * @private
	 */
	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
		var me = this;
		var range = options.barThickness === 'flex'
			? computeFlexCategoryTraits(index, ruler, options)
			: computeFitCategoryTraits(index, ruler, options);

		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
		var size = Math.min(
			valueOrDefault$3(options.maxBarThickness, Infinity),
			range.chunk * range.ratio);

		return {
			base: center - size / 2,
			head: center + size / 2,
			center: center,
			size: size
		};
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var rects = me.getMeta().data;
		var dataset = me.getDataset();
		var ilen = rects.length;
		var i = 0;

		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

		for (; i < ilen; ++i) {
			var val = scale._parseValue(dataset.data[i]);
			if (!isNaN(val.min) && !isNaN(val.max)) {
				rects[i].draw();
			}
		}

		helpers$1.canvas.unclipArea(chart.ctx);
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function() {
		var me = this;
		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
		var indexOpts = me._getIndexScale().options;
		var valueOpts = me._getValueScale().options;

		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

		return values;
	}

});

var valueOrDefault$4 = helpers$1.valueOrDefault;
var resolve$1 = helpers$1.options.resolve;

core_defaults._set('bubble', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			type: 'linear', // bubble should probably use a linear scale by default
			position: 'bottom',
			id: 'x-axis-0' // need an ID so datasets can reference the scale
		}],
		yAxes: [{
			type: 'linear',
			position: 'left',
			id: 'y-axis-0'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				// Title doesn't make sense for scatter since we format the data as a point
				return '';
			},
			label: function(item, data) {
				var datasetLabel = data.datasets[item.datasetIndex].label || '';
				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
			}
		}
	}
});

var controller_bubble = core_datasetController.extend({
	/**
	 * @protected
	 */
	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
		'hoverRadius',
		'hitRadius',
		'pointStyle',
		'rotation'
	],

	/**
	 * @protected
	 */
	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var points = meta.data;

		// Update Points
		helpers$1.each(points, function(point, index) {
			me.updateElement(point, index, reset);
		});
	},

	/**
	 * @protected
	 */
	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var xScale = me.getScaleForId(meta.xAxisID);
		var yScale = me.getScaleForId(meta.yAxisID);
		var options = me._resolveDataElementOptions(point, index);
		var data = me.getDataset().data[index];
		var dsIndex = me.index;

		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = dsIndex;
		point._index = index;
		point._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			hitRadius: options.hitRadius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			radius: reset ? 0 : options.radius,
			skip: custom.skip || isNaN(x) || isNaN(y),
			x: x,
			y: y,
		};

		point.pivot();
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
		model.radius = options.radius + options.hoverRadius;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(point, index) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var custom = point.custom || {};
		var data = dataset.data[index] || {};
		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		// In case values were cached (and thus frozen), we need to clone the values
		if (me._cachedDataOpts === values) {
			values = helpers$1.extend({}, values);
		}

		// Custom radius resolution
		values.radius = resolve$1([
			custom.radius,
			data.r,
			me._config.radius,
			chart.options.elements.point.radius
		], context, index);

		return values;
	}
});

var valueOrDefault$5 = helpers$1.valueOrDefault;

var PI$1 = Math.PI;
var DOUBLE_PI$1 = PI$1 * 2;
var HALF_PI$1 = PI$1 / 2;

core_defaults._set('doughnut', {
	animation: {
		// Boolean - Whether we animate the rotation of the Doughnut
		animateRotate: true,
		// Boolean - Whether we animate scaling the Doughnut from the centre
		animateScale: false
	},
	hover: {
		mode: 'single'
	},
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				// toggle visibility of index if exists
				if (meta.data[index]) {
					meta.data[index].hidden = !meta.data[index].hidden;
				}
			}

			chart.update();
		}
	},

	// The percentage of the chart that we cut out of the middle.
	cutoutPercentage: 50,

	// The rotation of the chart, where the first data arc begins.
	rotation: -HALF_PI$1,

	// The total circumference of the chart.
	circumference: DOUBLE_PI$1,

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(tooltipItem, data) {
				var dataLabel = data.labels[tooltipItem.index];
				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

				if (helpers$1.isArray(dataLabel)) {
					// show value on first line of multiline label
					// need to clone because we are changing the value
					dataLabel = dataLabel.slice();
					dataLabel[0] += value;
				} else {
					dataLabel += value;
				}

				return dataLabel;
			}
		}
	}
});

var controller_doughnut = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
	getRingIndex: function(datasetIndex) {
		var ringIndex = 0;

		for (var j = 0; j < datasetIndex; ++j) {
			if (this.chart.isDatasetVisible(j)) {
				++ringIndex;
			}
		}

		return ringIndex;
	},

	update: function(reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var ratioX = 1;
		var ratioY = 1;
		var offsetX = 0;
		var offsetY = 0;
		var meta = me.getMeta();
		var arcs = meta.data;
		var cutout = opts.cutoutPercentage / 100 || 0;
		var circumference = opts.circumference;
		var chartWeight = me._getRingWeight(me.index);
		var maxWidth, maxHeight, i, ilen;

		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
		if (circumference < DOUBLE_PI$1) {
			var startAngle = opts.rotation % DOUBLE_PI$1;
			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
			var endAngle = startAngle + circumference;
			var startX = Math.cos(startAngle);
			var startY = Math.sin(startAngle);
			var endX = Math.cos(endAngle);
			var endY = Math.sin(endAngle);
			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
			ratioX = (maxX - minX) / 2;
			ratioY = (maxY - minY) / 2;
			offsetX = -(maxX + minX) / 2;
			offsetY = -(maxY + minY) / 2;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
		}

		chart.borderWidth = me.getMaxBorderWidth();
		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
		chart.offsetX = offsetX * chart.outerRadius;
		chart.offsetY = offsetY * chart.outerRadius;

		meta.total = me.calculateTotal();

		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			me.updateElement(arcs[i], i, reset);
		}
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var animationOpts = opts.animation;
		var centerX = (chartArea.left + chartArea.right) / 2;
		var centerY = (chartArea.top + chartArea.bottom) / 2;
		var startAngle = opts.rotation; // non reset case handled later
		var endAngle = opts.rotation; // non reset case handled later
		var dataset = me.getDataset();
		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX + chart.offsetX,
				y: centerY + chart.offsetY,
				startAngle: startAngle,
				endAngle: endAngle,
				circumference: circumference,
				outerRadius: outerRadius,
				innerRadius: innerRadius,
				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
			}
		});

		var model = arc._model;

		// Set correct angles if not resetting
		if (!reset || !animationOpts.animateRotate) {
			if (index === 0) {
				model.startAngle = opts.rotation;
			} else {
				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
			}

			model.endAngle = model.startAngle + model.circumference;
		}

		arc.pivot();
	},

	calculateTotal: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var total = 0;
		var value;

		helpers$1.each(meta.data, function(element, index) {
			value = dataset.data[index];
			if (!isNaN(value) && !element.hidden) {
				total += Math.abs(value);
			}
		});

		/* if (total === 0) {
			total = NaN;
		}*/

		return total;
	},

	calculateCircumference: function(value) {
		var total = this.getMeta().total;
		if (total > 0 && !isNaN(value)) {
			return DOUBLE_PI$1 * (Math.abs(value) / total);
		}
		return 0;
	},

	// gets the max border or hover width to properly scale pie charts
	getMaxBorderWidth: function(arcs) {
		var me = this;
		var max = 0;
		var chart = me.chart;
		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

		if (!arcs) {
			// Find the outmost visible dataset
			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					meta = chart.getDatasetMeta(i);
					arcs = meta.data;
					if (i !== me.index) {
						controller = meta.controller;
					}
					break;
				}
			}
		}

		if (!arcs) {
			return 0;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arc = arcs[i];
			if (controller) {
				controller._configure();
				options = controller._resolveDataElementOptions(arc, i);
			} else {
				options = arc._options;
			}
			if (options.borderAlign !== 'inner') {
				borderWidth = options.borderWidth;
				hoverWidth = options.hoverBorderWidth;

				max = borderWidth > max ? borderWidth : max;
				max = hoverWidth > max ? hoverWidth : max;
			}
		}
		return max;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
	 * @private
	 */
	_getRingWeightOffset: function(datasetIndex) {
		var ringWeightOffset = 0;

		for (var i = 0; i < datasetIndex; ++i) {
			if (this.chart.isDatasetVisible(i)) {
				ringWeightOffset += this._getRingWeight(i);
			}
		}

		return ringWeightOffset;
	},

	/**
	 * @private
	 */
	_getRingWeight: function(dataSetIndex) {
		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
	},

	/**
	 * Returns the sum of all visibile data set weights.  This value can be 0.
	 * @private
	 */
	_getVisibleDatasetWeightTotal: function() {
		return this._getRingWeightOffset(this.chart.data.datasets.length);
	}
});

core_defaults._set('horizontalBar', {
	hover: {
		mode: 'index',
		axis: 'y'
	},

	scales: {
		xAxes: [{
			type: 'linear',
			position: 'bottom'
		}],

		yAxes: [{
			type: 'category',
			position: 'left',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}]
	},

	elements: {
		rectangle: {
			borderSkipped: 'left'
		}
	},

	tooltips: {
		mode: 'index',
		axis: 'y'
	}
});

core_defaults._set('global', {
	datasets: {
		horizontalBar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

var controller_horizontalBar = controller_bar.extend({
	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().yAxisID;
	}
});

var valueOrDefault$6 = helpers$1.valueOrDefault;
var resolve$2 = helpers$1.options.resolve;
var isPointInArea = helpers$1.canvas._isPointInArea;

core_defaults._set('line', {
	showLines: true,
	spanGaps: false,

	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			id: 'x-axis-0'
		}],
		yAxes: [{
			type: 'linear',
			id: 'y-axis-0'
		}]
	}
});

function scaleClip(scale, halfBorderWidth) {
	var tickOpts = scale && scale.options.ticks || {};
	var reverse = tickOpts.reverse;
	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
	return {
		start: reverse ? max : min,
		end: reverse ? min : max
	};
}

function defaultClip(xScale, yScale, borderWidth) {
	var halfBorderWidth = borderWidth / 2;
	var x = scaleClip(xScale, halfBorderWidth);
	var y = scaleClip(yScale, halfBorderWidth);

	return {
		top: y.end,
		right: x.end,
		bottom: y.start,
		left: x.start
	};
}

function toClip(value) {
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = value.top;
		r = value.right;
		b = value.bottom;
		l = value.left;
	} else {
		t = r = b = l = value;
	}

	return {
		top: t,
		right: r,
		bottom: b,
		left: l
	};
}


var controller_line = core_datasetController.extend({

	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth',
		'cubicInterpolationMode',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var options = me.chart.options;
		var config = me._config;
		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
		var i, ilen;

		me._xScale = me.getScaleForId(meta.xAxisID);
		me._yScale = me.getScaleForId(meta.yAxisID);

		// Update Line
		if (showLine) {
			// Compatibility: If the properties are defined with only the old name, use those values
			if (config.tension !== undefined && config.lineTension === undefined) {
				config.lineTension = config.tension;
			}

			// Utility
			line._scale = me._yScale;
			line._datasetIndex = me.index;
			// Data
			line._children = points;
			// Model
			line._model = me._resolveDatasetElementOptions(line);

			line.pivot();
		}

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		if (showLine && line._model.tension !== 0) {
			me.updateBezierControlPoints();
		}

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var datasetIndex = me.index;
		var value = dataset.data[index];
		var xScale = me._xScale;
		var yScale = me._yScale;
		var lineModel = meta.dataset._model;
		var x, y;

		var options = me._resolveDataElementOptions(point, index);

		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

		// Utility
		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = datasetIndex;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x,
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
			steppedLine: lineModel ? lineModel.steppedLine : false,
			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element) {
		var me = this;
		var config = me._config;
		var custom = element.custom || {};
		var options = me.chart.options;
		var lineOptions = options.elements.line;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		// The default behavior of lines is to break at null values, according
		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
		// This option gives lines the ability to span gaps
		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

		return values;
	},

	calculatePointY: function(value, index, datasetIndex) {
		var me = this;
		var chart = me.chart;
		var yScale = me._yScale;
		var sumPos = 0;
		var sumNeg = 0;
		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

		if (yScale.options.stacked) {
			rightValue = +yScale.getRightValue(value);
			metasets = chart._getSortedVisibleDatasetMetas();
			ilen = metasets.length;

			for (i = 0; i < ilen; ++i) {
				dsMeta = metasets[i];
				if (dsMeta.index === datasetIndex) {
					break;
				}

				ds = chart.data.datasets[dsMeta.index];
				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
					stackedRightValue = +yScale.getRightValue(ds.data[index]);
					if (stackedRightValue < 0) {
						sumNeg += stackedRightValue || 0;
					} else {
						sumPos += stackedRightValue || 0;
					}
				}
			}

			if (rightValue < 0) {
				return yScale.getPixelForValue(sumNeg + rightValue);
			}
			return yScale.getPixelForValue(sumPos + rightValue);
		}
		return yScale.getPixelForValue(value);
	},

	updateBezierControlPoints: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var lineModel = meta.dataset._model;
		var area = chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (lineModel.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		if (lineModel.cubicInterpolationMode === 'monotone') {
			helpers$1.splineCurveMonotone(points);
		} else {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				controlPoints = helpers$1.splineCurve(
					helpers$1.previousItem(points, i)._model,
					model,
					helpers$1.nextItem(points, i)._model,
					lineModel.tension
				);
				model.controlPointPreviousX = controlPoints.previous.x;
				model.controlPointPreviousY = controlPoints.previous.y;
				model.controlPointNextX = controlPoints.next.x;
				model.controlPointNextY = controlPoints.next.y;
			}
		}

		if (chart.options.elements.line.capBezierPoints) {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				if (isPointInArea(model, area)) {
					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
					}
					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			}
		}
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var points = meta.data || [];
		var area = chart.chartArea;
		var canvas = chart.canvas;
		var i = 0;
		var ilen = points.length;
		var clip;

		if (me._showLine) {
			clip = meta.dataset._model.clip;

			helpers$1.canvas.clipArea(chart.ctx, {
				left: clip.left === false ? 0 : area.left - clip.left,
				right: clip.right === false ? canvas.width : area.right + clip.right,
				top: clip.top === false ? 0 : area.top - clip.top,
				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
			});

			meta.dataset.draw();

			helpers$1.canvas.unclipArea(chart.ctx);
		}

		// Draw the points
		for (; i < ilen; ++i) {
			points[i].draw(area);
		}
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
	},
});

var resolve$3 = helpers$1.options.resolve;

core_defaults._set('polarArea', {
	scale: {
		type: 'radialLinear',
		angleLines: {
			display: false
		},
		gridLines: {
			circular: true
		},
		pointLabels: {
			display: false
		},
		ticks: {
			beginAtZero: true
		}
	},

	// Boolean - Whether to animate the rotation of the chart
	animation: {
		animateRotate: true,
		animateScale: true
	},

	startAngle: -0.5 * Math.PI,
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				meta.data[index].hidden = !meta.data[index].hidden;
			}

			chart.update();
		}
	},

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(item, data) {
				return data.labels[item.index] + ': ' + item.yLabel;
			}
		}
	}
});

var controller_polarArea = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var dataset = me.getDataset();
		var meta = me.getMeta();
		var start = me.chart.options.startAngle || 0;
		var starts = me._starts = [];
		var angles = me._angles = [];
		var arcs = meta.data;
		var i, ilen, angle;

		me._updateRadius();

		meta.count = me.countVisibleElements();

		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
			starts[i] = start;
			angle = me._computeAngle(i);
			angles[i] = angle;
			start += angle;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
			me.updateElement(arcs[i], i, reset);
		}
	},

	/**
	 * @private
	 */
	_updateRadius: function() {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

		chart.outerRadius = Math.max(minSize / 2, 0);
		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
		me.innerRadius = me.outerRadius - chart.radiusLength;
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var opts = chart.options;
		var animationOpts = opts.animation;
		var scale = chart.scale;
		var labels = chart.data.labels;

		var centerX = scale.xCenter;
		var centerY = scale.yCenter;

		// var negHalfPI = -0.5 * Math.PI;
		var datasetStartAngle = opts.startAngle;
		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var startAngle = me._starts[index];
		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,
			_scale: scale,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX,
				y: centerY,
				innerRadius: 0,
				outerRadius: reset ? resetRadius : distance,
				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
			}
		});

		arc.pivot();
	},

	countVisibleElements: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var count = 0;

		helpers$1.each(meta.data, function(element, index) {
			if (!isNaN(dataset.data[index]) && !element.hidden) {
				count++;
			}
		});

		return count;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;
		var valueOrDefault = helpers$1.valueOrDefault;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * @private
	 */
	_computeAngle: function(index) {
		var me = this;
		var count = this.getMeta().count;
		var dataset = me.getDataset();
		var meta = me.getMeta();

		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
			return 0;
		}

		// Scriptable options
		var context = {
			chart: me.chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		return resolve$3([
			me.chart.options.elements.arc.angle,
			(2 * Math.PI) / count
		], context, index);
	}
});

core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
core_defaults._set('pie', {
	cutoutPercentage: 0
});

// Pie charts are Doughnut chart with different defaults
var controller_pie = controller_doughnut;

var valueOrDefault$7 = helpers$1.valueOrDefault;

core_defaults._set('radar', {
	spanGaps: false,
	scale: {
		type: 'radialLinear'
	},
	elements: {
		line: {
			fill: 'start',
			tension: 0 // no bezier in radar
		}
	}
});

var controller_radar = core_datasetController.extend({
	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderWidth',
		'borderColor',
		'borderCapStyle',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var scale = me.chart.scale;
		var config = me._config;
		var i, ilen;

		// Compatibility: If the properties are defined with only the old name, use those values
		if (config.tension !== undefined && config.lineTension === undefined) {
			config.lineTension = config.tension;
		}

		// Utility
		line._scale = scale;
		line._datasetIndex = me.index;
		// Data
		line._children = points;
		line._loop = true;
		// Model
		line._model = me._resolveDatasetElementOptions(line);

		line.pivot();

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		// Update bezier control points
		me.updateBezierControlPoints();

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var scale = me.chart.scale;
		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
		var options = me._resolveDataElementOptions(point, index);
		var lineModel = me.getMeta().dataset._model;
		var x = reset ? scale.xCenter : pointPosition.x;
		var y = reset ? scale.yCenter : pointPosition.y;

		// Utility
		point._scale = scale;
		point._options = options;
		point._datasetIndex = me.index;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x, // value not used in dataset scale, but we want a consistent API between scales
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function() {
		var me = this;
		var config = me._config;
		var options = me.chart.options;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

		return values;
	},

	updateBezierControlPoints: function() {
		var me = this;
		var meta = me.getMeta();
		var area = me.chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (meta.dataset._model.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		for (i = 0, ilen = points.length; i < ilen; ++i) {
			model = points[i]._model;
			controlPoints = helpers$1.splineCurve(
				helpers$1.previousItem(points, i, true)._model,
				model,
				helpers$1.nextItem(points, i, true)._model,
				model.tension
			);

			// Prevent the bezier going outside of the bounds of the graph
			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
		}
	},

	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
	}
});

core_defaults._set('scatter', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			id: 'x-axis-1',    // need an ID so datasets can reference the scale
			type: 'linear',    // scatter should not use a category axis
			position: 'bottom'
		}],
		yAxes: [{
			id: 'y-axis-1',
			type: 'linear',
			position: 'left'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				return '';     // doesn't make sense for scatter since data are formatted as a point
			},
			label: function(item) {
				return '(' + item.xLabel + ', ' + item.yLabel + ')';
			}
		}
	}
});

core_defaults._set('global', {
	datasets: {
		scatter: {
			showLine: false
		}
	}
});

// Scatter charts use line controllers
var controller_scatter = controller_line;

// NOTE export a map in which the key represents the controller type, not
// the class, and so must be CamelCase in order to be correctly retrieved
// by the controller in core.controller.js (`controllers[meta.type]`).

var controllers = {
	bar: controller_bar,
	bubble: controller_bubble,
	doughnut: controller_doughnut,
	horizontalBar: controller_horizontalBar,
	line: controller_line,
	polarArea: controller_polarArea,
	pie: controller_pie,
	radar: controller_radar,
	scatter: controller_scatter
};

/**
 * Helper function to get relative position for an event
 * @param {Event|IEvent} event - The event to get the position for
 * @param {Chart} chart - The chart
 * @returns {object} the event position
 */
function getRelativePosition(e, chart) {
	if (e.native) {
		return {
			x: e.x,
			y: e.y
		};
	}

	return helpers$1.getRelativePosition(e, chart);
}

/**
 * Helper function to traverse all of the visible elements in the chart
 * @param {Chart} chart - the chart
 * @param {function} handler - the callback to execute for each visible item
 */
function parseVisibleItems(chart, handler) {
	var metasets = chart._getSortedVisibleDatasetMetas();
	var metadata, i, j, ilen, jlen, element;

	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
		metadata = metasets[i].data;
		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
			element = metadata[j];
			if (!element._view.skip) {
				handler(element);
			}
		}
	}
}

/**
 * Helper function to get the items that intersect the event position
 * @param {ChartElement[]} items - elements to filter
 * @param {object} position - the point to be nearest to
 * @return {ChartElement[]} the nearest items
 */
function getIntersectItems(chart, position) {
	var elements = [];

	parseVisibleItems(chart, function(element) {
		if (element.inRange(position.x, position.y)) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * Helper function to get the items nearest to the event position considering all visible items in teh chart
 * @param {Chart} chart - the chart to look at elements from
 * @param {object} position - the point to be nearest to
 * @param {boolean} intersect - if true, only consider items that intersect the position
 * @param {function} distanceMetric - function to provide the distance between points
 * @return {ChartElement[]} the nearest items
 */
function getNearestItems(chart, position, intersect, distanceMetric) {
	var minDistance = Number.POSITIVE_INFINITY;
	var nearestItems = [];

	parseVisibleItems(chart, function(element) {
		if (intersect && !element.inRange(position.x, position.y)) {
			return;
		}

		var center = element.getCenterPoint();
		var distance = distanceMetric(position, center);
		if (distance < minDistance) {
			nearestItems = [element];
			minDistance = distance;
		} else if (distance === minDistance) {
			// Can have multiple items at the same distance in which case we sort by size
			nearestItems.push(element);
		}
	});

	return nearestItems;
}

/**
 * Get a distance metric function for two points based on the
 * axis mode setting
 * @param {string} axis - the axis mode. x|y|xy
 */
function getDistanceMetricForAxis(axis) {
	var useX = axis.indexOf('x') !== -1;
	var useY = axis.indexOf('y') !== -1;

	return function(pt1, pt2) {
		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	};
}

function indexMode(chart, e, options) {
	var position = getRelativePosition(e, chart);
	// Default axis for index mode is 'x' to match old behaviour
	options.axis = options.axis || 'x';
	var distanceMetric = getDistanceMetricForAxis(options.axis);
	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
	var elements = [];

	if (!items.length) {
		return [];
	}

	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
		var element = meta.data[items[0]._index];

		// don't count items that are skipped (null data)
		if (element && !element._view.skip) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * @interface IInteractionOptions
 */
/**
 * If true, only consider items that intersect the point
 * @name IInterfaceOptions#boolean
 * @type Boolean
 */

/**
 * Contains interaction related functions
 * @namespace Chart.Interaction
 */
var core_interaction = {
	// Helper function for different modes
	modes: {
		single: function(chart, e) {
			var position = getRelativePosition(e, chart);
			var elements = [];

			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
					return elements;
				}
			});

			return elements.slice(0, 1);
		},

		/**
		 * @function Chart.Interaction.modes.label
		 * @deprecated since version 2.4.0
		 * @todo remove at version 3
		 * @private
		 */
		label: indexMode,

		/**
		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
		 * @function Chart.Interaction.modes.index
		 * @since v2.4.0
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		index: indexMode,

		/**
		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
		 * @function Chart.Interaction.modes.dataset
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		dataset: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

			if (items.length > 0) {
				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
			}

			return items;
		},

		/**
		 * @function Chart.Interaction.modes.x-axis
		 * @deprecated since version 2.4.0. Use index mode and intersect == true
		 * @todo remove at version 3
		 * @private
		 */
		'x-axis': function(chart, e) {
			return indexMode(chart, e, {intersect: false});
		},

		/**
		 * Point mode returns all elements that hit test based on the event position
		 * of the event
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		point: function(chart, e) {
			var position = getRelativePosition(e, chart);
			return getIntersectItems(chart, position);
		},

		/**
		 * nearest mode returns the element closest to the point
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		nearest: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			return getNearestItems(chart, position, options.intersect, distanceMetric);
		},

		/**
		 * x mode returns the elements that hit-test at the current x coordinate
		 * @function Chart.Interaction.modes.x
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		x: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inXRange(position.x)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		},

		/**
		 * y mode returns the elements that hit-test at the current y coordinate
		 * @function Chart.Interaction.modes.y
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		y: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inYRange(position.y)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		}
	}
};

var extend = helpers$1.extend;

function filterByPosition(array, position) {
	return helpers$1.where(array, function(v) {
		return v.pos === position;
	});
}

function sortByWeight(array, reverse) {
	return array.sort(function(a, b) {
		var v0 = reverse ? b : a;
		var v1 = reverse ? a : b;
		return v0.weight === v1.weight ?
			v0.index - v1.index :
			v0.weight - v1.weight;
	});
}

function wrapBoxes(boxes) {
	var layoutBoxes = [];
	var i, ilen, box;

	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
		box = boxes[i];
		layoutBoxes.push({
			index: i,
			box: box,
			pos: box.position,
			horizontal: box.isHorizontal(),
			weight: box.weight
		});
	}
	return layoutBoxes;
}

function setLayoutDims(layouts, params) {
	var i, ilen, layout;
	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
		layout = layouts[i];
		// store width used instead of chartArea.w in fitBoxes
		layout.width = layout.horizontal
			? layout.box.fullWidth && params.availableWidth
			: params.vBoxMaxWidth;
		// store height used instead of chartArea.h in fitBoxes
		layout.height = layout.horizontal && params.hBoxMaxHeight;
	}
}

function buildLayoutBoxes(boxes) {
	var layoutBoxes = wrapBoxes(boxes);
	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

	return {
		leftAndTop: left.concat(top),
		rightAndBottom: right.concat(bottom),
		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
		vertical: left.concat(right),
		horizontal: top.concat(bottom)
	};
}

function getCombinedMax(maxPadding, chartArea, a, b) {
	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}

function updateDims(chartArea, params, layout) {
	var box = layout.box;
	var maxPadding = chartArea.maxPadding;
	var newWidth, newHeight;

	if (layout.size) {
		// this layout was already counted for, lets first reduce old size
		chartArea[layout.pos] -= layout.size;
	}
	layout.size = layout.horizontal ? box.height : box.width;
	chartArea[layout.pos] += layout.size;

	if (box.getPadding) {
		var boxPadding = box.getPadding();
		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}

	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
		chartArea.w = newWidth;
		chartArea.h = newHeight;

		// return true if chart area changed in layout's direction
		return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
	}
}

function handleMaxPadding(chartArea) {
	var maxPadding = chartArea.maxPadding;

	function updatePos(pos) {
		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
		chartArea[pos] += change;
		return change;
	}
	chartArea.y += updatePos('top');
	chartArea.x += updatePos('left');
	updatePos('right');
	updatePos('bottom');
}

function getMargins(horizontal, chartArea) {
	var maxPadding = chartArea.maxPadding;

	function marginForPositions(positions) {
		var margin = {left: 0, top: 0, right: 0, bottom: 0};
		positions.forEach(function(pos) {
			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
		});
		return margin;
	}

	return horizontal
		? marginForPositions(['left', 'right'])
		: marginForPositions(['top', 'bottom']);
}

function fitBoxes(boxes, chartArea, params) {
	var refitBoxes = [];
	var i, ilen, layout, box, refit, changed;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;

		box.update(
			layout.width || chartArea.w,
			layout.height || chartArea.h,
			getMargins(layout.horizontal, chartArea)
		);
		if (updateDims(chartArea, params, layout)) {
			changed = true;
			if (refitBoxes.length) {
				// Dimensions changed and there were non full width boxes before this
				// -> we have to refit those
				refit = true;
			}
		}
		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
			refitBoxes.push(layout);
		}
	}

	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
}

function placeBoxes(boxes, chartArea, params) {
	var userPadding = params.padding;
	var x = chartArea.x;
	var y = chartArea.y;
	var i, ilen, layout, box;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;
		if (layout.horizontal) {
			box.left = box.fullWidth ? userPadding.left : chartArea.left;
			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
			box.top = y;
			box.bottom = y + box.height;
			box.width = box.right - box.left;
			y = box.bottom;
		} else {
			box.left = x;
			box.right = x + box.width;
			box.top = chartArea.top;
			box.bottom = chartArea.top + chartArea.h;
			box.height = box.bottom - box.top;
			x = box.right;
		}
	}

	chartArea.x = x;
	chartArea.y = y;
}

core_defaults._set('global', {
	layout: {
		padding: {
			top: 0,
			right: 0,
			bottom: 0,
			left: 0
		}
	}
});

/**
 * @interface ILayoutItem
 * @prop {string} position - The position of the item in the chart layout. Possible values are
 * 'left', 'top', 'right', 'bottom', and 'chartArea'
 * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
 * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
 * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
 * @prop {function} update - Takes two parameters: width and height. Returns size of item
 * @prop {function} getPadding -  Returns an object with padding on the edges
 * @prop {number} width - Width of item. Must be valid after update()
 * @prop {number} height - Height of item. Must be valid after update()
 * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
 * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
 * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
 * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
 */

// The layout service is very self explanatory.  It's responsible for the layout within a chart.
// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
// It is this service's responsibility of carrying out that layout.
var core_layouts = {
	defaults: {},

	/**
	 * Register a box to a chart.
	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
	 * @param {Chart} chart - the chart to use
	 * @param {ILayoutItem} item - the item to add to be layed out
	 */
	addBox: function(chart, item) {
		if (!chart.boxes) {
			chart.boxes = [];
		}

		// initialize item with default values
		item.fullWidth = item.fullWidth || false;
		item.position = item.position || 'top';
		item.weight = item.weight || 0;
		item._layers = item._layers || function() {
			return [{
				z: 0,
				draw: function() {
					item.draw.apply(item, arguments);
				}
			}];
		};

		chart.boxes.push(item);
	},

	/**
	 * Remove a layoutItem from a chart
	 * @param {Chart} chart - the chart to remove the box from
	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
	 */
	removeBox: function(chart, layoutItem) {
		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
		if (index !== -1) {
			chart.boxes.splice(index, 1);
		}
	},

	/**
	 * Sets (or updates) options on the given `item`.
	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
	 * @param {ILayoutItem} item - the item to configure with the given options
	 * @param {object} options - the new item options.
	 */
	configure: function(chart, item, options) {
		var props = ['fullWidth', 'position', 'weight'];
		var ilen = props.length;
		var i = 0;
		var prop;

		for (; i < ilen; ++i) {
			prop = props[i];
			if (options.hasOwnProperty(prop)) {
				item[prop] = options[prop];
			}
		}
	},

	/**
	 * Fits boxes of the given chart into the given size by having each box measure itself
	 * then running a fitting algorithm
	 * @param {Chart} chart - the chart
	 * @param {number} width - the width to fit into
	 * @param {number} height - the height to fit into
	 */
	update: function(chart, width, height) {
		if (!chart) {
			return;
		}

		var layoutOptions = chart.options.layout || {};
		var padding = helpers$1.options.toPadding(layoutOptions.padding);

		var availableWidth = width - padding.width;
		var availableHeight = height - padding.height;
		var boxes = buildLayoutBoxes(chart.boxes);
		var verticalBoxes = boxes.vertical;
		var horizontalBoxes = boxes.horizontal;

		// Essentially we now have any number of boxes on each of the 4 sides.
		// Our canvas looks like the following.
		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
		// B1 is the bottom axis
		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
		// an error will be thrown.
		//
		// |----------------------------------------------------|
		// |                  T1 (Full Width)                   |
		// |----------------------------------------------------|
		// |    |    |                 T2                  |    |
		// |    |----|-------------------------------------|----|
		// |    |    | C1 |                           | C2 |    |
		// |    |    |----|                           |----|    |
		// |    |    |                                     |    |
		// | L1 | L2 |           ChartArea (C0)            | R1 |
		// |    |    |                                     |    |
		// |    |    |----|                           |----|    |
		// |    |    | C3 |                           | C4 |    |
		// |    |----|-------------------------------------|----|
		// |    |    |                 B1                  |    |
		// |----------------------------------------------------|
		// |                  B2 (Full Width)                   |
		// |----------------------------------------------------|
		//

		var params = Object.freeze({
			outerWidth: width,
			outerHeight: height,
			padding: padding,
			availableWidth: availableWidth,
			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
			hBoxMaxHeight: availableHeight / 2
		});
		var chartArea = extend({
			maxPadding: extend({}, padding),
			w: availableWidth,
			h: availableHeight,
			x: padding.left,
			y: padding.top
		}, padding);

		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

		// First fit vertical boxes
		fitBoxes(verticalBoxes, chartArea, params);

		// Then fit horizontal boxes
		if (fitBoxes(horizontalBoxes, chartArea, params)) {
			// if the area changed, re-fit vertical boxes
			fitBoxes(verticalBoxes, chartArea, params);
		}

		handleMaxPadding(chartArea);

		// Finally place the boxes to correct coordinates
		placeBoxes(boxes.leftAndTop, chartArea, params);

		// Move to opposite side of chart
		chartArea.x += chartArea.w;
		chartArea.y += chartArea.h;

		placeBoxes(boxes.rightAndBottom, chartArea, params);

		chart.chartArea = {
			left: chartArea.left,
			top: chartArea.top,
			right: chartArea.left + chartArea.w,
			bottom: chartArea.top + chartArea.h
		};

		// Finally update boxes in chartArea (radial scale for example)
		helpers$1.each(boxes.chartArea, function(layout) {
			var box = layout.box;
			extend(box, chart.chartArea);
			box.update(chartArea.w, chartArea.h);
		});
	}
};

/**
 * Platform fallback implementation (minimal).
 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
 */

var platform_basic = {
	acquireContext: function(item) {
		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		return item && item.getContext('2d') || null;
	}
};

var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";

var platform_dom$1 = /*#__PURE__*/Object.freeze({
__proto__: null,
'default': platform_dom
});

var stylesheet = getCjsExportFromNamespace(platform_dom$1);

var EXPANDO_KEY = '$chartjs';
var CSS_PREFIX = 'chartjs-';
var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

/**
 * DOM event types -> Chart.js event types.
 * Note: only events with different types are mapped.
 * @see https://developer.mozilla.org/en-US/docs/Web/Events
 */
var EVENT_TYPES = {
	touchstart: 'mousedown',
	touchmove: 'mousemove',
	touchend: 'mouseup',
	pointerenter: 'mouseenter',
	pointerdown: 'mousedown',
	pointermove: 'mousemove',
	pointerup: 'mouseup',
	pointerleave: 'mouseout',
	pointerout: 'mouseout'
};

/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns {number} Size in pixels or undefined if unknown.
 */
function readUsedSize(element, property) {
	var value = helpers$1.getStyle(element, property);
	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	return matches ? Number(matches[1]) : undefined;
}

/**
 * Initializes the canvas style and render size without modifying the canvas display size,
 * since responsiveness is handled by the controller.resize() method. The config is used
 * to determine the aspect ratio to apply in case no explicit height has been specified.
 */
function initCanvas(canvas, config) {
	var style = canvas.style;

	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
	// returns null or '' if no explicit value has been set to the canvas attribute.
	var renderHeight = canvas.getAttribute('height');
	var renderWidth = canvas.getAttribute('width');

	// Chart.js modifies some canvas values that we want to restore on destroy
	canvas[EXPANDO_KEY] = {
		initial: {
			height: renderHeight,
			width: renderWidth,
			style: {
				display: style.display,
				height: style.height,
				width: style.width
			}
		}
	};

	// Force canvas to display as block to avoid extra space caused by inline
	// elements, which would interfere with the responsive resize process.
	// https://github.com/chartjs/Chart.js/issues/2538
	style.display = style.display || 'block';

	if (renderWidth === null || renderWidth === '') {
		var displayWidth = readUsedSize(canvas, 'width');
		if (displayWidth !== undefined) {
			canvas.width = displayWidth;
		}
	}

	if (renderHeight === null || renderHeight === '') {
		if (canvas.style.height === '') {
			// If no explicit render height and style height, let's apply the aspect ratio,
			// which one can be specified by the user but also by charts as default option
			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
			canvas.height = canvas.width / (config.options.aspectRatio || 2);
		} else {
			var displayHeight = readUsedSize(canvas, 'height');
			if (displayWidth !== undefined) {
				canvas.height = displayHeight;
			}
		}
	}

	return canvas;
}

/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */
var supportsEventListenerOptions = (function() {
	var supports = false;
	try {
		var options = Object.defineProperty({}, 'passive', {
			// eslint-disable-next-line getter-return
			get: function() {
				supports = true;
			}
		});
		window.addEventListener('e', null, options);
	} catch (e) {
		// continue regardless of error
	}
	return supports;
}());

// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
// https://github.com/chartjs/Chart.js/issues/4287
var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

function addListener(node, type, listener) {
	node.addEventListener(type, listener, eventListenerOptions);
}

function removeListener(node, type, listener) {
	node.removeEventListener(type, listener, eventListenerOptions);
}

function createEvent(type, chart, x, y, nativeEvent) {
	return {
		type: type,
		chart: chart,
		native: nativeEvent || null,
		x: x !== undefined ? x : null,
		y: y !== undefined ? y : null,
	};
}

function fromNativeEvent(event, chart) {
	var type = EVENT_TYPES[event.type] || event.type;
	var pos = helpers$1.getRelativePosition(event, chart);
	return createEvent(type, chart, pos.x, pos.y, event);
}

function throttled(fn, thisArg) {
	var ticking = false;
	var args = [];

	return function() {
		args = Array.prototype.slice.call(arguments);
		thisArg = thisArg || this;

		if (!ticking) {
			ticking = true;
			helpers$1.requestAnimFrame.call(window, function() {
				ticking = false;
				fn.apply(thisArg, args);
			});
		}
	};
}

function createDiv(cls) {
	var el = document.createElement('div');
	el.className = cls || '';
	return el;
}

// Implementation based on https://github.com/marcj/css-element-queries
function createResizer(handler) {
	var maxSize = 1000000;

	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
	// https://github.com/chartjs/Chart.js/issues/5902
	var resizer = createDiv(CSS_SIZE_MONITOR);
	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

	expand.appendChild(createDiv());
	shrink.appendChild(createDiv());

	resizer.appendChild(expand);
	resizer.appendChild(shrink);
	resizer._reset = function() {
		expand.scrollLeft = maxSize;
		expand.scrollTop = maxSize;
		shrink.scrollLeft = maxSize;
		shrink.scrollTop = maxSize;
	};

	var onScroll = function() {
		resizer._reset();
		handler();
	};

	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

	return resizer;
}

// https://davidwalsh.name/detect-node-insertion
function watchForRender(node, handler) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
	var proxy = expando.renderProxy = function(e) {
		if (e.animationName === CSS_RENDER_ANIMATION) {
			handler();
		}
	};

	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
		addListener(node, type, proxy);
	});

	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
	// is removed then added back immediately (same animation frame?). Accessing the
	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
	// https://github.com/chartjs/Chart.js/issues/4737
	expando.reflow = !!node.offsetParent;

	node.classList.add(CSS_RENDER_MONITOR);
}

function unwatchForRender(node) {
	var expando = node[EXPANDO_KEY] || {};
	var proxy = expando.renderProxy;

	if (proxy) {
		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
			removeListener(node, type, proxy);
		});

		delete expando.renderProxy;
	}

	node.classList.remove(CSS_RENDER_MONITOR);
}

function addResizeListener(node, listener, chart) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
	var resizer = expando.resizer = createResizer(throttled(function() {
		if (expando.resizer) {
			var container = chart.options.maintainAspectRatio && node.parentNode;
			var w = container ? container.clientWidth : 0;
			listener(createEvent('resize', chart));
			if (container && container.clientWidth < w && chart.canvas) {
				// If the container size shrank during chart resize, let's assume
				// scrollbar appeared. So we resize again with the scrollbar visible -
				// effectively making chart smaller and the scrollbar hidden again.
				// Because we are inside `throttled`, and currently `ticking`, scroll
				// events are ignored during this whole 2 resize process.
				// If we assumed wrong and something else happened, we are resizing
				// twice in a frame (potential performance issue)
				listener(createEvent('resize', chart));
			}
		}
	}));

	// The resizer needs to be attached to the node parent, so we first need to be
	// sure that `node` is attached to the DOM before injecting the resizer element.
	watchForRender(node, function() {
		if (expando.resizer) {
			var container = node.parentNode;
			if (container && container !== resizer.parentNode) {
				container.insertBefore(resizer, container.firstChild);
			}

			// The container size might have changed, let's reset the resizer state.
			resizer._reset();
		}
	});
}

function removeResizeListener(node) {
	var expando = node[EXPANDO_KEY] || {};
	var resizer = expando.resizer;

	delete expando.resizer;
	unwatchForRender(node);

	if (resizer && resizer.parentNode) {
		resizer.parentNode.removeChild(resizer);
	}
}

/**
 * Injects CSS styles inline if the styles are not already present.
 * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
 * @param {string} css - the CSS to be injected.
 */
function injectCSS(rootNode, css) {
	// https://stackoverflow.com/q/3922139
	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
	if (!expando.containsStyles) {
		expando.containsStyles = true;
		css = '/* Chart.js */\n' + css;
		var style = document.createElement('style');
		style.setAttribute('type', 'text/css');
		style.appendChild(document.createTextNode(css));
		rootNode.appendChild(style);
	}
}

var platform_dom$2 = {
	/**
	 * When `true`, prevents the automatic injection of the stylesheet required to
	 * correctly detect when the chart is added to the DOM and then resized. This
	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
	 * to be manually imported to make this library compatible with any CSP.
	 * See https://github.com/chartjs/Chart.js/issues/5208
	 */
	disableCSSInjection: false,

	/**
	 * This property holds whether this platform is enabled for the current environment.
	 * Currently used by platform.js to select the proper implementation.
	 * @private
	 */
	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

	/**
	 * Initializes resources that depend on platform options.
	 * @param {HTMLCanvasElement} canvas - The Canvas element.
	 * @private
	 */
	_ensureLoaded: function(canvas) {
		if (!this.disableCSSInjection) {
			// If the canvas is in a shadow DOM, then the styles must also be inserted
			// into the same shadow DOM.
			// https://github.com/chartjs/Chart.js/issues/5763
			var root = canvas.getRootNode ? canvas.getRootNode() : document;
			var targetNode = root.host ? root : document.head;
			injectCSS(targetNode, stylesheet);
		}
	},

	acquireContext: function(item, config) {
		if (typeof item === 'string') {
			item = document.getElementById(item);
		} else if (item.length) {
			// Support for array based queries (such as jQuery)
			item = item[0];
		}

		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		// To prevent canvas fingerprinting, some add-ons undefine the getContext
		// method, for example: https://github.com/kkapsner/CanvasBlocker
		// https://github.com/chartjs/Chart.js/issues/2807
		var context = item && item.getContext && item.getContext('2d');

		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
		// inside an iframe or when running in a protected environment. We could guess the
		// types from their toString() value but let's keep things flexible and assume it's
		// a sufficient condition if the item has a context2D which has item as `canvas`.
		// https://github.com/chartjs/Chart.js/issues/3887
		// https://github.com/chartjs/Chart.js/issues/4102
		// https://github.com/chartjs/Chart.js/issues/4152
		if (context && context.canvas === item) {
			// Load platform resources on first chart creation, to make it possible to
			// import the library before setting platform options.
			this._ensureLoaded(item);
			initCanvas(item, config);
			return context;
		}

		return null;
	},

	releaseContext: function(context) {
		var canvas = context.canvas;
		if (!canvas[EXPANDO_KEY]) {
			return;
		}

		var initial = canvas[EXPANDO_KEY].initial;
		['height', 'width'].forEach(function(prop) {
			var value = initial[prop];
			if (helpers$1.isNullOrUndef(value)) {
				canvas.removeAttribute(prop);
			} else {
				canvas.setAttribute(prop, value);
			}
		});

		helpers$1.each(initial.style || {}, function(value, key) {
			canvas.style[key] = value;
		});

		// The canvas render size might have been changed (and thus the state stack discarded),
		// we can't use save() and restore() to restore the initial state. So make sure that at
		// least the canvas context is reset to the default state by setting the canvas width.
		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
		// eslint-disable-next-line no-self-assign
		canvas.width = canvas.width;

		delete canvas[EXPANDO_KEY];
	},

	addEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			addResizeListener(canvas, listener, chart);
			return;
		}

		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
		var proxies = expando.proxies || (expando.proxies = {});
		var proxy = proxies[chart.id + '_' + type] = function(event) {
			listener(fromNativeEvent(event, chart));
		};

		addListener(canvas, type, proxy);
	},

	removeEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			removeResizeListener(canvas);
			return;
		}

		var expando = listener[EXPANDO_KEY] || {};
		var proxies = expando.proxies || {};
		var proxy = proxies[chart.id + '_' + type];
		if (!proxy) {
			return;
		}

		removeListener(canvas, type, proxy);
	}
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use EventTarget.addEventListener instead.
 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * @function Chart.helpers.addEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.addEvent = addListener;

/**
 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
 * @function Chart.helpers.removeEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.removeEvent = removeListener;

// @TODO Make possible to select another platform at build time.
var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

/**
 * @namespace Chart.platform
 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
 * @since 2.4.0
 */
var platform = helpers$1.extend({
	/**
	 * @since 2.7.0
	 */
	initialize: function() {},

	/**
	 * Called at chart construction time, returns a context2d instance implementing
	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
	 * @param {*} item - The native item from which to acquire context (platform specific)
	 * @param {object} options - The chart options
	 * @returns {CanvasRenderingContext2D} context2d instance
	 */
	acquireContext: function() {},

	/**
	 * Called at chart destruction time, releases any resources associated to the context
	 * previously returned by the acquireContext() method.
	 * @param {CanvasRenderingContext2D} context - The context2d instance
	 * @returns {boolean} true if the method succeeded, else false
	 */
	releaseContext: function() {},

	/**
	 * Registers the specified listener on the given chart.
	 * @param {Chart} chart - Chart from which to listen for event
	 * @param {string} type - The ({@link IEvent}) type to listen for
	 * @param {function} listener - Receives a notification (an object that implements
	 * the {@link IEvent} interface) when an event of the specified type occurs.
	 */
	addEventListener: function() {},

	/**
	 * Removes the specified listener previously registered with addEventListener.
	 * @param {Chart} chart - Chart from which to remove the listener
	 * @param {string} type - The ({@link IEvent}) type to remove
	 * @param {function} listener - The listener function to remove from the event target.
	 */
	removeEventListener: function() {}

}, implementation);

core_defaults._set('global', {
	plugins: {}
});

/**
 * The plugin service singleton
 * @namespace Chart.plugins
 * @since 2.1.0
 */
var core_plugins = {
	/**
	 * Globally registered plugins.
	 * @private
	 */
	_plugins: [],

	/**
	 * This identifier is used to invalidate the descriptors cache attached to each chart
	 * when a global plugin is registered or unregistered. In this case, the cache ID is
	 * incremented and descriptors are regenerated during following API calls.
	 * @private
	 */
	_cacheId: 0,

	/**
	 * Registers the given plugin(s) if not already registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	register: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			if (p.indexOf(plugin) === -1) {
				p.push(plugin);
			}
		});

		this._cacheId++;
	},

	/**
	 * Unregisters the given plugin(s) only if registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	unregister: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			var idx = p.indexOf(plugin);
			if (idx !== -1) {
				p.splice(idx, 1);
			}
		});

		this._cacheId++;
	},

	/**
	 * Remove all registered plugins.
	 * @since 2.1.5
	 */
	clear: function() {
		this._plugins = [];
		this._cacheId++;
	},

	/**
	 * Returns the number of registered plugins?
	 * @returns {number}
	 * @since 2.1.5
	 */
	count: function() {
		return this._plugins.length;
	},

	/**
	 * Returns all registered plugin instances.
	 * @returns {IPlugin[]} array of plugin objects.
	 * @since 2.1.5
	 */
	getAll: function() {
		return this._plugins;
	},

	/**
	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
	 * This method immediately returns as soon as a plugin explicitly returns false. The
	 * returned value can be used, for instance, to interrupt the current action.
	 * @param {Chart} chart - The chart instance for which plugins should be called.
	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
	 * @param {Array} [args] - Extra arguments to apply to the hook call.
	 * @returns {boolean} false if any of the plugins return false, else returns true.
	 */
	notify: function(chart, hook, args) {
		var descriptors = this.descriptors(chart);
		var ilen = descriptors.length;
		var i, descriptor, plugin, params, method;

		for (i = 0; i < ilen; ++i) {
			descriptor = descriptors[i];
			plugin = descriptor.plugin;
			method = plugin[hook];
			if (typeof method === 'function') {
				params = [chart].concat(args || []);
				params.push(descriptor.options);
				if (method.apply(plugin, params) === false) {
					return false;
				}
			}
		}

		return true;
	},

	/**
	 * Returns descriptors of enabled plugins for the given chart.
	 * @returns {object[]} [{ plugin, options }]
	 * @private
	 */
	descriptors: function(chart) {
		var cache = chart.$plugins || (chart.$plugins = {});
		if (cache.id === this._cacheId) {
			return cache.descriptors;
		}

		var plugins = [];
		var descriptors = [];
		var config = (chart && chart.config) || {};
		var options = (config.options && config.options.plugins) || {};

		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
			var idx = plugins.indexOf(plugin);
			if (idx !== -1) {
				return;
			}

			var id = plugin.id;
			var opts = options[id];
			if (opts === false) {
				return;
			}

			if (opts === true) {
				opts = helpers$1.clone(core_defaults.global.plugins[id]);
			}

			plugins.push(plugin);
			descriptors.push({
				plugin: plugin,
				options: opts || {}
			});
		});

		cache.descriptors = descriptors;
		cache.id = this._cacheId;
		return descriptors;
	},

	/**
	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
	 * but in some cases, this reference can be changed by the user when updating options.
	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
	 * @private
	 */
	_invalidate: function(chart) {
		delete chart.$plugins;
	}
};

var core_scaleService = {
	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
	// use the new chart options to grab the correct scale
	constructors: {},
	// Use a registration function so that we can move to an ES6 map when we no longer need to support
	// old browsers

	// Scale config defaults
	defaults: {},
	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
		this.constructors[type] = scaleConstructor;
		this.defaults[type] = helpers$1.clone(scaleDefaults);
	},
	getScaleConstructor: function(type) {
		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
	},
	getScaleDefaults: function(type) {
		// Return the scale defaults merged with the global settings so that we always use the latest ones
		return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
	},
	updateScaleDefaults: function(type, additions) {
		var me = this;
		if (me.defaults.hasOwnProperty(type)) {
			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
		}
	},
	addScalesToLayout: function(chart) {
		// Adds each scale to the chart.boxes array to be sized accordingly
		helpers$1.each(chart.scales, function(scale) {
			// Set ILayoutItem parameters for backwards compatibility
			scale.fullWidth = scale.options.fullWidth;
			scale.position = scale.options.position;
			scale.weight = scale.options.weight;
			core_layouts.addBox(chart, scale);
		});
	}
};

var valueOrDefault$8 = helpers$1.valueOrDefault;
var getRtlHelper = helpers$1.rtl.getRtlAdapter;

core_defaults._set('global', {
	tooltips: {
		enabled: true,
		custom: null,
		mode: 'nearest',
		position: 'average',
		intersect: true,
		backgroundColor: 'rgba(0,0,0,0.8)',
		titleFontStyle: 'bold',
		titleSpacing: 2,
		titleMarginBottom: 6,
		titleFontColor: '#fff',
		titleAlign: 'left',
		bodySpacing: 2,
		bodyFontColor: '#fff',
		bodyAlign: 'left',
		footerFontStyle: 'bold',
		footerSpacing: 2,
		footerMarginTop: 6,
		footerFontColor: '#fff',
		footerAlign: 'left',
		yPadding: 6,
		xPadding: 6,
		caretPadding: 2,
		caretSize: 5,
		cornerRadius: 6,
		multiKeyBackground: '#fff',
		displayColors: true,
		borderColor: 'rgba(0,0,0,0)',
		borderWidth: 0,
		callbacks: {
			// Args are: (tooltipItems, data)
			beforeTitle: helpers$1.noop,
			title: function(tooltipItems, data) {
				var title = '';
				var labels = data.labels;
				var labelCount = labels ? labels.length : 0;

				if (tooltipItems.length > 0) {
					var item = tooltipItems[0];
					if (item.label) {
						title = item.label;
					} else if (item.xLabel) {
						title = item.xLabel;
					} else if (labelCount > 0 && item.index < labelCount) {
						title = labels[item.index];
					}
				}

				return title;
			},
			afterTitle: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeBody: helpers$1.noop,

			// Args are: (tooltipItem, data)
			beforeLabel: helpers$1.noop,
			label: function(tooltipItem, data) {
				var label = data.datasets[tooltipItem.datasetIndex].label || '';

				if (label) {
					label += ': ';
				}
				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
					label += tooltipItem.value;
				} else {
					label += tooltipItem.yLabel;
				}
				return label;
			},
			labelColor: function(tooltipItem, chart) {
				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
				var activeElement = meta.data[tooltipItem.index];
				var view = activeElement._view;
				return {
					borderColor: view.borderColor,
					backgroundColor: view.backgroundColor
				};
			},
			labelTextColor: function() {
				return this._options.bodyFontColor;
			},
			afterLabel: helpers$1.noop,

			// Args are: (tooltipItems, data)
			afterBody: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeFooter: helpers$1.noop,
			footer: helpers$1.noop,
			afterFooter: helpers$1.noop
		}
	}
});

var positioners = {
	/**
	 * Average mode places the tooltip at the average position of the elements shown
	 * @function Chart.Tooltip.positioners.average
	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
	 * @returns {object} tooltip position
	 */
	average: function(elements) {
		if (!elements.length) {
			return false;
		}

		var i, len;
		var x = 0;
		var y = 0;
		var count = 0;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var pos = el.tooltipPosition();
				x += pos.x;
				y += pos.y;
				++count;
			}
		}

		return {
			x: x / count,
			y: y / count
		};
	},

	/**
	 * Gets the tooltip position nearest of the item nearest to the event position
	 * @function Chart.Tooltip.positioners.nearest
	 * @param elements {Chart.Element[]} the tooltip elements
	 * @param eventPosition {object} the position of the event in canvas coordinates
	 * @returns {object} the tooltip position
	 */
	nearest: function(elements, eventPosition) {
		var x = eventPosition.x;
		var y = eventPosition.y;
		var minDistance = Number.POSITIVE_INFINITY;
		var i, len, nearestElement;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var center = el.getCenterPoint();
				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

				if (d < minDistance) {
					minDistance = d;
					nearestElement = el;
				}
			}
		}

		if (nearestElement) {
			var tp = nearestElement.tooltipPosition();
			x = tp.x;
			y = tp.y;
		}

		return {
			x: x,
			y: y
		};
	}
};

// Helper to push or concat based on if the 2nd parameter is an array or not
function pushOrConcat(base, toPush) {
	if (toPush) {
		if (helpers$1.isArray(toPush)) {
			// base = base.concat(toPush);
			Array.prototype.push.apply(base, toPush);
		} else {
			base.push(toPush);
		}
	}

	return base;
}

/**
 * Returns array of strings split by newline
 * @param {string} value - The value to split by newline.
 * @returns {string[]} value if newline present - Returned from String split() method
 * @function
 */
function splitNewlines(str) {
	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
		return str.split('\n');
	}
	return str;
}


/**
 * Private helper to create a tooltip item model
 * @param element - the chart element (point, arc, bar) to create the tooltip item for
 * @return new tooltip item
 */
function createTooltipItem(element) {
	var xScale = element._xScale;
	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
	var index = element._index;
	var datasetIndex = element._datasetIndex;
	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
	var indexScale = controller._getIndexScale();
	var valueScale = controller._getValueScale();

	return {
		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
		index: index,
		datasetIndex: datasetIndex,
		x: element._model.x,
		y: element._model.y
	};
}

/**
 * Helper to get the reset model for the tooltip
 * @param tooltipOpts {object} the tooltip options
 */
function getBaseModel(tooltipOpts) {
	var globalDefaults = core_defaults.global;

	return {
		// Positioning
		xPadding: tooltipOpts.xPadding,
		yPadding: tooltipOpts.yPadding,
		xAlign: tooltipOpts.xAlign,
		yAlign: tooltipOpts.yAlign,

		// Drawing direction and text direction
		rtl: tooltipOpts.rtl,
		textDirection: tooltipOpts.textDirection,

		// Body
		bodyFontColor: tooltipOpts.bodyFontColor,
		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
		_bodyAlign: tooltipOpts.bodyAlign,
		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
		bodySpacing: tooltipOpts.bodySpacing,

		// Title
		titleFontColor: tooltipOpts.titleFontColor,
		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
		_titleAlign: tooltipOpts.titleAlign,
		titleSpacing: tooltipOpts.titleSpacing,
		titleMarginBottom: tooltipOpts.titleMarginBottom,

		// Footer
		footerFontColor: tooltipOpts.footerFontColor,
		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
		_footerAlign: tooltipOpts.footerAlign,
		footerSpacing: tooltipOpts.footerSpacing,
		footerMarginTop: tooltipOpts.footerMarginTop,

		// Appearance
		caretSize: tooltipOpts.caretSize,
		cornerRadius: tooltipOpts.cornerRadius,
		backgroundColor: tooltipOpts.backgroundColor,
		opacity: 0,
		legendColorBackground: tooltipOpts.multiKeyBackground,
		displayColors: tooltipOpts.displayColors,
		borderColor: tooltipOpts.borderColor,
		borderWidth: tooltipOpts.borderWidth
	};
}

/**
 * Get the size of the tooltip
 */
function getTooltipSize(tooltip, model) {
	var ctx = tooltip._chart.ctx;

	var height = model.yPadding * 2; // Tooltip Padding
	var width = 0;

	// Count of all lines in the body
	var body = model.body;
	var combinedBodyLength = body.reduce(function(count, bodyItem) {
		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
	}, 0);
	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

	var titleLineCount = model.title.length;
	var footerLineCount = model.footer.length;
	var titleFontSize = model.titleFontSize;
	var bodyFontSize = model.bodyFontSize;
	var footerFontSize = model.footerFontSize;

	height += titleLineCount * titleFontSize; // Title Lines
	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
	height += combinedBodyLength * bodyFontSize; // Body Lines
	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
	height += footerLineCount * (footerFontSize); // Footer Lines
	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

	// Title width
	var widthPadding = 0;
	var maxLineWidth = function(line) {
		width = Math.max(width, ctx.measureText(line).width + widthPadding);
	};

	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
	helpers$1.each(model.title, maxLineWidth);

	// Body width
	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

	// Body lines may include some extra width due to the color box
	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
	helpers$1.each(body, function(bodyItem) {
		helpers$1.each(bodyItem.before, maxLineWidth);
		helpers$1.each(bodyItem.lines, maxLineWidth);
		helpers$1.each(bodyItem.after, maxLineWidth);
	});

	// Reset back to 0
	widthPadding = 0;

	// Footer width
	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
	helpers$1.each(model.footer, maxLineWidth);

	// Add padding
	width += 2 * model.xPadding;

	return {
		width: width,
		height: height
	};
}

/**
 * Helper to get the alignment of a tooltip given the size
 */
function determineAlignment(tooltip, size) {
	var model = tooltip._model;
	var chart = tooltip._chart;
	var chartArea = tooltip._chart.chartArea;
	var xAlign = 'center';
	var yAlign = 'center';

	if (model.y < size.height) {
		yAlign = 'top';
	} else if (model.y > (chart.height - size.height)) {
		yAlign = 'bottom';
	}

	var lf, rf; // functions to determine left, right alignment
	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
	var midX = (chartArea.left + chartArea.right) / 2;
	var midY = (chartArea.top + chartArea.bottom) / 2;

	if (yAlign === 'center') {
		lf = function(x) {
			return x <= midX;
		};
		rf = function(x) {
			return x > midX;
		};
	} else {
		lf = function(x) {
			return x <= (size.width / 2);
		};
		rf = function(x) {
			return x >= (chart.width - (size.width / 2));
		};
	}

	olf = function(x) {
		return x + size.width + model.caretSize + model.caretPadding > chart.width;
	};
	orf = function(x) {
		return x - size.width - model.caretSize - model.caretPadding < 0;
	};
	yf = function(y) {
		return y <= midY ? 'top' : 'bottom';
	};

	if (lf(model.x)) {
		xAlign = 'left';

		// Is tooltip too wide and goes over the right side of the chart.?
		if (olf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	} else if (rf(model.x)) {
		xAlign = 'right';

		// Is tooltip too wide and goes outside left edge of canvas?
		if (orf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	}

	var opts = tooltip._options;
	return {
		xAlign: opts.xAlign ? opts.xAlign : xAlign,
		yAlign: opts.yAlign ? opts.yAlign : yAlign
	};
}

/**
 * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
 */
function getBackgroundPoint(vm, size, alignment, chart) {
	// Background Position
	var x = vm.x;
	var y = vm.y;

	var caretSize = vm.caretSize;
	var caretPadding = vm.caretPadding;
	var cornerRadius = vm.cornerRadius;
	var xAlign = alignment.xAlign;
	var yAlign = alignment.yAlign;
	var paddingAndSize = caretSize + caretPadding;
	var radiusAndPadding = cornerRadius + caretPadding;

	if (xAlign === 'right') {
		x -= size.width;
	} else if (xAlign === 'center') {
		x -= (size.width / 2);
		if (x + size.width > chart.width) {
			x = chart.width - size.width;
		}
		if (x < 0) {
			x = 0;
		}
	}

	if (yAlign === 'top') {
		y += paddingAndSize;
	} else if (yAlign === 'bottom') {
		y -= size.height + paddingAndSize;
	} else {
		y -= (size.height / 2);
	}

	if (yAlign === 'center') {
		if (xAlign === 'left') {
			x += paddingAndSize;
		} else if (xAlign === 'right') {
			x -= paddingAndSize;
		}
	} else if (xAlign === 'left') {
		x -= radiusAndPadding;
	} else if (xAlign === 'right') {
		x += radiusAndPadding;
	}

	return {
		x: x,
		y: y
	};
}

function getAlignedX(vm, align) {
	return align === 'center'
		? vm.x + vm.width / 2
		: align === 'right'
			? vm.x + vm.width - vm.xPadding
			: vm.x + vm.xPadding;
}

/**
 * Helper to build before and after body lines
 */
function getBeforeAfterBodyLines(callback) {
	return pushOrConcat([], splitNewlines(callback));
}

var exports$4 = core_element.extend({
	initialize: function() {
		this._model = getBaseModel(this._options);
		this._lastActive = [];
	},

	// Get the title
	// Args are: (tooltipItem, data)
	getTitle: function() {
		var me = this;
		var opts = me._options;
		var callbacks = opts.callbacks;

		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
		var title = callbacks.title.apply(me, arguments);
		var afterTitle = callbacks.afterTitle.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
		lines = pushOrConcat(lines, splitNewlines(title));
		lines = pushOrConcat(lines, splitNewlines(afterTitle));

		return lines;
	},

	// Args are: (tooltipItem, data)
	getBeforeBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
	},

	// Args are: (tooltipItem, data)
	getBody: function(tooltipItems, data) {
		var me = this;
		var callbacks = me._options.callbacks;
		var bodyItems = [];

		helpers$1.each(tooltipItems, function(tooltipItem) {
			var bodyItem = {
				before: [],
				lines: [],
				after: []
			};
			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

			bodyItems.push(bodyItem);
		});

		return bodyItems;
	},

	// Args are: (tooltipItem, data)
	getAfterBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
	},

	// Get the footer and beforeFooter and afterFooter lines
	// Args are: (tooltipItem, data)
	getFooter: function() {
		var me = this;
		var callbacks = me._options.callbacks;

		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
		var footer = callbacks.footer.apply(me, arguments);
		var afterFooter = callbacks.afterFooter.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
		lines = pushOrConcat(lines, splitNewlines(footer));
		lines = pushOrConcat(lines, splitNewlines(afterFooter));

		return lines;
	},

	update: function(changed) {
		var me = this;
		var opts = me._options;

		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
		// which breaks any animations.
		var existingModel = me._model;
		var model = me._model = getBaseModel(opts);
		var active = me._active;

		var data = me._data;

		// In the case where active.length === 0 we need to keep these at existing values for good animations
		var alignment = {
			xAlign: existingModel.xAlign,
			yAlign: existingModel.yAlign
		};
		var backgroundPoint = {
			x: existingModel.x,
			y: existingModel.y
		};
		var tooltipSize = {
			width: existingModel.width,
			height: existingModel.height
		};
		var tooltipPosition = {
			x: existingModel.caretX,
			y: existingModel.caretY
		};

		var i, len;

		if (active.length) {
			model.opacity = 1;

			var labelColors = [];
			var labelTextColors = [];
			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

			var tooltipItems = [];
			for (i = 0, len = active.length; i < len; ++i) {
				tooltipItems.push(createTooltipItem(active[i]));
			}

			// If the user provided a filter function, use it to modify the tooltip items
			if (opts.filter) {
				tooltipItems = tooltipItems.filter(function(a) {
					return opts.filter(a, data);
				});
			}

			// If the user provided a sorting function, use it to modify the tooltip items
			if (opts.itemSort) {
				tooltipItems = tooltipItems.sort(function(a, b) {
					return opts.itemSort(a, b, data);
				});
			}

			// Determine colors for boxes
			helpers$1.each(tooltipItems, function(tooltipItem) {
				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
			});


			// Build the Text Lines
			model.title = me.getTitle(tooltipItems, data);
			model.beforeBody = me.getBeforeBody(tooltipItems, data);
			model.body = me.getBody(tooltipItems, data);
			model.afterBody = me.getAfterBody(tooltipItems, data);
			model.footer = me.getFooter(tooltipItems, data);

			// Initial positioning and colors
			model.x = tooltipPosition.x;
			model.y = tooltipPosition.y;
			model.caretPadding = opts.caretPadding;
			model.labelColors = labelColors;
			model.labelTextColors = labelTextColors;

			// data points
			model.dataPoints = tooltipItems;

			// We need to determine alignment of the tooltip
			tooltipSize = getTooltipSize(this, model);
			alignment = determineAlignment(this, tooltipSize);
			// Final Size and Position
			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
		} else {
			model.opacity = 0;
		}

		model.xAlign = alignment.xAlign;
		model.yAlign = alignment.yAlign;
		model.x = backgroundPoint.x;
		model.y = backgroundPoint.y;
		model.width = tooltipSize.width;
		model.height = tooltipSize.height;

		// Point where the caret on the tooltip points to
		model.caretX = tooltipPosition.x;
		model.caretY = tooltipPosition.y;

		me._model = model;

		if (changed && opts.custom) {
			opts.custom.call(me, model);
		}

		return me;
	},

	drawCaret: function(tooltipPoint, size) {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

		ctx.lineTo(caretPosition.x1, caretPosition.y1);
		ctx.lineTo(caretPosition.x2, caretPosition.y2);
		ctx.lineTo(caretPosition.x3, caretPosition.y3);
	},
	getCaretPosition: function(tooltipPoint, size, vm) {
		var x1, x2, x3, y1, y2, y3;
		var caretSize = vm.caretSize;
		var cornerRadius = vm.cornerRadius;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var ptX = tooltipPoint.x;
		var ptY = tooltipPoint.y;
		var width = size.width;
		var height = size.height;

		if (yAlign === 'center') {
			y2 = ptY + (height / 2);

			if (xAlign === 'left') {
				x1 = ptX;
				x2 = x1 - caretSize;
				x3 = x1;

				y1 = y2 + caretSize;
				y3 = y2 - caretSize;
			} else {
				x1 = ptX + width;
				x2 = x1 + caretSize;
				x3 = x1;

				y1 = y2 - caretSize;
				y3 = y2 + caretSize;
			}
		} else {
			if (xAlign === 'left') {
				x2 = ptX + cornerRadius + (caretSize);
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else if (xAlign === 'right') {
				x2 = ptX + width - cornerRadius - caretSize;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else {
				x2 = vm.caretX;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			}
			if (yAlign === 'top') {
				y1 = ptY;
				y2 = y1 - caretSize;
				y3 = y1;
			} else {
				y1 = ptY + height;
				y2 = y1 + caretSize;
				y3 = y1;
				// invert drawing order
				var tmp = x3;
				x3 = x1;
				x1 = tmp;
			}
		}
		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
	},

	drawTitle: function(pt, vm, ctx) {
		var title = vm.title;
		var length = title.length;
		var titleFontSize, titleSpacing, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._titleAlign);

			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
			ctx.textBaseline = 'middle';

			titleFontSize = vm.titleFontSize;
			titleSpacing = vm.titleSpacing;

			ctx.fillStyle = vm.titleFontColor;
			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

				if (i + 1 === length) {
					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
				}
			}
		}
	},

	drawBody: function(pt, vm, ctx) {
		var bodyFontSize = vm.bodyFontSize;
		var bodySpacing = vm.bodySpacing;
		var bodyAlign = vm._bodyAlign;
		var body = vm.body;
		var drawColorBoxes = vm.displayColors;
		var xLinePadding = 0;
		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

		var fillLineOfText = function(line) {
			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
			pt.y += bodyFontSize + bodySpacing;
		};

		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

		ctx.textAlign = bodyAlign;
		ctx.textBaseline = 'middle';
		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

		pt.x = getAlignedX(vm, bodyAlignForCalculation);

		// Before body lines
		ctx.fillStyle = vm.bodyFontColor;
		helpers$1.each(vm.beforeBody, fillLineOfText);

		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
			: 0;

		// Draw body lines now
		for (i = 0, ilen = body.length; i < ilen; ++i) {
			bodyItem = body[i];
			textColor = vm.labelTextColors[i];
			labelColors = vm.labelColors[i];

			ctx.fillStyle = textColor;
			helpers$1.each(bodyItem.before, fillLineOfText);

			lines = bodyItem.lines;
			for (j = 0, jlen = lines.length; j < jlen; ++j) {
				// Draw Legend-like boxes if needed
				if (drawColorBoxes) {
					var rtlColorX = rtlHelper.x(colorX);

					// Fill a white rect so that colours merge nicely if the opacity is < 1
					ctx.fillStyle = vm.legendColorBackground;
					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Border
					ctx.lineWidth = 1;
					ctx.strokeStyle = labelColors.borderColor;
					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Inner square
					ctx.fillStyle = labelColors.backgroundColor;
					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
					ctx.fillStyle = textColor;
				}

				fillLineOfText(lines[j]);
			}

			helpers$1.each(bodyItem.after, fillLineOfText);
		}

		// Reset back to 0 for after body
		xLinePadding = 0;

		// After body lines
		helpers$1.each(vm.afterBody, fillLineOfText);
		pt.y -= bodySpacing; // Remove last body spacing
	},

	drawFooter: function(pt, vm, ctx) {
		var footer = vm.footer;
		var length = footer.length;
		var footerFontSize, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._footerAlign);
			pt.y += vm.footerMarginTop;

			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
			ctx.textBaseline = 'middle';

			footerFontSize = vm.footerFontSize;

			ctx.fillStyle = vm.footerFontColor;
			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
				pt.y += footerFontSize + vm.footerSpacing;
			}
		}
	},

	drawBackground: function(pt, vm, ctx, tooltipSize) {
		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;
		ctx.lineWidth = vm.borderWidth;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var x = pt.x;
		var y = pt.y;
		var width = tooltipSize.width;
		var height = tooltipSize.height;
		var radius = vm.cornerRadius;

		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		if (yAlign === 'top') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		if (yAlign === 'center' && xAlign === 'right') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		if (yAlign === 'bottom') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		if (yAlign === 'center' && xAlign === 'left') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();

		ctx.fill();

		if (vm.borderWidth > 0) {
			ctx.stroke();
		}
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;

		if (vm.opacity === 0) {
			return;
		}

		var tooltipSize = {
			width: vm.width,
			height: vm.height
		};
		var pt = {
			x: vm.x,
			y: vm.y
		};

		// IE11/Edge does not like very small opacities, so snap to 0
		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

		// Truthy/falsey value for empty tooltip
		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

		if (this._options.enabled && hasTooltipContent) {
			ctx.save();
			ctx.globalAlpha = opacity;

			// Draw Background
			this.drawBackground(pt, vm, ctx, tooltipSize);

			// Draw Title, Body, and Footer
			pt.y += vm.yPadding;

			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

			// Titles
			this.drawTitle(pt, vm, ctx);

			// Body
			this.drawBody(pt, vm, ctx);

			// Footer
			this.drawFooter(pt, vm, ctx);

			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

			ctx.restore();
		}
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 * @returns {boolean} true if the tooltip changed
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me._options;
		var changed = false;

		me._lastActive = me._lastActive || [];

		// Find Active Elements for tooltips
		if (e.type === 'mouseout') {
			me._active = [];
		} else {
			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
			if (options.reverse) {
				me._active.reverse();
			}
		}

		// Remember Last Actives
		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

		// Only handle target event on tooltip change
		if (changed) {
			me._lastActive = me._active;

			if (options.enabled || options.custom) {
				me._eventPosition = {
					x: e.x,
					y: e.y
				};

				me.update(true);
				me.pivot();
			}
		}

		return changed;
	}
});

/**
 * @namespace Chart.Tooltip.positioners
 */
var positioners_1 = positioners;

var core_tooltip = exports$4;
core_tooltip.positioners = positioners_1;

var valueOrDefault$9 = helpers$1.valueOrDefault;

core_defaults._set('global', {
	elements: {},
	events: [
		'mousemove',
		'mouseout',
		'click',
		'touchstart',
		'touchmove'
	],
	hover: {
		onHover: null,
		mode: 'nearest',
		intersect: true,
		animationDuration: 400
	},
	onClick: null,
	maintainAspectRatio: true,
	responsive: true,
	responsiveAnimationDuration: 0
});

/**
 * Recursively merge the given config objects representing the `scales` option
 * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
 * returns a deep copy of the result, thus doesn't alter inputs.
 */
function mergeScaleConfig(/* config objects ... */) {
	return helpers$1.merge({}, [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			if (key === 'xAxes' || key === 'yAxes') {
				var slen = source[key].length;
				var i, type, scale;

				if (!target[key]) {
					target[key] = [];
				}

				for (i = 0; i < slen; ++i) {
					scale = source[key][i];
					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

					if (i >= target[key].length) {
						target[key].push({});
					}

					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
						// new/untyped scale or type changed: let's apply the new defaults
						// then merge source scale to correctly overwrite the defaults.
						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
					} else {
						// scales type are the same
						helpers$1.merge(target[key][i], scale);
					}
				}
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

/**
 * Recursively merge the given config objects as the root options by handling
 * default scale options for the `scales` and `scale` properties, then returns
 * a deep copy of the result, thus doesn't alter inputs.
 */
function mergeConfig(/* config objects ... */) {
	return helpers$1.merge({}, [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			var tval = target[key] || {};
			var sval = source[key];

			if (key === 'scales') {
				// scale config merging is complex. Add our own function here for that
				target[key] = mergeScaleConfig(tval, sval);
			} else if (key === 'scale') {
				// used in polar area & radar charts since there is only one scale
				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

function initConfig(config) {
	config = config || {};

	// Do NOT use mergeConfig for the data object because this method merges arrays
	// and so would change references to labels and datasets, preventing data updates.
	var data = config.data = config.data || {};
	data.datasets = data.datasets || [];
	data.labels = data.labels || [];

	config.options = mergeConfig(
		core_defaults.global,
		core_defaults[config.type],
		config.options || {});

	return config;
}

function updateConfig(chart) {
	var newOptions = chart.options;

	helpers$1.each(chart.scales, function(scale) {
		core_layouts.removeBox(chart, scale);
	});

	newOptions = mergeConfig(
		core_defaults.global,
		core_defaults[chart.config.type],
		newOptions);

	chart.options = chart.config.options = newOptions;
	chart.ensureScalesHaveIDs();
	chart.buildOrUpdateScales();

	// Tooltip
	chart.tooltip._options = newOptions.tooltips;
	chart.tooltip.initialize();
}

function nextAvailableScaleId(axesOpts, prefix, index) {
	var id;
	var hasId = function(obj) {
		return obj.id === id;
	};

	do {
		id = prefix + index++;
	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

	return id;
}

function positionIsHorizontal(position) {
	return position === 'top' || position === 'bottom';
}

function compare2Level(l1, l2) {
	return function(a, b) {
		return a[l1] === b[l1]
			? a[l2] - b[l2]
			: a[l1] - b[l1];
	};
}

var Chart = function(item, config) {
	this.construct(item, config);
	return this;
};

helpers$1.extend(Chart.prototype, /** @lends Chart */ {
	/**
	 * @private
	 */
	construct: function(item, config) {
		var me = this;

		config = initConfig(config);

		var context = platform.acquireContext(item, config);
		var canvas = context && context.canvas;
		var height = canvas && canvas.height;
		var width = canvas && canvas.width;

		me.id = helpers$1.uid();
		me.ctx = context;
		me.canvas = canvas;
		me.config = config;
		me.width = width;
		me.height = height;
		me.aspectRatio = height ? width / height : null;
		me.options = config.options;
		me._bufferedRender = false;
		me._layers = [];

		/**
		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
		 * the "instance" still need to be defined since it might be called from plugins.
		 * @prop Chart#chart
		 * @deprecated since version 2.6.0
		 * @todo remove at version 3
		 * @private
		 */
		me.chart = me;
		me.controller = me; // chart.chart.controller #inception

		// Add the chart instance to the global namespace
		Chart.instances[me.id] = me;

		// Define alias to the config data: `chart.data === chart.config.data`
		Object.defineProperty(me, 'data', {
			get: function() {
				return me.config.data;
			},
			set: function(value) {
				me.config.data = value;
			}
		});

		if (!context || !canvas) {
			// The given item is not a compatible context2d element, let's return before finalizing
			// the chart initialization but after setting basic chart / controller properties that
			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
			// https://github.com/chartjs/Chart.js/issues/2807
			console.error("Failed to create chart: can't acquire context from the given item");
			return;
		}

		me.initialize();
		me.update();
	},

	/**
	 * @private
	 */
	initialize: function() {
		var me = this;

		// Before init plugin notification
		core_plugins.notify(me, 'beforeInit');

		helpers$1.retinaScale(me, me.options.devicePixelRatio);

		me.bindEvents();

		if (me.options.responsive) {
			// Initial resize before chart draws (must be silent to preserve initial animations).
			me.resize(true);
		}

		me.initToolTip();

		// After init plugin notification
		core_plugins.notify(me, 'afterInit');

		return me;
	},

	clear: function() {
		helpers$1.canvas.clear(this);
		return this;
	},

	stop: function() {
		// Stops any current animation loop occurring
		core_animations.cancelAnimation(this);
		return this;
	},

	resize: function(silent) {
		var me = this;
		var options = me.options;
		var canvas = me.canvas;
		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

		// the canvas render width and height will be casted to integers so make sure that
		// the canvas display style uses the same integer values to avoid blurring effect.

		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

		if (me.width === newWidth && me.height === newHeight) {
			return;
		}

		canvas.width = me.width = newWidth;
		canvas.height = me.height = newHeight;
		canvas.style.width = newWidth + 'px';
		canvas.style.height = newHeight + 'px';

		helpers$1.retinaScale(me, options.devicePixelRatio);

		if (!silent) {
			// Notify any plugins about the resize
			var newSize = {width: newWidth, height: newHeight};
			core_plugins.notify(me, 'resize', [newSize]);

			// Notify of resize
			if (options.onResize) {
				options.onResize(me, newSize);
			}

			me.stop();
			me.update({
				duration: options.responsiveAnimationDuration
			});
		}
	},

	ensureScalesHaveIDs: function() {
		var options = this.options;
		var scalesOptions = options.scales || {};
		var scaleOptions = options.scale;

		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
			if (!xAxisOptions.id) {
				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
			}
		});

		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
			if (!yAxisOptions.id) {
				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
			}
		});

		if (scaleOptions) {
			scaleOptions.id = scaleOptions.id || 'scale';
		}
	},

	/**
	 * Builds a map of scale ID to scale object for future lookup.
	 */
	buildOrUpdateScales: function() {
		var me = this;
		var options = me.options;
		var scales = me.scales || {};
		var items = [];
		var updated = Object.keys(scales).reduce(function(obj, id) {
			obj[id] = false;
			return obj;
		}, {});

		if (options.scales) {
			items = items.concat(
				(options.scales.xAxes || []).map(function(xAxisOptions) {
					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
				}),
				(options.scales.yAxes || []).map(function(yAxisOptions) {
					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
				})
			);
		}

		if (options.scale) {
			items.push({
				options: options.scale,
				dtype: 'radialLinear',
				isDefault: true,
				dposition: 'chartArea'
			});
		}

		helpers$1.each(items, function(item) {
			var scaleOptions = item.options;
			var id = scaleOptions.id;
			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
				scaleOptions.position = item.dposition;
			}

			updated[id] = true;
			var scale = null;
			if (id in scales && scales[id].type === scaleType) {
				scale = scales[id];
				scale.options = scaleOptions;
				scale.ctx = me.ctx;
				scale.chart = me;
			} else {
				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
				if (!scaleClass) {
					return;
				}
				scale = new scaleClass({
					id: id,
					type: scaleType,
					options: scaleOptions,
					ctx: me.ctx,
					chart: me
				});
				scales[scale.id] = scale;
			}

			scale.mergeTicksOptions();

			// TODO(SB): I think we should be able to remove this custom case (options.scale)
			// and consider it as a regular scale part of the "scales"" map only! This would
			// make the logic easier and remove some useless? custom code.
			if (item.isDefault) {
				me.scale = scale;
			}
		});
		// clear up discarded scales
		helpers$1.each(updated, function(hasUpdated, id) {
			if (!hasUpdated) {
				delete scales[id];
			}
		});

		me.scales = scales;

		core_scaleService.addScalesToLayout(this);
	},

	buildOrUpdateControllers: function() {
		var me = this;
		var newControllers = [];
		var datasets = me.data.datasets;
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			var dataset = datasets[i];
			var meta = me.getDatasetMeta(i);
			var type = dataset.type || me.config.type;

			if (meta.type && meta.type !== type) {
				me.destroyDatasetMeta(i);
				meta = me.getDatasetMeta(i);
			}
			meta.type = type;
			meta.order = dataset.order || 0;
			meta.index = i;

			if (meta.controller) {
				meta.controller.updateIndex(i);
				meta.controller.linkScales();
			} else {
				var ControllerClass = controllers[meta.type];
				if (ControllerClass === undefined) {
					throw new Error('"' + meta.type + '" is not a chart type.');
				}

				meta.controller = new ControllerClass(me, i);
				newControllers.push(meta.controller);
			}
		}

		return newControllers;
	},

	/**
	 * Reset the elements of all datasets
	 * @private
	 */
	resetElements: function() {
		var me = this;
		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
			me.getDatasetMeta(datasetIndex).controller.reset();
		}, me);
	},

	/**
	* Resets the chart back to it's state before the initial animation
	*/
	reset: function() {
		this.resetElements();
		this.tooltip.initialize();
	},

	update: function(config) {
		var me = this;
		var i, ilen;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		updateConfig(me);

		// plugins options references might have change, let's invalidate the cache
		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
		core_plugins._invalidate(me);

		if (core_plugins.notify(me, 'beforeUpdate') === false) {
			return;
		}

		// In case the entire data object changed
		me.tooltip._data = me.data;

		// Make sure dataset controllers are updated and new controllers are reset
		var newControllers = me.buildOrUpdateControllers();

		// Make sure all dataset controllers have correct meta data counts
		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
			me.getDatasetMeta(i).controller.buildOrUpdateElements();
		}

		me.updateLayout();

		// Can only reset the new controllers after the scales have been updated
		if (me.options.animation && me.options.animation.duration) {
			helpers$1.each(newControllers, function(controller) {
				controller.reset();
			});
		}

		me.updateDatasets();

		// Need to reset tooltip in case it is displayed with elements that are removed
		// after update.
		me.tooltip.initialize();

		// Last active contains items that were previously in the tooltip.
		// When we reset the tooltip, we need to clear it
		me.lastActive = [];

		// Do this before render so that any plugins that need final scale updates can use it
		core_plugins.notify(me, 'afterUpdate');

		me._layers.sort(compare2Level('z', '_idx'));

		if (me._bufferedRender) {
			me._bufferedRequest = {
				duration: config.duration,
				easing: config.easing,
				lazy: config.lazy
			};
		} else {
			me.render(config);
		}
	},

	/**
	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
	 * hook, in which case, plugins will not be called on `afterLayout`.
	 * @private
	 */
	updateLayout: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeLayout') === false) {
			return;
		}

		core_layouts.update(this, this.width, this.height);

		me._layers = [];
		helpers$1.each(me.boxes, function(box) {
			// _configure is called twice, once in core.scale.update and once here.
			// Here the boxes are fully updated and at their final positions.
			if (box._configure) {
				box._configure();
			}
			me._layers.push.apply(me._layers, box._layers());
		}, me);

		me._layers.forEach(function(item, index) {
			item._idx = index;
		});

		/**
		 * Provided for backward compatibility, use `afterLayout` instead.
		 * @method IPlugin#afterScaleUpdate
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		core_plugins.notify(me, 'afterScaleUpdate');
		core_plugins.notify(me, 'afterLayout');
	},

	/**
	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
	 * @private
	 */
	updateDatasets: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
			return;
		}

		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.updateDataset(i);
		}

		core_plugins.notify(me, 'afterDatasetsUpdate');
	},

	/**
	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
	 * @private
	 */
	updateDataset: function(index) {
		var me = this;
		var meta = me.getDatasetMeta(index);
		var args = {
			meta: meta,
			index: index
		};

		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
			return;
		}

		meta.controller._update();

		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
	},

	render: function(config) {
		var me = this;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		var animationOptions = me.options.animation;
		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
		var lazy = config.lazy;

		if (core_plugins.notify(me, 'beforeRender') === false) {
			return;
		}

		var onComplete = function(animation) {
			core_plugins.notify(me, 'afterRender');
			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
		};

		if (animationOptions && duration) {
			var animation = new core_animation({
				numSteps: duration / 16.66, // 60 fps
				easing: config.easing || animationOptions.easing,

				render: function(chart, animationObject) {
					var easingFunction = helpers$1.easing.effects[animationObject.easing];
					var currentStep = animationObject.currentStep;
					var stepDecimal = currentStep / animationObject.numSteps;

					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
				},

				onAnimationProgress: animationOptions.onProgress,
				onAnimationComplete: onComplete
			});

			core_animations.addAnimation(me, animation, duration, lazy);
		} else {
			me.draw();

			// See https://github.com/chartjs/Chart.js/issues/3781
			onComplete(new core_animation({numSteps: 0, chart: me}));
		}

		return me;
	},

	draw: function(easingValue) {
		var me = this;
		var i, layers;

		me.clear();

		if (helpers$1.isNullOrUndef(easingValue)) {
			easingValue = 1;
		}

		me.transition(easingValue);

		if (me.width <= 0 || me.height <= 0) {
			return;
		}

		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
			return;
		}

		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
		// currently be part of layers. Instead, we draw
		// layers <= 0 before(default, backward compat), and the rest after
		layers = me._layers;
		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
			layers[i].draw(me.chartArea);
		}

		me.drawDatasets(easingValue);

		// Rest of layers
		for (; i < layers.length; ++i) {
			layers[i].draw(me.chartArea);
		}

		me._drawTooltip(easingValue);

		core_plugins.notify(me, 'afterDraw', [easingValue]);
	},

	/**
	 * @private
	 */
	transition: function(easingValue) {
		var me = this;

		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
			if (me.isDatasetVisible(i)) {
				me.getDatasetMeta(i).controller.transition(easingValue);
			}
		}

		me.tooltip.transition(easingValue);
	},

	/**
	 * @private
	 */
	_getSortedDatasetMetas: function(filterVisible) {
		var me = this;
		var datasets = me.data.datasets || [];
		var result = [];
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
			if (!filterVisible || me.isDatasetVisible(i)) {
				result.push(me.getDatasetMeta(i));
			}
		}

		result.sort(compare2Level('order', 'index'));

		return result;
	},

	/**
	 * @private
	 */
	_getSortedVisibleDatasetMetas: function() {
		return this._getSortedDatasetMetas(true);
	},

	/**
	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
	 * @private
	 */
	drawDatasets: function(easingValue) {
		var me = this;
		var metasets, i;

		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
			return;
		}

		metasets = me._getSortedVisibleDatasetMetas();
		for (i = metasets.length - 1; i >= 0; --i) {
			me.drawDataset(metasets[i], easingValue);
		}

		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
	},

	/**
	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
	 * @private
	 */
	drawDataset: function(meta, easingValue) {
		var me = this;
		var args = {
			meta: meta,
			index: meta.index,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
			return;
		}

		meta.controller.draw(easingValue);

		core_plugins.notify(me, 'afterDatasetDraw', [args]);
	},

	/**
	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
	 * @private
	 */
	_drawTooltip: function(easingValue) {
		var me = this;
		var tooltip = me.tooltip;
		var args = {
			tooltip: tooltip,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
			return;
		}

		tooltip.draw();

		core_plugins.notify(me, 'afterTooltipDraw', [args]);
	},

	/**
	 * Get the single element that was clicked on
	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
	 */
	getElementAtEvent: function(e) {
		return core_interaction.modes.single(this, e);
	},

	getElementsAtEvent: function(e) {
		return core_interaction.modes.label(this, e, {intersect: true});
	},

	getElementsAtXAxis: function(e) {
		return core_interaction.modes['x-axis'](this, e, {intersect: true});
	},

	getElementsAtEventForMode: function(e, mode, options) {
		var method = core_interaction.modes[mode];
		if (typeof method === 'function') {
			return method(this, e, options);
		}

		return [];
	},

	getDatasetAtEvent: function(e) {
		return core_interaction.modes.dataset(this, e, {intersect: true});
	},

	getDatasetMeta: function(datasetIndex) {
		var me = this;
		var dataset = me.data.datasets[datasetIndex];
		if (!dataset._meta) {
			dataset._meta = {};
		}

		var meta = dataset._meta[me.id];
		if (!meta) {
			meta = dataset._meta[me.id] = {
				type: null,
				data: [],
				dataset: null,
				controller: null,
				hidden: null,			// See isDatasetVisible() comment
				xAxisID: null,
				yAxisID: null,
				order: dataset.order || 0,
				index: datasetIndex
			};
		}

		return meta;
	},

	getVisibleDatasetCount: function() {
		var count = 0;
		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
			if (this.isDatasetVisible(i)) {
				count++;
			}
		}
		return count;
	},

	isDatasetVisible: function(datasetIndex) {
		var meta = this.getDatasetMeta(datasetIndex);

		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
	},

	generateLegend: function() {
		return this.options.legendCallback(this);
	},

	/**
	 * @private
	 */
	destroyDatasetMeta: function(datasetIndex) {
		var id = this.id;
		var dataset = this.data.datasets[datasetIndex];
		var meta = dataset._meta && dataset._meta[id];

		if (meta) {
			meta.controller.destroy();
			delete dataset._meta[id];
		}
	},

	destroy: function() {
		var me = this;
		var canvas = me.canvas;
		var i, ilen;

		me.stop();

		// dataset controllers need to cleanup associated data
		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.destroyDatasetMeta(i);
		}

		if (canvas) {
			me.unbindEvents();
			helpers$1.canvas.clear(me);
			platform.releaseContext(me.ctx);
			me.canvas = null;
			me.ctx = null;
		}

		core_plugins.notify(me, 'destroy');

		delete Chart.instances[me.id];
	},

	toBase64Image: function() {
		return this.canvas.toDataURL.apply(this.canvas, arguments);
	},

	initToolTip: function() {
		var me = this;
		me.tooltip = new core_tooltip({
			_chart: me,
			_chartInstance: me, // deprecated, backward compatibility
			_data: me.data,
			_options: me.options.tooltips
		}, me);
	},

	/**
	 * @private
	 */
	bindEvents: function() {
		var me = this;
		var listeners = me._listeners = {};
		var listener = function() {
			me.eventHandler.apply(me, arguments);
		};

		helpers$1.each(me.options.events, function(type) {
			platform.addEventListener(me, type, listener);
			listeners[type] = listener;
		});

		// Elements used to detect size change should not be injected for non responsive charts.
		// See https://github.com/chartjs/Chart.js/issues/2210
		if (me.options.responsive) {
			listener = function() {
				me.resize();
			};

			platform.addEventListener(me, 'resize', listener);
			listeners.resize = listener;
		}
	},

	/**
	 * @private
	 */
	unbindEvents: function() {
		var me = this;
		var listeners = me._listeners;
		if (!listeners) {
			return;
		}

		delete me._listeners;
		helpers$1.each(listeners, function(listener, type) {
			platform.removeEventListener(me, type, listener);
		});
	},

	updateHoverStyle: function(elements, mode, enabled) {
		var prefix = enabled ? 'set' : 'remove';
		var element, i, ilen;

		for (i = 0, ilen = elements.length; i < ilen; ++i) {
			element = elements[i];
			if (element) {
				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
			}
		}

		if (mode === 'dataset') {
			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
		}
	},

	/**
	 * @private
	 */
	eventHandler: function(e) {
		var me = this;
		var tooltip = me.tooltip;

		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
			return;
		}

		// Buffer any update calls so that renders do not occur
		me._bufferedRender = true;
		me._bufferedRequest = null;

		var changed = me.handleEvent(e);
		// for smooth tooltip animations issue #4989
		// the tooltip should be the source of change
		// Animation check workaround:
		// tooltip._start will be null when tooltip isn't animating
		if (tooltip) {
			changed = tooltip._start
				? tooltip.handleEvent(e)
				: changed | tooltip.handleEvent(e);
		}

		core_plugins.notify(me, 'afterEvent', [e]);

		var bufferedRequest = me._bufferedRequest;
		if (bufferedRequest) {
			// If we have an update that was triggered, we need to do a normal render
			me.render(bufferedRequest);
		} else if (changed && !me.animating) {
			// If entering, leaving, or changing elements, animate the change via pivot
			me.stop();

			// We only need to render at this point. Updating will cause scales to be
			// recomputed generating flicker & using more memory than necessary.
			me.render({
				duration: me.options.hover.animationDuration,
				lazy: true
			});
		}

		me._bufferedRender = false;
		me._bufferedRequest = null;

		return me;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event the event to handle
	 * @return {boolean} true if the chart needs to re-render
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me.options || {};
		var hoverOptions = options.hover;
		var changed = false;

		me.lastActive = me.lastActive || [];

		// Find Active Elements for hover and tooltips
		if (e.type === 'mouseout') {
			me.active = [];
		} else {
			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
		}

		// Invoke onHover hook
		// Need to call with native event here to not break backwards compatibility
		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

		if (e.type === 'mouseup' || e.type === 'click') {
			if (options.onClick) {
				// Use e.native here for backwards compatibility
				options.onClick.call(me, e.native, me.active);
			}
		}

		// Remove styling for last active (even if it may still be active)
		if (me.lastActive.length) {
			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
		}

		// Built in hover styling
		if (me.active.length && hoverOptions.mode) {
			me.updateHoverStyle(me.active, hoverOptions.mode, true);
		}

		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

		// Remember Last Actives
		me.lastActive = me.active;

		return changed;
	}
});

/**
 * NOTE(SB) We actually don't use this container anymore but we need to keep it
 * for backward compatibility. Though, it can still be useful for plugins that
 * would need to work on multiple charts?!
 */
Chart.instances = {};

var core_controller = Chart;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart instead.
 * @class Chart.Controller
 * @deprecated since version 2.6
 * @todo remove at version 3
 * @private
 */
Chart.Controller = Chart;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
Chart.types = {};

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.configMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.configMerge = mergeConfig;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.scaleMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.scaleMerge = mergeScaleConfig;

var core_helpers = function() {

	// -- Basic js utility methods

	helpers$1.where = function(collection, filterCallback) {
		if (helpers$1.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers$1.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers$1.findIndex = Array.prototype.findIndex ?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined ? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};

	// -- Math methods
	helpers$1.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers$1.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers$1.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
	};
	helpers$1.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers$1.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers$1.sign = Math.sign ?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers$1.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers$1.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};

	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param {number} x - A number.
	 * @returns {number} The number of decimal places.
	 * @private
	 */
	helpers$1._decimalPlaces = function(x) {
		if (!helpers$1.isFinite(x)) {
			return;
		}
		var e = 1;
		var p = 0;
		while (Math.round(x * e) / e !== x) {
			e *= 10;
			p++;
		}
		return p;
	};

	// Gets the angle from vertical upright to the point about a centre.
	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x;
		var distanceFromYCenter = anglePoint.y - centrePoint.y;
		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.helpers.aliasPixel
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	helpers$1.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};

	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param {Chart} chart - The chart instance.
	 * @param {number} pixel - A pixel value.
	 * @param {number} width - The width of the element.
	 * @returns {number} The aligned pixel value.
	 * @private
	 */
	helpers$1._alignPixel = function(chart, pixel, width) {
		var devicePixelRatio = chart.currentDevicePixelRatio;
		var halfWidth = width / 2;
		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	};

	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect "skipped" points

		var previous = firstPoint.skip ? middlePoint : firstPoint;
		var current = middlePoint;
		var next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers$1.EPSILON = Number.EPSILON || 1e-14;
	helpers$1.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers$1.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers$1.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers$1.niceNum = function(range, round) {
		var exponent = Math.floor(helpers$1.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers$1.requestAnimFrame = (function() {
		if (typeof window === 'undefined') {
			return function(callback) {
				callback();
			};
		}
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers$1.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt;
		var canvas = evt.target || evt.srcElement;
		var boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof styleValue === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	/**
	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
	 * @param {HTMLElement} domNode - the node to check the constraint on
	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
	 */
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = helpers$1._getParentNode(domNode);
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers$1.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers$1.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	/**
	 * @private
 	 */
	helpers$1._calculatePadding = function(container, padding, parentDimension) {
		padding = helpers$1.getStyle(container, padding);

		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
	};
	/**
	 * @private
	 */
	helpers$1._getParentNode = function(domNode) {
		var parent = domNode.parentNode;
		if (parent && parent.toString() === '[object ShadowRoot]') {
			parent = parent.host;
		}
		return parent;
	};
	helpers$1.getMaximumWidth = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientWidth;
		}

		var clientWidth = container.clientWidth;
		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

		var w = clientWidth - paddingLeft - paddingRight;
		var cw = helpers$1.getConstraintWidth(domNode);
		return isNaN(cw) ? w : Math.min(w, cw);
	};
	helpers$1.getMaximumHeight = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientHeight;
		}

		var clientHeight = container.clientHeight;
		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

		var h = clientHeight - paddingTop - paddingBottom;
		var ch = helpers$1.getConstraintHeight(domNode);
		return isNaN(ch) ? h : Math.min(h, ch);
	};
	helpers$1.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers$1.retinaScale = function(chart, forceRatio) {
		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the "correct" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		if (!canvas.style.height && !canvas.style.width) {
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		}
	};
	// -- Canvas methods
	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		var ilen = arrayOfThings.length;
		var i, j, jlen, thing, nestedThing;
		for (i = 0; i < ilen; i++) {
			thing = arrayOfThings[i];

			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
			} else if (helpers$1.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				for (j = 0, jlen = thing.length; j < jlen; j++) {
					nestedThing = thing[j];
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
					}
				}
			}
		}

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers$1.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};

	/**
	 * @deprecated
	 */
	helpers$1.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers$1.each(arrayOfThings, function(thing) {
			if (helpers$1.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};

	helpers$1.color = !chartjsColor ?
		function(value) {
			console.error('Color.js not found!');
			return value;
		} :
		function(value) {
			/* global CanvasGradient */
			if (value instanceof CanvasGradient) {
				value = core_defaults.global.defaultColor;
			}

			return chartjsColor(value);
		};

	helpers$1.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
			colorValue :
			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};

function abstract() {
	throw new Error(
		'This method is not implemented: either no adapter can ' +
		'be found or an incomplete integration was provided.'
	);
}

/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */

/**
 * Currently supported unit string values.
 * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
 * @memberof Chart._adapters._date
 * @name Unit
 */

/**
 * @class
 */
function DateAdapter(options) {
	this.options = options || {};
}

helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
	/**
	 * Returns a map of time formats for the supported formatting units defined
	 * in Unit as well as 'datetime' representing a detailed date/time string.
	 * @returns {{string: string}}
	 */
	formats: abstract,

	/**
	 * Parses the given `value` and return the associated timestamp.
	 * @param {any} value - the value to parse (usually comes from the data)
	 * @param {string} [format] - the expected data format
	 * @returns {(number|null)}
	 * @function
	 */
	parse: abstract,

	/**
	 * Returns the formatted date in the specified `format` for a given `timestamp`.
	 * @param {number} timestamp - the timestamp to format
	 * @param {string} format - the date/time token
	 * @return {string}
	 * @function
	 */
	format: abstract,

	/**
	 * Adds the specified `amount` of `unit` to the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {number} amount - the amount to add
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	add: abstract,

	/**
	 * Returns the number of `unit` between the given timestamps.
	 * @param {number} max - the input timestamp (reference)
	 * @param {number} min - the timestamp to substract
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	diff: abstract,

	/**
	 * Returns start of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
	 * @function
	 */
	startOf: abstract,

	/**
	 * Returns end of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @function
	 */
	endOf: abstract,

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility for scale.getValueForPixel(),
	 * this method should be overridden only by the moment adapter.
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(value) {
		return value;
	}
});

DateAdapter.override = function(members) {
	helpers$1.extend(DateAdapter.prototype, members);
};

var _date = DateAdapter;

var core_adapters = {
	_date: _date
};

/**
 * Namespace to hold static tick generation functions
 * @namespace Chart.Ticks
 */
var core_ticks = {
	/**
	 * Namespace to hold formatters for different types of ticks
	 * @namespace Chart.Ticks.formatters
	 */
	formatters: {
		/**
		 * Formatter for value labels
		 * @method Chart.Ticks.formatters.values
		 * @param value the value to display
		 * @return {string|string[]} the label to display
		 */
		values: function(value) {
			return helpers$1.isArray(value) ? value : '' + value;
		},

		/**
		 * Formatter for linear numeric ticks
		 * @method Chart.Ticks.formatters.linear
		 * @param tickValue {number} the value to be formatted
		 * @param index {number} the position of the tickValue parameter in the ticks array
		 * @param ticks {number[]} the list of ticks being converted
		 * @return {string} string representation of the tickValue parameter
		 */
		linear: function(tickValue, index, ticks) {
			// If we have lots of ticks, don't use the ones
			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
			if (Math.abs(delta) > 1) {
				if (tickValue !== Math.floor(tickValue)) {
					// not an integer
					delta = tickValue - Math.floor(tickValue);
				}
			}

			var logDelta = helpers$1.log10(Math.abs(delta));
			var tickString = '';

			if (tickValue !== 0) {
				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
					var logTick = helpers$1.log10(Math.abs(tickValue));
					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
					numExponential = Math.max(Math.min(numExponential, 20), 0);
					tickString = tickValue.toExponential(numExponential);
				} else {
					var numDecimal = -1 * Math.floor(logDelta);
					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
					tickString = tickValue.toFixed(numDecimal);
				}
			} else {
				tickString = '0'; // never show decimal places for 0
			}

			return tickString;
		},

		logarithmic: function(tickValue, index, ticks) {
			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

			if (tickValue === 0) {
				return '0';
			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
				return tickValue.toExponential();
			}
			return '';
		}
	}
};

var isArray = helpers$1.isArray;
var isNullOrUndef = helpers$1.isNullOrUndef;
var valueOrDefault$a = helpers$1.valueOrDefault;
var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

core_defaults._set('scale', {
	display: true,
	position: 'left',
	offset: false,

	// grid line settings
	gridLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		drawBorder: true,
		drawOnChartArea: true,
		drawTicks: true,
		tickMarkLength: 10,
		zeroLineWidth: 1,
		zeroLineColor: 'rgba(0,0,0,0.25)',
		zeroLineBorderDash: [],
		zeroLineBorderDashOffset: 0.0,
		offsetGridLines: false,
		borderDash: [],
		borderDashOffset: 0.0
	},

	// scale label
	scaleLabel: {
		// display property
		display: false,

		// actual label
		labelString: '',

		// top/bottom padding
		padding: {
			top: 4,
			bottom: 4
		}
	},

	// label settings
	ticks: {
		beginAtZero: false,
		minRotation: 0,
		maxRotation: 50,
		mirror: false,
		padding: 0,
		reverse: false,
		display: true,
		autoSkip: true,
		autoSkipPadding: 0,
		labelOffset: 0,
		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
		callback: core_ticks.formatters.values,
		minor: {},
		major: {}
	}
});

/** Returns a new array containing numItems from arr */
function sample(arr, numItems) {
	var result = [];
	var increment = arr.length / numItems;
	var i = 0;
	var len = arr.length;

	for (; i < len; i += increment) {
		result.push(arr[Math.floor(i)]);
	}
	return result;
}

function getPixelForGridLine(scale, index, offsetGridLines) {
	var length = scale.getTicks().length;
	var validIndex = Math.min(index, length - 1);
	var lineValue = scale.getPixelForTick(validIndex);
	var start = scale._startPixel;
	var end = scale._endPixel;
	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
	var offset;

	if (offsetGridLines) {
		if (length === 1) {
			offset = Math.max(lineValue - start, end - lineValue);
		} else if (index === 0) {
			offset = (scale.getPixelForTick(1) - lineValue) / 2;
		} else {
			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
		}
		lineValue += validIndex < index ? offset : -offset;

		// Return undefined if the pixel is out of the range
		if (lineValue < start - epsilon || lineValue > end + epsilon) {
			return;
		}
	}
	return lineValue;
}

function garbageCollect(caches, length) {
	helpers$1.each(caches, function(cache) {
		var gc = cache.gc;
		var gcLen = gc.length / 2;
		var i;
		if (gcLen > length) {
			for (i = 0; i < gcLen; ++i) {
				delete cache.data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
	});
}

/**
 * Returns {width, height, offset} objects for the first, last, widest, highest tick
 * labels where offset indicates the anchor point offset from the top in pixels.
 */
function computeLabelSizes(ctx, tickFonts, ticks, caches) {
	var length = ticks.length;
	var widths = [];
	var heights = [];
	var offsets = [];
	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

	for (i = 0; i < length; ++i) {
		label = ticks[i].label;
		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
		ctx.font = fontString = tickFont.string;
		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
		lineHeight = tickFont.lineHeight;
		width = height = 0;
		// Undefined labels and arrays should not be measured
		if (!isNullOrUndef(label) && !isArray(label)) {
			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
			height = lineHeight;
		} else if (isArray(label)) {
			// if it is an array let's measure each element
			for (j = 0, jlen = label.length; j < jlen; ++j) {
				nestedLabel = label[j];
				// Undefined labels and arrays should not be measured
				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
					height += lineHeight;
				}
			}
		}
		widths.push(width);
		heights.push(height);
		offsets.push(lineHeight / 2);
	}
	garbageCollect(caches, length);

	widest = widths.indexOf(Math.max.apply(null, widths));
	highest = heights.indexOf(Math.max.apply(null, heights));

	function valueAt(idx) {
		return {
			width: widths[idx] || 0,
			height: heights[idx] || 0,
			offset: offsets[idx] || 0
		};
	}

	return {
		first: valueAt(0),
		last: valueAt(length - 1),
		widest: valueAt(widest),
		highest: valueAt(highest)
	};
}

function getTickMarkLength(options) {
	return options.drawTicks ? options.tickMarkLength : 0;
}

function getScaleLabelHeight(options) {
	var font, padding;

	if (!options.display) {
		return 0;
	}

	font = helpers$1.options._parseFont(options);
	padding = helpers$1.options.toPadding(options.padding);

	return font.lineHeight + padding.height;
}

function parseFontOptions(options, nestedOpts) {
	return helpers$1.extend(helpers$1.options._parseFont({
		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
	}), {
		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
	});
}

function parseTickFontOptions(options) {
	var minor = parseFontOptions(options, options.minor);
	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

	return {minor: minor, major: major};
}

function nonSkipped(ticksToFilter) {
	var filtered = [];
	var item, index, len;
	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
		item = ticksToFilter[index];
		if (typeof item._index !== 'undefined') {
			filtered.push(item);
		}
	}
	return filtered;
}

function getEvenSpacing(arr) {
	var len = arr.length;
	var i, diff;

	if (len < 2) {
		return false;
	}

	for (diff = arr[0], i = 1; i < len; ++i) {
		if (arr[i] - arr[i - 1] !== diff) {
			return false;
		}
	}
	return diff;
}

function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
	var evenMajorSpacing = getEvenSpacing(majorIndices);
	var spacing = (ticks.length - 1) / ticksLimit;
	var factors, factor, i, ilen;

	// If the major ticks are evenly spaced apart, place the minor ticks
	// so that they divide the major ticks into even chunks
	if (!evenMajorSpacing) {
		return Math.max(spacing, 1);
	}

	factors = helpers$1.math._factorize(evenMajorSpacing);
	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
		factor = factors[i];
		if (factor > spacing) {
			return factor;
		}
	}
	return Math.max(spacing, 1);
}

function getMajorIndices(ticks) {
	var result = [];
	var i, ilen;
	for (i = 0, ilen = ticks.length; i < ilen; i++) {
		if (ticks[i].major) {
			result.push(i);
		}
	}
	return result;
}

function skipMajors(ticks, majorIndices, spacing) {
	var count = 0;
	var next = majorIndices[0];
	var i, tick;

	spacing = Math.ceil(spacing);
	for (i = 0; i < ticks.length; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = majorIndices[count * spacing];
		} else {
			delete tick.label;
		}
	}
}

function skip(ticks, spacing, majorStart, majorEnd) {
	var start = valueOrDefault$a(majorStart, 0);
	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
	var count = 0;
	var length, i, tick, next;

	spacing = Math.ceil(spacing);
	if (majorEnd) {
		length = majorEnd - majorStart;
		spacing = length / Math.floor(length / spacing);
	}

	next = start;

	while (next < 0) {
		count++;
		next = Math.round(start + count * spacing);
	}

	for (i = Math.max(start, 0); i < end; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = Math.round(start + count * spacing);
		} else {
			delete tick.label;
		}
	}
}

var Scale = core_element.extend({

	zeroLineIndex: 0,

	/**
	 * Get the padding needed for the scale
	 * @method getPadding
	 * @private
	 * @returns {Padding} the necessary padding
	 */
	getPadding: function() {
		var me = this;
		return {
			left: me.paddingLeft || 0,
			top: me.paddingTop || 0,
			right: me.paddingRight || 0,
			bottom: me.paddingBottom || 0
		};
	},

	/**
	 * Returns the scale tick objects ({label, major})
	 * @since 2.7
	 */
	getTicks: function() {
		return this._ticks;
	},

	/**
	* @private
	*/
	_getLabels: function() {
		var data = this.chart.data;
		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	},

	// These methods are ordered by lifecyle. Utilities then follow.
	// Any function defined here is inherited by all scale types.
	// Any function can be extended by the scale type

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.Scale.mergeTicksOptions
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	mergeTicksOptions: function() {
		// noop
	},

	beforeUpdate: function() {
		helpers$1.callback(this.options.beforeUpdate, [this]);
	},

	/**
	 * @param {number} maxWidth - the max width in pixels
	 * @param {number} maxHeight - the max height in pixels
	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
	 *   This space comes from two sources:
	 *     - padding - space that's required to show the labels at the edges of the scale
	 *     - thickness of scales or legends in another orientation
	 */
	update: function(maxWidth, maxHeight, margins) {
		var me = this;
		var tickOpts = me.options.ticks;
		var sampleSize = tickOpts.sampleSize;
		var i, ilen, labels, ticks, samplingEnabled;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = helpers$1.extend({
			left: 0,
			right: 0,
			top: 0,
			bottom: 0
		}, margins);

		me._ticks = null;
		me.ticks = null;
		me._labelSizes = null;
		me._maxLabelLines = 0;
		me.longestLabelWidth = 0;
		me.longestTextCache = me.longestTextCache || {};
		me._gridLineItems = null;
		me._labelItems = null;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();

		// Data min/max
		me.beforeDataLimits();
		me.determineDataLimits();
		me.afterDataLimits();

		// Ticks - `this.ticks` is now DEPRECATED!
		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
		// and must not be accessed directly from outside this class. `this.ticks` being
		// around for long time and not marked as private, we can't change its structure
		// without unexpected breaking changes. If you need to access the scale ticks,
		// use scale.getTicks() instead.

		me.beforeBuildTicks();

		// New implementations should return an array of objects but for BACKWARD COMPAT,
		// we still support no return (`this.ticks` internally set by calling this method).
		ticks = me.buildTicks() || [];

		// Allow modification of ticks in callback.
		ticks = me.afterBuildTicks(ticks) || ticks;

		// Ensure ticks contains ticks in new tick format
		if ((!ticks || !ticks.length) && me.ticks) {
			ticks = [];
			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
				ticks.push({
					value: me.ticks[i],
					major: false
				});
			}
		}

		me._ticks = ticks;

		// Compute tick rotation and fit using a sampled subset of labels
		// We generally don't need to compute the size of every single label for determining scale size
		samplingEnabled = sampleSize < ticks.length;
		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

		// _configure is called twice, once here, once from core.controller.updateLayout.
		// Here we haven't been positioned yet, but dimensions are correct.
		// Variables set in _configure are needed for calculateTickRotation, and
		// it's ok that coordinates are not correct there, only dimensions matter.
		me._configure();

		// Tick Rotation
		me.beforeCalculateTickRotation();
		me.calculateTickRotation();
		me.afterCalculateTickRotation();

		me.beforeFit();
		me.fit();
		me.afterFit();

		// Auto-skip
		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

		if (samplingEnabled) {
			// Generate labels using all non-skipped ticks
			labels = me._convertTicksToLabels(me._ticksToDraw);
		}

		me.ticks = labels;   // BACKWARD COMPATIBILITY

		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

		me.afterUpdate();

		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
		// make maxWidth and maxHeight private
		return me.minSize;
	},

	/**
	 * @private
	 */
	_configure: function() {
		var me = this;
		var reversePixels = me.options.ticks.reverse;
		var startPixel, endPixel;

		if (me.isHorizontal()) {
			startPixel = me.left;
			endPixel = me.right;
		} else {
			startPixel = me.top;
			endPixel = me.bottom;
			// by default vertical scales are from bottom to top, so pixels are reversed
			reversePixels = !reversePixels;
		}
		me._startPixel = startPixel;
		me._endPixel = endPixel;
		me._reversePixels = reversePixels;
		me._length = endPixel - startPixel;
	},

	afterUpdate: function() {
		helpers$1.callback(this.options.afterUpdate, [this]);
	},

	//

	beforeSetDimensions: function() {
		helpers$1.callback(this.options.beforeSetDimensions, [this]);
	},
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;
	},
	afterSetDimensions: function() {
		helpers$1.callback(this.options.afterSetDimensions, [this]);
	},

	// Data limits
	beforeDataLimits: function() {
		helpers$1.callback(this.options.beforeDataLimits, [this]);
	},
	determineDataLimits: helpers$1.noop,
	afterDataLimits: function() {
		helpers$1.callback(this.options.afterDataLimits, [this]);
	},

	//
	beforeBuildTicks: function() {
		helpers$1.callback(this.options.beforeBuildTicks, [this]);
	},
	buildTicks: helpers$1.noop,
	afterBuildTicks: function(ticks) {
		var me = this;
		// ticks is empty for old axis implementations here
		if (isArray(ticks) && ticks.length) {
			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
		}
		// Support old implementations (that modified `this.ticks` directly in buildTicks)
		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
		return ticks;
	},

	beforeTickToLabelConversion: function() {
		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
	},
	convertTicksToLabels: function() {
		var me = this;
		// Convert ticks to strings
		var tickOpts = me.options.ticks;
		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
	},
	afterTickToLabelConversion: function() {
		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
	},

	//

	beforeCalculateTickRotation: function() {
		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
	},
	calculateTickRotation: function() {
		var me = this;
		var options = me.options;
		var tickOpts = options.ticks;
		var numTicks = me.getTicks().length;
		var minRotation = tickOpts.minRotation || 0;
		var maxRotation = tickOpts.maxRotation;
		var labelRotation = minRotation;
		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
			me.labelRotation = minRotation;
			return;
		}

		labelSizes = me._getLabelSizes();
		maxLabelWidth = labelSizes.widest.width;
		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

		// Estimate the width of each grid based on the canvas width, the maximum
		// label width and the number of tick intervals
		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

		// Allow 3 pixels x2 padding either side for label readability
		if (maxLabelWidth + 6 > tickWidth) {
			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
			labelRotation = helpers$1.toDegrees(Math.min(
				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
			));
			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
		}

		me.labelRotation = labelRotation;
	},
	afterCalculateTickRotation: function() {
		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
	},

	//

	beforeFit: function() {
		helpers$1.callback(this.options.beforeFit, [this]);
	},
	fit: function() {
		var me = this;
		// Reset
		var minSize = me.minSize = {
			width: 0,
			height: 0
		};

		var chart = me.chart;
		var opts = me.options;
		var tickOpts = opts.ticks;
		var scaleLabelOpts = opts.scaleLabel;
		var gridLineOpts = opts.gridLines;
		var display = me._isVisible();
		var isBottom = opts.position === 'bottom';
		var isHorizontal = me.isHorizontal();

		// Width
		if (isHorizontal) {
			minSize.width = me.maxWidth;
		} else if (display) {
			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// height
		if (!isHorizontal) {
			minSize.height = me.maxHeight; // fill all the height
		} else if (display) {
			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// Don't bother fitting the ticks if we are not showing the labels
		if (tickOpts.display && display) {
			var tickFonts = parseTickFontOptions(tickOpts);
			var labelSizes = me._getLabelSizes();
			var firstLabelSize = labelSizes.first;
			var lastLabelSize = labelSizes.last;
			var widestLabelSize = labelSizes.widest;
			var highestLabelSize = labelSizes.highest;
			var lineSpace = tickFonts.minor.lineHeight * 0.4;
			var tickPadding = tickOpts.padding;

			if (isHorizontal) {
				// A horizontal axis is more constrained by the height.
				var isRotated = me.labelRotation !== 0;
				var angleRadians = helpers$1.toRadians(me.labelRotation);
				var cosRotation = Math.cos(angleRadians);
				var sinRotation = Math.sin(angleRadians);

				var labelHeight = sinRotation * widestLabelSize.width
					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
					+ (isRotated ? 0 : lineSpace); // padding

				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

				var offsetLeft = me.getPixelForTick(0) - me.left;
				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
				var paddingLeft, paddingRight;

				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
				// which means that the right padding is dominated by the font height
				if (isRotated) {
					paddingLeft = isBottom ?
						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
					paddingRight = isBottom ?
						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
				} else {
					paddingLeft = firstLabelSize.width / 2;
					paddingRight = lastLabelSize.width / 2;
				}

				// Adjust padding taking into account changes in offsets
				// and add 3 px to move away from canvas edges
				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
			} else {
				// A vertical axis is more constrained by the width. Labels are the
				// dominant factor here, so get that length first and account for padding
				var labelWidth = tickOpts.mirror ? 0 :
					// use lineSpace for consistency with horizontal axis
					// tickPadding is not implemented for horizontal
					widestLabelSize.width + tickPadding + lineSpace;

				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

				me.paddingTop = firstLabelSize.height / 2;
				me.paddingBottom = lastLabelSize.height / 2;
			}
		}

		me.handleMargins();

		if (isHorizontal) {
			me.width = me._length = chart.width - me.margins.left - me.margins.right;
			me.height = minSize.height;
		} else {
			me.width = minSize.width;
			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
		}
	},

	/**
	 * Handle margins and padding interactions
	 * @private
	 */
	handleMargins: function() {
		var me = this;
		if (me.margins) {
			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
			me.margins.top = Math.max(me.paddingTop, me.margins.top);
			me.margins.right = Math.max(me.paddingRight, me.margins.right);
			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
		}
	},

	afterFit: function() {
		helpers$1.callback(this.options.afterFit, [this]);
	},

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},
	isFullWidth: function() {
		return this.options.fullWidth;
	},

	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
	getRightValue: function(rawValue) {
		// Null and undefined values first
		if (isNullOrUndef(rawValue)) {
			return NaN;
		}
		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
			return NaN;
		}

		// If it is in fact an object, dive in one more level
		if (rawValue) {
			if (this.isHorizontal()) {
				if (rawValue.x !== undefined) {
					return this.getRightValue(rawValue.x);
				}
			} else if (rawValue.y !== undefined) {
				return this.getRightValue(rawValue.y);
			}
		}

		// Value is good, return it
		return rawValue;
	},

	_convertTicksToLabels: function(ticks) {
		var me = this;
		var labels, i, ilen;

		me.ticks = ticks.map(function(tick) {
			return tick.value;
		});

		me.beforeTickToLabelConversion();

		// New implementations should return the formatted tick labels but for BACKWARD
		// COMPAT, we still support no return (`this.ticks` internally changed by calling
		// this method and supposed to contain only string values).
		labels = me.convertTicksToLabels(ticks) || me.ticks;

		me.afterTickToLabelConversion();

		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			ticks[i].label = labels[i];
		}

		return labels;
	},

	/**
	 * @private
	 */
	_getLabelSizes: function() {
		var me = this;
		var labelSizes = me._labelSizes;

		if (!labelSizes) {
			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
			me.longestLabelWidth = labelSizes.widest.width;
		}

		return labelSizes;
	},

	/**
	 * @private
	 */
	_parseValue: function(value) {
		var start, end, min, max;

		if (isArray(value)) {
			start = +this.getRightValue(value[0]);
			end = +this.getRightValue(value[1]);
			min = Math.min(start, end);
			max = Math.max(start, end);
		} else {
			value = +this.getRightValue(value);
			start = undefined;
			end = value;
			min = value;
			max = value;
		}

		return {
			min: min,
			max: max,
			start: start,
			end: end
		};
	},

	/**
	* @private
	*/
	_getScaleLabel: function(rawValue) {
		var v = this._parseValue(rawValue);
		if (v.start !== undefined) {
			return '[' + v.start + ', ' + v.end + ']';
		}

		return +this.getRightValue(rawValue);
	},

	/**
	 * Used to get the value to display in the tooltip for the data at the given index
	 * @param index
	 * @param datasetIndex
	 */
	getLabelForIndex: helpers$1.noop,

	/**
	 * Returns the location of the given data point. Value can either be an index or a numerical value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param value
	 * @param index
	 * @param datasetIndex
	 */
	getPixelForValue: helpers$1.noop,

	/**
	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param pixel
	 */
	getValueForPixel: helpers$1.noop,

	/**
	 * Returns the location of the tick at the given index
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForTick: function(index) {
		var me = this;
		var offset = me.options.offset;
		var numTicks = me._ticks.length;
		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

		return index < 0 || index > numTicks - 1
			? null
			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
	},

	/**
	 * Utility for getting the pixel location of a percentage of scale
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForDecimal: function(decimal) {
		var me = this;

		if (me._reversePixels) {
			decimal = 1 - decimal;
		}

		return me._startPixel + decimal * me._length;
	},

	getDecimalForPixel: function(pixel) {
		var decimal = (pixel - this._startPixel) / this._length;
		return this._reversePixels ? 1 - decimal : decimal;
	},

	/**
	 * Returns the pixel for the minimum chart value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getBasePixel: function() {
		return this.getPixelForValue(this.getBaseValue());
	},

	getBaseValue: function() {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0;
	},

	/**
	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
	 * @private
	 */
	_autoSkip: function(ticks) {
		var me = this;
		var tickOpts = me.options.ticks;
		var axisLength = me._length;
		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
		var numMajorIndices = majorIndices.length;
		var first = majorIndices[0];
		var last = majorIndices[numMajorIndices - 1];
		var i, ilen, spacing, avgMajorSpacing;

		// If there are too many major ticks to display them all
		if (numMajorIndices > ticksLimit) {
			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
			return nonSkipped(ticks);
		}

		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

		if (numMajorIndices > 0) {
			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
			}
			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
			return nonSkipped(ticks);
		}
		skip(ticks, spacing);
		return nonSkipped(ticks);
	},

	/**
	 * @private
	 */
	_tickSize: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		// Calculate space needed by label in axis direction.
		var rot = helpers$1.toRadians(me.labelRotation);
		var cos = Math.abs(Math.cos(rot));
		var sin = Math.abs(Math.sin(rot));

		var labelSizes = me._getLabelSizes();
		var padding = optionTicks.autoSkipPadding || 0;
		var w = labelSizes ? labelSizes.widest.width + padding : 0;
		var h = labelSizes ? labelSizes.highest.height + padding : 0;

		// Calculate space needed for 1 tick in axis direction.
		return me.isHorizontal()
			? h * cos > w * sin ? w / cos : h / sin
			: h * sin < w * cos ? h / cos : w / sin;
	},

	/**
	 * @private
	 */
	_isVisible: function() {
		var me = this;
		var chart = me.chart;
		var display = me.options.display;
		var i, ilen, meta;

		if (display !== 'auto') {
			return !!display;
		}

		// When 'auto', the scale is visible if at least one associated dataset is visible.
		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				meta = chart.getDatasetMeta(i);
				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
					return true;
				}
			}
		}

		return false;
	},

	/**
	 * @private
	 */
	_computeGridLineItems: function(chartArea) {
		var me = this;
		var chart = me.chart;
		var options = me.options;
		var gridLines = options.gridLines;
		var position = options.position;
		var offsetGridLines = gridLines.offsetGridLines;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

		var tl = getTickMarkLength(gridLines);
		var items = [];
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var axisHalfWidth = axisWidth / 2;
		var alignPixel = helpers$1._alignPixel;
		var alignBorderValue = function(pixel) {
			return alignPixel(chart, pixel, axisWidth);
		};
		var borderValue, i, tick, lineValue, alignedLineValue;
		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

		if (position === 'top') {
			borderValue = alignBorderValue(me.bottom);
			ty1 = me.bottom - tl;
			ty2 = borderValue - axisHalfWidth;
			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
			y2 = chartArea.bottom;
		} else if (position === 'bottom') {
			borderValue = alignBorderValue(me.top);
			y1 = chartArea.top;
			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
			ty1 = borderValue + axisHalfWidth;
			ty2 = me.top + tl;
		} else if (position === 'left') {
			borderValue = alignBorderValue(me.right);
			tx1 = me.right - tl;
			tx2 = borderValue - axisHalfWidth;
			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
			x2 = chartArea.right;
		} else {
			borderValue = alignBorderValue(me.left);
			x1 = chartArea.left;
			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
			tx1 = borderValue + axisHalfWidth;
			tx2 = me.left + tl;
		}

		for (i = 0; i < ticksLength; ++i) {
			tick = ticks[i] || {};

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(tick.label) && i < ticks.length) {
				continue;
			}

			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
				// Draw the first index specially
				lineWidth = gridLines.zeroLineWidth;
				lineColor = gridLines.zeroLineColor;
				borderDash = gridLines.zeroLineBorderDash || [];
				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
			} else {
				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
				borderDash = gridLines.borderDash || [];
				borderDashOffset = gridLines.borderDashOffset || 0.0;
			}

			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

			// Skip if the pixel is out of the range
			if (lineValue === undefined) {
				continue;
			}

			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

			if (isHorizontal) {
				tx1 = tx2 = x1 = x2 = alignedLineValue;
			} else {
				ty1 = ty2 = y1 = y2 = alignedLineValue;
			}

			items.push({
				tx1: tx1,
				ty1: ty1,
				tx2: tx2,
				ty2: ty2,
				x1: x1,
				y1: y1,
				x2: x2,
				y2: y2,
				width: lineWidth,
				color: lineColor,
				borderDash: borderDash,
				borderDashOffset: borderDashOffset,
			});
		}

		items.ticksLength = ticksLength;
		items.borderValue = borderValue;

		return items;
	},

	/**
	 * @private
	 */
	_computeLabelItems: function() {
		var me = this;
		var options = me.options;
		var optionTicks = options.ticks;
		var position = options.position;
		var isMirrored = optionTicks.mirror;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var fonts = parseTickFontOptions(optionTicks);
		var tickPadding = optionTicks.padding;
		var tl = getTickMarkLength(options.gridLines);
		var rotation = -helpers$1.toRadians(me.labelRotation);
		var items = [];
		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

		if (position === 'top') {
			y = me.bottom - tl - tickPadding;
			textAlign = !rotation ? 'center' : 'left';
		} else if (position === 'bottom') {
			y = me.top + tl + tickPadding;
			textAlign = !rotation ? 'center' : 'right';
		} else if (position === 'left') {
			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
			textAlign = isMirrored ? 'left' : 'right';
		} else {
			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
			textAlign = isMirrored ? 'right' : 'left';
		}

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			tick = ticks[i];
			label = tick.label;

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(label)) {
				continue;
			}

			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
			font = tick.major ? fonts.major : fonts.minor;
			lineHeight = font.lineHeight;
			lineCount = isArray(label) ? label.length : 1;

			if (isHorizontal) {
				x = pixel;
				textOffset = position === 'top'
					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
					: (!rotation ? 0.5 : 0) * lineHeight;
			} else {
				y = pixel;
				textOffset = (1 - lineCount) * lineHeight / 2;
			}

			items.push({
				x: x,
				y: y,
				rotation: rotation,
				label: label,
				font: font,
				textOffset: textOffset,
				textAlign: textAlign
			});
		}

		return items;
	},

	/**
	 * @private
	 */
	_drawGrid: function(chartArea) {
		var me = this;
		var gridLines = me.options.gridLines;

		if (!gridLines.display) {
			return;
		}

		var ctx = me.ctx;
		var chart = me.chart;
		var alignPixel = helpers$1._alignPixel;
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
		var width, color, i, ilen, item;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			width = item.width;
			color = item.color;

			if (width && color) {
				ctx.save();
				ctx.lineWidth = width;
				ctx.strokeStyle = color;
				if (ctx.setLineDash) {
					ctx.setLineDash(item.borderDash);
					ctx.lineDashOffset = item.borderDashOffset;
				}

				ctx.beginPath();

				if (gridLines.drawTicks) {
					ctx.moveTo(item.tx1, item.ty1);
					ctx.lineTo(item.tx2, item.ty2);
				}

				if (gridLines.drawOnChartArea) {
					ctx.moveTo(item.x1, item.y1);
					ctx.lineTo(item.x2, item.y2);
				}

				ctx.stroke();
				ctx.restore();
			}
		}

		if (axisWidth) {
			// Draw the line at the edge of the axis
			var firstLineWidth = axisWidth;
			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
			var borderValue = items.borderValue;
			var x1, x2, y1, y2;

			if (me.isHorizontal()) {
				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
				y1 = y2 = borderValue;
			} else {
				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
				x1 = x2 = borderValue;
			}

			ctx.lineWidth = axisWidth;
			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
			ctx.beginPath();
			ctx.moveTo(x1, y1);
			ctx.lineTo(x2, y2);
			ctx.stroke();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		if (!optionTicks.display) {
			return;
		}

		var ctx = me.ctx;
		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
		var i, j, ilen, jlen, item, tickFont, label, y;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			tickFont = item.font;

			// Make sure we draw text in the correct color and font
			ctx.save();
			ctx.translate(item.x, item.y);
			ctx.rotate(item.rotation);
			ctx.font = tickFont.string;
			ctx.fillStyle = tickFont.color;
			ctx.textBaseline = 'middle';
			ctx.textAlign = item.textAlign;

			label = item.label;
			y = item.textOffset;
			if (isArray(label)) {
				for (j = 0, jlen = label.length; j < jlen; ++j) {
					// We just make sure the multiline element is a string here..
					ctx.fillText('' + label[j], 0, y);
					y += tickFont.lineHeight;
				}
			} else {
				ctx.fillText(label, 0, y);
			}
			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawTitle: function() {
		var me = this;
		var ctx = me.ctx;
		var options = me.options;
		var scaleLabel = options.scaleLabel;

		if (!scaleLabel.display) {
			return;
		}

		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
		var halfLineHeight = scaleLabelFont.lineHeight / 2;
		var position = options.position;
		var rotation = 0;
		var scaleLabelX, scaleLabelY;

		if (me.isHorizontal()) {
			scaleLabelX = me.left + me.width / 2; // midpoint of the width
			scaleLabelY = position === 'bottom'
				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
				: me.top + halfLineHeight + scaleLabelPadding.top;
		} else {
			var isLeft = position === 'left';
			scaleLabelX = isLeft
				? me.left + halfLineHeight + scaleLabelPadding.top
				: me.right - halfLineHeight - scaleLabelPadding.top;
			scaleLabelY = me.top + me.height / 2;
			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
		}

		ctx.save();
		ctx.translate(scaleLabelX, scaleLabelY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';
		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
		ctx.font = scaleLabelFont.string;
		ctx.fillText(scaleLabel.labelString, 0, 0);
		ctx.restore();
	},

	draw: function(chartArea) {
		var me = this;

		if (!me._isVisible()) {
			return;
		}

		me._drawGrid(chartArea);
		me._drawTitle();
		me._drawLabels();
	},

	/**
	 * @private
	 */
	_layers: function() {
		var me = this;
		var opts = me.options;
		var tz = opts.ticks && opts.ticks.z || 0;
		var gz = opts.gridLines && opts.gridLines.z || 0;

		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
			// backward compatibility: draw has been overridden by custom scale
			return [{
				z: tz,
				draw: function() {
					me.draw.apply(me, arguments);
				}
			}];
		}

		return [{
			z: gz,
			draw: function() {
				me._drawGrid.apply(me, arguments);
				me._drawTitle.apply(me, arguments);
			}
		}, {
			z: tz,
			draw: function() {
				me._drawLabels.apply(me, arguments);
			}
		}];
	},

	/**
	 * @private
	 */
	_getMatchingVisibleMetas: function(type) {
		var me = this;
		var isHorizontal = me.isHorizontal();
		return me.chart._getSortedVisibleDatasetMetas()
			.filter(function(meta) {
				return (!type || meta.type === type)
					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
			});
	}
});

Scale.prototype._draw = Scale.prototype.draw;

var core_scale = Scale;

var isNullOrUndef$1 = helpers$1.isNullOrUndef;

var defaultConfig = {
	position: 'bottom'
};

var scale_category = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var labels = me._getLabels();
		var ticksOpts = me.options.ticks;
		var min = ticksOpts.min;
		var max = ticksOpts.max;
		var minIndex = 0;
		var maxIndex = labels.length - 1;
		var findIndex;

		if (min !== undefined) {
			// user specified min value
			findIndex = labels.indexOf(min);
			if (findIndex >= 0) {
				minIndex = findIndex;
			}
		}

		if (max !== undefined) {
			// user specified max value
			findIndex = labels.indexOf(max);
			if (findIndex >= 0) {
				maxIndex = findIndex;
			}
		}

		me.minIndex = minIndex;
		me.maxIndex = maxIndex;
		me.min = labels[minIndex];
		me.max = labels[maxIndex];
	},

	buildTicks: function() {
		var me = this;
		var labels = me._getLabels();
		var minIndex = me.minIndex;
		var maxIndex = me.maxIndex;

		// If we are viewing some subset of labels, slice the original array
		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var chart = me.chart;

		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
		}

		return me._getLabels()[index];
	},

	_configure: function() {
		var me = this;
		var offset = me.options.offset;
		var ticks = me.ticks;

		core_scale.prototype._configure.call(me);

		if (!me.isHorizontal()) {
			// For backward compatibility, vertical category scale reverse is inverted.
			me._reversePixels = !me._reversePixels;
		}

		if (!ticks) {
			return;
		}

		me._startValue = me.minIndex - (offset ? 0.5 : 0);
		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
	},

	// Used to get data value locations.  Value can either be an index or a numerical value
	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var valueCategory, labels, idx;

		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
			value = me.chart.data.datasets[datasetIndex].data[index];
		}

		// If value is a data object, then index is the index in the data array,
		// not the index of the scale. We need to change that.
		if (!isNullOrUndef$1(value)) {
			valueCategory = me.isHorizontal() ? value.x : value.y;
		}
		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
			labels = me._getLabels();
			value = helpers$1.valueOrDefault(valueCategory, value);
			idx = labels.indexOf(value);
			index = idx !== -1 ? idx : index;
			if (isNaN(index)) {
				index = value;
			}
		}
		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
	},

	getPixelForTick: function(index) {
		var ticks = this.ticks;
		return index < 0 || index > ticks.length - 1
			? null
			: this.getPixelForValue(ticks[index], index + this.minIndex);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
		return Math.min(Math.max(value, 0), me.ticks.length - 1);
	},

	getBasePixel: function() {
		return this.bottom;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults = defaultConfig;
scale_category._defaults = _defaults;

var noop = helpers$1.noop;
var isNullOrUndef$2 = helpers$1.isNullOrUndef;

/**
 * Generate a set of linear ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks(generationOptions, dataRange) {
	var ticks = [];
	// To get a "nice" value for the tick spacing, we will use the appropriately named
	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
	// for details.

	var MIN_SPACING = 1e-14;
	var stepSize = generationOptions.stepSize;
	var unit = stepSize || 1;
	var maxNumSpaces = generationOptions.maxTicks - 1;
	var min = generationOptions.min;
	var max = generationOptions.max;
	var precision = generationOptions.precision;
	var rmin = dataRange.min;
	var rmax = dataRange.max;
	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
	var factor, niceMin, niceMax, numSpaces;

	// Beyond MIN_SPACING floating point numbers being to lose precision
	// such that we can't do the math necessary to generate ticks
	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
		return [rmin, rmax];
	}

	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	if (numSpaces > maxNumSpaces) {
		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
	}

	if (stepSize || isNullOrUndef$2(precision)) {
		// If a precision is not specified, calculate factor based on spacing
		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
	} else {
		// If the user specified a precision, round to that number of decimal places
		factor = Math.pow(10, precision);
		spacing = Math.ceil(spacing * factor) / factor;
	}

	niceMin = Math.floor(rmin / spacing) * spacing;
	niceMax = Math.ceil(rmax / spacing) * spacing;

	// If min, max and stepSize is set and they make an evenly spaced scale use it.
	if (stepSize) {
		// If very close to our whole number, use it.
		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
			niceMin = min;
		}
		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
			niceMax = max;
		}
	}

	numSpaces = (niceMax - niceMin) / spacing;
	// If very close to our rounded value, use it.
	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
		numSpaces = Math.round(numSpaces);
	} else {
		numSpaces = Math.ceil(numSpaces);
	}

	niceMin = Math.round(niceMin * factor) / factor;
	niceMax = Math.round(niceMax * factor) / factor;
	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
	for (var j = 1; j < numSpaces; ++j) {
		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
	}
	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

	return ticks;
}

var scale_linearbase = core_scale.extend({
	getRightValue: function(value) {
		if (typeof value === 'string') {
			return +value;
		}
		return core_scale.prototype.getRightValue.call(this, value);
	},

	handleTickRangeOptions: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
		// do nothing since that would make the chart weird. If the user really wants a weird chart
		// axis, they can manually override it
		if (tickOpts.beginAtZero) {
			var minSign = helpers$1.sign(me.min);
			var maxSign = helpers$1.sign(me.max);

			if (minSign < 0 && maxSign < 0) {
				// move the top up to 0
				me.max = 0;
			} else if (minSign > 0 && maxSign > 0) {
				// move the bottom down to 0
				me.min = 0;
			}
		}

		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

		if (tickOpts.min !== undefined) {
			me.min = tickOpts.min;
		} else if (tickOpts.suggestedMin !== undefined) {
			if (me.min === null) {
				me.min = tickOpts.suggestedMin;
			} else {
				me.min = Math.min(me.min, tickOpts.suggestedMin);
			}
		}

		if (tickOpts.max !== undefined) {
			me.max = tickOpts.max;
		} else if (tickOpts.suggestedMax !== undefined) {
			if (me.max === null) {
				me.max = tickOpts.suggestedMax;
			} else {
				me.max = Math.max(me.max, tickOpts.suggestedMax);
			}
		}

		if (setMin !== setMax) {
			// We set the min or the max but not both.
			// So ensure that our range is good
			// Inverted or 0 length range can happen when
			// ticks.min is set, and no datasets are visible
			if (me.min >= me.max) {
				if (setMin) {
					me.max = me.min + 1;
				} else {
					me.min = me.max - 1;
				}
			}
		}

		if (me.min === me.max) {
			me.max++;

			if (!tickOpts.beginAtZero) {
				me.min--;
			}
		}
	},

	getTickLimit: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var stepSize = tickOpts.stepSize;
		var maxTicksLimit = tickOpts.maxTicksLimit;
		var maxTicks;

		if (stepSize) {
			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
		} else {
			maxTicks = me._computeTickLimit();
			maxTicksLimit = maxTicksLimit || 11;
		}

		if (maxTicksLimit) {
			maxTicks = Math.min(maxTicksLimit, maxTicks);
		}

		return maxTicks;
	},

	_computeTickLimit: function() {
		return Number.POSITIVE_INFINITY;
	},

	handleDirectionalChanges: noop,

	buildTicks: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// Figure out what the max number of ticks we can support it is based on the size of
		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
		// the graph. Make sure we always have at least 2 ticks
		var maxTicks = me.getTickLimit();
		maxTicks = Math.max(2, maxTicks);

		var numericGeneratorOptions = {
			maxTicks: maxTicks,
			min: tickOpts.min,
			max: tickOpts.max,
			precision: tickOpts.precision,
			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
		};
		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

		me.handleDirectionalChanges();

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			ticks.reverse();

			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
	},

	convertTicksToLabels: function() {
		var me = this;
		me.ticksAsNumbers = me.ticks.slice();
		me.zeroLineIndex = me.ticks.indexOf(0);

		core_scale.prototype.convertTicksToLabels.call(me);
	},

	_configure: function() {
		var me = this;
		var ticks = me.getTicks();
		var start = me.min;
		var end = me.max;
		var offset;

		core_scale.prototype._configure.call(me);

		if (me.options.offset && ticks.length) {
			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
			start -= offset;
			end += offset;
		}
		me._startValue = start;
		me._endValue = end;
		me._valueRange = end - start;
	}
});

var defaultConfig$1 = {
	position: 'left',
	ticks: {
		callback: core_ticks.formatters.linear
	}
};

var DEFAULT_MIN = 0;
var DEFAULT_MAX = 1;

function getOrCreateStack(stacks, stacked, meta) {
	var key = [
		meta.type,
		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
		stacked === undefined && meta.stack === undefined ? meta.index : '',
		meta.stack
	].join('.');

	if (stacks[key] === undefined) {
		stacks[key] = {
			pos: [],
			neg: []
		};
	}

	return stacks[key];
}

function stackData(scale, stacks, meta, data) {
	var opts = scale.options;
	var stacked = opts.stacked;
	var stack = getOrCreateStack(stacks, stacked, meta);
	var pos = stack.pos;
	var neg = stack.neg;
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		pos[i] = pos[i] || 0;
		neg[i] = neg[i] || 0;

		if (opts.relativePoints) {
			pos[i] = 100;
		} else if (value.min < 0 || value.max < 0) {
			neg[i] += value.min;
		} else {
			pos[i] += value.max;
		}
	}
}

function updateMinMax(scale, meta, data) {
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		scale.min = Math.min(scale.min, value.min);
		scale.max = Math.max(scale.max, value.max);
	}
}

var scale_linear = scale_linearbase.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var metasets = me._getMatchingVisibleMetas();
		var hasStacks = opts.stacked;
		var stacks = {};
		var ilen = metasets.length;
		var i, meta, data, values;

		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;

		if (hasStacks === undefined) {
			for (i = 0; !hasStacks && i < ilen; ++i) {
				meta = metasets[i];
				hasStacks = meta.stack !== undefined;
			}
		}

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			data = datasets[meta.index].data;
			if (hasStacks) {
				stackData(me, stacks, meta, data);
			} else {
				updateMinMax(me, meta, data);
			}
		}

		helpers$1.each(stacks, function(stackValues) {
			values = stackValues.pos.concat(stackValues.neg);
			me.min = Math.min(me.min, helpers$1.min(values));
			me.max = Math.max(me.max, helpers$1.max(values));
		});

		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		var me = this;
		var tickFont;

		if (me.isHorizontal()) {
			return Math.ceil(me.width / 40);
		}
		tickFont = helpers$1.options._parseFont(me.options.ticks);
		return Math.ceil(me.height / tickFont.lineHeight);
	},

	// Called after the ticks are built. We need
	handleDirectionalChanges: function() {
		if (!this.isHorizontal()) {
			// We are in a vertical orientation. The top value is the highest. So reverse the array
			this.ticks.reverse();
		}
	},

	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	// Utils
	getPixelForValue: function(value) {
		var me = this;
		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
	},

	getValueForPixel: function(pixel) {
		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	},

	getPixelForTick: function(index) {
		var ticks = this.ticksAsNumbers;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$1 = defaultConfig$1;
scale_linear._defaults = _defaults$1;

var valueOrDefault$b = helpers$1.valueOrDefault;
var log10 = helpers$1.math.log10;

/**
 * Generate a set of logarithmic ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks$1(generationOptions, dataRange) {
	var ticks = [];

	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

	var endExp = Math.floor(log10(dataRange.max));
	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
	var exp, significand;

	if (tickVal === 0) {
		exp = Math.floor(log10(dataRange.minNotZero));
		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

		ticks.push(tickVal);
		tickVal = significand * Math.pow(10, exp);
	} else {
		exp = Math.floor(log10(tickVal));
		significand = Math.floor(tickVal / Math.pow(10, exp));
	}
	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

	do {
		ticks.push(tickVal);

		++significand;
		if (significand === 10) {
			significand = 1;
			++exp;
			precision = exp >= 0 ? 1 : precision;
		}

		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
	} while (exp < endExp || (exp === endExp && significand < endSignificand));

	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
	ticks.push(lastTick);

	return ticks;
}

var defaultConfig$2 = {
	position: 'left',

	// label settings
	ticks: {
		callback: core_ticks.formatters.logarithmic
	}
};

// TODO(v3): change this to positiveOrDefault
function nonNegativeOrDefault(value, defaultValue) {
	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
}

var scale_logarithmic = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var isHorizontal = me.isHorizontal();
		function IDMatches(meta) {
			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
		}
		var datasetIndex, meta, value, data, i, ilen;

		// Calculate Range
		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;
		me.minNotZero = Number.POSITIVE_INFINITY;

		var hasStacks = opts.stacked;
		if (hasStacks === undefined) {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
					meta.stack !== undefined) {
					hasStacks = true;
					break;
				}
			}
		}

		if (opts.stacked || hasStacks) {
			var valuesPerStack = {};

			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				var key = [
					meta.type,
					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
					meta.stack
				].join('.');

				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					if (valuesPerStack[key] === undefined) {
						valuesPerStack[key] = [];
					}

					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						var values = valuesPerStack[key];
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}
						values[i] = values[i] || 0;
						values[i] += value.max;
					}
				}
			}

			helpers$1.each(valuesPerStack, function(valuesForType) {
				if (valuesForType.length > 0) {
					var minVal = helpers$1.min(valuesForType);
					var maxVal = helpers$1.max(valuesForType);
					me.min = Math.min(me.min, minVal);
					me.max = Math.max(me.max, maxVal);
				}
			});

		} else {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}

						me.min = Math.min(value.min, me.min);
						me.max = Math.max(value.max, me.max);

						if (value.min !== 0) {
							me.minNotZero = Math.min(value.min, me.minNotZero);
						}
					}
				}
			}
		}

		me.min = helpers$1.isFinite(me.min) ? me.min : null;
		me.max = helpers$1.isFinite(me.max) ? me.max : null;
		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

		// Common base implementation to handle ticks.min, ticks.max
		this.handleTickRangeOptions();
	},

	handleTickRangeOptions: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var DEFAULT_MIN = 1;
		var DEFAULT_MAX = 10;

		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

		if (me.min === me.max) {
			if (me.min !== 0 && me.min !== null) {
				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
			} else {
				me.min = DEFAULT_MIN;
				me.max = DEFAULT_MAX;
			}
		}
		if (me.min === null) {
			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
		}
		if (me.max === null) {
			me.max = me.min !== 0
				? Math.pow(10, Math.floor(log10(me.min)) + 1)
				: DEFAULT_MAX;
		}
		if (me.minNotZero === null) {
			if (me.min > 0) {
				me.minNotZero = me.min;
			} else if (me.max < 1) {
				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
			} else {
				me.minNotZero = DEFAULT_MIN;
			}
		}
	},

	buildTicks: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var reverse = !me.isHorizontal();

		var generationOptions = {
			min: nonNegativeOrDefault(tickOpts.min),
			max: nonNegativeOrDefault(tickOpts.max)
		};
		var ticks = me.ticks = generateTicks$1(generationOptions, me);

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			reverse = !reverse;
			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
		if (reverse) {
			ticks.reverse();
		}
	},

	convertTicksToLabels: function() {
		this.tickValues = this.ticks.slice();

		core_scale.prototype.convertTicksToLabels.call(this);
	},

	// Get the correct tooltip label
	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	getPixelForTick: function(index) {
		var ticks = this.tickValues;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	},

	/**
	 * Returns the value of the first tick.
	 * @param {number} value - The minimum not zero value.
	 * @return {number} The first tick value.
	 * @private
	 */
	_getFirstTickValue: function(value) {
		var exp = Math.floor(log10(value));
		var significand = Math.floor(value / Math.pow(10, exp));

		return significand * Math.pow(10, exp);
	},

	_configure: function() {
		var me = this;
		var start = me.min;
		var offset = 0;

		core_scale.prototype._configure.call(me);

		if (start === 0) {
			start = me._getFirstTickValue(me.minNotZero);
			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
		}

		me._startValue = log10(start);
		me._valueOffset = offset;
		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
	},

	getPixelForValue: function(value) {
		var me = this;
		var decimal = 0;

		value = +me.getRightValue(value);

		if (value > me.min && value > 0) {
			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
		}
		return me.getPixelForDecimal(decimal);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var decimal = me.getDecimalForPixel(pixel);
		return decimal === 0 && me.min === 0
			? 0
			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$2 = defaultConfig$2;
scale_logarithmic._defaults = _defaults$2;

var valueOrDefault$c = helpers$1.valueOrDefault;
var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
var resolve$4 = helpers$1.options.resolve;

var defaultConfig$3 = {
	display: true,

	// Boolean - Whether to animate scaling the chart from the centre
	animate: true,
	position: 'chartArea',

	angleLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		borderDash: [],
		borderDashOffset: 0.0
	},

	gridLines: {
		circular: false
	},

	// label settings
	ticks: {
		// Boolean - Show a backdrop to the scale label
		showLabelBackdrop: true,

		// String - The colour of the label backdrop
		backdropColor: 'rgba(255,255,255,0.75)',

		// Number - The backdrop padding above & below the label in pixels
		backdropPaddingY: 2,

		// Number - The backdrop padding to the side of the label in pixels
		backdropPaddingX: 2,

		callback: core_ticks.formatters.linear
	},

	pointLabels: {
		// Boolean - if true, show point labels
		display: true,

		// Number - Point label font size in pixels
		fontSize: 10,

		// Function - Used to convert point labels
		callback: function(label) {
			return label;
		}
	}
};

function getTickBackdropHeight(opts) {
	var tickOpts = opts.ticks;

	if (tickOpts.display && opts.display) {
		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
	}
	return 0;
}

function measureLabelSize(ctx, lineHeight, label) {
	if (helpers$1.isArray(label)) {
		return {
			w: helpers$1.longestText(ctx, ctx.font, label),
			h: label.length * lineHeight
		};
	}

	return {
		w: ctx.measureText(label).width,
		h: lineHeight
	};
}

function determineLimits(angle, pos, size, min, max) {
	if (angle === min || angle === max) {
		return {
			start: pos - (size / 2),
			end: pos + (size / 2)
		};
	} else if (angle < min || angle > max) {
		return {
			start: pos - size,
			end: pos
		};
	}

	return {
		start: pos,
		end: pos + size
	};
}

/**
 * Helper function to fit a radial linear scale with point labels
 */
function fitWithPointLabels(scale) {

	// Right, this is really confusing and there is a lot of maths going on here
	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
	//
	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
	//
	// Solution:
	//
	// We assume the radius of the polygon is half the size of the canvas at first
	// at each index we check if the text overlaps.
	//
	// Where it does, we store that angle and that index.
	//
	// After finding the largest index and angle we calculate how much we need to remove
	// from the shape radius to move the point inwards by that x.
	//
	// We average the left and right distances to get the maximum shape radius that can fit in the box
	// along with labels.
	//
	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
	// on each side, removing that from the size, halving it and adding the left x protrusion width.
	//
	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
	// and position it in the most space efficient manner
	//
	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
	var furthestLimits = {
		l: 0,
		r: scale.width,
		t: 0,
		b: scale.height - scale.paddingTop
	};
	var furthestAngles = {};
	var i, textSize, pointPosition;

	scale.ctx.font = plFont.string;
	scale._pointLabelSizes = [];

	var valueCount = scale.chart.data.labels.length;
	for (i = 0; i < valueCount; i++) {
		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
		scale._pointLabelSizes[i] = textSize;

		// Add quarter circle to make degree 0 mean top of circle
		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians) % 360;
		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

		if (hLimits.start < furthestLimits.l) {
			furthestLimits.l = hLimits.start;
			furthestAngles.l = angleRadians;
		}

		if (hLimits.end > furthestLimits.r) {
			furthestLimits.r = hLimits.end;
			furthestAngles.r = angleRadians;
		}

		if (vLimits.start < furthestLimits.t) {
			furthestLimits.t = vLimits.start;
			furthestAngles.t = angleRadians;
		}

		if (vLimits.end > furthestLimits.b) {
			furthestLimits.b = vLimits.end;
			furthestAngles.b = angleRadians;
		}
	}

	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
}

function getTextAlignForAngle(angle) {
	if (angle === 0 || angle === 180) {
		return 'center';
	} else if (angle < 180) {
		return 'left';
	}

	return 'right';
}

function fillText(ctx, text, position, lineHeight) {
	var y = position.y + lineHeight / 2;
	var i, ilen;

	if (helpers$1.isArray(text)) {
		for (i = 0, ilen = text.length; i < ilen; ++i) {
			ctx.fillText(text[i], position.x, y);
			y += lineHeight;
		}
	} else {
		ctx.fillText(text, position.x, y);
	}
}

function adjustPointPositionForLabelHeight(angle, textSize, position) {
	if (angle === 90 || angle === 270) {
		position.y -= (textSize.h / 2);
	} else if (angle > 270 || angle < 90) {
		position.y -= textSize.h;
	}
}

function drawPointLabels(scale) {
	var ctx = scale.ctx;
	var opts = scale.options;
	var pointLabelOpts = opts.pointLabels;
	var tickBackdropHeight = getTickBackdropHeight(opts);
	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
	var plFont = helpers$1.options._parseFont(pointLabelOpts);

	ctx.save();

	ctx.font = plFont.string;
	ctx.textBaseline = 'middle';

	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
		// Extra pixels out for some label spacing
		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

		// Keep this in loop since we may support array properties here
		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
		ctx.fillStyle = pointLabelFontColor;

		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians);
		ctx.textAlign = getTextAlignForAngle(angle);
		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
	}
	ctx.restore();
}

function drawRadiusLine(scale, gridLineOpts, radius, index) {
	var ctx = scale.ctx;
	var circular = gridLineOpts.circular;
	var valueCount = scale.chart.data.labels.length;
	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
	var pointPosition;

	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
		return;
	}

	ctx.save();
	ctx.strokeStyle = lineColor;
	ctx.lineWidth = lineWidth;
	if (ctx.setLineDash) {
		ctx.setLineDash(gridLineOpts.borderDash || []);
		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
	}

	ctx.beginPath();
	if (circular) {
		// Draw circular arcs between the points
		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
	} else {
		// Draw straight lines connecting each index
		pointPosition = scale.getPointPosition(0, radius);
		ctx.moveTo(pointPosition.x, pointPosition.y);

		for (var i = 1; i < valueCount; i++) {
			pointPosition = scale.getPointPosition(i, radius);
			ctx.lineTo(pointPosition.x, pointPosition.y);
		}
	}
	ctx.closePath();
	ctx.stroke();
	ctx.restore();
}

function numberOrZero(param) {
	return helpers$1.isNumber(param) ? param : 0;
}

var scale_radialLinear = scale_linearbase.extend({
	setDimensions: function() {
		var me = this;

		// Set the unconstrained dimension before label rotation
		me.width = me.maxWidth;
		me.height = me.maxHeight;
		me.paddingTop = getTickBackdropHeight(me.options) / 2;
		me.xCenter = Math.floor(me.width / 2);
		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var min = Number.POSITIVE_INFINITY;
		var max = Number.NEGATIVE_INFINITY;

		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
			if (chart.isDatasetVisible(datasetIndex)) {
				var meta = chart.getDatasetMeta(datasetIndex);

				helpers$1.each(dataset.data, function(rawValue, index) {
					var value = +me.getRightValue(rawValue);
					if (isNaN(value) || meta.data[index].hidden) {
						return;
					}

					min = Math.min(value, min);
					max = Math.max(value, max);
				});
			}
		});

		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
	},

	convertTicksToLabels: function() {
		var me = this;

		scale_linearbase.prototype.convertTicksToLabels.call(me);

		// Point labels
		me.pointLabels = me.chart.data.labels.map(function() {
			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
			return label || label === 0 ? label : '';
		});
	},

	getLabelForIndex: function(index, datasetIndex) {
		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
	},

	fit: function() {
		var me = this;
		var opts = me.options;

		if (opts.display && opts.pointLabels.display) {
			fitWithPointLabels(me);
		} else {
			me.setCenterPoint(0, 0, 0, 0);
		}
	},

	/**
	 * Set radius reductions and determine new radius and center point
	 * @private
	 */
	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
		var me = this;
		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

		radiusReductionLeft = numberOrZero(radiusReductionLeft);
		radiusReductionRight = numberOrZero(radiusReductionRight);
		radiusReductionTop = numberOrZero(radiusReductionTop);
		radiusReductionBottom = numberOrZero(radiusReductionBottom);

		me.drawingArea = Math.min(
			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
	},

	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
		var me = this;
		var maxRight = me.width - rightMovement - me.drawingArea;
		var maxLeft = leftMovement + me.drawingArea;
		var maxTop = topMovement + me.drawingArea;
		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
	},

	getIndexAngle: function(index) {
		var chart = this.chart;
		var angleMultiplier = 360 / chart.data.labels.length;
		var options = chart.options || {};
		var startAngle = options.startAngle || 0;

		// Start from the top instead of right, so remove a quarter of the circle
		var angle = (index * angleMultiplier + startAngle) % 360;

		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
	},

	getDistanceFromCenterForValue: function(value) {
		var me = this;

		if (helpers$1.isNullOrUndef(value)) {
			return NaN;
		}

		// Take into account half font size + the yPadding of the top value
		var scalingFactor = me.drawingArea / (me.max - me.min);
		if (me.options.ticks.reverse) {
			return (me.max - value) * scalingFactor;
		}
		return (value - me.min) * scalingFactor;
	},

	getPointPosition: function(index, distanceFromCenter) {
		var me = this;
		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
		return {
			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
		};
	},

	getPointPositionForValue: function(index, value) {
		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
	},

	getBasePosition: function(index) {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.getPointPositionForValue(index || 0,
			me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0);
	},

	/**
	 * @private
	 */
	_drawGrid: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var gridLineOpts = opts.gridLines;
		var angleLineOpts = opts.angleLines;
		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
		var i, offset, position;

		if (opts.pointLabels.display) {
			drawPointLabels(me);
		}

		if (gridLineOpts.display) {
			helpers$1.each(me.ticks, function(label, index) {
				if (index !== 0) {
					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
					drawRadiusLine(me, gridLineOpts, offset, index);
				}
			});
		}

		if (angleLineOpts.display && lineWidth && lineColor) {
			ctx.save();
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = lineColor;
			if (ctx.setLineDash) {
				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
			}

			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
				position = me.getPointPosition(i, offset);
				ctx.beginPath();
				ctx.moveTo(me.xCenter, me.yCenter);
				ctx.lineTo(position.x, position.y);
				ctx.stroke();
			}

			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var tickOpts = opts.ticks;

		if (!tickOpts.display) {
			return;
		}

		var startAngle = me.getIndexAngle(0);
		var tickFont = helpers$1.options._parseFont(tickOpts);
		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
		var offset, width;

		ctx.save();
		ctx.font = tickFont.string;
		ctx.translate(me.xCenter, me.yCenter);
		ctx.rotate(startAngle);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		helpers$1.each(me.ticks, function(label, index) {
			if (index === 0 && !tickOpts.reverse) {
				return;
			}

			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

			if (tickOpts.showLabelBackdrop) {
				width = ctx.measureText(label).width;
				ctx.fillStyle = tickOpts.backdropColor;

				ctx.fillRect(
					-width / 2 - tickOpts.backdropPaddingX,
					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
					width + tickOpts.backdropPaddingX * 2,
					tickFont.size + tickOpts.backdropPaddingY * 2
				);
			}

			ctx.fillStyle = tickFontColor;
			ctx.fillText(label, 0, -offset);
		});

		ctx.restore();
	},

	/**
	 * @private
	 */
	_drawTitle: helpers$1.noop
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$3 = defaultConfig$3;
scale_radialLinear._defaults = _defaults$3;

var deprecated$1 = helpers$1._deprecated;
var resolve$5 = helpers$1.options.resolve;
var valueOrDefault$d = helpers$1.valueOrDefault;

// Integer constants are from the ES6 spec.
var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

var INTERVALS = {
	millisecond: {
		common: true,
		size: 1,
		steps: 1000
	},
	second: {
		common: true,
		size: 1000,
		steps: 60
	},
	minute: {
		common: true,
		size: 60000,
		steps: 60
	},
	hour: {
		common: true,
		size: 3600000,
		steps: 24
	},
	day: {
		common: true,
		size: 86400000,
		steps: 30
	},
	week: {
		common: false,
		size: 604800000,
		steps: 4
	},
	month: {
		common: true,
		size: 2.628e9,
		steps: 12
	},
	quarter: {
		common: false,
		size: 7.884e9,
		steps: 4
	},
	year: {
		common: true,
		size: 3.154e10
	}
};

var UNITS = Object.keys(INTERVALS);

function sorter(a, b) {
	return a - b;
}

function arrayUnique(items) {
	var hash = {};
	var out = [];
	var i, ilen, item;

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		item = items[i];
		if (!hash[item]) {
			hash[item] = true;
			out.push(item);
		}
	}

	return out;
}

function getMin(options) {
	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
}

function getMax(options) {
	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
}

/**
 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
 * extremity (left + width or top + height). Note that it would be more optimized to directly
 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
 *
 * @param {number[]} timestamps - timestamps sorted from lowest to highest.
 * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
 * If 'series', timestamps will be positioned at the same distance from each other. In this
 * case, only timestamps that break the time linearity are registered, meaning that in the
 * best case, all timestamps are linear, the table contains only min and max.
 */
function buildLookupTable(timestamps, min, max, distribution) {
	if (distribution === 'linear' || !timestamps.length) {
		return [
			{time: min, pos: 0},
			{time: max, pos: 1}
		];
	}

	var table = [];
	var items = [min];
	var i, ilen, prev, curr, next;

	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
		curr = timestamps[i];
		if (curr > min && curr < max) {
			items.push(curr);
		}
	}

	items.push(max);

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		next = items[i + 1];
		prev = items[i - 1];
		curr = items[i];

		// only add points that breaks the scale linearity
		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
			table.push({time: curr, pos: i / (ilen - 1)});
		}
	}

	return table;
}

// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
function lookup(table, key, value) {
	var lo = 0;
	var hi = table.length - 1;
	var mid, i0, i1;

	while (lo >= 0 && lo <= hi) {
		mid = (lo + hi) >> 1;
		i0 = table[mid - 1] || null;
		i1 = table[mid];

		if (!i0) {
			// given value is outside table (before first item)
			return {lo: null, hi: i1};
		} else if (i1[key] < value) {
			lo = mid + 1;
		} else if (i0[key] > value) {
			hi = mid - 1;
		} else {
			return {lo: i0, hi: i1};
		}
	}

	// given value is outside table (after last item)
	return {lo: i1, hi: null};
}

/**
 * Linearly interpolates the given source `value` using the table items `skey` values and
 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
 * index [0, 1] or [n - 1, n] are used for the interpolation.
 */
function interpolate$1(table, skey, sval, tkey) {
	var range = lookup(table, skey, sval);

	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

	var span = next[skey] - prev[skey];
	var ratio = span ? (sval - prev[skey]) / span : 0;
	var offset = (next[tkey] - prev[tkey]) * ratio;

	return prev[tkey] + offset;
}

function toTimestamp(scale, input) {
	var adapter = scale._adapter;
	var options = scale.options.time;
	var parser = options.parser;
	var format = parser || options.format;
	var value = input;

	if (typeof parser === 'function') {
		value = parser(value);
	}

	// Only parse if its not a timestamp already
	if (!helpers$1.isFinite(value)) {
		value = typeof format === 'string'
			? adapter.parse(value, format)
			: adapter.parse(value);
	}

	if (value !== null) {
		return +value;
	}

	// Labels are in an incompatible format and no `parser` has been provided.
	// The user might still use the deprecated `format` option for parsing.
	if (!parser && typeof format === 'function') {
		value = format(input);

		// `format` could return something else than a timestamp, if so, parse it
		if (!helpers$1.isFinite(value)) {
			value = adapter.parse(value);
		}
	}

	return value;
}

function parse(scale, input) {
	if (helpers$1.isNullOrUndef(input)) {
		return null;
	}

	var options = scale.options.time;
	var value = toTimestamp(scale, scale.getRightValue(input));
	if (value === null) {
		return value;
	}

	if (options.round) {
		value = +scale._adapter.startOf(value, options.round);
	}

	return value;
}

/**
 * Figures out what unit results in an appropriate number of auto-generated ticks
 */
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	var ilen = UNITS.length;
	var i, interval, factor;

	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
		interval = INTERVALS[UNITS[i]];
		factor = interval.steps ? interval.steps : MAX_INTEGER;

		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
			return UNITS[i];
		}
	}

	return UNITS[ilen - 1];
}

/**
 * Figures out what unit to format a set of ticks with
 */
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	var i, unit;

	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
		unit = UNITS[i];
		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
			return unit;
		}
	}

	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}

function determineMajorUnit(unit) {
	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
		if (INTERVALS[UNITS[i]].common) {
			return UNITS[i];
		}
	}
}

/**
 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
 * `minor` unit using the given scale time `options`.
 * Important: this method can return ticks outside the min and max range, it's the
 * responsibility of the calling code to clamp values if needed.
 */
function generate(scale, min, max, capacity) {
	var adapter = scale._adapter;
	var options = scale.options;
	var timeOpts = options.time;
	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	var first = min;
	var ticks = [];
	var time;

	// For 'week' unit, handle the first day of week option
	if (weekday) {
		first = +adapter.startOf(first, 'isoWeek', weekday);
	}

	// Align first ticks on unit
	first = +adapter.startOf(first, weekday ? 'day' : minor);

	// Prevent browser from freezing in case user options request millions of milliseconds
	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
	}

	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
		ticks.push(time);
	}

	if (time === max || options.bounds === 'ticks') {
		ticks.push(time);
	}

	return ticks;
}

/**
 * Returns the start and end offsets from edges in the form of {start, end}
 * where each value is a relative width to the scale and ranges between 0 and 1.
 * They add extra margins on the both sides by scaling down the original scale.
 * Offsets are added when the `offset` option is true.
 */
function computeOffsets(table, ticks, min, max, options) {
	var start = 0;
	var end = 0;
	var first, last;

	if (options.offset && ticks.length) {
		first = interpolate$1(table, 'time', ticks[0], 'pos');
		if (ticks.length === 1) {
			start = 1 - first;
		} else {
			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
		}
		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
		if (ticks.length === 1) {
			end = last;
		} else {
			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
		}
	}

	return {start: start, end: end, factor: 1 / (start + 1 + end)};
}

function setMajorTicks(scale, ticks, map, majorUnit) {
	var adapter = scale._adapter;
	var first = +adapter.startOf(ticks[0].value, majorUnit);
	var last = ticks[ticks.length - 1].value;
	var major, index;

	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
		index = map[major];
		if (index >= 0) {
			ticks[index].major = true;
		}
	}
	return ticks;
}

function ticksFromTimestamps(scale, values, majorUnit) {
	var ticks = [];
	var map = {};
	var ilen = values.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = values[i];
		map[value] = i;

		ticks.push({
			value: value,
			major: false
		});
	}

	// We set the major ticks separately from the above loop because calling startOf for every tick
	// is expensive when there is a large number of ticks
	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}

var defaultConfig$4 = {
	position: 'bottom',

	/**
	 * Data distribution along the scale:
	 * - 'linear': data are spread according to their time (distances can vary),
	 * - 'series': data are spread at the same distance from each other.
	 * @see https://github.com/chartjs/Chart.js/pull/4507
	 * @since 2.7.0
	 */
	distribution: 'linear',

	/**
	 * Scale boundary strategy (bypassed by min/max time options)
	 * - `data`: make sure data are fully visible, ticks outside are removed
	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
	 * @see https://github.com/chartjs/Chart.js/pull/4556
	 * @since 2.7.0
	 */
	bounds: 'data',

	adapters: {},
	time: {
		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
		unit: false, // false == automatic or override with week, month, year, etc.
		round: false, // none, or override with week, month, year, etc.
		displayFormat: false, // DEPRECATED
		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
		minUnit: 'millisecond',
		displayFormats: {}
	},
	ticks: {
		autoSkip: false,

		/**
		 * Ticks generation input values:
		 * - 'auto': generates "optimal" ticks based on scale size and time options.
		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
		 * @see https://github.com/chartjs/Chart.js/pull/4507
		 * @since 2.7.0
		 */
		source: 'auto',

		major: {
			enabled: false
		}
	}
};

var scale_time = core_scale.extend({
	initialize: function() {
		this.mergeTicksOptions();
		core_scale.prototype.initialize.call(this);
	},

	update: function() {
		var me = this;
		var options = me.options;
		var time = options.time || (options.time = {});
		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

		// DEPRECATIONS: output a message only one time per update
		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

		// Backward compatibility: before introducing adapter, `displayFormats` was
		// supposed to contain *all* unit/string pairs but this can't be resolved
		// when loading the scale (adapters are loaded afterward), so let's populate
		// missing formats on update
		helpers$1.mergeIf(time.displayFormats, adapter.formats());

		return core_scale.prototype.update.apply(me, arguments);
	},

	/**
	 * Allows data to be referenced via 't' attribute
	 */
	getRightValue: function(rawValue) {
		if (rawValue && rawValue.t !== undefined) {
			rawValue = rawValue.t;
		}
		return core_scale.prototype.getRightValue.call(this, rawValue);
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var adapter = me._adapter;
		var options = me.options;
		var unit = options.time.unit || 'day';
		var min = MAX_INTEGER;
		var max = MIN_INTEGER;
		var timestamps = [];
		var datasets = [];
		var labels = [];
		var i, j, ilen, jlen, data, timestamp, labelsAdded;
		var dataLabels = me._getLabels();

		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
			labels.push(parse(me, dataLabels[i]));
		}

		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				data = chart.data.datasets[i].data;

				// Let's consider that all data have the same format.
				if (helpers$1.isObject(data[0])) {
					datasets[i] = [];

					for (j = 0, jlen = data.length; j < jlen; ++j) {
						timestamp = parse(me, data[j]);
						timestamps.push(timestamp);
						datasets[i][j] = timestamp;
					}
				} else {
					datasets[i] = labels.slice(0);
					if (!labelsAdded) {
						timestamps = timestamps.concat(labels);
						labelsAdded = true;
					}
				}
			} else {
				datasets[i] = [];
			}
		}

		if (labels.length) {
			min = Math.min(min, labels[0]);
			max = Math.max(max, labels[labels.length - 1]);
		}

		if (timestamps.length) {
			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
			min = Math.min(min, timestamps[0]);
			max = Math.max(max, timestamps[timestamps.length - 1]);
		}

		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// In case there is no valid min/max, set limits based on unit time option
		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

		// Make sure that max is strictly higher than min (required by the lookup table)
		me.min = Math.min(min, max);
		me.max = Math.max(min + 1, max);

		// PRIVATE
		me._table = [];
		me._timestamps = {
			data: timestamps,
			datasets: datasets,
			labels: labels
		};
	},

	buildTicks: function() {
		var me = this;
		var min = me.min;
		var max = me.max;
		var options = me.options;
		var tickOpts = options.ticks;
		var timeOpts = options.time;
		var timestamps = me._timestamps;
		var ticks = [];
		var capacity = me.getLabelCapacity(min);
		var source = tickOpts.source;
		var distribution = options.distribution;
		var i, ilen, timestamp;

		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
			timestamps = timestamps.data;
		} else if (source === 'labels') {
			timestamps = timestamps.labels;
		} else {
			timestamps = generate(me, min, max, capacity);
		}

		if (options.bounds === 'ticks' && timestamps.length) {
			min = timestamps[0];
			max = timestamps[timestamps.length - 1];
		}

		// Enforce limits with user min/max options
		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// Remove ticks outside the min/max range
		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
			timestamp = timestamps[i];
			if (timestamp >= min && timestamp <= max) {
				ticks.push(timestamp);
			}
		}

		me.min = min;
		me.max = max;

		// PRIVATE
		// determineUnitForFormatting relies on the number of ticks so we don't use it when
		// autoSkip is enabled because we don't yet know what the final number of ticks will be
		me._unit = timeOpts.unit || (tickOpts.autoSkip
			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
			: determineMajorUnit(me._unit);
		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
		me._offsets = computeOffsets(me._table, ticks, min, max, options);

		if (tickOpts.reverse) {
			ticks.reverse();
		}

		return ticksFromTimestamps(me, ticks, me._majorUnit);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var adapter = me._adapter;
		var data = me.chart.data;
		var timeOpts = me.options.time;
		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
		var value = data.datasets[datasetIndex].data[index];

		if (helpers$1.isObject(value)) {
			label = me.getRightValue(value);
		}
		if (timeOpts.tooltipFormat) {
			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
		}
		if (typeof label === 'string') {
			return label;
		}
		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
	},

	/**
	 * Function to format an individual tick mark
	 * @private
	 */
	tickFormatFunction: function(time, index, ticks, format) {
		var me = this;
		var adapter = me._adapter;
		var options = me.options;
		var formats = options.time.displayFormats;
		var minorFormat = formats[me._unit];
		var majorUnit = me._majorUnit;
		var majorFormat = formats[majorUnit];
		var tick = ticks[index];
		var tickOpts = options.ticks;
		var major = majorUnit && majorFormat && tick && tick.major;
		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
		var formatter = resolve$5([
			nestedTickOpts.callback,
			nestedTickOpts.userCallback,
			tickOpts.callback,
			tickOpts.userCallback
		]);

		return formatter ? formatter(label, index, ticks) : label;
	},

	convertTicksToLabels: function(ticks) {
		var labels = [];
		var i, ilen;

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
		}

		return labels;
	},

	/**
	 * @private
	 */
	getPixelForOffset: function(time) {
		var me = this;
		var offsets = me._offsets;
		var pos = interpolate$1(me._table, 'time', time, 'pos');
		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	},

	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var time = null;

		if (index !== undefined && datasetIndex !== undefined) {
			time = me._timestamps.datasets[datasetIndex][index];
		}

		if (time === null) {
			time = parse(me, value);
		}

		if (time !== null) {
			return me.getPixelForOffset(time);
		}
	},

	getPixelForTick: function(index) {
		var ticks = this.getTicks();
		return index >= 0 && index < ticks.length ?
			this.getPixelForOffset(ticks[index].value) :
			null;
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var offsets = me._offsets;
		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
		var time = interpolate$1(me._table, 'pos', pos, 'time');

		// DEPRECATION, we should return time directly
		return me._adapter._create(time);
	},

	/**
	 * @private
	 */
	_getLabelSize: function(label) {
		var me = this;
		var ticksOpts = me.options.ticks;
		var tickLabelWidth = me.ctx.measureText(label).width;
		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
		var cosRotation = Math.cos(angle);
		var sinRotation = Math.sin(angle);
		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

		return {
			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
		};
	},

	/**
	 * Crude approximation of what the label width might be
	 * @private
	 */
	getLabelWidth: function(label) {
		return this._getLabelSize(label).w;
	},

	/**
	 * @private
	 */
	getLabelCapacity: function(exampleTime) {
		var me = this;
		var timeOpts = me.options.time;
		var displayFormats = timeOpts.displayFormats;

		// pick the longest format (milliseconds) for guestimation
		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
		var size = me._getLabelSize(exampleLabel);
		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

		if (me.options.offset) {
			capacity--;
		}

		return capacity > 0 ? capacity : 1;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$4 = defaultConfig$4;
scale_time._defaults = _defaults$4;

var scales = {
	category: scale_category,
	linear: scale_linear,
	logarithmic: scale_logarithmic,
	radialLinear: scale_radialLinear,
	time: scale_time
};

var FORMATS = {
	datetime: 'MMM D, YYYY, h:mm:ss a',
	millisecond: 'h:mm:ss.SSS a',
	second: 'h:mm:ss a',
	minute: 'h:mm a',
	hour: 'hA',
	day: 'MMM D',
	week: 'll',
	month: 'MMM YYYY',
	quarter: '[Q]Q - YYYY',
	year: 'YYYY'
};

core_adapters._date.override(typeof moment === 'function' ? {
	_id: 'moment', // DEBUG ONLY

	formats: function() {
		return FORMATS;
	},

	parse: function(value, format) {
		if (typeof value === 'string' && typeof format === 'string') {
			value = moment(value, format);
		} else if (!(value instanceof moment)) {
			value = moment(value);
		}
		return value.isValid() ? value.valueOf() : null;
	},

	format: function(time, format) {
		return moment(time).format(format);
	},

	add: function(time, amount, unit) {
		return moment(time).add(amount, unit).valueOf();
	},

	diff: function(max, min, unit) {
		return moment(max).diff(moment(min), unit);
	},

	startOf: function(time, unit, weekday) {
		time = moment(time);
		if (unit === 'isoWeek') {
			return time.isoWeekday(weekday).valueOf();
		}
		return time.startOf(unit).valueOf();
	},

	endOf: function(time, unit) {
		return moment(time).endOf(unit).valueOf();
	},

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility with scale.getValueForPixel().
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(time) {
		return moment(time);
	},
} : {});

core_defaults._set('global', {
	plugins: {
		filler: {
			propagate: true
		}
	}
});

var mappers = {
	dataset: function(source) {
		var index = source.fill;
		var chart = source.chart;
		var meta = chart.getDatasetMeta(index);
		var visible = meta && chart.isDatasetVisible(index);
		var points = (visible && meta.dataset._children) || [];
		var length = points.length || 0;

		return !length ? null : function(point, i) {
			return (i < length && points[i]._view) || null;
		};
	},

	boundary: function(source) {
		var boundary = source.boundary;
		var x = boundary ? boundary.x : null;
		var y = boundary ? boundary.y : null;

		if (helpers$1.isArray(boundary)) {
			return function(point, i) {
				return boundary[i];
			};
		}

		return function(point) {
			return {
				x: x === null ? point.x : x,
				y: y === null ? point.y : y,
			};
		};
	}
};

// @todo if (fill[0] === '#')
function decodeFill(el, index, count) {
	var model = el._model || {};
	var fill = model.fill;
	var target;

	if (fill === undefined) {
		fill = !!model.backgroundColor;
	}

	if (fill === false || fill === null) {
		return false;
	}

	if (fill === true) {
		return 'origin';
	}

	target = parseFloat(fill, 10);
	if (isFinite(target) && Math.floor(target) === target) {
		if (fill[0] === '-' || fill[0] === '+') {
			target = index + target;
		}

		if (target === index || target < 0 || target >= count) {
			return false;
		}

		return target;
	}

	switch (fill) {
	// compatibility
	case 'bottom':
		return 'start';
	case 'top':
		return 'end';
	case 'zero':
		return 'origin';
	// supported boundaries
	case 'origin':
	case 'start':
	case 'end':
		return fill;
	// invalid fill values
	default:
		return false;
	}
}

function computeLinearBoundary(source) {
	var model = source.el._model || {};
	var scale = source.el._scale || {};
	var fill = source.fill;
	var target = null;
	var horizontal;

	if (isFinite(fill)) {
		return null;
	}

	// Backward compatibility: until v3, we still need to support boundary values set on
	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
	// controllers might still use it (e.g. the Smith chart).

	if (fill === 'start') {
		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
	} else if (fill === 'end') {
		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
	} else if (model.scaleZero !== undefined) {
		target = model.scaleZero;
	} else if (scale.getBasePixel) {
		target = scale.getBasePixel();
	}

	if (target !== undefined && target !== null) {
		if (target.x !== undefined && target.y !== undefined) {
			return target;
		}

		if (helpers$1.isFinite(target)) {
			horizontal = scale.isHorizontal();
			return {
				x: horizontal ? target : null,
				y: horizontal ? null : target
			};
		}
	}

	return null;
}

function computeCircularBoundary(source) {
	var scale = source.el._scale;
	var options = scale.options;
	var length = scale.chart.data.labels.length;
	var fill = source.fill;
	var target = [];
	var start, end, center, i, point;

	if (!length) {
		return null;
	}

	start = options.ticks.reverse ? scale.max : scale.min;
	end = options.ticks.reverse ? scale.min : scale.max;
	center = scale.getPointPositionForValue(0, start);
	for (i = 0; i < length; ++i) {
		point = fill === 'start' || fill === 'end'
			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
			: scale.getBasePosition(i);
		if (options.gridLines.circular) {
			point.cx = center.x;
			point.cy = center.y;
			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
		}
		target.push(point);
	}
	return target;
}

function computeBoundary(source) {
	var scale = source.el._scale || {};

	if (scale.getPointPositionForValue) {
		return computeCircularBoundary(source);
	}
	return computeLinearBoundary(source);
}

function resolveTarget(sources, index, propagate) {
	var source = sources[index];
	var fill = source.fill;
	var visited = [index];
	var target;

	if (!propagate) {
		return fill;
	}

	while (fill !== false && visited.indexOf(fill) === -1) {
		if (!isFinite(fill)) {
			return fill;
		}

		target = sources[fill];
		if (!target) {
			return false;
		}

		if (target.visible) {
			return fill;
		}

		visited.push(fill);
		fill = target.fill;
	}

	return false;
}

function createMapper(source) {
	var fill = source.fill;
	var type = 'dataset';

	if (fill === false) {
		return null;
	}

	if (!isFinite(fill)) {
		type = 'boundary';
	}

	return mappers[type](source);
}

function isDrawable(point) {
	return point && !point.skip;
}

function drawArea(ctx, curve0, curve1, len0, len1) {
	var i, cx, cy, r;

	if (!len0 || !len1) {
		return;
	}

	// building first area curve (normal)
	ctx.moveTo(curve0[0].x, curve0[0].y);
	for (i = 1; i < len0; ++i) {
		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
	}

	if (curve1[0].angle !== undefined) {
		cx = curve1[0].cx;
		cy = curve1[0].cy;
		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
		for (i = len1 - 1; i > 0; --i) {
			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
		}
		return;
	}

	// joining the two area curves
	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

	// building opposite area curve (reverse)
	for (i = len1 - 1; i > 0; --i) {
		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
	}
}

function doFill(ctx, points, mapper, view, color, loop) {
	var count = points.length;
	var span = view.spanGaps;
	var curve0 = [];
	var curve1 = [];
	var len0 = 0;
	var len1 = 0;
	var i, ilen, index, p0, p1, d0, d1, loopOffset;

	ctx.beginPath();

	for (i = 0, ilen = count; i < ilen; ++i) {
		index = i % count;
		p0 = points[index]._view;
		p1 = mapper(p0, index, view);
		d0 = isDrawable(p0);
		d1 = isDrawable(p1);

		if (loop && loopOffset === undefined && d0) {
			loopOffset = i + 1;
			ilen = count + loopOffset;
		}

		if (d0 && d1) {
			len0 = curve0.push(p0);
			len1 = curve1.push(p1);
		} else if (len0 && len1) {
			if (!span) {
				drawArea(ctx, curve0, curve1, len0, len1);
				len0 = len1 = 0;
				curve0 = [];
				curve1 = [];
			} else {
				if (d0) {
					curve0.push(p0);
				}
				if (d1) {
					curve1.push(p1);
				}
			}
		}
	}

	drawArea(ctx, curve0, curve1, len0, len1);

	ctx.closePath();
	ctx.fillStyle = color;
	ctx.fill();
}

var plugin_filler = {
	id: 'filler',

	afterDatasetsUpdate: function(chart, options) {
		var count = (chart.data.datasets || []).length;
		var propagate = options.propagate;
		var sources = [];
		var meta, i, el, source;

		for (i = 0; i < count; ++i) {
			meta = chart.getDatasetMeta(i);
			el = meta.dataset;
			source = null;

			if (el && el._model && el instanceof elements.Line) {
				source = {
					visible: chart.isDatasetVisible(i),
					fill: decodeFill(el, i, count),
					chart: chart,
					el: el
				};
			}

			meta.$filler = source;
			sources.push(source);
		}

		for (i = 0; i < count; ++i) {
			source = sources[i];
			if (!source) {
				continue;
			}

			source.fill = resolveTarget(sources, i, propagate);
			source.boundary = computeBoundary(source);
			source.mapper = createMapper(source);
		}
	},

	beforeDatasetsDraw: function(chart) {
		var metasets = chart._getSortedVisibleDatasetMetas();
		var ctx = chart.ctx;
		var meta, i, el, view, points, mapper, color;

		for (i = metasets.length - 1; i >= 0; --i) {
			meta = metasets[i].$filler;

			if (!meta || !meta.visible) {
				continue;
			}

			el = meta.el;
			view = el._view;
			points = el._children || [];
			mapper = meta.mapper;
			color = view.backgroundColor || core_defaults.global.defaultColor;

			if (mapper && color && points.length) {
				helpers$1.canvas.clipArea(ctx, chart.chartArea);
				doFill(ctx, points, mapper, view, color, el._loop);
				helpers$1.canvas.unclipArea(ctx);
			}
		}
	}
};

var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
var noop$1 = helpers$1.noop;
var valueOrDefault$e = helpers$1.valueOrDefault;

core_defaults._set('global', {
	legend: {
		display: true,
		position: 'top',
		align: 'center',
		fullWidth: true,
		reverse: false,
		weight: 1000,

		// a callback that will handle
		onClick: function(e, legendItem) {
			var index = legendItem.datasetIndex;
			var ci = this.chart;
			var meta = ci.getDatasetMeta(index);

			// See controller.isDatasetVisible comment
			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

			// We hid a dataset ... rerender the chart
			ci.update();
		},

		onHover: null,
		onLeave: null,

		labels: {
			boxWidth: 40,
			padding: 10,
			// Generates labels shown in the legend
			// Valid properties to return:
			// text : text to display
			// fillStyle : fill of coloured box
			// strokeStyle: stroke of coloured box
			// hidden : if this legend item refers to a hidden item
			// lineCap : cap style for line
			// lineDash
			// lineDashOffset :
			// lineJoin :
			// lineWidth :
			generateLabels: function(chart) {
				var datasets = chart.data.datasets;
				var options = chart.options.legend || {};
				var usePointStyle = options.labels && options.labels.usePointStyle;

				return chart._getSortedDatasetMetas().map(function(meta) {
					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

					return {
						text: datasets[meta.index].label,
						fillStyle: style.backgroundColor,
						hidden: !chart.isDatasetVisible(meta.index),
						lineCap: style.borderCapStyle,
						lineDash: style.borderDash,
						lineDashOffset: style.borderDashOffset,
						lineJoin: style.borderJoinStyle,
						lineWidth: style.borderWidth,
						strokeStyle: style.borderColor,
						pointStyle: style.pointStyle,
						rotation: style.rotation,

						// Below is extra data used for toggling the datasets
						datasetIndex: meta.index
					};
				}, this);
			}
		}
	},

	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var datasets = chart.data.datasets;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			listItem = list.appendChild(document.createElement('li'));
			listItemSpan = listItem.appendChild(document.createElement('span'));
			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
			if (datasets[i].label) {
				listItem.appendChild(document.createTextNode(datasets[i].label));
			}
		}

		return list.outerHTML;
	}
});

/**
 * Helper function to get the box width based on the usePointStyle option
 * @param {object} labelopts - the label options on the legend
 * @param {number} fontSize - the label font size
 * @return {number} width of the color box area
 */
function getBoxWidth(labelOpts, fontSize) {
	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
		fontSize :
		labelOpts.boxWidth;
}

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Legend = core_element.extend({

	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];

		/**
 		 * @private
 		 */
		me._hoveredItem = null;

		// Are we in doughnut mode which has a different data type
		me.doughnutMode = false;
	},

	// These methods are ordered by lifecycle. Utilities then follow.
	// Any function defined here is inherited by all legend types.
	// Any function can be extended by the legend type

	beforeUpdate: noop$1,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;
	},
	afterUpdate: noop$1,

	//

	beforeSetDimensions: noop$1,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$1,

	//

	beforeBuildLabels: noop$1,
	buildLabels: function() {
		var me = this;
		var labelOpts = me.options.labels || {};
		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

		if (labelOpts.filter) {
			legendItems = legendItems.filter(function(item) {
				return labelOpts.filter(item, me.chart.data);
			});
		}

		if (me.options.reverse) {
			legendItems.reverse();
		}

		me.legendItems = legendItems;
	},
	afterBuildLabels: noop$1,

	//

	beforeFit: noop$1,
	fit: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var display = opts.display;

		var ctx = me.ctx;

		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;

		// Reset hit boxes
		var hitboxes = me.legendHitBoxes = [];

		var minSize = me.minSize;
		var isHorizontal = me.isHorizontal();

		if (isHorizontal) {
			minSize.width = me.maxWidth; // fill all the width
			minSize.height = display ? 10 : 0;
		} else {
			minSize.width = display ? 10 : 0;
			minSize.height = me.maxHeight; // fill all the height
		}

		// Increase sizes here
		if (!display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}
		ctx.font = labelFont.string;

		if (isHorizontal) {
			// Labels

			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
			var lineWidths = me.lineWidths = [0];
			var totalHeight = 0;

			ctx.textAlign = 'left';
			ctx.textBaseline = 'middle';

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
					totalHeight += fontSize + labelOpts.padding;
					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
				}

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: width,
					height: fontSize
				};

				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
			});

			minSize.height += totalHeight;

		} else {
			var vPadding = labelOpts.padding;
			var columnWidths = me.columnWidths = [];
			var columnHeights = me.columnHeights = [];
			var totalWidth = labelOpts.padding;
			var currentColWidth = 0;
			var currentColHeight = 0;

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				// If too tall, go to new column
				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
					totalWidth += currentColWidth + labelOpts.padding;
					columnWidths.push(currentColWidth); // previous column width
					columnHeights.push(currentColHeight);
					currentColWidth = 0;
					currentColHeight = 0;
				}

				// Get max width
				currentColWidth = Math.max(currentColWidth, itemWidth);
				currentColHeight += fontSize + vPadding;

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: itemWidth,
					height: fontSize
				};
			});

			totalWidth += currentColWidth;
			columnWidths.push(currentColWidth);
			columnHeights.push(currentColHeight);
			minSize.width += totalWidth;
		}

		me.width = minSize.width;
		me.height = minSize.height;
	},
	afterFit: noop$1,

	// Shared Methods
	isHorizontal: function() {
		return this.options.position === 'top' || this.options.position === 'bottom';
	},

	// Actually draw the legend on the canvas
	draw: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor;
		var lineDefault = globalDefaults.elements.line;
		var legendHeight = me.height;
		var columnHeights = me.columnHeights;
		var legendWidth = me.width;
		var lineWidths = me.lineWidths;

		if (!opts.display) {
			return;
		}

		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
		var ctx = me.ctx;
		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;
		var cursor;

		// Canvas setup
		ctx.textAlign = rtlHelper.textAlign('left');
		ctx.textBaseline = 'middle';
		ctx.lineWidth = 0.5;
		ctx.strokeStyle = fontColor; // for strikethrough effect
		ctx.fillStyle = fontColor; // render in correct colour
		ctx.font = labelFont.string;

		var boxWidth = getBoxWidth(labelOpts, fontSize);
		var hitboxes = me.legendHitBoxes;

		// current position
		var drawLegendBox = function(x, y, legendItem) {
			if (isNaN(boxWidth) || boxWidth <= 0) {
				return;
			}

			// Set the ctx for the box
			ctx.save();

			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

			if (ctx.setLineDash) {
				// IE 9 and 10 do not support line dash
				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
			}

			if (labelOpts && labelOpts.usePointStyle) {
				// Recalculate x and y for drawPoint() because its expecting
				// x and y to be center of figure (instead of top left)
				var radius = boxWidth * Math.SQRT2 / 2;
				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
				var centerY = y + fontSize / 2;

				// Draw pointStyle as legend symbol
				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
			} else {
				// Draw box as legend symbol
				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				if (lineWidth !== 0) {
					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				}
			}

			ctx.restore();
		};

		var fillText = function(x, y, legendItem, textWidth) {
			var halfFontSize = fontSize / 2;
			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
			var yMiddle = y + halfFontSize;

			ctx.fillText(legendItem.text, xLeft, yMiddle);

			if (legendItem.hidden) {
				// Strikethrough the text if hidden
				ctx.beginPath();
				ctx.lineWidth = 2;
				ctx.moveTo(xLeft, yMiddle);
				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
				ctx.stroke();
			}
		};

		var alignmentOffset = function(dimension, blockSize) {
			switch (opts.align) {
			case 'start':
				return labelOpts.padding;
			case 'end':
				return dimension - blockSize;
			default: // center
				return (dimension - blockSize + labelOpts.padding) / 2;
			}
		};

		// Horizontal
		var isHorizontal = me.isHorizontal();
		if (isHorizontal) {
			cursor = {
				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
				y: me.top + labelOpts.padding,
				line: 0
			};
		} else {
			cursor = {
				x: me.left + labelOpts.padding,
				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
				line: 0
			};
		}

		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

		var itemHeight = fontSize + labelOpts.padding;
		helpers$1.each(me.legendItems, function(legendItem, i) {
			var textWidth = ctx.measureText(legendItem.text).width;
			var width = boxWidth + (fontSize / 2) + textWidth;
			var x = cursor.x;
			var y = cursor.y;

			rtlHelper.setWidth(me.minSize.width);

			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
			// instead of me.right and me.bottom because me.width and me.height
			// may have been changed since me.minSize was calculated
			if (isHorizontal) {
				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
					y = cursor.y += itemHeight;
					cursor.line++;
					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
				}
			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
				cursor.line++;
				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
			}

			var realX = rtlHelper.x(x);

			drawLegendBox(realX, y, legendItem);

			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
			hitboxes[i].top = y;

			// Fill the actual label
			fillText(realX, y, legendItem, textWidth);

			if (isHorizontal) {
				cursor.x += width + labelOpts.padding;
			} else {
				cursor.y += itemHeight;
			}
		});

		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
	},

	/**
	 * @private
	 */
	_getLegendItemAt: function(x, y) {
		var me = this;
		var i, hitBox, lh;

		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
			// See if we are touching one of the dataset boxes
			lh = me.legendHitBoxes;
			for (i = 0; i < lh.length; ++i) {
				hitBox = lh[i];

				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
					// Touching an element
					return me.legendItems[i];
				}
			}
		}

		return null;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 */
	handleEvent: function(e) {
		var me = this;
		var opts = me.options;
		var type = e.type === 'mouseup' ? 'click' : e.type;
		var hoveredItem;

		if (type === 'mousemove') {
			if (!opts.onHover && !opts.onLeave) {
				return;
			}
		} else if (type === 'click') {
			if (!opts.onClick) {
				return;
			}
		} else {
			return;
		}

		// Chart event already has relative position in it
		hoveredItem = me._getLegendItemAt(e.x, e.y);

		if (type === 'click') {
			if (hoveredItem && opts.onClick) {
				// use e.native for backwards compatibility
				opts.onClick.call(me, e.native, hoveredItem);
			}
		} else {
			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
				if (me._hoveredItem) {
					opts.onLeave.call(me, e.native, me._hoveredItem);
				}
				me._hoveredItem = hoveredItem;
			}

			if (opts.onHover && hoveredItem) {
				// use e.native for backwards compatibility
				opts.onHover.call(me, e.native, hoveredItem);
			}
		}
	}
});

function createNewLegendAndAttach(chart, legendOpts) {
	var legend = new Legend({
		ctx: chart.ctx,
		options: legendOpts,
		chart: chart
	});

	core_layouts.configure(chart, legend, legendOpts);
	core_layouts.addBox(chart, legend);
	chart.legend = legend;
}

var plugin_legend = {
	id: 'legend',

	/**
	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Legend,

	beforeInit: function(chart) {
		var legendOpts = chart.options.legend;

		if (legendOpts) {
			createNewLegendAndAttach(chart, legendOpts);
		}
	},

	beforeUpdate: function(chart) {
		var legendOpts = chart.options.legend;
		var legend = chart.legend;

		if (legendOpts) {
			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

			if (legend) {
				core_layouts.configure(chart, legend, legendOpts);
				legend.options = legendOpts;
			} else {
				createNewLegendAndAttach(chart, legendOpts);
			}
		} else if (legend) {
			core_layouts.removeBox(chart, legend);
			delete chart.legend;
		}
	},

	afterEvent: function(chart, e) {
		var legend = chart.legend;
		if (legend) {
			legend.handleEvent(e);
		}
	}
};

var noop$2 = helpers$1.noop;

core_defaults._set('global', {
	title: {
		display: false,
		fontStyle: 'bold',
		fullWidth: true,
		padding: 10,
		position: 'top',
		text: '',
		weight: 2000         // by default greater than legend (1000) to be above
	}
});

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Title = core_element.extend({
	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];
	},

	// These methods are ordered by lifecycle. Utilities then follow.

	beforeUpdate: noop$2,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;

	},
	afterUpdate: noop$2,

	//

	beforeSetDimensions: noop$2,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$2,

	//

	beforeBuildLabels: noop$2,
	buildLabels: noop$2,
	afterBuildLabels: noop$2,

	//

	beforeFit: noop$2,
	fit: function() {
		var me = this;
		var opts = me.options;
		var minSize = me.minSize = {};
		var isHorizontal = me.isHorizontal();
		var lineCount, textSize;

		if (!opts.display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}

		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
	},
	afterFit: noop$2,

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},

	// Actually draw the title block on the canvas
	draw: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;

		if (!opts.display) {
			return;
		}

		var fontOpts = helpers$1.options._parseFont(opts);
		var lineHeight = fontOpts.lineHeight;
		var offset = lineHeight / 2 + opts.padding;
		var rotation = 0;
		var top = me.top;
		var left = me.left;
		var bottom = me.bottom;
		var right = me.right;
		var maxWidth, titleX, titleY;

		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
		ctx.font = fontOpts.string;

		// Horizontal
		if (me.isHorizontal()) {
			titleX = left + ((right - left) / 2); // midpoint of the width
			titleY = top + offset;
			maxWidth = right - left;
		} else {
			titleX = opts.position === 'left' ? left + offset : right - offset;
			titleY = top + ((bottom - top) / 2);
			maxWidth = bottom - top;
			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
		}

		ctx.save();
		ctx.translate(titleX, titleY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		var text = opts.text;
		if (helpers$1.isArray(text)) {
			var y = 0;
			for (var i = 0; i < text.length; ++i) {
				ctx.fillText(text[i], 0, y, maxWidth);
				y += lineHeight;
			}
		} else {
			ctx.fillText(text, 0, 0, maxWidth);
		}

		ctx.restore();
	}
});

function createNewTitleBlockAndAttach(chart, titleOpts) {
	var title = new Title({
		ctx: chart.ctx,
		options: titleOpts,
		chart: chart
	});

	core_layouts.configure(chart, title, titleOpts);
	core_layouts.addBox(chart, title);
	chart.titleBlock = title;
}

var plugin_title = {
	id: 'title',

	/**
	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Title,

	beforeInit: function(chart) {
		var titleOpts = chart.options.title;

		if (titleOpts) {
			createNewTitleBlockAndAttach(chart, titleOpts);
		}
	},

	beforeUpdate: function(chart) {
		var titleOpts = chart.options.title;
		var titleBlock = chart.titleBlock;

		if (titleOpts) {
			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

			if (titleBlock) {
				core_layouts.configure(chart, titleBlock, titleOpts);
				titleBlock.options = titleOpts;
			} else {
				createNewTitleBlockAndAttach(chart, titleOpts);
			}
		} else if (titleBlock) {
			core_layouts.removeBox(chart, titleBlock);
			delete chart.titleBlock;
		}
	}
};

var plugins = {};
var filler = plugin_filler;
var legend = plugin_legend;
var title = plugin_title;
plugins.filler = filler;
plugins.legend = legend;
plugins.title = title;

/**
 * @namespace Chart
 */


core_controller.helpers = helpers$1;

// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
core_helpers();

core_controller._adapters = core_adapters;
core_controller.Animation = core_animation;
core_controller.animationService = core_animations;
core_controller.controllers = controllers;
core_controller.DatasetController = core_datasetController;
core_controller.defaults = core_defaults;
core_controller.Element = core_element;
core_controller.elements = elements;
core_controller.Interaction = core_interaction;
core_controller.layouts = core_layouts;
core_controller.platform = platform;
core_controller.plugins = core_plugins;
core_controller.Scale = core_scale;
core_controller.scaleService = core_scaleService;
core_controller.Ticks = core_ticks;
core_controller.Tooltip = core_tooltip;

// Register built-in scales

core_controller.helpers.each(scales, function(scale, type) {
	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
});

// Load to register built-in adapters (as side effects)


// Loading built-in plugins

for (var k in plugins) {
	if (plugins.hasOwnProperty(k)) {
		core_controller.plugins.register(plugins[k]);
	}
}

core_controller.platform.initialize();

var src = core_controller;
if (typeof window !== 'undefined') {
	window.Chart = core_controller;
}

// DEPRECATIONS

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Chart
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
core_controller.Chart = core_controller;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Legend
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Legend = plugins.legend._element;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Title
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Title = plugins.title._element;

/**
 * Provided for backward compatibility, use Chart.plugins instead
 * @namespace Chart.pluginService
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.pluginService = core_controller.plugins;

/**
 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
 * effect, instead simply create/register plugins via plain JavaScript objects.
 * @interface Chart.PluginBase
 * @deprecated since version 2.5.0
 * @todo remove at version 3
 * @private
 */
core_controller.PluginBase = core_controller.Element.extend({});

/**
 * Provided for backward compatibility, use Chart.helpers.canvas instead.
 * @namespace Chart.canvasHelpers
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
core_controller.canvasHelpers = core_controller.helpers.canvas;

/**
 * Provided for backward compatibility, use Chart.layouts instead.
 * @namespace Chart.layoutService
 * @deprecated since version 2.7.3
 * @todo remove at version 3
 * @private
 */
core_controller.layoutService = core_controller.layouts;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.LinearScaleBase
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
core_controller.LinearScaleBase = scale_linearbase;

/**
 * Provided for backward compatibility, instead we should create a new Chart
 * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 */
core_controller.helpers.each(
	[
		'Bar',
		'Bubble',
		'Doughnut',
		'Line',
		'PolarArea',
		'Radar',
		'Scatter'
	],
	function(klass) {
		core_controller[klass] = function(ctx, cfg) {
			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
				type: klass.charAt(0).toLowerCase() + klass.slice(1)
			}));
		};
	}
);

return src;

})));

},{"moment":3}],3:[function(require,module,exports){
//! moment.js

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

},{}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":4,"timers":5}],6:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType_Common = require("../Data.MediaType.Common/index.js");
var ArrayView = (function () {
    function ArrayView(value0) {
        this.value0 = value0;
    };
    ArrayView.create = function (value0) {
        return new ArrayView(value0);
    };
    return ArrayView;
})();
var Blob = (function () {
    function Blob(value0) {
        this.value0 = value0;
    };
    Blob.create = function (value0) {
        return new Blob(value0);
    };
    return Blob;
})();
var Document = (function () {
    function Document(value0) {
        this.value0 = value0;
    };
    Document.create = function (value0) {
        return new Document(value0);
    };
    return Document;
})();
var $$String = (function () {
    function $$String(value0) {
        this.value0 = value0;
    };
    $$String.create = function (value0) {
        return new $$String(value0);
    };
    return $$String;
})();
var FormData = (function () {
    function FormData(value0) {
        this.value0 = value0;
    };
    FormData.create = function (value0) {
        return new FormData(value0);
    };
    return FormData;
})();
var FormURLEncoded = (function () {
    function FormURLEncoded(value0) {
        this.value0 = value0;
    };
    FormURLEncoded.create = function (value0) {
        return new FormURLEncoded(value0);
    };
    return FormURLEncoded;
})();
var Json = (function () {
    function Json(value0) {
        this.value0 = value0;
    };
    Json.create = function (value0) {
        return new Json(value0);
    };
    return Json;
})();
var toMediaType = function (v) {
    if (v instanceof FormURLEncoded) {
        return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
    };
    if (v instanceof Json) {
        return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
    };
    return Data_Maybe.Nothing.value;
};
var string = $$String.create;
var json = Json.create;
var formURLEncoded = FormURLEncoded.create;
var formData = FormData.create;
var document = Document.create;
var blob = Blob.create;
var arrayView = function (av) {
    return new ArrayView(function (f) {
        return f(av);
    });
};
module.exports = {
    ArrayView: ArrayView,
    Blob: Blob,
    Document: Document,
    "String": $$String,
    FormData: FormData,
    FormURLEncoded: FormURLEncoded,
    Json: Json,
    arrayView: arrayView,
    blob: blob,
    document: document,
    string: string,
    formData: formData,
    formURLEncoded: formURLEncoded,
    json: json,
    toMediaType: toMediaType
};

},{"../Data.Maybe/index.js":197,"../Data.MediaType.Common/index.js":198}],7:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Accept = (function () {
    function Accept(value0) {
        this.value0 = value0;
    };
    Accept.create = function (value0) {
        return new Accept(value0);
    };
    return Accept;
})();
var ContentType = (function () {
    function ContentType(value0) {
        this.value0 = value0;
    };
    ContentType.create = function (value0) {
        return new ContentType(value0);
    };
    return ContentType;
})();
var RequestHeader = (function () {
    function RequestHeader(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RequestHeader.create = function (value0) {
        return function (value1) {
            return new RequestHeader(value0, value1);
        };
    };
    return RequestHeader;
})();
var value = function (v) {
    if (v instanceof Accept) {
        return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
    };
    if (v instanceof ContentType) {
        return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
    };
    if (v instanceof RequestHeader) {
        return v.value1;
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
};
var showRequestHeader = new Data_Show.Show(function (v) {
    if (v instanceof Accept) {
        return "(Accept " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
    };
    if (v instanceof ContentType) {
        return "(ContentType " + (Data_Show.show(Data_MediaType.showMediaType)(v.value0) + ")");
    };
    if (v instanceof RequestHeader) {
        return "(RequestHeader " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 16, column 1 - line 16, column 49): " + [ v.constructor.name ]);
});
var name = function (v) {
    if (v instanceof Accept) {
        return "Accept";
    };
    if (v instanceof ContentType) {
        return "Content-Type";
    };
    if (v instanceof RequestHeader) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
};
var eqRequestHeader = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Accept && y instanceof Accept) {
            return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
        };
        if (x instanceof ContentType && y instanceof ContentType) {
            return Data_Eq.eq(Data_MediaType.eqMediaType)(x.value0)(y.value0);
        };
        if (x instanceof RequestHeader && y instanceof RequestHeader) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        return false;
    };
});
var ordRequestHeader = new Data_Ord.Ord(function () {
    return eqRequestHeader;
}, function (x) {
    return function (y) {
        if (x instanceof Accept && y instanceof Accept) {
            return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
        };
        if (x instanceof Accept) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Accept) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ContentType && y instanceof ContentType) {
            return Data_Ord.compare(Data_MediaType.ordMediaType)(x.value0)(y.value0);
        };
        if (x instanceof ContentType) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ContentType) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RequestHeader && y instanceof RequestHeader) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at Affjax.RequestHeader (line 14, column 8 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Accept: Accept,
    ContentType: ContentType,
    RequestHeader: RequestHeader,
    name: name,
    value: value,
    eqRequestHeader: eqRequestHeader,
    ordRequestHeader: ordRequestHeader,
    showRequestHeader: showRequestHeader
};

},{"../Data.Eq/index.js":133,"../Data.MediaType/index.js":199,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],8:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType_Common = require("../Data.MediaType.Common/index.js");
var Foreign = require("../Foreign/index.js");
var ResponseFormatError = (function () {
    function ResponseFormatError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ResponseFormatError.create = function (value0) {
        return function (value1) {
            return new ResponseFormatError(value0, value1);
        };
    };
    return ResponseFormatError;
})();
var $$ArrayBuffer = (function () {
    function $$ArrayBuffer(value0) {
        this.value0 = value0;
    };
    $$ArrayBuffer.create = function (value0) {
        return new $$ArrayBuffer(value0);
    };
    return $$ArrayBuffer;
})();
var Blob = (function () {
    function Blob(value0) {
        this.value0 = value0;
    };
    Blob.create = function (value0) {
        return new Blob(value0);
    };
    return Blob;
})();
var Document = (function () {
    function Document(value0) {
        this.value0 = value0;
    };
    Document.create = function (value0) {
        return new Document(value0);
    };
    return Document;
})();
var Json = (function () {
    function Json(value0) {
        this.value0 = value0;
    };
    Json.create = function (value0) {
        return new Json(value0);
    };
    return Json;
})();
var $$String = (function () {
    function $$String(value0) {
        this.value0 = value0;
    };
    $$String.create = function (value0) {
        return new $$String(value0);
    };
    return $$String;
})();
var Ignore = (function () {
    function Ignore(value0) {
        this.value0 = value0;
    };
    Ignore.create = function (value0) {
        return new Ignore(value0);
    };
    return Ignore;
})();
var toResponseType = function (v) {
    if (v instanceof $$ArrayBuffer) {
        return "arraybuffer";
    };
    if (v instanceof Blob) {
        return "blob";
    };
    if (v instanceof Document) {
        return "document";
    };
    if (v instanceof Json) {
        return "text";
    };
    if (v instanceof $$String) {
        return "text";
    };
    if (v instanceof Ignore) {
        return "";
    };
    throw new Error("Failed pattern match at Affjax.ResponseFormat (line 46, column 3 - line 54, column 1): " + [ v.constructor.name ]);
};
var toMediaType = function (v) {
    if (v instanceof Json) {
        return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
    };
    return Data_Maybe.Nothing.value;
};
var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
var printResponseFormatError = function (v) {
    return Foreign.renderForeignError(v.value0);
};
var json = new Json(Control_Category.identity(Control_Category.categoryFn));
var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
var document = new Document(Control_Category.identity(Control_Category.categoryFn));
var blob = new Blob(Control_Category.identity(Control_Category.categoryFn));
var arrayBuffer = new $$ArrayBuffer(Control_Category.identity(Control_Category.categoryFn));
module.exports = {
    "ArrayBuffer": $$ArrayBuffer,
    Blob: Blob,
    Document: Document,
    Json: Json,
    "String": $$String,
    Ignore: Ignore,
    arrayBuffer: arrayBuffer,
    blob: blob,
    document: document,
    json: json,
    string: string,
    ignore: ignore,
    toResponseType: toResponseType,
    toMediaType: toMediaType,
    ResponseFormatError: ResponseFormatError,
    printResponseFormatError: printResponseFormatError
};

},{"../Control.Category/index.js":36,"../Data.Maybe/index.js":197,"../Data.MediaType.Common/index.js":198,"../Foreign/index.js":313}],9:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var ResponseHeader = (function () {
    function ResponseHeader(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ResponseHeader.create = function (value0) {
        return function (value1) {
            return new ResponseHeader(value0, value1);
        };
    };
    return ResponseHeader;
})();
var value = function (v) {
    return v.value1;
};
var showResponseHeader = new Data_Show.Show(function (v) {
    return "(ResponseHeader " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
});
var name = function (v) {
    return v.value0;
};
var eqResponseHeader = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && x.value1 === y.value1;
    };
});
var ordResponseHeader = new Data_Ord.Ord(function () {
    return eqResponseHeader;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
    };
});
module.exports = {
    ResponseHeader: ResponseHeader,
    name: name,
    value: value,
    eqResponseHeader: eqResponseHeader,
    ordResponseHeader: ordResponseHeader,
    showResponseHeader: showResponseHeader
};

},{"../Data.Eq/index.js":133,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],10:[function(require,module,exports){
(function (process){
/* global XMLHttpRequest */
/* global process */
"use strict";

exports._ajax = function () {
  var platformSpecific = { };
  if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
    // We are on node.js
    platformSpecific.newXHR = function () {
      var XHR = module.require("xhr2");
      return new XHR();
    };

    platformSpecific.fixupUrl = function (url, xhr) {
      if (xhr.nodejsBaseUrl === null) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      } else {
        return url || "/";
      }
    };

    platformSpecific.getResponse = function (xhr) {
      return xhr.response;
    };
  } else {
    // We are in the browser
    platformSpecific.newXHR = function () {
      return new XMLHttpRequest();
    };

    platformSpecific.fixupUrl = function (url) {
      return url || "/";
    };

    platformSpecific.getResponse = function (xhr) {
      return xhr.response;
    };
  }

  return function (mkHeader, options) {
    return function (errback, callback) {
      var xhr = platformSpecific.newXHR();
      var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
      xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
      if (options.headers) {
        try {
          for (var i = 0, header; (header = options.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        } catch (e) {
          errback(e);
        }
      }
      var onerror = function (msg) {
        return function () {
          errback(new Error(msg + ": " + options.method + " " + options.url));
        };
      };
      xhr.onerror = onerror("AJAX request failed");
      xhr.ontimeout = onerror("AJAX request timed out");
      xhr.onload = function () {
        callback({
          status: xhr.status,
          statusText: xhr.statusText,
          headers: xhr.getAllResponseHeaders().split("\r\n")
            .filter(function (header) {
              return header.length > 0;
            })
            .map(function (header) {
              var i = header.indexOf(":");
              return mkHeader(header.substring(0, i))(header.substring(i + 2));
            }),
          body: platformSpecific.getResponse(xhr)
        });
      };
      xhr.responseType = options.responseType;
      xhr.withCredentials = options.withCredentials;
      xhr.send(options.content);

      return function (error, cancelErrback, cancelCallback) {
        try {
          xhr.abort();
        } catch (e) {
          return cancelErrback(e);
        }
        return cancelCallback();
      };
    };
  };
}();

}).call(this,require('_process'))
},{"_process":4}],11:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Affjax_RequestBody = require("../Affjax.RequestBody/index.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Affjax_ResponseFormat = require("../Affjax.ResponseFormat/index.js");
var Affjax_ResponseHeader = require("../Affjax.ResponseHeader/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FormURLEncoded = require("../Data.FormURLEncoded/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Compat = require("../Effect.Aff.Compat/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Foreign = require("../Foreign/index.js");
var RequestContentError = (function () {
    function RequestContentError(value0) {
        this.value0 = value0;
    };
    RequestContentError.create = function (value0) {
        return new RequestContentError(value0);
    };
    return RequestContentError;
})();
var ResponseBodyError = (function () {
    function ResponseBodyError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ResponseBodyError.create = function (value0) {
        return function (value1) {
            return new ResponseBodyError(value0, value1);
        };
    };
    return ResponseBodyError;
})();
var XHRError = (function () {
    function XHRError(value0) {
        this.value0 = value0;
    };
    XHRError.create = function (value0) {
        return new XHRError(value0);
    };
    return XHRError;
})();
var request = function (req) {
    var parseJSON = function (v) {
        if (v === "") {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
        };
        return Data_Either.either(function ($47) {
            return Foreign.fail(Foreign.ForeignError.create($47));
        })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
    };
    var fromResponse = (function () {
        if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
            return Foreign.unsafeReadTagged("ArrayBuffer");
        };
        if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
            return Foreign.unsafeReadTagged("Blob");
        };
        if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
            return Foreign.unsafeReadTagged("Document");
        };
        if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
            return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($48) {
                return req.responseFormat.value0(parseJSON($48));
            })(Foreign.unsafeReadTagged("String"));
        };
        if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
            return Foreign.unsafeReadTagged("String");
        };
        if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
            return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
        };
        throw new Error("Failed pattern match at Affjax (line 237, column 18 - line 243, column 57): " + [ req.responseFormat.constructor.name ]);
    })();
    var extractContent = function (v) {
        if (v instanceof Affjax_RequestBody.ArrayView) {
            return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
        };
        if (v instanceof Affjax_RequestBody.Blob) {
            return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
        };
        if (v instanceof Affjax_RequestBody.Document) {
            return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
        };
        if (v instanceof Affjax_RequestBody["String"]) {
            return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
        };
        if (v instanceof Affjax_RequestBody.FormData) {
            return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
        };
        if (v instanceof Affjax_RequestBody.FormURLEncoded) {
            return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
        };
        if (v instanceof Affjax_RequestBody.Json) {
            return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
        };
        throw new Error("Failed pattern match at Affjax (line 203, column 20 - line 218, column 69): " + [ v.constructor.name ]);
    };
    var addHeader = function (mh) {
        return function (hs) {
            if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                return Data_Array.snoc(hs)(mh.value0);
            };
            return hs;
        };
    };
    var headers = function (reqContent) {
        return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
    };
    var ajaxRequest = function (v) {
        return {
            method: Data_HTTP_Method.print(req.method),
            url: req.url,
            headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                return {
                    field: Affjax_RequestHeader.name(h),
                    value: Affjax_RequestHeader.value(h)
                };
            })(headers(req.content)),
            content: v,
            responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
            username: Data_Nullable.toNullable(req.username),
            password: Data_Nullable.toNullable(req.password),
            withCredentials: req.withCredentials
        };
    };
    var send = function (content) {
        return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"](Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
            if (v instanceof Data_Either.Right) {
                var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                if (v1 instanceof Data_Either.Left) {
                    return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                };
                if (v1 instanceof Data_Either.Right) {
                    return new Data_Either.Right({
                        body: v1.value0,
                        headers: v.value0.headers,
                        status: v.value0.status,
                        statusText: v.value0.statusText
                    });
                };
                throw new Error("Failed pattern match at Affjax (line 184, column 9 - line 186, column 52): " + [ v1.constructor.name ]);
            };
            if (v instanceof Data_Either.Left) {
                return new Data_Either.Left(new XHRError(v.value0));
            };
            throw new Error("Failed pattern match at Affjax (line 182, column 86 - line 188, column 28): " + [ v.constructor.name ]);
        });
    };
    if (req.content instanceof Data_Maybe.Nothing) {
        return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
    };
    if (req.content instanceof Data_Maybe.Just) {
        var v = extractContent(req.content.value0);
        if (v instanceof Data_Either.Right) {
            return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
        };
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
        };
        throw new Error("Failed pattern match at Affjax (line 173, column 7 - line 177, column 48): " + [ v.constructor.name ]);
    };
    throw new Error("Failed pattern match at Affjax (line 169, column 3 - line 177, column 48): " + [ req.content.constructor.name ]);
};
var printError = function (v) {
    if (v instanceof RequestContentError) {
        return "There was a problem with the request content: " + v.value0;
    };
    if (v instanceof ResponseBodyError) {
        return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
    };
    if (v instanceof XHRError) {
        return "There was a problem making the request: " + Effect_Exception.message(v.value0);
    };
    throw new Error("Failed pattern match at Affjax (line 91, column 14 - line 97, column 66): " + [ v.constructor.name ]);
};
var defaultRequest = {
    method: new Data_Either.Left(Data_HTTP_Method.GET.value),
    url: "/",
    headers: [  ],
    content: Data_Maybe.Nothing.value,
    username: Data_Maybe.Nothing.value,
    password: Data_Maybe.Nothing.value,
    withCredentials: false,
    responseFormat: Affjax_ResponseFormat.ignore
};
var $$delete = function (rf) {
    return function (u) {
        return request({
            method: new Data_Either.Left(Data_HTTP_Method.DELETE.value),
            url: u,
            headers: defaultRequest.headers,
            content: defaultRequest.content,
            username: defaultRequest.username,
            password: defaultRequest.password,
            withCredentials: defaultRequest.withCredentials,
            responseFormat: rf
        });
    };
};
var delete_ = function ($49) {
    return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither))($$delete(Affjax_ResponseFormat.ignore)($49));
};
var get = function (rf) {
    return function (u) {
        return request({
            method: defaultRequest.method,
            url: u,
            headers: defaultRequest.headers,
            content: defaultRequest.content,
            username: defaultRequest.username,
            password: defaultRequest.password,
            withCredentials: defaultRequest.withCredentials,
            responseFormat: rf
        });
    };
};
var patch = function (rf) {
    return function (u) {
        return function (c) {
            return request({
                method: new Data_Either.Left(Data_HTTP_Method.PATCH.value),
                url: u,
                headers: defaultRequest.headers,
                content: new Data_Maybe.Just(c),
                username: defaultRequest.username,
                password: defaultRequest.password,
                withCredentials: defaultRequest.withCredentials,
                responseFormat: rf
            });
        };
    };
};
var patch_ = function (url) {
    return function ($50) {
        return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither))(patch(Affjax_ResponseFormat.ignore)(url)($50));
    };
};
var post = function (rf) {
    return function (u) {
        return function (c) {
            return request({
                method: new Data_Either.Left(Data_HTTP_Method.POST.value),
                url: u,
                headers: defaultRequest.headers,
                content: c,
                username: defaultRequest.username,
                password: defaultRequest.password,
                withCredentials: defaultRequest.withCredentials,
                responseFormat: rf
            });
        };
    };
};
var post_ = function (url) {
    return function ($51) {
        return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither))(post(Affjax_ResponseFormat.ignore)(url)($51));
    };
};
var put = function (rf) {
    return function (u) {
        return function (c) {
            return request({
                method: new Data_Either.Left(Data_HTTP_Method.PUT.value),
                url: u,
                headers: defaultRequest.headers,
                content: c,
                username: defaultRequest.username,
                password: defaultRequest.password,
                withCredentials: defaultRequest.withCredentials,
                responseFormat: rf
            });
        };
    };
};
var put_ = function (url) {
    return function ($52) {
        return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor["void"](Data_Either.functorEither))(put(Affjax_ResponseFormat.ignore)(url)($52));
    };
};
module.exports = {
    defaultRequest: defaultRequest,
    RequestContentError: RequestContentError,
    ResponseBodyError: ResponseBodyError,
    XHRError: XHRError,
    printError: printError,
    request: request,
    get: get,
    post: post,
    post_: post_,
    put: put,
    put_: put_,
    "delete": $$delete,
    delete_: delete_,
    patch: patch,
    patch_: patch_
};

},{"../Affjax.RequestBody/index.js":6,"../Affjax.RequestHeader/index.js":7,"../Affjax.ResponseFormat/index.js":8,"../Affjax.ResponseHeader/index.js":9,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Except/index.js":46,"../Data.Argonaut.Core/index.js":88,"../Data.Argonaut.Parser/index.js":90,"../Data.Array/index.js":98,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FormURLEncoded/index.js":140,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HTTP.Method/index.js":163,"../Data.HeytingAlgebra/index.js":165,"../Data.Identity/index.js":166,"../Data.List.NonEmpty/index.js":191,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Data.Unit/index.js":266,"../Effect.Aff.Compat/index.js":275,"../Effect.Aff/index.js":277,"../Effect.Exception/index.js":284,"../Foreign/index.js":313,"./foreign.js":10}],12:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Affjax = require("../Affjax/index.js");
var Affjax_RequestBody = require("../Affjax.RequestBody/index.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Affjax_ResponseFormat = require("../Affjax.ResponseFormat/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Parser_Interval = require("../Data.Formatter.Parser.Interval/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType_Common = require("../Data.MediaType.Common/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Generic = require("../Foreign.Generic/index.js");
var Foreign_Generic_Class = require("../Foreign.Generic.Class/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var RespGetIrdbManufacturers = function (x) {
    return x;
};
var RespGetI2cDevices = function (x) {
    return x;
};
var MeasDateTime = function (x) {
    return x;
};
var MeasEnvironment = function (x) {
    return x;
};
var EnvMeasurements = function (x) {
    return x;
};
var DatumIrdb = function (x) {
    return x;
};
var RespGetIrdb = (function () {
    function RespGetIrdb(value0) {
        this.value0 = value0;
    };
    RespGetIrdb.create = function (value0) {
        return new RespGetIrdb(value0);
    };
    return RespGetIrdb;
})();
var DatumInfraRed = function (x) {
    return x;
};
var BaseURL = function (x) {
    return x;
};
var urlApiV1Ircsv = function (v) {
    return v + "/api/v1/ir-csv";
};
var newtypeRespGetIrdbManufacturers = new Data_Newtype.Newtype(function (n) {
    return n;
}, RespGetIrdbManufacturers);
var newtypeMeasEnvironment = new Data_Newtype.Newtype(function (n) {
    return n;
}, MeasEnvironment);
var newtypeMeasDateTime = new Data_Newtype.Newtype(function (n) {
    return n;
}, MeasDateTime);
var newtypeDatumIrdb = new Data_Newtype.Newtype(function (n) {
    return n;
}, DatumIrdb);
var newtypeDatumInfraRed = new Data_Newtype.Newtype(function (n) {
    return n;
}, DatumInfraRed);
var newtypeBaseURL = new Data_Newtype.Newtype(function (n) {
    return n;
}, BaseURL);
var genericRespGetIrdbManufacturers = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showRespGetIrdbManufacturers = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRespGetIrdbManufacturers)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "manufacturers";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showString)))))(new Data_Symbol.IsSymbol(function () {
    return "RespGetIrdbManufacturers";
}))));
var genericRespGetIrdb = new Data_Generic_Rep.Generic(function (x) {
    return x.value0;
}, function (x) {
    return new RespGetIrdb(x);
});
var genericRespGetI2cDevices = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showRespGetI2cDevices = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRespGetI2cDevices)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "data";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showInt)))))(new Data_Symbol.IsSymbol(function () {
    return "RespGetI2cDevices";
}))));
var genericMeasEnvironment = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericMeasDateTime = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showMeasDateValue = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMeasDateTime)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_DateTime.showDateTime))(new Data_Symbol.IsSymbol(function () {
    return "MeasDateTime";
}))));
var showMeasEnvironment = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMeasEnvironment)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "degc";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "hpa";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "id";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "measured_at";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "rh";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "sensor_id";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showNumber))(showMeasDateValue))(Data_Show.showInt))(Data_Show.showNumber))(Data_Show.showNumber))))(new Data_Symbol.IsSymbol(function () {
    return "MeasEnvironment";
}))));
var genericEnvMeasurements = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericDatumIrdb = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showDatumIrdb = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericDatumIrdb)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "id";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "key";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "manuf";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "prod";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
    return "DatumIrdb";
}))));
var showRespGetIrdb = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRespGetIrdb)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "counts";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "data";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "limits";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "page";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "pages";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showArray(showDatumIrdb)))(Data_Show.showInt))))(new Data_Symbol.IsSymbol(function () {
    return "RespGetIrdb";
}))));
var genericDatumInfraRed = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showDatumfraRed = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericDatumInfraRed)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "button_number";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt))))(new Data_Symbol.IsSymbol(function () {
    return "DatumInfraRed";
}))));
var genericBaseURL = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showBaseURL = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericBaseURL)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "BaseURL";
}))));
var eqRespGetIrdbManufacturers = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.manufacturers)(y.manufacturers);
    };
});
var eqMeasDateTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_DateTime.eqDateTime)(x)(y);
    };
});
var eqMeasEnvironment = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.degc === y.degc && x.hpa === y.hpa && x.id === y.id && Data_Eq.eq(eqMeasDateTime)(x.measured_at)(y.measured_at) && x.rh === y.rh && x.sensor_id === y.sensor_id;
    };
});
var ordMeasDateTime = new Data_Ord.Ord(function () {
    return eqMeasDateTime;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_DateTime.ordDateTime)(x)(y);
    };
});
var eqDatumIrdb = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.code === y.code && x.id === y.id && x.key === y.key && x.manuf === y.manuf && x.prod === y.prod;
    };
});
var eqDatumInfraRed = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.button_number === y.button_number && x.code === y.code;
    };
});
var encoder = function (dictGeneric) {
    return function (dictGenericEncode) {
        return Foreign_Generic.genericEncodeJSON(dictGeneric)(dictGenericEncode)({
            sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
            unwrapSingleConstructors: true,
            unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
            fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
        });
    };
};
var postApiV1InfraRed = function (param) {
    var request = {
        url: Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + "/api/v1/infra-red/",
        method: new Data_Either.Left(Data_HTTP_Method.POST.value),
        headers: [ new Affjax_RequestHeader.ContentType(Data_MediaType_Common.applicationJSON) ],
        content: new Data_Maybe.Just(Affjax_RequestBody.string(encoder(genericDatumInfraRed)(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
            return "DatumInfraRed";
        }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
            return "code";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
            return "button_number";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode))))))(param.datum))),
        responseFormat: Affjax_ResponseFormat.string,
        password: Affjax.defaultRequest.password,
        username: Affjax.defaultRequest.username,
        withCredentials: Affjax.defaultRequest.withCredentials
    };
    return Data_Functor.map(Effect_Aff.functorAff)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Affjax.printError))(Affjax.request(request));
};
var postApiV1TransIR = function (param) {
    var request = {
        url: Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + "/api/v1/trans-ir/",
        method: new Data_Either.Left(Data_HTTP_Method.POST.value),
        headers: [ new Affjax_RequestHeader.ContentType(Data_MediaType_Common.applicationJSON) ],
        content: new Data_Maybe.Just(Affjax_RequestBody.string(encoder(genericDatumInfraRed)(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
            return "DatumInfraRed";
        }))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
            return "code";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
            return "button_number";
        }))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode))))))(param.datum))),
        responseFormat: Affjax_ResponseFormat.string,
        password: Affjax.defaultRequest.password,
        username: Affjax.defaultRequest.username,
        withCredentials: Affjax.defaultRequest.withCredentials
    };
    return Data_Functor.map(Effect_Aff.functorAff)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Affjax.printError))(Affjax.request(request));
};
var encodeDatumIrdb = new Foreign_Generic_Class.Encode(Foreign_Generic.genericEncode(genericDatumIrdb)(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "DatumIrdb";
}))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "prod";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
    return "manuf";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
    return "key";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
    return "id";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode)))(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode))))))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var encodeDatumInfraRed = new Foreign_Generic_Class.Encode(Foreign_Generic.genericEncode(genericDatumInfraRed)(Foreign_Generic_Class.genericEncodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "DatumInfraRed";
}))(Foreign_Generic_Class.genericEncodeArgsArgument(Foreign_Generic_Class.encodeWithOptionsRecord()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordCons()(Foreign_Generic_Class.encodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.stringEncode)))(new Data_Symbol.IsSymbol(function () {
    return "button_number";
}))(Foreign_Generic_Class.encodeWithOptionsOther(Foreign_Generic_Class.intEncode))))))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var decoder = function (dictGeneric) {
    return function (dictGenericDecode) {
        var renderError = function ($160) {
            return Data_String_Common.joinWith("")(Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.renderForeignError)($160)));
        };
        var decodeJSON = Foreign_Generic.genericDecodeJSON(dictGeneric)(dictGenericDecode)({
            sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
            unwrapSingleConstructors: true,
            unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
            fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
        });
        return function ($161) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(renderError)(Control_Monad_Except.runExcept(decodeJSON($161)));
        };
    };
};
var getApiV1I2cDevices = function (param) {
    var resp = function (v) {
        if (v instanceof Data_Either.Right) {
            return Control_Bind.bind(Data_Either.bindEither)(decoder(genericRespGetI2cDevices)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                return "RespGetI2cDevices";
            }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                return "data";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.intDecode)))())))(Foreign_Generic_Class.genericCountArgsArgument))(v.value0.body))(function (v1) {
                return Data_Either.Right.create({
                    body: v1,
                    headers: v.value0.headers,
                    status: v.value0.status,
                    statusText: v.value0.statusText
                });
            });
        };
        if (v instanceof Data_Either.Left) {
            return Data_Either.Left.create(Affjax.printError(v.value0));
        };
        throw new Error("Failed pattern match at Api (line 213, column 10 - line 219, column 31): " + [ v.constructor.name ]);
    };
    var opts = (function (v) {
        if (v === "") {
            return "";
        };
        return "?" + v;
    })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("&")(Data_Array.catMaybes([ Data_Functor.map(Data_Maybe.functorMaybe)(function ($162) {
        return (function (v) {
            return "busnum=" + v;
        })(Data_Int.toStringAs(Data_Int.decimal)($162));
    })(param.busnumber) ])));
    var url = Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + ("/api/v1/i2c-devices" + opts);
    return Data_Functor.map(Effect_Aff.functorAff)(resp)(Affjax.get(Affjax_ResponseFormat.string)(url));
};
var getApiV1InfraRed = function (param) {
    var url = Data_String_Common.joinWith("")([ Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl), "/api/v1/infra-red/", Data_Int.toStringAs(Data_Int.decimal)(param.buttonNumber) ]);
    var resp = function (v) {
        if (v instanceof Data_Either.Right) {
            return Control_Bind.bind(Data_Either.bindEither)(decoder(genericDatumInfraRed)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                return "DatumInfraRed";
            }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                return "code";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
                return "button_number";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))(v.value0.body))(function (v1) {
                return Data_Either.Right.create({
                    body: v1,
                    headers: v.value0.headers,
                    status: v.value0.status,
                    statusText: v.value0.statusText
                });
            });
        };
        if (v instanceof Data_Either.Left) {
            return Data_Either.Left.create(Affjax.printError(v.value0));
        };
        throw new Error("Failed pattern match at Api (line 270, column 10 - line 276, column 31): " + [ v.constructor.name ]);
    };
    return Data_Functor.map(Effect_Aff.functorAff)(resp)(Affjax.get(Affjax_ResponseFormat.string)(url));
};
var getApiV1IrdbManufacturers = function (param) {
    var url = Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + "/api/v1/irdb-manufacturers";
    var resp = function (v) {
        if (v instanceof Data_Either.Right) {
            return Control_Bind.bind(Data_Either.bindEither)(decoder(genericRespGetIrdbManufacturers)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                return "RespGetIrdbManufacturers";
            }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                return "manufacturers";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.stringDecode)))())))(Foreign_Generic_Class.genericCountArgsArgument))(v.value0.body))(function (v1) {
                return Data_Either.Right.create({
                    body: v1,
                    headers: v.value0.headers,
                    status: v.value0.status,
                    statusText: v.value0.statusText
                });
            });
        };
        if (v instanceof Data_Either.Left) {
            return Data_Either.Left.create(Affjax.printError(v.value0));
        };
        throw new Error("Failed pattern match at Api (line 447, column 10 - line 453, column 31): " + [ v.constructor.name ]);
    };
    return Data_Functor.map(Effect_Aff.functorAff)(resp)(Affjax.get(Affjax_ResponseFormat.string)(url));
};
var decodeRespGetIrdbManufacturers = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericRespGetIrdbManufacturers)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "RespGetIrdbManufacturers";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "manufacturers";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.stringDecode)))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var decodeRespGetI2cDevices = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericRespGetI2cDevices)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "RespGetI2cDevices";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "data";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.intDecode)))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var decodeMeasDateTime = new Foreign_Generic_Class.Decode(function (value) {
    var error = Data_List_NonEmpty.singleton(new Foreign.TypeMismatch("DateTime", Foreign.tagOf(value)));
    var fromString = function (original) {
        return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Function["const"](error))(MeasDateTime)(Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(Data_Formatter_Parser_Interval.parseDateTime(Data_Identity.monadIdentity))(original));
    };
    return Control_Monad_Except.mapExcept(function (v) {
        return Control_Bind.bindFlipped(Data_Either.bindEither)(fromString)(v);
    })(Foreign.readString(value));
});
var decodeMeasEnvironment = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericMeasEnvironment)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "MeasEnvironment";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "sensor_id";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
    return "rh";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.numberDecode))())(new Data_Symbol.IsSymbol(function () {
    return "measured_at";
}))(Foreign_Generic_Class.decodeWithOptionsOther(decodeMeasDateTime))())(new Data_Symbol.IsSymbol(function () {
    return "id";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
    return "hpa";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.numberDecode))())(new Data_Symbol.IsSymbol(function () {
    return "degc";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.numberDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var getApiV1Measurements = function (param) {
    var pickupData = function (v) {
        return v.env;
    };
    var resp = function (v) {
        if (v instanceof Data_Either.Right) {
            return Control_Bind.bind(Data_Either.bindEither)(decoder(genericEnvMeasurements)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                return "EnvMeasurements";
            }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                return "env";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(decodeMeasEnvironment)))())))(Foreign_Generic_Class.genericCountArgsArgument))(v.value0.body))(function (v1) {
                return Data_Either.Right.create({
                    body: pickupData(v1),
                    headers: v.value0.headers,
                    status: v.value0.status,
                    statusText: v.value0.statusText
                });
            });
        };
        if (v instanceof Data_Either.Left) {
            return Data_Either.Left.create(Affjax.printError(v.value0));
        };
        throw new Error("Failed pattern match at Api (line 164, column 10 - line 170, column 31): " + [ v.constructor.name ]);
    };
    var opts = (function (v) {
        if (v === "") {
            return "";
        };
        return "?" + v;
    })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("&")(Data_Array.catMaybes([ Data_Functor.map(Data_Maybe.functorMaybe)(function ($163) {
        return (function (v) {
            return "limits=" + v;
        })(Data_Int.toStringAs(Data_Int.decimal)($163));
    })(param.limits) ])));
    var url = Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + ("/api/v1/measurements" + opts);
    return Data_Functor.map(Effect_Aff.functorAff)(resp)(Affjax.get(Affjax_ResponseFormat.string)(url));
};
var decodeEnvMeasurements = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericEnvMeasurements)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "EnvMeasurements";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "env";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(decodeMeasEnvironment)))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var decodeDatumIrdb = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericDatumIrdb)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "DatumIrdb";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "prod";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
    return "manuf";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
    return "key";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
    return "id";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var decodeRespGetIrdb = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericRespGetIrdb)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "RespGetIrdb";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "pages";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
    return "page";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
    return "limits";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
    return "data";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(decodeDatumIrdb)))())(new Data_Symbol.IsSymbol(function () {
    return "counts";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
var getApiV1Irdb = function (param) {
    var resp = function (v) {
        if (v instanceof Data_Either.Right) {
            return Control_Bind.bind(Data_Either.bindEither)(decoder(genericRespGetIrdb)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
                return "RespGetIrdb";
            }))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
                return "pages";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
                return "page";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
                return "limits";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())(new Data_Symbol.IsSymbol(function () {
                return "data";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.arrayDecode(decodeDatumIrdb)))())(new Data_Symbol.IsSymbol(function () {
                return "counts";
            }))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))(v.value0.body))(function (v1) {
                return Data_Either.Right.create({
                    body: v1,
                    headers: v.value0.headers,
                    status: v.value0.status,
                    statusText: v.value0.statusText
                });
            });
        };
        if (v instanceof Data_Either.Left) {
            return Data_Either.Left.create(Affjax.printError(v.value0));
        };
        throw new Error("Failed pattern match at Api (line 394, column 10 - line 400, column 31): " + [ v.constructor.name ]);
    };
    var opts = (function (v) {
        if (v === "") {
            return "";
        };
        return "?" + v;
    })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("&")(Data_Array.catMaybes([ Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return "manufacturer=" + v;
    })(param.manufacturer), Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return "product=" + v;
    })(param.product), Data_Functor.map(Data_Maybe.functorMaybe)(function ($164) {
        return (function (v) {
            return "limits=" + v;
        })(Data_Int.toStringAs(Data_Int.decimal)($164));
    })(param.limits), Data_Functor.map(Data_Maybe.functorMaybe)(function ($165) {
        return (function (v) {
            return "page=" + v;
        })(Data_Int.toStringAs(Data_Int.decimal)($165));
    })(param.page) ])));
    var url = Data_Newtype.unwrap(newtypeBaseURL)(param.baseurl) + ("/api/v1/irdb" + opts);
    return Data_Functor.map(Effect_Aff.functorAff)(resp)(Affjax.get(Affjax_ResponseFormat.string)(url));
};
var decodeDatumInfraRed = new Foreign_Generic_Class.Decode(Foreign_Generic.genericDecode(genericDatumInfraRed)(Foreign_Generic_Class.genericDecodeConstructor(new Data_Symbol.IsSymbol(function () {
    return "DatumInfraRed";
}))(Foreign_Generic_Class.genericDecodeArgsArgument(Foreign_Generic_Class.decodeWithOptionsRecord()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordCons()(Foreign_Generic_Class.decodeRecordNil)(new Data_Symbol.IsSymbol(function () {
    return "code";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.stringDecode))())(new Data_Symbol.IsSymbol(function () {
    return "button_number";
}))(Foreign_Generic_Class.decodeWithOptionsOther(Foreign_Generic_Class.intDecode))())))(Foreign_Generic_Class.genericCountArgsArgument))({
    sumEncoding: Foreign_Generic_Class.defaultOptions.sumEncoding,
    unwrapSingleConstructors: true,
    unwrapSingleArguments: Foreign_Generic_Class.defaultOptions.unwrapSingleArguments,
    fieldTransform: Foreign_Generic_Class.defaultOptions.fieldTransform
}));
module.exports = {
    BaseURL: BaseURL,
    DatumInfraRed: DatumInfraRed,
    DatumIrdb: DatumIrdb,
    MeasDateTime: MeasDateTime,
    MeasEnvironment: MeasEnvironment,
    RespGetI2cDevices: RespGetI2cDevices,
    RespGetIrdb: RespGetIrdb,
    RespGetIrdbManufacturers: RespGetIrdbManufacturers,
    getApiV1I2cDevices: getApiV1I2cDevices,
    getApiV1InfraRed: getApiV1InfraRed,
    getApiV1Irdb: getApiV1Irdb,
    getApiV1IrdbManufacturers: getApiV1IrdbManufacturers,
    getApiV1Measurements: getApiV1Measurements,
    postApiV1InfraRed: postApiV1InfraRed,
    postApiV1TransIR: postApiV1TransIR,
    urlApiV1Ircsv: urlApiV1Ircsv,
    genericBaseURL: genericBaseURL,
    newtypeBaseURL: newtypeBaseURL,
    showBaseURL: showBaseURL,
    genericMeasDateTime: genericMeasDateTime,
    newtypeMeasDateTime: newtypeMeasDateTime,
    eqMeasDateTime: eqMeasDateTime,
    ordMeasDateTime: ordMeasDateTime,
    showMeasDateValue: showMeasDateValue,
    decodeMeasDateTime: decodeMeasDateTime,
    genericMeasEnvironment: genericMeasEnvironment,
    newtypeMeasEnvironment: newtypeMeasEnvironment,
    eqMeasEnvironment: eqMeasEnvironment,
    showMeasEnvironment: showMeasEnvironment,
    decodeMeasEnvironment: decodeMeasEnvironment,
    genericRespGetI2cDevices: genericRespGetI2cDevices,
    decodeRespGetI2cDevices: decodeRespGetI2cDevices,
    showRespGetI2cDevices: showRespGetI2cDevices,
    genericDatumInfraRed: genericDatumInfraRed,
    newtypeDatumInfraRed: newtypeDatumInfraRed,
    eqDatumInfraRed: eqDatumInfraRed,
    showDatumfraRed: showDatumfraRed,
    decodeDatumInfraRed: decodeDatumInfraRed,
    encodeDatumInfraRed: encodeDatumInfraRed,
    genericDatumIrdb: genericDatumIrdb,
    newtypeDatumIrdb: newtypeDatumIrdb,
    eqDatumIrdb: eqDatumIrdb,
    showDatumIrdb: showDatumIrdb,
    decodeDatumIrdb: decodeDatumIrdb,
    encodeDatumIrdb: encodeDatumIrdb,
    genericRespGetIrdb: genericRespGetIrdb,
    decodeRespGetIrdb: decodeRespGetIrdb,
    showRespGetIrdb: showRespGetIrdb,
    genericRespGetIrdbManufacturers: genericRespGetIrdbManufacturers,
    newtypeRespGetIrdbManufacturers: newtypeRespGetIrdbManufacturers,
    eqRespGetIrdbManufacturers: eqRespGetIrdbManufacturers,
    showRespGetIrdbManufacturers: showRespGetIrdbManufacturers,
    decodeRespGetIrdbManufacturers: decodeRespGetIrdbManufacturers
};

},{"../Affjax.RequestBody/index.js":6,"../Affjax.RequestHeader/index.js":7,"../Affjax.ResponseFormat/index.js":8,"../Affjax/index.js":11,"../Control.Bind/index.js":35,"../Control.Monad.Except/index.js":46,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.DateTime/index.js":126,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Formatter.Parser.Interval/index.js":144,"../Data.Formatter.Parser.Utils/index.js":146,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.HTTP.Method/index.js":163,"../Data.Identity/index.js":166,"../Data.Int/index.js":168,"../Data.List.NonEmpty/index.js":191,"../Data.List.Types/index.js":192,"../Data.Maybe/index.js":197,"../Data.MediaType.Common/index.js":198,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250,"../Effect.Aff/index.js":277,"../Foreign.Generic.Class/index.js":299,"../Foreign.Generic/index.js":301,"../Foreign/index.js":313,"../Text.Parsing.Parser.String/index.js":397}],13:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Route = require("../Route/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var AppM = function (x) {
    return x;
};
var Navigate = function (Monad0, navigate) {
    this.Monad0 = Monad0;
    this.navigate = navigate;
};
var HasApiAccessible = function (Monad0, getApiBaseURL, getApiTimeout) {
    this.Monad0 = Monad0;
    this.getApiBaseURL = getApiBaseURL;
    this.getApiTimeout = getApiTimeout;
};
var runAppM = function (v) {
    return function (env) {
        return Control_Monad_Reader_Trans.runReaderT(v)(env);
    };
};
var navigate = function (dict) {
    return dict.navigate;
};
var navigateHalogenM = function (dictNavigate) {
    return new Navigate(function () {
        return Halogen_Query_HalogenM.monadHalogenM;
    }, function ($10) {
        return Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)(dictNavigate.Monad0())(navigate(dictNavigate)($10));
    });
};
var monadEffectAppM = Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
var monadAppM = Control_Monad_Reader_Trans.monadReaderT(Effect_Aff.monadAff);
var monadAskAppM = function (dictTypeEquals) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadAppM;
    }, AppM(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff))(Type_Equality.from(dictTypeEquals))));
};
var monadAffAppM = Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff);
var getApiTimeout = function (dict) {
    return dict.getApiTimeout;
};
var getApiBaseURL = function (dict) {
    return dict.getApiBaseURL;
};
var hasApiAccessibleHalogenM = function (dictHasApiAccessible) {
    return new HasApiAccessible(function () {
        return Halogen_Query_HalogenM.monadHalogenM;
    }, Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)(dictHasApiAccessible.Monad0())(getApiBaseURL(dictHasApiAccessible)), Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)(dictHasApiAccessible.Monad0())(getApiTimeout(dictHasApiAccessible)));
};
var functorAppM = Control_Monad_Reader_Trans.functorReaderT(Effect_Aff.functorAff);
var hasApiAccessibleAppM = new HasApiAccessible(function () {
    return monadAppM;
}, Data_Functor.mapFlipped(functorAppM)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (env) {
    return env.apiBaseURL;
}), Data_Functor.mapFlipped(functorAppM)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (env) {
    return env.apiTimeout;
}));
var bindAppM = Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff);
var applyAppM = Control_Monad_Reader_Trans.applyReaderT(Effect_Aff.applyAff);
var applicativeAppM = Control_Monad_Reader_Trans.applicativeReaderT(Effect_Aff.applicativeAff);
var navigateAppM = new Navigate(function () {
    return monadAppM;
}, function (newRoute) {
    return Control_Bind.bind(bindAppM)(Data_Functor.mapFlipped(functorAppM)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff)))(function (env) {
        return env.psInterface;
    }))(function (v) {
        return Control_Bind.bind(bindAppM)(Effect_Class.liftEffect(monadEffectAppM)(v.locationState))(function (v1) {
            var nextPathQuery = Route.routeToPathQuery(newRoute);
            var currentPathQuery = v1.path + v1.search;
            return Control_Applicative.when(applicativeAppM)(nextPathQuery !== currentPathQuery)(Effect_Class.liftEffect(monadEffectAppM)(v.pushState(v1.state)(nextPathQuery)));
        });
    });
});
module.exports = {
    AppM: AppM,
    Navigate: Navigate,
    HasApiAccessible: HasApiAccessible,
    runAppM: runAppM,
    navigate: navigate,
    getApiBaseURL: getApiBaseURL,
    getApiTimeout: getApiTimeout,
    functorAppM: functorAppM,
    applyAppM: applyAppM,
    applicativeAppM: applicativeAppM,
    bindAppM: bindAppM,
    monadAppM: monadAppM,
    monadEffectAppM: monadEffectAppM,
    monadAffAppM: monadAffAppM,
    monadAskAppM: monadAskAppM,
    navigateAppM: navigateAppM,
    navigateHalogenM: navigateHalogenM,
    hasApiAccessibleAppM: hasApiAccessibleAppM,
    hasApiAccessibleHalogenM: hasApiAccessibleHalogenM
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Reader.Trans/index.js":54,"../Control.Monad.Trans.Class/index.js":61,"../Data.Functor/index.js":156,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Halogen.Query.HalogenM/index.js":348,"../Route/index.js":388,"../Type.Equality/index.js":402}],14:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_String = require("../CSS.String/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Visible = function (visible) {
    this.visible = visible;
};
var Unset = function (unset) {
    this.unset = unset;
};
var URL = function (url) {
    this.url = url;
};
var Top = function (top) {
    this.top = top;
};
var Other = function (other) {
    this.other = other;
};
var Normal = function (normal) {
    this.normal = normal;
};
var None = function (none) {
    this.none = none;
};
var Middle = function (middle) {
    this.middle = middle;
};
var Initial = function (initial) {
    this.initial = initial;
};
var Inherit = function (inherit) {
    this.inherit = inherit;
};
var Hidden = function (hidden) {
    this.hidden = hidden;
};
var Center = function (center) {
    this.center = center;
};
var Bottom = function (bottom) {
    this.bottom = bottom;
};
var Baseline = function (baseline) {
    this.baseline = baseline;
};
var Auto = function (auto) {
    this.auto = auto;
};
var All = function (all) {
    this.all = all;
};
var visibleValue = new Visible(CSS_String.fromString(CSS_Property.isStringValue)("visible"));
var visible = function (dict) {
    return dict.visible;
};
var urlValue = new URL(function (s) {
    return CSS_String.fromString(CSS_Property.isStringValue)("url(\"" + (s + "\")"));
});
var url = function (dict) {
    return dict.url;
};
var unsetValue = new Unset(CSS_String.fromString(CSS_Property.isStringValue)("unset"));
var unset = function (dict) {
    return dict.unset;
};
var topValue = new Top(CSS_String.fromString(CSS_Property.isStringValue)("top"));
var top = function (dict) {
    return dict.top;
};
var otherValue = new Other(Control_Category.identity(Control_Category.categoryFn));
var other = function (dict) {
    return dict.other;
};
var normalValue = new Normal(CSS_String.fromString(CSS_Property.isStringValue)("normal"));
var normal = function (dict) {
    return dict.normal;
};
var noneValue = new None(CSS_String.fromString(CSS_Property.isStringValue)("none"));
var none = function (dict) {
    return dict.none;
};
var middleValue = new Middle(CSS_String.fromString(CSS_Property.isStringValue)("middle"));
var middle = function (dict) {
    return dict.middle;
};
var initialValue = new Initial(CSS_String.fromString(CSS_Property.isStringValue)("initial"));
var initial = function (dict) {
    return dict.initial;
};
var inheritValue = new Inherit(CSS_String.fromString(CSS_Property.isStringValue)("inherit"));
var inherit = function (dict) {
    return dict.inherit;
};
var hiddenValue = new Hidden(CSS_String.fromString(CSS_Property.isStringValue)("hidden"));
var hidden = function (dict) {
    return dict.hidden;
};
var centerValue = new Center(CSS_String.fromString(CSS_Property.isStringValue)("center"));
var center = function (dict) {
    return dict.center;
};
var call = function (dictIsString) {
    return function (dictMonoid) {
        return function (fn) {
            return function (arg) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(fn)(Data_Semigroup.append(dictMonoid.Semigroup0())(CSS_String.fromString(dictIsString)("("))(Data_Semigroup.append(dictMonoid.Semigroup0())(arg)(CSS_String.fromString(dictIsString)(")"))));
            };
        };
    };
};
var browsers = new CSS_Property.Prefixed([ new Data_Tuple.Tuple("-webkit-", ""), new Data_Tuple.Tuple("-moz-", ""), new Data_Tuple.Tuple("-ms-", ""), new Data_Tuple.Tuple("-o-", ""), new Data_Tuple.Tuple("", "") ]);
var bottomValue = new Bottom(CSS_String.fromString(CSS_Property.isStringValue)("bottom"));
var bottom = function (dict) {
    return dict.bottom;
};
var baselineValue = new Baseline(CSS_String.fromString(CSS_Property.isStringValue)("baseline"));
var baseline = function (dict) {
    return dict.baseline;
};
var autoValue = new Auto(CSS_String.fromString(CSS_Property.isStringValue)("auto"));
var auto = function (dict) {
    return dict.auto;
};
var allValue = new All(CSS_String.fromString(CSS_Property.isStringValue)("all"));
var all = function (dict) {
    return dict.all;
};
module.exports = {
    all: all,
    auto: auto,
    baseline: baseline,
    bottom: bottom,
    center: center,
    hidden: hidden,
    inherit: inherit,
    initial: initial,
    middle: middle,
    none: none,
    normal: normal,
    other: other,
    top: top,
    unset: unset,
    url: url,
    visible: visible,
    All: All,
    Auto: Auto,
    Baseline: Baseline,
    Center: Center,
    Inherit: Inherit,
    None: None,
    Normal: Normal,
    Visible: Visible,
    Hidden: Hidden,
    Initial: Initial,
    Unset: Unset,
    Top: Top,
    Middle: Middle,
    Bottom: Bottom,
    URL: URL,
    Other: Other,
    browsers: browsers,
    call: call,
    allValue: allValue,
    autoValue: autoValue,
    baselineValue: baselineValue,
    centerValue: centerValue,
    inheritValue: inheritValue,
    normalValue: normalValue,
    noneValue: noneValue,
    visibleValue: visibleValue,
    hiddenValue: hiddenValue,
    otherValue: otherValue,
    initialValue: initialValue,
    unsetValue: unsetValue,
    topValue: topValue,
    middleValue: middleValue,
    bottomValue: bottomValue,
    urlValue: urlValue
};

},{"../CSS.Property/index.js":16,"../CSS.String/index.js":20,"../Control.Category/index.js":36,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260}],15:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Data_Tuple_Nested = require("../Data.Tuple.Nested/index.js");
var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));
var top = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("top"));
var right = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("right"));
var paddingTop = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-top"));
var paddingRight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-right"));
var paddingLeft = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-left"));
var paddingBottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-bottom"));
var padding = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("padding"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
            };
        };
    };
};
var minWidth = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("min-width"));
var minHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("min-height"));
var maxWidth = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("max-width"));
var maxHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("max-height"));
var marginTop = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-top"));
var marginRight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-right"));
var marginLeft = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-left"));
var marginBottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-bottom"));
var margin = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("margin"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
            };
        };
    };
};
var lineHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("line-height"));
var left = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("left"));
var height = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("height"));
var bottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("bottom"));
module.exports = {
    width: width,
    height: height,
    minWidth: minWidth,
    minHeight: minHeight,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    top: top,
    bottom: bottom,
    left: left,
    right: right,
    padding: padding,
    paddingTop: paddingTop,
    paddingBottom: paddingBottom,
    paddingLeft: paddingLeft,
    paddingRight: paddingRight,
    margin: margin,
    marginTop: marginTop,
    marginBottom: marginBottom,
    marginLeft: marginLeft,
    marginRight: marginRight,
    lineHeight: lineHeight
};

},{"../CSS.Property/index.js":16,"../CSS.Size/index.js":19,"../CSS.String/index.js":20,"../CSS.Stylesheet/index.js":21,"../Data.Tuple.Nested/index.js":259}],16:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_String = require("../CSS.String/index.js");
var Color = require("../Color/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Prefixed = (function () {
    function Prefixed(value0) {
        this.value0 = value0;
    };
    Prefixed.create = function (value0) {
        return new Prefixed(value0);
    };
    return Prefixed;
})();
var Plain = (function () {
    function Plain(value0) {
        this.value0 = value0;
    };
    Plain.create = function (value0) {
        return new Plain(value0);
    };
    return Plain;
})();
var Value = function (x) {
    return x;
};
var Literal = function (x) {
    return x;
};
var Key = function (x) {
    return x;
};
var Val = function (value) {
    this.value = value;
};
var value = function (dict) {
    return dict.value;
};
var valValue = new Val(Control_Category.identity(Control_Category.categoryFn));
var semigroupPrefixed = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Plain && v1 instanceof Plain) {
            return Plain.create(v.value0 + v1.value0);
        };
        if (v instanceof Plain && v1 instanceof Prefixed) {
            return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                return v.value0 + v2;
            }))(v1.value0));
        };
        if (v instanceof Prefixed && v1 instanceof Plain) {
            return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                return v1.value0 + v2;
            }))(v.value0));
        };
        if (v instanceof Prefixed && v1 instanceof Prefixed) {
            return Prefixed.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
        };
        throw new Error("Failed pattern match at CSS.Property (line 25, column 1 - line 25, column 49): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var semigroupValue = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Value(Data_Semigroup.append(semigroupPrefixed)(v)(v1));
    };
});
var quote = function (s) {
    return "\"" + (s + "\"");
};
var plain = function (v) {
    if (v instanceof Prefixed) {
        return Data_Maybe.fromMaybe("")(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)("")(v.value0));
    };
    if (v instanceof Plain) {
        return v.value0;
    };
    throw new Error("Failed pattern match at CSS.Property (line 34, column 1 - line 34, column 28): " + [ v.constructor.name ]);
};
var monoidPrefixed = new Data_Monoid.Monoid(function () {
    return semigroupPrefixed;
}, new Plain(Data_Monoid.mempty(Data_Monoid.monoidString)));
var monoidValue = new Data_Monoid.Monoid(function () {
    return semigroupValue;
}, Data_Monoid.mempty(monoidPrefixed));
var isStringPrefixed = new CSS_String.IsString(Plain.create);
var isStringValue = new CSS_String.IsString(function ($123) {
    return Value(CSS_String.fromString(isStringPrefixed)($123));
});
var noCommas = function (dictVal) {
    return function ($124) {
        return Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(CSS_String.fromString(isStringValue)(" "))((function (v) {
            return Data_Functor.map(Data_Functor.functorArray)(value(dictVal))(v);
        })($124));
    };
};
var valColor = new Val(function ($125) {
    return CSS_String.fromString(isStringValue)(Color.cssStringHSLA($125));
});
var valList = function (dictVal) {
    return new Val(function ($126) {
        return Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(CSS_String.fromString(isStringValue)(", "))((function (v) {
            return Data_Functor.map(Data_Functor.functorArray)(value(dictVal))(v);
        })($126));
    });
};
var valNonEmpty = function (dictVal) {
    return new Val(function ($127) {
        return value(valList(dictVal))(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)($127));
    });
};
var valLiteral = new Val(function (v) {
    return CSS_String.fromString(isStringValue)(quote(v));
});
var valNumber = new Val(function ($128) {
    return CSS_String.fromString(isStringValue)(Data_Show.show(Data_Show.showNumber)($128));
});
var valString = new Val(CSS_String.fromString(isStringValue));
var valTuple = function (dictVal) {
    return function (dictVal1) {
        return new Val(function (v) {
            return Data_Semigroup.append(semigroupValue)(value(dictVal)(v.value0))(Data_Semigroup.append(semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(dictVal1)(v.value1)));
        });
    };
};
var valUnit = new Val(function (u) {
    return CSS_String.fromString(isStringValue)("");
});
var isStringKey = new CSS_String.IsString(function ($129) {
    return Key(CSS_String.fromString(isStringPrefixed)($129));
});
var genericValue = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericPrefixed = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Prefixed) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Plain) {
        return new Data_Generic_Rep.Inr(x.value0);
    };
    throw new Error("Failed pattern match at CSS.Property (line 20, column 8 - line 20, column 54): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Prefixed(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return new Plain(x.value0);
    };
    throw new Error("Failed pattern match at CSS.Property (line 20, column 8 - line 20, column 54): " + [ x.constructor.name ]);
});
var genericLiteral = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericKey = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var eqPrefixed = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Prefixed && y instanceof Prefixed) {
            return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Eq.eqString)))(x.value0)(y.value0);
        };
        if (x instanceof Plain && y instanceof Plain) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqValue = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqPrefixed)(x)(y);
    };
});
var ordPrefixed = new Data_Ord.Ord(function () {
    return eqPrefixed;
}, function (x) {
    return function (y) {
        if (x instanceof Prefixed && y instanceof Prefixed) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Ord.ordString)))(x.value0)(y.value0);
        };
        if (x instanceof Prefixed) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Prefixed) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Plain && y instanceof Plain) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Property (line 19, column 8 - line 19, column 44): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordValue = new Data_Ord.Ord(function () {
    return eqValue;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(ordPrefixed)(x)(y);
    };
});
var eqLiteral = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordLiteral = new Data_Ord.Ord(function () {
    return eqLiteral;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqKey = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(eqPrefixed)(x)(y);
        };
    });
};
var ordKey = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqKey(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(ordPrefixed)(x)(y);
        };
    });
};
var cast = function (v) {
    return v;
};
module.exports = {
    value: value,
    Prefixed: Prefixed,
    Plain: Plain,
    plain: plain,
    quote: quote,
    Key: Key,
    cast: cast,
    Value: Value,
    Val: Val,
    Literal: Literal,
    noCommas: noCommas,
    eqPrefixed: eqPrefixed,
    ordPrefixed: ordPrefixed,
    genericPrefixed: genericPrefixed,
    isStringPrefixed: isStringPrefixed,
    semigroupPrefixed: semigroupPrefixed,
    monoidPrefixed: monoidPrefixed,
    eqKey: eqKey,
    ordKey: ordKey,
    genericKey: genericKey,
    isStringKey: isStringKey,
    eqValue: eqValue,
    ordValue: ordValue,
    genericValue: genericValue,
    isStringValue: isStringValue,
    semigroupValue: semigroupValue,
    monoidValue: monoidValue,
    eqLiteral: eqLiteral,
    ordLiteral: ordLiteral,
    genericLiteral: genericLiteral,
    valLiteral: valLiteral,
    valValue: valValue,
    valString: valString,
    valUnit: valUnit,
    valTuple: valTuple,
    valNumber: valNumber,
    valList: valList,
    valNonEmpty: valNonEmpty,
    valColor: valColor
};

},{"../CSS.String/index.js":20,"../Color/index.js":22,"../Control.Alternative/index.js":27,"../Control.Category/index.js":36,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Profunctor.Strong/index.js":221,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Tuple/index.js":260}],17:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Selector = require("../CSS.Selector/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Sheet = function (x) {
    return x;
};
var Inline = function (x) {
    return x;
};
var sepWith = function (s) {
    return function (a) {
        return function (b) {
            return a + (s + b);
        };
    };
};
var semigroupInline = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupFile = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var properties = function (xs) {
    var sheetRules = Data_Either.either(function (v) {
        return Data_Monoid.mempty(Data_Monoid.monoidString);
    })(function (v) {
        return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ v.value0, ": ", v.value1 ]);
    });
    return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Data_Functor.map(Data_Functor.functorArray)(sheetRules)(xs));
};
var predicate = function (v) {
    if (v instanceof CSS_Selector.Id) {
        return "#" + v.value0;
    };
    if (v instanceof CSS_Selector.Class) {
        return "." + v.value0;
    };
    if (v instanceof CSS_Selector.Attr) {
        return "[" + (v.value0 + "]");
    };
    if (v instanceof CSS_Selector.AttrVal) {
        return "[" + (v.value0 + ("='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrBegins) {
        return "[" + (v.value0 + ("^='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrEnds) {
        return "[" + (v.value0 + ("$='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrContains) {
        return "[" + (v.value0 + ("*='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrSpace) {
        return "[" + (v.value0 + ("~='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrHyph) {
        return "[" + (v.value0 + ("|='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.Pseudo) {
        return ":" + v.value0;
    };
    if (v instanceof CSS_Selector.PseudoFunc) {
        return ":" + (v.value0 + ("(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at CSS.Render (line 177, column 1 - line 177, column 33): " + [ v.constructor.name ]);
};
var selector$prime$prime = function (v) {
    return function (v1) {
        if (v.length === 0 && v1 instanceof CSS_Selector.Star) {
            return [ "*" ];
        };
        if (v1 instanceof CSS_Selector.Star) {
            return [ "" ];
        };
        if (v1 instanceof CSS_Selector.Elem) {
            return [ v1.value0 ];
        };
        if (v1 instanceof CSS_Selector.PathChild) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" > "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Deep) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Adjacent) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" + "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Combined) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(selector$prime(v1.value0))(selector$prime(v1.value1));
        };
        throw new Error("Failed pattern match at CSS.Render (line 143, column 1 - line 143, column 63): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var selector$prime = function (v) {
    return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return v1 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(CSS_Selector.ordPredicate)(v.value0));
    })(selector$prime$prime(v.value0)(v.value1));
};
var selector = function ($175) {
    return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(selector$prime($175));
};
var nel = function (v) {
    if (v.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return new Data_NonEmpty.NonEmpty(v1.head, v1.tail);
    })(Data_Array.uncons(v));
};
var monoidInline = new Data_Monoid.Monoid(function () {
    return semigroupInline;
}, Data_Monoid.mempty(Data_Monoid.monoidString));
var monoidFile = new Data_Monoid.Monoid(function () {
    return semigroupFile;
}, Data_Monoid.mempty(Data_Monoid.monoidString));
var merger = function (v) {
    if (v.value0 instanceof CSS_Stylesheet.Child) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.child(merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Sub) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.deep(merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Root) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.deep(v.value0.value0)(merger(xs$prime));
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Pop) {
        return Data_Maybe.maybe(CSS_Selector.element("TODO"))(merger)(nel(Data_Array.drop(v.value0.value0)(Data_Array.cons(v.value0)(v.value1))));
    };
    if (v.value0 instanceof CSS_Stylesheet.Self) {
        return Data_Maybe.maybe(CSS_Selector["with"](CSS_Selector.star)(v.value0.value0))(function (xs$prime) {
            return CSS_Selector["with"](merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    throw new Error("Failed pattern match at CSS.Render (line 170, column 3 - line 175, column 106): " + [ v.value0.constructor.name ]);
};
var mediaType = function (v) {
    return CSS_Property.plain(v);
};
var imp = function (t) {
    return Data_Maybe.Just.create(Data_These.That.create(Sheet(CSS_String.fromString(CSS_String.isStringString)("@import url(" + (t + ");\x0a")))));
};
var getSheet = function (v) {
    return v;
};
var renderedSheet = function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($176) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(getSheet)(Data_These.theseRight($176));
    });
};
var getInline = function (v) {
    return v;
};
var renderedInline = function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($177) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(getInline)(Data_These.theseLeft($177));
    });
};
var genericSheet = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericInline = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var feature = function (v) {
    return Data_Maybe.maybe(v.value0)(function (v1) {
        return "(" + (v.value0 + (": " + (CSS_Property.plain(v1) + ")")));
    })(v.value1);
};
var mediaQuery = function (v) {
    return "@media " + (mediaType(v.value1) + Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(function ($178) {
        return (function (v1) {
            return " and " + v1;
        })(feature($178));
    })(v.value2)));
};
var eqSheet = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordSheet = new Data_Ord.Ord(function () {
    return eqSheet;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqInline = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordInline = new Data_Ord.Ord(function () {
    return eqInline;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var collect$prime = function (v) {
    return function (v1) {
        if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Plain) {
            return [ new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v1.value0)) ];
        };
        if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Plain) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                return Data_Either.Right.create(new Data_Tuple.Tuple(v3.value0 + v3.value1, v1.value0));
            })(v.value0);
        };
        if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Prefixed) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v2.value0 + v2.value1));
            })(v1.value0);
        };
        if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Prefixed) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                return Data_Maybe.maybe(new Data_Either.Left(v2.value0 + v2.value1))(function ($179) {
                    return Data_Either.Right.create(Data_Tuple.Tuple.create(v2.value0 + v2.value1)((function (v3) {
                        return v2.value0 + v3;
                    })($179)));
                })(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2.value0)(v1.value0));
            })(v.value0);
        };
        throw new Error("Failed pattern match at CSS.Render (line 158, column 1 - line 158, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var collect = function (v) {
    return collect$prime(v.value0)(v.value1);
};
var rule$prime = function (sel) {
    return function (props) {
        var p = Control_Bind.bind(Control_Bind.bindArray)(props)(collect);
        var q = Data_Functor.map(Data_Maybe.functorMaybe)(function ($180) {
            return Data_These.This.create(Inline(properties(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)($180))));
        })(nel(p));
        var o = function (sel$prime) {
            return Data_Maybe.Just.create(Data_These.That.create(Sheet(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}\x0a" ]))));
        };
        return Data_Maybe.maybe(q)(o)(nel(sel));
    };
};
var rules = function (sel) {
    return function (rs) {
        var queries = function (v) {
            if (v instanceof CSS_Stylesheet.Query) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var queryRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Tuple.uncurry(Data_Function.flip(query$prime)(sel)))(Data_Array.mapMaybe(queries)(rs));
        var property = function (v) {
            if (v instanceof CSS_Stylesheet.Property) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var topRules = (function () {
            var rs$prime = Data_Array.mapMaybe(property)(rs);
            var $162 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])(rs$prime);
            if ($162) {
                return rule$prime(sel)(rs$prime);
            };
            return Data_Maybe.Nothing.value;
        })();
        var nestedRules = function (a) {
            return rules(Data_Array.cons(a)(sel));
        };
        var nested = function (v) {
            if (v instanceof CSS_Stylesheet.Nested) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var nestedSheets = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
        var kframes = function (v) {
            if (v instanceof CSS_Stylesheet.Keyframe) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var keyframeRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(kframe)(Data_Array.mapMaybe(kframes)(rs));
        var imports = function (v) {
            if (v instanceof CSS_Stylesheet.Import) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var importRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(imp)(Data_Array.mapMaybe(imports)(rs));
        var faces = function (v) {
            if (v instanceof CSS_Stylesheet.Face) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var faceRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(face)(Data_Array.mapMaybe(faces)(rs));
        return Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(importRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(keyframeRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(faceRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(nestedSheets)(queryRules)))));
    };
};
var query$prime = function (q) {
    return function (sel) {
        return function (rs) {
            return Data_Maybe.Just.create(Data_These.That.create(Sheet(mediaQuery(q) + (" { " + (Data_Maybe.fromMaybe("")(renderedSheet(rules(sel)(rs))) + " }\x0a")))));
        };
    };
};
var kframe = function (v) {
    var renderContent = " " + (v.value0 + (" { " + (Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Tuple.uncurry(frame))(v.value1)) + " }\x0a")));
    var keywords = [ "@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes" ];
    var allKeywordsWithContent = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return v1 + renderContent;
    })(keywords));
    return Data_Maybe.Just.create(Data_These.That.create(Sheet(allKeywordsWithContent)));
};
var frame = function (p) {
    return function (rs) {
        var x = Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs)));
        return Data_Show.show(Data_Show.showNumber)(p) + ("% " + ("{ " + (x + " }")));
    };
};
var face = function (rs) {
    return Data_Maybe.Just.create(Data_These.That.create(Sheet("@font-face { " + (Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs))) + " }\x0a"))));
};
var render = function ($181) {
    return rules([  ])(CSS_Stylesheet.runS($181));
};
var putInline = function (s) {
    return Effect_Console.log(Data_Maybe.fromMaybe("")(renderedInline(render(s))));
};
var putStyleSheet = function (s) {
    return Effect_Console.log(Data_Maybe.fromMaybe("")(renderedSheet(render(s))));
};
module.exports = {
    Inline: Inline,
    getInline: getInline,
    Sheet: Sheet,
    getSheet: getSheet,
    renderedInline: renderedInline,
    renderedSheet: renderedSheet,
    render: render,
    putInline: putInline,
    putStyleSheet: putStyleSheet,
    kframe: kframe,
    frame: frame,
    "query'": query$prime,
    mediaQuery: mediaQuery,
    mediaType: mediaType,
    feature: feature,
    face: face,
    rules: rules,
    imp: imp,
    "rule'": rule$prime,
    selector: selector,
    "selector'": selector$prime,
    "selector''": selector$prime$prime,
    sepWith: sepWith,
    collect: collect,
    "collect'": collect$prime,
    properties: properties,
    merger: merger,
    predicate: predicate,
    nel: nel,
    eqInline: eqInline,
    ordInline: ordInline,
    genericInline: genericInline,
    semigroupInline: semigroupInline,
    monoidInline: monoidInline,
    eqSheet: eqSheet,
    ordSheet: ordSheet,
    genericSheet: genericSheet,
    semigroupFile: semigroupFile,
    monoidFile: monoidFile
};

},{"../CSS.Property/index.js":16,"../CSS.Selector/index.js":18,"../CSS.String/index.js":20,"../CSS.Stylesheet/index.js":21,"../Control.Alternative/index.js":27,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Array/index.js":98,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep/index.js":162,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.These/index.js":251,"../Data.Tuple/index.js":260,"../Effect.Console/index.js":281}],18:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_String = require("../CSS.String/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Id = (function () {
    function Id(value0) {
        this.value0 = value0;
    };
    Id.create = function (value0) {
        return new Id(value0);
    };
    return Id;
})();
var Class = (function () {
    function Class(value0) {
        this.value0 = value0;
    };
    Class.create = function (value0) {
        return new Class(value0);
    };
    return Class;
})();
var Attr = (function () {
    function Attr(value0) {
        this.value0 = value0;
    };
    Attr.create = function (value0) {
        return new Attr(value0);
    };
    return Attr;
})();
var AttrVal = (function () {
    function AttrVal(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrVal.create = function (value0) {
        return function (value1) {
            return new AttrVal(value0, value1);
        };
    };
    return AttrVal;
})();
var AttrBegins = (function () {
    function AttrBegins(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrBegins.create = function (value0) {
        return function (value1) {
            return new AttrBegins(value0, value1);
        };
    };
    return AttrBegins;
})();
var AttrEnds = (function () {
    function AttrEnds(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrEnds.create = function (value0) {
        return function (value1) {
            return new AttrEnds(value0, value1);
        };
    };
    return AttrEnds;
})();
var AttrContains = (function () {
    function AttrContains(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrContains.create = function (value0) {
        return function (value1) {
            return new AttrContains(value0, value1);
        };
    };
    return AttrContains;
})();
var AttrSpace = (function () {
    function AttrSpace(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrSpace.create = function (value0) {
        return function (value1) {
            return new AttrSpace(value0, value1);
        };
    };
    return AttrSpace;
})();
var AttrHyph = (function () {
    function AttrHyph(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrHyph.create = function (value0) {
        return function (value1) {
            return new AttrHyph(value0, value1);
        };
    };
    return AttrHyph;
})();
var Pseudo = (function () {
    function Pseudo(value0) {
        this.value0 = value0;
    };
    Pseudo.create = function (value0) {
        return new Pseudo(value0);
    };
    return Pseudo;
})();
var PseudoFunc = (function () {
    function PseudoFunc(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PseudoFunc.create = function (value0) {
        return function (value1) {
            return new PseudoFunc(value0, value1);
        };
    };
    return PseudoFunc;
})();
var Refinement = function (x) {
    return x;
};
var Star = (function () {
    function Star() {

    };
    Star.value = new Star();
    return Star;
})();
var Elem = (function () {
    function Elem(value0) {
        this.value0 = value0;
    };
    Elem.create = function (value0) {
        return new Elem(value0);
    };
    return Elem;
})();
var PathChild = (function () {
    function PathChild(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PathChild.create = function (value0) {
        return function (value1) {
            return new PathChild(value0, value1);
        };
    };
    return PathChild;
})();
var Deep = (function () {
    function Deep(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Deep.create = function (value0) {
        return function (value1) {
            return new Deep(value0, value1);
        };
    };
    return Deep;
})();
var Adjacent = (function () {
    function Adjacent(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Adjacent.create = function (value0) {
        return function (value1) {
            return new Adjacent(value0, value1);
        };
    };
    return Adjacent;
})();
var Combined = (function () {
    function Combined(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Combined.create = function (value0) {
        return function (value1) {
            return new Combined(value0, value1);
        };
    };
    return Combined;
})();
var Selector = (function () {
    function Selector(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Selector.create = function (value0) {
        return function (value1) {
            return new Selector(value0, value1);
        };
    };
    return Selector;
})();
var $$with = function (v) {
    return function (v1) {
        return new Selector(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1), v.value1);
    };
};
var star = new Selector([  ], Star.value);
var isStringSelector = new CSS_String.IsString(function (s) {
    var v = Data_String_CodePoints.take(1)(s);
    if (v === "#") {
        return new Selector([ Id.create(Data_String_CodePoints.drop(1)(s)) ], Star.value);
    };
    if (v === ".") {
        return new Selector([ Class.create(Data_String_CodePoints.drop(1)(s)) ], Star.value);
    };
    return new Selector([  ], new Elem(s));
});
var isStringRefinement = new CSS_String.IsString(function (s) {
    return [ (function () {
        var v = Data_String_CodePoints.take(1)(s);
        if (v === "#") {
            return Id.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === ".") {
            return Class.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === ":") {
            return Pseudo.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === "@") {
            return Attr.create(Data_String_CodePoints.drop(1)(s));
        };
        return new Attr(s);
    })() ];
});
var genericSelector = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Selector(x.value0, x.value1);
});
var genericRefinement = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericPredicate = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Id) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Class) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof Attr) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof AttrVal) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
    };
    if (x instanceof AttrBegins) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
    };
    if (x instanceof AttrEnds) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))));
    };
    if (x instanceof AttrContains) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))));
    };
    if (x instanceof AttrSpace) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))));
    };
    if (x instanceof AttrHyph) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))))));
    };
    if (x instanceof Pseudo) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))));
    };
    if (x instanceof PseudoFunc) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)))))))))));
    };
    throw new Error("Failed pattern match at CSS.Selector (line 25, column 8 - line 25, column 56): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Id(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Class(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Attr(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new AttrVal(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return new AttrBegins(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
        return new AttrEnds(x.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
        return new AttrContains(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
        return new AttrSpace(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
        return new AttrHyph(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
        return new Pseudo(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))) {
        return new PseudoFunc(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    throw new Error("Failed pattern match at CSS.Selector (line 25, column 8 - line 25, column 56): " + [ x.constructor.name ]);
});
var genericPath = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        if (x instanceof Star) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Elem) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof PathChild) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
        };
        if (x instanceof Deep) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
        };
        if (x instanceof Adjacent) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
        };
        if (x instanceof Combined) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1))))));
        };
        throw new Error("Failed pattern match at CSS.Selector (line 54, column 8 - line 54, column 69): " + [ x.constructor.name ]);
    }, function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Star.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new Elem(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new PathChild(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new Deep(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return new Adjacent(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
            return new Combined(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
        };
        throw new Error("Failed pattern match at CSS.Selector (line 54, column 8 - line 54, column 69): " + [ x.constructor.name ]);
    });
};
var eqPredicate = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Id && y instanceof Id) {
            return x.value0 === y.value0;
        };
        if (x instanceof Class && y instanceof Class) {
            return x.value0 === y.value0;
        };
        if (x instanceof Attr && y instanceof Attr) {
            return x.value0 === y.value0;
        };
        if (x instanceof AttrVal && y instanceof AttrVal) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrBegins && y instanceof AttrBegins) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrEnds && y instanceof AttrEnds) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrContains && y instanceof AttrContains) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrSpace && y instanceof AttrSpace) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrHyph && y instanceof AttrHyph) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof Pseudo && y instanceof Pseudo) {
            return x.value0 === y.value0;
        };
        if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
            return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.value1)(y.value1);
        };
        return false;
    };
});
var eqRefinement = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Eq.eqArray(eqPredicate))(x)(y);
    };
});
var ordPredicate = new Data_Ord.Ord(function () {
    return eqPredicate;
}, function (x) {
    return function (y) {
        if (x instanceof Id && y instanceof Id) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Id) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Id) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Class && y instanceof Class) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Class) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Class) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Attr && y instanceof Attr) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Attr) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Attr) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrVal && y instanceof AttrVal) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrVal) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrVal) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrBegins && y instanceof AttrBegins) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrBegins) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrBegins) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrEnds && y instanceof AttrEnds) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrEnds) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrEnds) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrContains && y instanceof AttrContains) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrContains) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrContains) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrSpace && y instanceof AttrSpace) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrSpace) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrSpace) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrHyph && y instanceof AttrHyph) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrHyph) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrHyph) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Pseudo && y instanceof Pseudo) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Pseudo) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Pseudo) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordString))(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at CSS.Selector (line 24, column 8 - line 24, column 46): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordRefinement = new Data_Ord.Ord(function () {
    return eqRefinement;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordArray(ordPredicate))(x)(y);
    };
});
var eqPath = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Star && y instanceof Star) {
                return true;
            };
            if (x instanceof Elem && y instanceof Elem) {
                return x.value0 === y.value0;
            };
            if (x instanceof PathChild && y instanceof PathChild) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Deep && y instanceof Deep) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Adjacent && y instanceof Adjacent) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Combined && y instanceof Combined) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            return false;
        };
    });
};
var eqSelector = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqRefinement)(x.value0)(y.value0) && Data_Eq.eq(eqPath(eqSelector))(x.value1)(y.value1);
    };
});
var ordPath = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPath(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Star && y instanceof Star) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Star) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Star) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Elem && y instanceof Elem) {
                return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            };
            if (x instanceof Elem) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Elem) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof PathChild && y instanceof PathChild) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof PathChild) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PathChild) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Deep && y instanceof Deep) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Deep) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Deep) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Adjacent && y instanceof Adjacent) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Adjacent) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Adjacent) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Combined && y instanceof Combined) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at CSS.Selector (line 53, column 8 - line 53, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var ordSelector = new Data_Ord.Ord(function () {
    return eqSelector;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(ordRefinement)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(ordPath(ordSelector))(x.value1)(y.value1);
    };
});
var element = function (e) {
    return new Selector([  ], new Elem(e));
};
var deep = function (a) {
    return function (b) {
        return new Selector([  ], new Deep(a, b));
    };
};
var child = function (a) {
    return function (b) {
        return new Selector([  ], new PathChild(a, b));
    };
};
module.exports = {
    Id: Id,
    Class: Class,
    Attr: Attr,
    AttrVal: AttrVal,
    AttrBegins: AttrBegins,
    AttrEnds: AttrEnds,
    AttrContains: AttrContains,
    AttrSpace: AttrSpace,
    AttrHyph: AttrHyph,
    Pseudo: Pseudo,
    PseudoFunc: PseudoFunc,
    Refinement: Refinement,
    Star: Star,
    Elem: Elem,
    PathChild: PathChild,
    Deep: Deep,
    Adjacent: Adjacent,
    Combined: Combined,
    Selector: Selector,
    star: star,
    element: element,
    deep: deep,
    child: child,
    "with": $$with,
    eqPredicate: eqPredicate,
    ordPredicate: ordPredicate,
    genericPredicate: genericPredicate,
    eqRefinement: eqRefinement,
    ordRefinement: ordRefinement,
    genericRefinement: genericRefinement,
    isStringRefinement: isStringRefinement,
    eqPath: eqPath,
    ordPath: ordPath,
    genericPath: genericPath,
    eqSelector: eqSelector,
    ordSelector: ordSelector,
    genericSelector: genericSelector,
    isStringSelector: isStringSelector
};

},{"../CSS.String/index.js":20,"../Data.Eq/index.js":133,"../Data.Generic.Rep/index.js":162,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.String.CodePoints/index.js":237}],19:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Common = require("../CSS.Common/index.js");
var CSS_Property = require("../CSS.Property/index.js");
var CSS_String = require("../CSS.String/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Size = function (x) {
    return x;
};
var Angle = function (x) {
    return x;
};
var vw = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vw"));
};
var vmin = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vmin"));
};
var vmax = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vmax"));
};
var vh = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vh"));
};
var valSize = new CSS_Property.Val(function (v) {
    return v;
});
var valAngle = new CSS_Property.Val(function (v) {
    return v;
});
var sym = function (f) {
    return function (a) {
        return f(a)(a)(a)(a);
    };
};
var rem = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("rem"));
};
var rad = function (i) {
    return Angle(Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("rad")));
};
var px = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
};
var pt = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("pt"));
};
var pct = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("%"));
};
var nil = Size(CSS_String.fromString(CSS_Property.isStringValue)("0"));
var isStringSize = new CSS_String.IsString(function ($42) {
    return Size(CSS_String.fromString(CSS_Property.isStringValue)($42));
});
var genericSize = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var genericAngle = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var ex = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("ex"));
};
var eqSize = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
        };
    });
};
var ordSize = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqSize(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
        };
    });
};
var eqAngle = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
        };
    });
};
var ordAngle = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqAngle(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
        };
    });
};
var em = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("em"));
};
var deg = function (i) {
    return Angle(Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("deg")));
};
var autoSize = new CSS_Common.Auto(CSS_String.fromString(isStringSize)("auto"));
module.exports = {
    Size: Size,
    nil: nil,
    px: px,
    pt: pt,
    em: em,
    ex: ex,
    pct: pct,
    rem: rem,
    vw: vw,
    vh: vh,
    vmin: vmin,
    vmax: vmax,
    sym: sym,
    Angle: Angle,
    deg: deg,
    rad: rad,
    eqSize: eqSize,
    ordSize: ordSize,
    genericSize: genericSize,
    isStringSize: isStringSize,
    valSize: valSize,
    autoSize: autoSize,
    eqAngle: eqAngle,
    ordAngle: ordAngle,
    genericAngle: genericAngle,
    valAngle: valAngle
};

},{"../CSS.Common/index.js":14,"../CSS.Property/index.js":16,"../CSS.String/index.js":20,"../Data.Eq/index.js":133,"../Data.Generic.Rep/index.js":162,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230}],20:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var IsString = function (fromString) {
    this.fromString = fromString;
};
var isStringString = new IsString(Control_Category.identity(Control_Category.categoryFn));
var fromString = function (dict) {
    return dict.fromString;
};
module.exports = {
    fromString: fromString,
    IsString: IsString,
    isStringString: isStringString
};

},{"../Control.Category/index.js":36}],21:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Selector = require("../CSS.Selector/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Writer = require("../Control.Monad.Writer/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Not = (function () {
    function Not() {

    };
    Not.value = new Not();
    return Not;
})();
var Only = (function () {
    function Only() {

    };
    Only.value = new Only();
    return Only;
})();
var MediaType = function (x) {
    return x;
};
var Feature = (function () {
    function Feature(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Feature.create = function (value0) {
        return function (value1) {
            return new Feature(value0, value1);
        };
    };
    return Feature;
})();
var MediaQuery = (function () {
    function MediaQuery(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    MediaQuery.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new MediaQuery(value0, value1, value2);
            };
        };
    };
    return MediaQuery;
})();
var Self = (function () {
    function Self(value0) {
        this.value0 = value0;
    };
    Self.create = function (value0) {
        return new Self(value0);
    };
    return Self;
})();
var Root = (function () {
    function Root(value0) {
        this.value0 = value0;
    };
    Root.create = function (value0) {
        return new Root(value0);
    };
    return Root;
})();
var Pop = (function () {
    function Pop(value0) {
        this.value0 = value0;
    };
    Pop.create = function (value0) {
        return new Pop(value0);
    };
    return Pop;
})();
var Child = (function () {
    function Child(value0) {
        this.value0 = value0;
    };
    Child.create = function (value0) {
        return new Child(value0);
    };
    return Child;
})();
var Sub = (function () {
    function Sub(value0) {
        this.value0 = value0;
    };
    Sub.create = function (value0) {
        return new Sub(value0);
    };
    return Sub;
})();
var Property = (function () {
    function Property(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Property.create = function (value0) {
        return function (value1) {
            return new Property(value0, value1);
        };
    };
    return Property;
})();
var Nested = (function () {
    function Nested(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Nested.create = function (value0) {
        return function (value1) {
            return new Nested(value0, value1);
        };
    };
    return Nested;
})();
var Query = (function () {
    function Query(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Query.create = function (value0) {
        return function (value1) {
            return new Query(value0, value1);
        };
    };
    return Query;
})();
var Face = (function () {
    function Face(value0) {
        this.value0 = value0;
    };
    Face.create = function (value0) {
        return new Face(value0);
    };
    return Face;
})();
var Keyframe = (function () {
    function Keyframe(value0) {
        this.value0 = value0;
    };
    Keyframe.create = function (value0) {
        return new Keyframe(value0);
    };
    return Keyframe;
})();
var Import = (function () {
    function Import(value0) {
        this.value0 = value0;
    };
    Import.create = function (value0) {
        return new Import(value0);
    };
    return Import;
})();
var Keyframes = (function () {
    function Keyframes(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Keyframes.create = function (value0) {
        return function (value1) {
            return new Keyframes(value0, value1);
        };
    };
    return Keyframes;
})();
var S = function (x) {
    return x;
};
var runS = function (v) {
    return Control_Monad_Writer.execWriter(v);
};
var rule = function ($403) {
    return S(Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Data_Array.singleton($403)));
};
var select = function (sel) {
    return function (rs) {
        return rule(new Nested(new Sub(sel), runS(rs)));
    };
};
var query = function (ty) {
    return function (fs) {
        return function ($404) {
            return rule(Query.create(new MediaQuery(Data_Maybe.Nothing.value, ty, fs))(runS($404)));
        };
    };
};
var keyframes = function (n) {
    return function (xs) {
        return rule(new Keyframe(new Keyframes(n, Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(runS))(xs))));
    };
};
var keyframesFromTo = function (n) {
    return function (a) {
        return function (b) {
            return keyframes(n)(new Data_NonEmpty.NonEmpty(new Data_Tuple.Tuple(0.0, a), [ new Data_Tuple.Tuple(100.0, b) ]));
        };
    };
};
var key = function (dictVal) {
    return function (k) {
        return function (v) {
            return rule(new Property(CSS_Property.cast(k), CSS_Property.value(dictVal)(v)));
        };
    };
};
var prefixed = function (dictVal) {
    return function (xs) {
        return key(dictVal)(xs);
    };
};
var importUrl = function ($405) {
    return rule(Import.create($405));
};
var genericRule = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Property) {
        return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
    };
    if (x instanceof Nested) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
    };
    if (x instanceof Query) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
    };
    if (x instanceof Face) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
    };
    if (x instanceof Keyframe) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
    };
    if (x instanceof Import) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))));
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 69, column 8 - line 69, column 46): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Property(x.value0.value0, x.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Nested(x.value0.value0.value0, x.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Query(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new Face(x.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return new Keyframe(x.value0.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return new Import(x.value0.value0.value0.value0.value0);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 69, column 8 - line 69, column 46): " + [ x.constructor.name ]);
});
var genericNotOrOnly = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Not) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Only) {
        return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 28, column 8 - line 28, column 56): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return Not.value;
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return Only.value;
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 28, column 8 - line 28, column 56): " + [ x.constructor.name ]);
});
var genericMediaType = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericMediaQuery = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
}, function (x) {
    return new MediaQuery(x.value0, x.value1.value0, x.value1.value1);
});
var genericKeyframes = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Keyframes(x.value0, x.value1);
});
var genericFeature = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Feature(x.value0, x.value1);
});
var genericApp = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Self) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Root) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof Pop) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof Child) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
    };
    if (x instanceof Sub) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 51, column 8 - line 51, column 44): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Self(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Root(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Pop(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new Child(x.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
        return new Sub(x.value0.value0.value0.value0);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 51, column 8 - line 51, column 44): " + [ x.constructor.name ]);
});
var functorStyleM = new Data_Functor.Functor(function (f) {
    return function (v) {
        return S(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v));
    };
});
var fontFace = function ($406) {
    return rule(Face.create(runS($406)));
};
var eqNotOrOnly = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Not && y instanceof Not) {
            return true;
        };
        if (x instanceof Only && y instanceof Only) {
            return true;
        };
        return false;
    };
});
var ordNotOrOnly = new Data_Ord.Ord(function () {
    return eqNotOrOnly;
}, function (x) {
    return function (y) {
        if (x instanceof Not && y instanceof Not) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Not) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Not) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Only && y instanceof Only) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 27, column 8 - line 27, column 45): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqMediaType = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
    };
});
var ordMediaType = new Data_Ord.Ord(function () {
    return eqMediaType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
    };
});
var eqFeature = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Data_Maybe.eqMaybe(CSS_Property.eqValue))(x.value1)(y.value1);
    };
});
var eqMediaQuery = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(eqNotOrOnly))(x.value0)(y.value0) && Data_Eq.eq(eqMediaType)(x.value1)(y.value1) && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(eqFeature))(x.value2)(y.value2);
    };
});
var ordFeature = new Data_Ord.Ord(function () {
    return eqFeature;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Maybe.ordMaybe(CSS_Property.ordValue))(x.value1)(y.value1);
    };
});
var ordMediaQuery = new Data_Ord.Ord(function () {
    return eqMediaQuery;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Maybe.ordMaybe(ordNotOrOnly))(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(ordMediaType)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_NonEmpty.ordNonEmpty(Data_Ord.ord1Array)(ordFeature))(x.value2)(y.value2);
    };
});
var eqApp = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Self && y instanceof Self) {
            return Data_Eq.eq(CSS_Selector.eqRefinement)(x.value0)(y.value0);
        };
        if (x instanceof Root && y instanceof Root) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        if (x instanceof Pop && y instanceof Pop) {
            return x.value0 === y.value0;
        };
        if (x instanceof Child && y instanceof Child) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        if (x instanceof Sub && y instanceof Sub) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        return false;
    };
});
var eqRule = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Property && y instanceof Property) {
            return Data_Eq.eq(CSS_Property.eqKey(Data_Eq.eqUnit))(x.value0)(y.value0) && Data_Eq.eq(CSS_Property.eqValue)(x.value1)(y.value1);
        };
        if (x instanceof Nested && y instanceof Nested) {
            return Data_Eq.eq(eqApp)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value1)(y.value1);
        };
        if (x instanceof Query && y instanceof Query) {
            return Data_Eq.eq(eqMediaQuery)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value1)(y.value1);
        };
        if (x instanceof Face && y instanceof Face) {
            return Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value0)(y.value0);
        };
        if (x instanceof Keyframe && y instanceof Keyframe) {
            return Data_Eq.eq(eqKeyframes)(x.value0)(y.value0);
        };
        if (x instanceof Import && y instanceof Import) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqKeyframes = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(Data_Tuple.eqTuple(Data_Eq.eqNumber)(Data_Eq.eqArray(eqRule))))(x.value1)(y.value1);
    };
});
var ordApp = new Data_Ord.Ord(function () {
    return eqApp;
}, function (x) {
    return function (y) {
        if (x instanceof Self && y instanceof Self) {
            return Data_Ord.compare(CSS_Selector.ordRefinement)(x.value0)(y.value0);
        };
        if (x instanceof Self) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Self) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Root && y instanceof Root) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        if (x instanceof Root) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Root) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Pop && y instanceof Pop) {
            return Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
        };
        if (x instanceof Pop) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Pop) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Child && y instanceof Child) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        if (x instanceof Child) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Child) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sub && y instanceof Sub) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 50, column 8 - line 50, column 34): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordRule = new Data_Ord.Ord(function () {
    return eqRule;
}, function (x) {
    return function (y) {
        if (x instanceof Property && y instanceof Property) {
            var v = Data_Ord.compare(CSS_Property.ordKey(Data_Ord.ordUnit))(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(CSS_Property.ordValue)(x.value1)(y.value1);
        };
        if (x instanceof Property) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Property) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Nested && y instanceof Nested) {
            var v = Data_Ord.compare(ordApp)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value1)(y.value1);
        };
        if (x instanceof Nested) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Nested) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Query && y instanceof Query) {
            var v = Data_Ord.compare(ordMediaQuery)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value1)(y.value1);
        };
        if (x instanceof Query) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Query) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Face && y instanceof Face) {
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value0)(y.value0);
        };
        if (x instanceof Face) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Face) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Keyframe && y instanceof Keyframe) {
            return Data_Ord.compare(ordKeyframes)(x.value0)(y.value0);
        };
        if (x instanceof Keyframe) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Keyframe) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Import && y instanceof Import) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 68, column 8 - line 68, column 36): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordKeyframes = new Data_Ord.Ord(function () {
    return eqKeyframes;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_NonEmpty.ordNonEmpty(Data_Ord.ord1Array)(Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordArray(ordRule))))(x.value1)(y.value1);
    };
});
var applyStyleM = new Control_Apply.Apply(function () {
    return functorStyleM;
}, function (v) {
    return function (v1) {
        return S(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1));
    };
});
var bindStyleM = new Control_Bind.Bind(function () {
    return applyStyleM;
}, function (v) {
    return function (f) {
        return S(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Data_Identity.bindIdentity))(v)(function ($407) {
            return (function (v1) {
                return v1;
            })(f($407));
        }));
    };
});
var semigroupCSS = new Data_Semigroup.Semigroup(Control_Apply.applySecond(applyStyleM));
var applicativeStyleM = new Control_Applicative.Applicative(function () {
    return applyStyleM;
}, function ($408) {
    return S(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Data_Identity.applicativeIdentity))($408));
});
var monadStyleM = new Control_Monad.Monad(function () {
    return applicativeStyleM;
}, function () {
    return bindStyleM;
});
module.exports = {
    MediaType: MediaType,
    Not: Not,
    Only: Only,
    MediaQuery: MediaQuery,
    Feature: Feature,
    Self: Self,
    Root: Root,
    Pop: Pop,
    Child: Child,
    Sub: Sub,
    Keyframes: Keyframes,
    Property: Property,
    Nested: Nested,
    Query: Query,
    Face: Face,
    Keyframe: Keyframe,
    Import: Import,
    S: S,
    runS: runS,
    rule: rule,
    key: key,
    prefixed: prefixed,
    select: select,
    query: query,
    keyframes: keyframes,
    keyframesFromTo: keyframesFromTo,
    fontFace: fontFace,
    importUrl: importUrl,
    eqMediaType: eqMediaType,
    ordMediaType: ordMediaType,
    genericMediaType: genericMediaType,
    eqNotOrOnly: eqNotOrOnly,
    ordNotOrOnly: ordNotOrOnly,
    genericNotOrOnly: genericNotOrOnly,
    eqMediaQuery: eqMediaQuery,
    ordMediaQuery: ordMediaQuery,
    genericMediaQuery: genericMediaQuery,
    eqFeature: eqFeature,
    ordFeature: ordFeature,
    genericFeature: genericFeature,
    eqApp: eqApp,
    ordApp: ordApp,
    genericApp: genericApp,
    eqKeyframes: eqKeyframes,
    ordKeyframes: ordKeyframes,
    genericKeyframes: genericKeyframes,
    eqRule: eqRule,
    ordRule: ordRule,
    genericRule: genericRule,
    functorStyleM: functorStyleM,
    applyStyleM: applyStyleM,
    bindStyleM: bindStyleM,
    applicativeStyleM: applicativeStyleM,
    monadStyleM: monadStyleM,
    semigroupCSS: semigroupCSS
};

},{"../CSS.Property/index.js":16,"../CSS.Selector/index.js":18,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad.Writer.Trans/index.js":63,"../Control.Monad.Writer/index.js":64,"../Control.Monad/index.js":65,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Generic.Rep/index.js":162,"../Data.Identity/index.js":166,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Profunctor.Strong/index.js":221,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260}],22:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var $$Math = require("../Math/index.js");
var UnclippedHue = function (x) {
    return x;
};
var RGB = (function () {
    function RGB() {

    };
    RGB.value = new RGB();
    return RGB;
})();
var HSL = (function () {
    function HSL() {

    };
    HSL.value = new HSL();
    return HSL;
})();
var LCh = (function () {
    function LCh() {

    };
    LCh.value = new LCh();
    return LCh;
})();
var Lab = (function () {
    function Lab() {

    };
    Lab.value = new Lab();
    return Lab;
})();
var HSLA = (function () {
    function HSLA(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    HSLA.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new HSLA(value0, value1, value2, value3);
                };
            };
        };
    };
    return HSLA;
})();
var modPos = function (x) {
    return function (y) {
        return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
    };
};
var rgba = function (red$prime) {
    return function (green$prime) {
        return function (blue$prime) {
            return function (alpha) {
                var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                var r = Data_Int.toNumber(red) / 255.0;
                var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                var g = Data_Int.toNumber(green) / 255.0;
                var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                var chroma = maxChroma - minChroma | 0;
                var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                var saturation = (function () {
                    if (chroma === 0) {
                        return 0.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                    };
                    throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                })();
                var b = Data_Int.toNumber(blue) / 255.0;
                var hue$prime = function (v) {
                    if (v === 0) {
                        return 0.0;
                    };
                    if (maxChroma === red) {
                        return modPos((g - b) / chroma$prime)(6.0);
                    };
                    if (maxChroma === green) {
                        return (b - r) / chroma$prime + 2.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return (r - g) / chroma$prime + 4.0;
                    };
                    throw new Error("Failed pattern match at Color (line 148, column 5 - line 149, column 5): " + [ v.constructor.name ]);
                };
                var hue = 60.0 * hue$prime(chroma);
                return new HSLA(hue, saturation, lightness, alpha);
            };
        };
    };
};
var rgb = function (r) {
    return function (g) {
        return function (b) {
            return rgba(r)(g)(b)(1.0);
        };
    };
};
var rgba$prime = function (r) {
    return function (g) {
        return function (b) {
            return function (a) {
                return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
            };
        };
    };
};
var rgb$prime = function (r) {
    return function (g) {
        return function (b) {
            return rgba$prime(r)(g)(b)(1.0);
        };
    };
};
var xyz = function (x) {
    return function (y) {
        return function (z) {
            var f = function (c) {
                if (c <= 3.1308e-3) {
                    return 12.92 * c;
                };
                if (Data_Boolean.otherwise) {
                    return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.5e-2;
                };
                throw new Error("Failed pattern match at Color (line 224, column 5 - line 227, column 1): " + [ c.constructor.name ]);
            };
            var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
            var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
            var b = f((5.57e-2 * x - 0.204 * y) + 1.057 * z);
            return rgb$prime(r)(g)(b);
        };
    };
};
var interpolate = function (fraction) {
    return function (a) {
        return function (b) {
            return a + fraction * (b - a);
        };
    };
};
var interpolateAngle = function (fraction) {
    return function (a) {
        return function (b) {
            var paths = [ {
                from: a,
                to: b
            }, {
                from: a,
                to: b + 360.0
            }, {
                from: a + 360.0,
                to: b
            } ];
            var dist = function (v) {
                return $$Math.abs(v.to - v.from);
            };
            var shortest = Data_Maybe.fromJust()(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(dist))(paths));
            return interpolate(fraction)(shortest.from)(shortest.to);
        };
    };
};
var mixCubehelix = function (gamma) {
    return function (v) {
        return function (v1) {
            var radians = $$Math.pi / 180.0;
            var bs = v1.value1 - v.value1;
            var bl = v1.value2 - v.value2;
            var ah = (v.value0 + 120.0) * radians;
            var bh = (v1.value0 + 120.0) * radians - ah;
            return function (t) {
                var fract = $$Math.pow(v.value2 + bl * t)(gamma);
                var angle = ah + bh * t;
                var amp = (v.value1 + bs * t) * fract * (1.0 - fract);
                var b = fract + amp * (1.97294 * $$Math.cos(angle));
                var g = fract + amp * (-0.29227 * $$Math.cos(angle) - 0.90649 * $$Math.sin(angle));
                var r = fract + amp * (-0.14861 * $$Math.cos(angle) + 1.78277 * $$Math.sin(angle));
                var a = interpolate(t)(v.value3)(v1.value3);
                return rgba$prime(r)(g)(b)(a);
            };
        };
    };
};
var hsla = function (h) {
    return function (s) {
        return function (l) {
            return function (a) {
                var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                return new HSLA(h, s$prime, l$prime, a$prime);
            };
        };
    };
};
var hsva = function (h) {
    return function (v) {
        return function (v1) {
            return function (a) {
                var s = v;
                if (v1 === 0.0) {
                    return hsla(h)(s / (2.0 - s))(0.0)(a);
                };
                if (v === 0.0 && v1 === 1.0) {
                    return hsla(h)(0.0)(1.0)(a);
                };
                var tmp = (2.0 - v) * v1;
                var s = (v * v1) / (function () {
                    var $41 = tmp < 1.0;
                    if ($41) {
                        return tmp;
                    };
                    return 2.0 - tmp;
                })();
                var l = tmp / 2.0;
                return hsla(h)(s)(l)(a);
            };
        };
    };
};
var hsv = function (h) {
    return function (s) {
        return function (v) {
            return hsva(h)(s)(v)(1.0);
        };
    };
};
var lighten = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
    };
};
var rotateHue = function (angle) {
    return function (v) {
        return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
    };
};
var saturate = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
    };
};
var hsl = function (h) {
    return function (s) {
        return function (l) {
            return hsla(h)(s)(l)(1.0);
        };
    };
};
var white = hsl(0.0)(0.0)(1.0);
var graytone = function (l) {
    return hsl(0.0)(0.0)(l);
};
var fromInt = function (m) {
    var n = Data_Ord.clamp(Data_Ord.ordInt)(0)(16777215)(m);
    var r = n >> 16 & 255;
    var g = n >> 8 & 255;
    var b = n & 255;
    return rgb(r)(g)(b);
};
var fromHexString = function (str) {
    var parseHex = function ($111) {
        return Data_Maybe.fromMaybe(0)(Data_Int.fromStringAs(Data_Int.hexadecimal)($111));
    };
    var isShort = Data_String_CodePoints.length(str) === 4;
    var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
    var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
    var single = "(" + ("[0-9a-f]" + ")");
    var variant = (function () {
        if (isShort) {
            return single + (single + single);
        };
        return pair + (pair + pair);
    })();
    var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
    return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(v)(str))(function (v1) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(1))))(function (v2) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(2))))(function (v3) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(3))))(function (v4) {
                        if (isShort) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0)((16 * v4 | 0) + v4 | 0));
                        };
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(v2)(v3)(v4));
                    });
                });
            });
        });
    });
};
var desaturate = function (f) {
    return saturate(-f);
};
var darken = function (f) {
    return lighten(-f);
};
var d65 = {
    xn: 0.95047,
    yn: 1.0,
    zn: 1.08883
};
var lab = function (l) {
    return function (a) {
        return function (b) {
            var l$prime = (l + 16.0) / 116.0;
            var delta = 6.0 / 29.0;
            var finv = function (t) {
                if (t > delta) {
                    return $$Math.pow(t)(3.0);
                };
                if (Data_Boolean.otherwise) {
                    return 3.0 * delta * delta * (t - 4.0 / 29.0);
                };
                throw new Error("Failed pattern match at Color (line 249, column 5 - line 250, column 64): " + [ t.constructor.name ]);
            };
            var x = d65.xn * finv(l$prime + a / 500.0);
            var y = d65.yn * finv(l$prime);
            var z = d65.zn * finv(l$prime - b / 200.0);
            return xyz(x)(y)(z);
        };
    };
};
var lch = function (l) {
    return function (c) {
        return function (h) {
            var deg2rad = $$Math.pi / 180.0;
            var b = c * $$Math.sin(h * deg2rad);
            var a = c * $$Math.cos(h * deg2rad);
            return lab(l)(a)(b);
        };
    };
};
var cssStringHSLA = function (v) {
    var toString = function (n) {
        return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
    };
    var saturation = toString(v.value1 * 100.0) + "%";
    var lightness = toString(v.value2 * 100.0) + "%";
    var hue = toString(v.value0);
    var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
    var $69 = v.value3 === 1.0;
    if ($69) {
        return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
    };
    return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
};
var complementary = rotateHue(180.0);
var clipHue = function (v) {
    var $75 = 360.0 === v;
    if ($75) {
        return v;
    };
    return modPos(v)(360.0);
};
var toHSLA = function (v) {
    return {
        h: clipHue(v.value0),
        s: v.value1,
        l: v.value2,
        a: v.value3
    };
};
var toHSVA = function (v) {
    var s = v.value1;
    if (v.value2 === 0.0) {
        return {
            h: clipHue(v.value0),
            s: (2.0 * s) / (1.0 + s),
            v: 0.0,
            a: v.value3
        };
    };
    if (v.value1 === 0.0 && v.value2 === 1.0) {
        return {
            h: clipHue(v.value0),
            s: 0.0,
            v: 1.0,
            a: v.value3
        };
    };
    var tmp = v.value1 * (function () {
        var $90 = v.value2 < 0.5;
        if ($90) {
            return v.value2;
        };
        return 1.0 - v.value2;
    })();
    var v1 = v.value2 + tmp;
    var s = (2.0 * tmp) / (v.value2 + tmp);
    return {
        h: clipHue(v.value0),
        s: s,
        v: v1,
        a: v.value3
    };
};
var toRGBA$prime = function (v) {
    var h$prime = clipHue(v.value0) / 60.0;
    var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
    var m = v.value2 - chr / 2.0;
    var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
    var col = (function () {
        if (h$prime < 1.0) {
            return {
                r: chr,
                g: x,
                b: 0.0
            };
        };
        if (1.0 <= h$prime && h$prime < 2.0) {
            return {
                r: x,
                g: chr,
                b: 0.0
            };
        };
        if (2.0 <= h$prime && h$prime < 3.0) {
            return {
                r: 0.0,
                g: chr,
                b: x
            };
        };
        if (3.0 <= h$prime && h$prime < 4.0) {
            return {
                r: 0.0,
                g: x,
                b: chr
            };
        };
        if (4.0 <= h$prime && h$prime < 5.0) {
            return {
                r: x,
                g: 0.0,
                b: chr
            };
        };
        if (Data_Boolean.otherwise) {
            return {
                r: chr,
                g: 0.0,
                b: x
            };
        };
        throw new Error("Failed pattern match at Color (line 342, column 5 - line 347, column 61): " + [  ]);
    })();
    return {
        r: col.r + m,
        g: col.g + m,
        b: col.b + m,
        a: v.value3
    };
};
var luminance = function (col) {
    var val = toRGBA$prime(col);
    var f = function (c) {
        if (c <= 3.928e-2) {
            return c / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color (line 604, column 9 - line 607, column 9): " + [ c.constructor.name ]);
    };
    var g = f(val.g);
    var r = f(val.r);
    var b = f(val.b);
    return 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
};
var contrast = function (c1) {
    return function (c2) {
        var l2 = luminance(c2);
        var l1 = luminance(c1);
        var $101 = l1 > l2;
        if ($101) {
            return (l1 + 5.0e-2) / (l2 + 5.0e-2);
        };
        return (l2 + 5.0e-2) / (l1 + 5.0e-2);
    };
};
var isReadable = function (c1) {
    return function (c2) {
        return contrast(c1)(c2) > 4.5;
    };
};
var toRGBA = function (col) {
    var c = toRGBA$prime(col);
    var g = Data_Int.round(255.0 * c.g);
    var r = Data_Int.round(255.0 * c.r);
    var b = Data_Int.round(255.0 * c.b);
    return {
        r: r,
        g: g,
        b: b,
        a: c.a
    };
};
var cssStringRGBA = function (col) {
    var c = toRGBA(col);
    var green = Data_Show.show(Data_Show.showInt)(c.g);
    var red = Data_Show.show(Data_Show.showInt)(c.r);
    var blue = Data_Show.show(Data_Show.showInt)(c.b);
    var alpha = Data_Show.show(Data_Show.showNumber)(c.a);
    var $102 = c.a === 1.0;
    if ($102) {
        return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
    };
    return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
};
var eqColor = new Data_Eq.Eq(function (c1) {
    return function (c2) {
        var rgb2 = toRGBA(c2);
        var rgb1 = toRGBA(c1);
        return rgb1.r === rgb2.r && (rgb1.g === rgb2.g && (rgb1.b === rgb2.b && rgb1.a === rgb2.a));
    };
});
var showColor = new Data_Show.Show(function (c) {
    var col = toRGBA(c);
    return "rgba " + (Data_Show.show(Data_Show.showInt)(col.r) + (" " + (Data_Show.show(Data_Show.showInt)(col.g) + (" " + (Data_Show.show(Data_Show.showInt)(col.b) + (" " + Data_Show.show(Data_Show.showNumber)(col.a)))))));
});
var toHexString = function (color) {
    var toHex = function (num) {
        var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
        var $103 = Data_String_CodePoints.length(repr) === 1;
        if ($103) {
            return "0" + repr;
        };
        return repr;
    };
    var c = toRGBA(color);
    return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
};
var toXYZ = function (c) {
    var rec = toRGBA$prime(c);
    var finv = function (c$prime) {
        if (c$prime <= 4.045e-2) {
            return c$prime / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c$prime + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color (line 366, column 5 - line 369, column 1): " + [ c$prime.constructor.name ]);
    };
    var g = finv(rec.g);
    var r = finv(rec.r);
    var b = finv(rec.b);
    var x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
    var y = 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
    var z = 1.93e-2 * r + 0.1192 * g + 0.9505 * b;
    return {
        x: x,
        y: y,
        z: z
    };
};
var toLab = function (col) {
    var rec = toXYZ(col);
    var cut = $$Math.pow(6.0 / 29.0)(3.0);
    var f = function (t) {
        if (t > cut) {
            return $$Math.pow(t)(1.0 / 3.0);
        };
        if (Data_Boolean.otherwise) {
            return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
        };
        throw new Error("Failed pattern match at Color (line 384, column 5 - line 387, column 1): " + [ t.constructor.name ]);
    };
    var fy = f(rec.y / d65.yn);
    var l = 116.0 * fy - 16.0;
    var b = 200.0 * (fy - f(rec.z / d65.zn));
    var a = 500.0 * (f(rec.x / d65.xn) - fy);
    return {
        l: l,
        a: a,
        b: b
    };
};
var distance = function (col1) {
    return function (col2) {
        var sq = function (x) {
            return $$Math.pow(x)(2.0);
        };
        var c2 = toLab(col2);
        var c1 = toLab(col1);
        return $$Math.sqrt(sq(c1.l - c2.l) + sq(c1.a - c2.a) + sq(c1.b - c2.b));
    };
};
var toLCh = function (col) {
    var rec = toLab(col);
    var rad2deg = 180.0 / $$Math.pi;
    var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
    var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
    return {
        l: rec.l,
        c: c,
        h: h
    };
};
var mix = function (v) {
    return function (c1) {
        return function (c2) {
            return function (frac) {
                if (v instanceof HSL) {
                    var t = toHSLA(c2);
                    var f = toHSLA(c1);
                    return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof RGB) {
                    var t = toRGBA$prime(c2);
                    var f = toRGBA$prime(c1);
                    return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof LCh) {
                    var t = toLCh(c2);
                    var f = toLCh(c1);
                    return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                };
                if (v instanceof Lab) {
                    var t = toLab(c2);
                    var f = toLab(c1);
                    return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                };
                throw new Error("Failed pattern match at Color (line 520, column 1 - line 520, column 34): " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
            };
        };
    };
};
var toGray = function (col) {
    var res = toLCh(col);
    return desaturate(1.0)(lch(res.l)(0.0)(0.0));
};
var brightness = function (col) {
    var c = toRGBA$prime(col);
    return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
};
var isLight = function (c) {
    return brightness(c) > 0.5;
};
var black = hsl(0.0)(0.0)(0.0);
var textColor = function (c) {
    if (isLight(c)) {
        return black;
    };
    if (Data_Boolean.otherwise) {
        return white;
    };
    throw new Error("Failed pattern match at Color (line 643, column 1 - line 643, column 28): " + [ c.constructor.name ]);
};
module.exports = {
    RGB: RGB,
    HSL: HSL,
    LCh: LCh,
    Lab: Lab,
    rgba: rgba,
    rgb: rgb,
    "rgba'": rgba$prime,
    "rgb'": rgb$prime,
    hsla: hsla,
    hsl: hsl,
    hsva: hsva,
    hsv: hsv,
    xyz: xyz,
    lab: lab,
    lch: lch,
    fromHexString: fromHexString,
    fromInt: fromInt,
    toHSLA: toHSLA,
    toHSVA: toHSVA,
    toRGBA: toRGBA,
    "toRGBA'": toRGBA$prime,
    toXYZ: toXYZ,
    toLab: toLab,
    toLCh: toLCh,
    toHexString: toHexString,
    cssStringHSLA: cssStringHSLA,
    cssStringRGBA: cssStringRGBA,
    black: black,
    white: white,
    graytone: graytone,
    rotateHue: rotateHue,
    complementary: complementary,
    lighten: lighten,
    darken: darken,
    saturate: saturate,
    desaturate: desaturate,
    toGray: toGray,
    mix: mix,
    mixCubehelix: mixCubehelix,
    brightness: brightness,
    luminance: luminance,
    contrast: contrast,
    isLight: isLight,
    isReadable: isReadable,
    textColor: textColor,
    distance: distance,
    showColor: showColor,
    eqColor: eqColor
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Array.NonEmpty/index.js":93,"../Data.Boolean/index.js":107,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.Regex/index.js":246,"../Math/index.js":369}],23:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Foreign_ChartJs = require("../Foreign.ChartJs/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var HandleInput = (function () {
    function HandleInput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    HandleInput.create = function (value0) {
        return function (value1) {
            return new HandleInput(value0, value1);
        };
    };
    return HandleInput;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var render = function (state) {
    return Halogen_HTML_Elements.canvas([ Halogen_HTML_Properties.id_(state.canvasId) ]);
};
var newChart = function (canvasId) {
    return function (datasets) {
        return function (options) {
            var f = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Foreign_ChartJs.drawLineChart(v.value0)(datasets)(options));
                };
                throw new Error("Failed pattern match at Component.LineChart (line 115, column 3 - line 115, column 59): " + [ v.constructor.name ]);
            };
            return Control_Bind.bindFlipped(Effect.bindEffect)(f)(Page_Commons.getContext2dById(canvasId));
        };
    };
};
var initialState = function (input) {
    return {
        canvasId: input.canvasId,
        datasets: input.datasets,
        options: input.options,
        maybeLineChart: Data_Maybe.Nothing.value
    };
};
var handleQuery = function (dictMonadAff) {
    return function (v) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Foreign_ChartJs.destroyLineChart)(v1.maybeLineChart)))(function () {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(newChart(v.value0.canvasId)(v.value0.datasets)(v.value0.options)))(function (v2) {
                    var newState = (function () {
                        var $18 = {};
                        for (var $19 in v1) {
                            if ({}.hasOwnProperty.call(v1, $19)) {
                                $18[$19] = v1[$19];
                            };
                        };
                        $18.canvasId = v.value0.canvasId;
                        $18.datasets = v.value0.datasets;
                        $18.options = v.value0.options;
                        $18.maybeLineChart = v2;
                        return $18;
                    })();
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(newState))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
                    });
                });
            });
        });
    };
};
var handleAction = function (dictMonadAff) {
    return function (v) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(newChart(v1.canvasId)(v1.datasets)(v1.options)))(function (v2) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                    var $26 = {};
                    for (var $27 in v1) {
                        if ({}.hasOwnProperty.call(v1, $27)) {
                            $26[$27] = v1[$27];
                        };
                    };
                    $26.maybeLineChart = v2;
                    return $26;
                })()))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                });
            });
        });
    };
};
var component = function (dictMonadAff) {
    return Halogen_Component.mkComponent({
        initialState: initialState,
        render: render,
        "eval": Halogen_Component.mkEval({
            handleAction: handleAction(dictMonadAff),
            handleQuery: handleQuery(dictMonadAff),
            receive: Data_Function["const"](Data_Maybe.Nothing.value),
            initialize: new Data_Maybe.Just(Initialize.value),
            finalize: Halogen_Component.defaultEval.finalize
        })
    });
};
module.exports = {
    component: component
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279,"../Effect/index.js":294,"../Foreign.ChartJs/index.js":298,"../Halogen.Component/index.js":337,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Properties/index.js":344,"../Halogen.Query.HalogenM/index.js":348,"../Page.Commons/index.js":372}],24:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Foreign_CanvasGauges = require("../Foreign.CanvasGauges/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query = require("../Halogen.Query/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var HandleInput = (function () {
    function HandleInput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    HandleInput.create = function (value0) {
        return function (value1) {
            return new HandleInput(value0, value1);
        };
    };
    return HandleInput;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var render = function (state) {
    return Halogen_HTML_Elements.canvas([ Halogen_HTML_Properties.ref(state.refLabel) ]);
};
var initialState = function (input) {
    return {
        refLabel: input.refLabel,
        gaugeInstance: Data_Maybe.Nothing.value,
        options: input.options
    };
};
var handleQuery = function (dictMonadAff) {
    return function (v) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                if (v1.gaugeInstance instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                };
                if (v1.gaugeInstance instanceof Data_Maybe.Just) {
                    return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Foreign_CanvasGauges.redrawRadialGauge(v1.gaugeInstance.value0)(v.value0.options));
                };
                throw new Error("Failed pattern match at Component.RadialGauge (line 101, column 5 - line 106, column 61): " + [ v1.gaugeInstance.constructor.name ]);
            })())(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                    var $16 = {};
                    for (var $17 in st) {
                        if ({}.hasOwnProperty.call(st, $17)) {
                            $16[$17] = st[$17];
                        };
                    };
                    $16.refLabel = v.value0.refLabel;
                    $16.options = v.value0.options;
                    return $16;
                }))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
                });
            });
        });
    };
};
var handleAction = function (dictMonadAff) {
    return function (v) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(v1.refLabel))(function (v2) {
                if (v2 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                };
                if (v2 instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Foreign_CanvasGauges.drawRadialGauge(v2.value0)(v1.options)))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                            var $27 = {};
                            for (var $28 in st) {
                                if ({}.hasOwnProperty.call(st, $28)) {
                                    $27[$28] = st[$28];
                                };
                            };
                            $27.gaugeInstance = new Data_Maybe.Just(v3);
                            return $27;
                        }))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                throw new Error("Failed pattern match at Component.RadialGauge (line 88, column 7 - line 95, column 22): " + [ v2.constructor.name ]);
            });
        });
    };
};
var component = function (dictMonadAff) {
    return Halogen_Component.mkComponent({
        initialState: initialState,
        render: render,
        "eval": Halogen_Component.mkEval({
            handleAction: handleAction(dictMonadAff),
            handleQuery: handleQuery(dictMonadAff),
            receive: Data_Function["const"](Data_Maybe.Nothing.value),
            initialize: new Data_Maybe.Just(Initialize.value),
            finalize: Halogen_Component.defaultEval.finalize
        })
    });
};
module.exports = {
    component: component
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279,"../Foreign.CanvasGauges/index.js":296,"../Halogen.Component/index.js":337,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Properties/index.js":344,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Query/index.js":351}],25:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Formless_Action = require("../Formless.Action/index.js");
var Formless_Class_Initial = require("../Formless.Class.Initial/index.js");
var Formless_Component = require("../Formless.Component/index.js");
var Formless_Data_FormFieldResult = require("../Formless.Data.FormFieldResult/index.js");
var Formless_Internal_Transform = require("../Formless.Internal.Transform/index.js");
var Formless_Retrieve = require("../Formless.Retrieve/index.js");
var Formless_Transform_Record = require("../Formless.Transform.Record/index.js");
var Formless_Transform_Row = require("../Formless.Transform.Row/index.js");
var Formless_Types_Component = require("../Formless.Types.Component/index.js");
var Formless_Types_Form = require("../Formless.Types.Form/index.js");
var Formless_Validation = require("../Formless.Validation/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var InfraredRemote_Code = require("../InfraredRemote.Code/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Utils = require("../Utils/index.js");
var TextChanged = (function () {
    function TextChanged(value0) {
        this.value0 = value0;
    };
    TextChanged.create = function (value0) {
        return new TextChanged(value0);
    };
    return TextChanged;
})();
var Reset = (function () {
    function Reset() {

    };
    Reset.value = new Reset();
    return Reset;
})();
var InputInfraredCode = function (x) {
    return x;
};
var EmptyField = (function () {
    function EmptyField() {

    };
    EmptyField.value = new EmptyField();
    return EmptyField;
})();
var InvalidInfraredCode = (function () {
    function InvalidInfraredCode(value0) {
        this.value0 = value0;
    };
    InvalidInfraredCode.create = function (value0) {
        return new InvalidInfraredCode(value0);
    };
    return InvalidInfraredCode;
})();
var InputForm = function (x) {
    return x;
};
var HandleInput = (function () {
    function HandleInput(value0) {
        this.value0 = value0;
    };
    HandleInput.create = function (value0) {
        return new HandleInput(value0);
    };
    return HandleInput;
})();
var HandleInputForm = (function () {
    function HandleInputForm(value0) {
        this.value0 = value0;
    };
    HandleInputForm.create = function (value0) {
        return new HandleInputForm(value0);
    };
    return HandleInputForm;
})();
var OnClickReset = (function () {
    function OnClickReset() {

    };
    OnClickReset.value = new OnClickReset();
    return OnClickReset;
})();
var OnClickSeparate32bits = (function () {
    function OnClickSeparate32bits() {

    };
    OnClickSeparate32bits.value = new OnClickSeparate32bits();
    return OnClickSeparate32bits;
})();
var toBinaries = function ($37) {
    return Data_String_Common.joinWith("")(Utils.lines(Utils.removeAllSpaces(Data_String_Common.toUpper($37))));
};
var separate32bitsButton = function (action) {
    return function (isActive) {
        var appendix = function (v) {
            if (v) {
                return Halogen_HTML_Properties.attr("active")("active");
            };
            if (!v) {
                return Halogen_HTML_Properties.attr("disabled")("disabled");
            };
            throw new Error("Failed pattern match at Components.InfraredCodeEditor (line 235, column 14 - line 239, column 1): " + [ v.constructor.name ]);
        };
        return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m1, Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnLight, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
            return new Data_Maybe.Just(action);
        }), appendix(isActive) ])([ Halogen_HTML_Core.text("separate to 32bits") ]);
    };
};
var resetButton = function (action) {
    return function (isActive) {
        var appendix = function (v) {
            if (v) {
                return Halogen_HTML_Properties.attr("active")("active");
            };
            if (!v) {
                return Halogen_HTML_Properties.attr("disabled")("disabled");
            };
            throw new Error("Failed pattern match at Components.InfraredCodeEditor (line 255, column 14 - line 259, column 1): " + [ v.constructor.name ]);
        };
        return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m1, Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnLight, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
            return new Data_Maybe.Just(action);
        }), appendix(isActive) ])([ Halogen_HTML_Core.text("Reset") ]);
    };
};
var newtypeInputInfraredCode = new Data_Newtype.Newtype(function (n) {
    return n;
}, InputInfraredCode);
var newtypeInputForm$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, InputForm);
var handleAction = function (dictMonadAff) {
    return function (v) {
        if (v instanceof HandleInput) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class_Console.logShow(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Show.showString)("Input"))(function () {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(v1 !== v.value0)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Function["const"](v.value0))))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                });
            });
        };
        if (v instanceof HandleInputForm) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
        };
        if (v instanceof OnClickReset) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(""))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(Reset.value))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                });
            });
        };
        if (v instanceof OnClickSeparate32bits) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
            });
        };
        throw new Error("Failed pattern match at Components.InfraredCodeEditor (line 114, column 16 - line 137, column 16): " + [ v.constructor.name ]);
    };
};
var formatTo32bits = (function () {
    var go = function (in_) {
        var text = Utils.removeAllSpaces(in_);
        var arr = Data_String_CodePoints.toCodePointArray(text);
        var arrarr = Utils.toArrayArray(8)(arr);
        var strArrArr = Data_Functor.map(Data_Functor.functorArray)(Data_String_CodePoints.fromCodePointArray)(arrarr);
        return Data_String_Common.joinWith(" ")(strArrArr);
    };
    return function ($38) {
        return Utils.unlines(Data_Functor.map(Data_Functor.functorArray)(go)(Utils.lines($38)));
    };
})();
var formComponent = function (dictMonadAff) {
    var validateInfraredCode = (function () {
        var go = function (input) {
            var success = function (v) {
                return new Data_Either.Right(input);
            };
            var failure = function (x) {
                return new Data_Either.Left(new InvalidInfraredCode(x));
            };
            return Data_Either.either(failure)(success)(Text_Parsing_Parser.runParser(input)(InfraredRemote_Code.infraredHexStringParser));
        };
        return Formless_Validation.hoistFnE_((dictMonadAff.MonadEffect0()).Monad0())(go);
    })();
    var validators = {
        infraredCodeInputText: validateInfraredCode
    };
    var renderFormless = function (state) {
        var help = (function () {
            var good = function (str) {
                return Halogen_HTML_Elements.p([  ])([ Halogen_HTML_Core.text(str) ]);
            };
            var initial = good("write a infrared codes");
            var bad = function (err) {
                var v = Text_Parsing_Parser.parseErrorPosition(err);
                var msg = Text_Parsing_Parser.parseErrorMessage(err);
                var line = Data_Int.toStringAs(Data_Int.decimal)(v.line);
                var col = Data_Int.toStringAs(Data_Int.decimal)(v.column);
                var pos = "line: " + (line + (" column: " + col));
                return Halogen_HTML_Elements.p_([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textDanger) ])([ Halogen_HTML_Core.text(msg) ]), Halogen_HTML_Core.text(" at " + pos) ]);
            };
            return function (v) {
                if (v instanceof Formless_Data_FormFieldResult.NotValidated) {
                    return initial;
                };
                if (v instanceof Formless_Data_FormFieldResult.Validating) {
                    return good("validating...");
                };
                if (v instanceof Formless_Data_FormFieldResult["Error"] && v.value0 instanceof EmptyField) {
                    return initial;
                };
                if (v instanceof Formless_Data_FormFieldResult["Error"] && v.value0 instanceof InvalidInfraredCode) {
                    return bad(v.value0.value0);
                };
                if (v instanceof Formless_Data_FormFieldResult.Success) {
                    return good("good");
                };
                throw new Error("Failed pattern match at Components.InfraredCodeEditor (line 337, column 12 - line 343, column 7): " + [ v.constructor.name ]);
            };
        })();
        var textarea = Halogen_HTML_Elements.textarea([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formControl, Halogen_Themes_Bootstrap4.textMonospace ]), Halogen_HTML_Properties.rows(5), Halogen_HTML_Properties.placeholder("Write an on-off pair count (32-bit little endianness) hexadecimal number or json made with 'pigpio irrp.py' file or Click download button."), Halogen_HTML_Properties.value(Formless_Retrieve.getInput(new Data_Symbol.IsSymbol(function () {
            return "infraredCodeInputText";
        }))(newtypeInputForm$prime)()(Data_Symbol.SProxy.value)(state.form)), Halogen_HTML_Events.onValueInput(function ($39) {
            return Data_Maybe.Just.create(Formless_Action.setValidate(new Data_Symbol.IsSymbol(function () {
                return "infraredCodeInputText";
            }))(newtypeInputForm$prime)()(Data_Symbol.SProxy.value)($39));
        }), Halogen_HTML_Events.onValueChange(function (v) {
            return new Data_Maybe.Just(Formless_Action.submit);
        }) ]);
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.formGroup), Halogen_HTML_Events.onKeyUp(function (v) {
            return new Data_Maybe.Just(Formless_Action.submit);
        }) ])([ Halogen_HTML_Elements.label_([ Halogen_HTML_Core.text("on-off counts (count is based on 38kHz carrier)") ]), textarea, help(Formless_Retrieve.getResult(new Data_Symbol.IsSymbol(function () {
            return "infraredCodeInputText";
        }))(newtypeInputForm$prime)()(Data_Symbol.SProxy.value)(state.form)) ]);
    };
    var initialInputs = function (str) {
        return Formless_Transform_Record.wrapInputFields(newtypeInputForm$prime)(Heterogeneous_Mapping.hmapRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function () {
            return "infraredCodeInputText";
        }))(Heterogeneous_Mapping.constMapping(Formless_Transform_Record.wrapField(Formless_Types_Form.newtypeInputField)))(Heterogeneous_Mapping.mapRecordWithIndexNil)()()))({
            infraredCodeInputText: str
        });
    };
    var initialState = function (input) {
        return {
            validators: validators,
            initialInputs: Data_Maybe.Just.create(initialInputs(input))
        };
    };
    return Formless_Component.component(dictMonadAff)()()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))(Formless_Types_Form.eqInputField(Data_Eq.eqString)))(Formless_Internal_Transform.inputFieldsToFormFieldsCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.inputFieldsToFormFieldsNil)(Formless_Internal_Transform.row1Cons()()))(Formless_Internal_Transform.inputFieldsToInputCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.inputFieldsToInputNil)(Formless_Internal_Transform.row1Cons()()))(Formless_Internal_Transform.consCountErrors(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.nilCountErrors))(Formless_Internal_Transform.consAllTouched(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.nilAllTouched))(Formless_Internal_Transform.setFormFieldsTouchedCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.setFormFieldsTouchedNil)(Formless_Internal_Transform.row1Cons()()))(Formless_Internal_Transform.replaceFormFieldInputsTouchedCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))(Formless_Types_Form.newtypeInputField)(Formless_Types_Form.newtypeFormField)()()(Formless_Internal_Transform.row1Cons()())(Formless_Internal_Transform.replaceFormFieldInputsTouchedNil))(Formless_Internal_Transform.modifyAllCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))(Formless_Types_Form.newtypeInputFunction)(Formless_Types_Form.newtypeFormField)()()(Formless_Internal_Transform.row1Cons()())(Formless_Internal_Transform.modifyAllNil))(Formless_Internal_Transform.applyToValidationCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))((dictMonadAff.MonadEffect0()).Monad0())()(newtypeInputForm$prime)()(Formless_Internal_Transform.row1Cons()())(Formless_Internal_Transform.applyToValidationNil((dictMonadAff.MonadEffect0()).Monad0())))(Formless_Internal_Transform.formFieldsToMaybeOutputCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))()(Formless_Internal_Transform.formFieldsToMaybeOutputNil)(Formless_Internal_Transform.row1Cons()()))(Formless_Transform_Row.mkInputFieldsFromRowCons(new Data_Symbol.IsSymbol(function () {
        return "infraredCodeInputText";
    }))(Formless_Class_Initial.initialString)()(Formless_Transform_Row.mkInputFieldsFromRowNil)(Formless_Internal_Transform.row1Cons()()))(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)(newtypeInputForm$prime)()()()()()()()()()(initialState)({
        render: renderFormless,
        handleAction: Formless_Component.defaultSpec.handleAction,
        handleQuery: Formless_Component.defaultSpec.handleQuery,
        handleEvent: Formless_Component.raiseResult(newtypeInputForm$prime)(Heterogeneous_Mapping.hmapRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function () {
            return "infraredCodeInputText";
        }))(Heterogeneous_Mapping.constMapping(Formless_Transform_Record.unwrapField(Formless_Types_Form.newtypeOutputField)))(Heterogeneous_Mapping.mapRecordWithIndexNil)()())),
        receive: Formless_Component.defaultSpec.receive,
        initialize: Formless_Component.defaultSpec.initialize,
        finalize: Formless_Component.defaultSpec.finalize
    });
};
var render = function (dictMonadAff) {
    return function (state) {
        return Halogen_HTML_Elements.div_([ resetButton(OnClickReset.value)(true), separate32bitsButton(OnClickSeparate32bits.value)(true), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "formless";
        }))(Data_Ord.ordUnit)(Formless_Types_Component["_formless"])(Data_Unit.unit)(formComponent(dictMonadAff))(state)(function ($40) {
            return Data_Maybe.Just.create(HandleInputForm.create($40));
        }) ]);
    };
};
var eqInputInfraredCode = Data_Eq.eqString;
var component = function (dictMonadAff) {
    return Halogen_Component.mkComponent({
        initialState: Data_Function["const"](""),
        render: render(dictMonadAff),
        "eval": Halogen_Component.mkEval({
            handleAction: handleAction(dictMonadAff),
            handleQuery: Halogen_Component.defaultEval.handleQuery,
            receive: function ($41) {
                return Data_Maybe.Just.create(HandleInput.create($41));
            },
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        })
    });
};
module.exports = {
    InputInfraredCode: InputInfraredCode,
    TextChanged: TextChanged,
    Reset: Reset,
    component: component,
    newtypeInputInfraredCode: newtypeInputInfraredCode,
    eqInputInfraredCode: eqInputInfraredCode
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Effect.Class.Console/index.js":278,"../Formless.Action/index.js":314,"../Formless.Class.Initial/index.js":315,"../Formless.Component/index.js":316,"../Formless.Data.FormFieldResult/index.js":317,"../Formless.Internal.Transform/index.js":320,"../Formless.Retrieve/index.js":321,"../Formless.Transform.Record/index.js":322,"../Formless.Transform.Row/index.js":323,"../Formless.Types.Component/index.js":324,"../Formless.Types.Form/index.js":325,"../Formless.Validation/index.js":326,"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.HTML/index.js":345,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Themes.Bootstrap4/index.js":352,"../Heterogeneous.Mapping/index.js":361,"../InfraredRemote.Code/index.js":362,"../Text.Parsing.Parser/index.js":399,"../Utils/index.js":408}],26:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Alt = function (Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
module.exports = {
    Alt: Alt,
    alt: alt,
    altArray: altArray
};

},{"../Data.Functor/index.js":156,"../Data.Semigroup/index.js":230}],27:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Alternative = function (Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
};
var alternativeArray = new Alternative(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Plus.plusArray;
});
module.exports = {
    Alternative: Alternative,
    alternativeArray: alternativeArray
};

},{"../Control.Applicative/index.js":29,"../Control.Plus/index.js":70}],28:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Pure = (function () {
    function Pure(value0) {
        this.value0 = value0;
    };
    Pure.create = function (value0) {
        return new Pure(value0);
    };
    return Pure;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var Ap = (function () {
    function Ap(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Ap.create = function (value0) {
        return function (value1) {
            return new Ap(value0, value1);
        };
    };
    return Ap;
})();
var mkAp = function (fba) {
    return function (fb) {
        return new Ap(fba, fb);
    };
};
var liftFreeAp = Lift.create;
var goLeft = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_valStack) {
            return function ($copy_nat) {
                return function ($copy_func) {
                    return function ($copy_count) {
                        var $tco_var_dictApplicative = $copy_dictApplicative;
                        var $tco_var_fStack = $copy_fStack;
                        var $tco_var_valStack = $copy_valStack;
                        var $tco_var_nat = $copy_nat;
                        var $tco_var_func = $copy_func;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                            if (func instanceof Pure) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: Control_Applicative.pure(dictApplicative)(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Lift) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: nat(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Ap) {
                                $tco_var_dictApplicative = dictApplicative;
                                $tco_var_fStack = fStack;
                                $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                $tco_var_nat = nat;
                                $tco_var_func = func.value0;
                                $copy_count = count + 1 | 0;
                                return;
                            };
                            throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                        };
                        return $tco_result;
                    };
                };
            };
        };
    };
};
var goApply = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_vals) {
            return function ($copy_gVal) {
                var $tco_var_dictApplicative = $copy_dictApplicative;
                var $tco_var_fStack = $copy_fStack;
                var $tco_var_vals = $copy_vals;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictApplicative, fStack, vals, gVal) {
                    if (fStack instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return new Data_Either.Left(gVal);
                    };
                    if (fStack instanceof Data_List_Types.Cons) {
                        var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                        var $14 = fStack.value0.count === 1;
                        if ($14) {
                            if (fStack.value1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return new Data_Either.Left(gRes);
                            };
                            $tco_var_dictApplicative = dictApplicative;
                            $tco_var_fStack = fStack.value1;
                            $tco_var_vals = vals;
                            $copy_gVal = gRes;
                            return;
                        };
                        if (vals instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Data_Either.Left(gRes);
                        };
                        if (vals instanceof Data_List_Types.Cons) {
                            $tco_done = true;
                            return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                func: gRes,
                                count: fStack.value0.count - 1 | 0
                            }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                };
                return $tco_result;
            };
        };
    };
};
var functorFreeAp = new Data_Functor.Functor(function (f) {
    return function (x) {
        return mkAp(new Pure(f))(x);
    };
});
var foldFreeAp = function (dictApplicative) {
    return function (nat) {
        return function (z) {
            var go = function ($copy_v) {
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v) {
                    if (v.value1.value0 instanceof Pure) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Lift) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Ap) {
                        var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                        $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                        return;
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 64, column 1): " + [ v.value1.value0.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($copy_v);
                };
                return $tco_result;
            };
            return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
        };
    };
};
var retractFreeAp = function (dictApplicative) {
    return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
};
var applyFreeAp = new Control_Apply.Apply(function () {
    return functorFreeAp;
}, function (fba) {
    return function (fb) {
        return mkAp(fba)(fb);
    };
});
var applicativeFreeAp = new Control_Applicative.Applicative(function () {
    return applyFreeAp;
}, Pure.create);
var hoistFreeAp = function (f) {
    return foldFreeAp(applicativeFreeAp)(function ($37) {
        return liftFreeAp(f($37));
    });
};
var analyzeFreeAp = function (dictMonoid) {
    return function (k) {
        return function ($38) {
            return Data_Newtype.unwrap(Data_Const.newtypeConst)(foldFreeAp(Data_Const.applicativeConst(dictMonoid))(function ($39) {
                return Data_Const.Const(k($39));
            })($38));
        };
    };
};
module.exports = {
    liftFreeAp: liftFreeAp,
    retractFreeAp: retractFreeAp,
    foldFreeAp: foldFreeAp,
    hoistFreeAp: hoistFreeAp,
    analyzeFreeAp: analyzeFreeAp,
    functorFreeAp: functorFreeAp,
    applyFreeAp: applyFreeAp,
    applicativeFreeAp: applicativeFreeAp
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Const/index.js":118,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.List.NonEmpty/index.js":191,"../Data.List.Types/index.js":192,"../Data.Newtype/index.js":207,"../Data.NonEmpty/index.js":208,"../Data.Tuple/index.js":260}],29:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [ x ];
});
module.exports = {
    Applicative: Applicative,
    pure: pure,
    liftA1: liftA1,
    unless: unless,
    when: when,
    applicativeFn: applicativeFn,
    applicativeArray: applicativeArray
};

},{"../Control.Apply/index.js":31,"../Data.Unit/index.js":266}],30:[function(require,module,exports){
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l*k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

},{}],31:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return Data_Functor.functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
var apply = function (dict) {
    return dict.apply;
};
var applyFirst = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Apply: Apply,
    apply: apply,
    applyFirst: applyFirst,
    applySecond: applySecond,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    applyFn: applyFn,
    applyArray: applyArray
};

},{"../Control.Category/index.js":36,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"./foreign.js":30}],32:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Biapplicative = function (Biapply0, bipure) {
    this.Biapply0 = Biapply0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    bipure: bipure,
    Biapplicative: Biapplicative
};

},{}],33:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Function = require("../Data.Function/index.js");
var Biapply = function (Bifunctor0, biapply) {
    this.Bifunctor0 = Bifunctor0;
    this.biapply = biapply;
};
var biapply = function (dict) {
    return dict.biapply;
};
var biapplyFirst = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
        };
    };
};
var biapplySecond = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
    };
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
module.exports = {
    biapply: biapply,
    Biapply: Biapply,
    biapplyFirst: biapplyFirst,
    biapplySecond: biapplySecond,
    bilift2: bilift2,
    bilift3: bilift3
};

},{"../Control.Category/index.js":36,"../Data.Bifunctor/index.js":105,"../Data.Function/index.js":149}],34:[function(require,module,exports){
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

},{}],35:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Discard = function (discard) {
    this.discard = discard;
};
var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var discard = function (dict) {
    return dict.discard;
};
var bindFn = new Bind(function () {
    return Control_Apply.applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function (dictBind) {
    return bind(dictBind);
});
var ifM = function (dictBind) {
    return function (cond) {
        return function (t) {
            return function (f) {
                return bind(dictBind)(cond)(function (cond$prime) {
                    if (cond$prime) {
                        return t;
                    };
                    return f;
                });
            };
        };
    };
};
var join = function (dictBind) {
    return function (m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Bind: Bind,
    bind: bind,
    bindFlipped: bindFlipped,
    Discard: Discard,
    discard: discard,
    join: join,
    composeKleisli: composeKleisli,
    composeKleisliFlipped: composeKleisliFlipped,
    ifM: ifM,
    bindFn: bindFn,
    bindArray: bindArray,
    discardUnit: discardUnit
};

},{"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Function/index.js":149,"./foreign.js":34}],36:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Category = function (Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
};
var identity = function (dict) {
    return dict.identity;
};
var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
    return x;
});
module.exports = {
    Category: Category,
    identity: identity,
    categoryFn: categoryFn
};

},{"../Control.Semigroupoid/index.js":71}],37:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Comonad = function (Extend0, extract) {
    this.Extend0 = Extend0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad,
    extract: extract
};

},{}],38:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Transform = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var CoTransform = (function () {
    function CoTransform(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoTransform.create = function (value0) {
        return function (value1) {
            return new CoTransform(value0, value1);
        };
    };
    return CoTransform;
})();
var Await = function (x) {
    return x;
};
var runProcess = function (dictMonadRec) {
    return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($186) {
        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($186));
    });
};
var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
        };
    };
});
var loop = function (dictFunctor) {
    return function (dictMonad) {
        return function (me) {
            return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
            })(Data_Unit.unit);
        };
    };
};
var fuseWithL = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (zap) {
                    return function (fs) {
                        return function (gs) {
                            var go = function (v) {
                                return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (v1) {
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (v2) {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                            return Control_Monad_Free_Trans.freeT(function (v3) {
                                                return go(t);
                                            });
                                        })(zap(Data_Tuple.Tuple.create)(v1)(v2)));
                                    });
                                }));
                            };
                            return Control_Monad_Free_Trans.freeT(function (v) {
                                return go(new Data_Tuple.Tuple(fs, gs));
                            });
                        };
                    };
                };
            };
        };
    };
};
var fuseWith = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (dictParallel) {
                    return function (zap) {
                        return function (fs) {
                            return function (gs) {
                                var go = function (v) {
                                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                        if (v1 instanceof Data_Either.Left) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(v1.value0));
                                        };
                                        if (v1 instanceof Data_Either.Right) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                return Control_Monad_Free_Trans.freeT(function (v2) {
                                                    return go(t);
                                                });
                                            })(v1.value0)));
                                        };
                                        throw new Error("Failed pattern match at Control.Coroutine (line 79, column 5 - line 81, column 63): " + [ v1.constructor.name ]);
                                    });
                                };
                                return Control_Monad_Free_Trans.freeT(function (v) {
                                    return go(new Data_Tuple.Tuple(fs, gs));
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
var joinConsumers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (v2) {
                        return f(v(v2.value0))(v1(v2.value1));
                    };
                };
            };
        });
    };
};
var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return function ($187) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g)(v($187));
            };
        };
    };
});
var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));
var composeTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        var v3 = v1(v2.value0);
                        return new Data_Tuple.Tuple(v3.value0, f(v2.value1)(v3.value1));
                    };
                };
            };
        });
    };
};
var transform = function (dictMonad) {
    return function (f) {
        return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
            return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
        });
    };
};
var transformConsumer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        return f(v2.value1)(v1(v2.value0));
                    };
                };
            };
        });
    };
};
var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Emit(f(v.value0), g(v.value1));
        };
    };
});
var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
var connect = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return f(v.value1)(v1(v.value0));
                };
            };
        });
    };
};
var emit = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
    };
};
var joinProducers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
                };
            };
        });
    };
};
var producer = function (dictMonad) {
    return function (recv) {
        return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
            };
            throw new Error("Failed pattern match at Control.Coroutine (line 125, column 3 - line 127, column 29): " + [ v.constructor.name ]);
        }));
    };
};
var pullFrom = function (dictMonadRec) {
    return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
            };
        };
    });
};
var transformProducer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new Emit(v2.value0, f(v.value1)(v2.value1));
                };
            };
        });
    };
};
var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new CoTransform(f(v.value0), function ($188) {
                return g(v.value1($188));
            });
        };
    };
});
var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));
var composeCoTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i) {
                        return f(v.value1(i))(v1.value1(v.value0));
                    });
                };
            };
        });
    };
};
var cotransform = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.freeT(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
        });
    };
};
var fuseCoTransform = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v(v1.value0);
                    return f(v2.value1)(v1.value1(v2.value0));
                };
            };
        });
    };
};
var transformCoTransformL = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i1) {
                        var v2 = v(i1);
                        return f(v2.value1)(v1.value1(v2.value0));
                    });
                };
            };
        });
    };
};
var transformCoTransformR = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new CoTransform(v2.value0, function ($189) {
                        return (function (v3) {
                            return f(v3)(v2.value1);
                        })(v.value1($189));
                    });
                };
            };
        });
    };
};
var $$await = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var consumer = function (dictMonad) {
    return function (send) {
        return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (v) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(v));
        }));
    };
};
module.exports = {
    loop: loop,
    runProcess: runProcess,
    fuseWith: fuseWith,
    fuseWithL: fuseWithL,
    Emit: Emit,
    emit: emit,
    producer: producer,
    Await: Await,
    "await": $$await,
    consumer: consumer,
    Transform: Transform,
    transform: transform,
    CoTransform: CoTransform,
    cotransform: cotransform,
    connect: connect,
    pullFrom: pullFrom,
    transformProducer: transformProducer,
    transformConsumer: transformConsumer,
    composeTransformers: composeTransformers,
    composeCoTransformers: composeCoTransformers,
    fuseCoTransform: fuseCoTransform,
    transformCoTransformL: transformCoTransformL,
    transformCoTransformR: transformCoTransformR,
    joinProducers: joinProducers,
    joinConsumers: joinConsumers,
    bifunctorEmit: bifunctorEmit,
    functorEmit: functorEmit,
    profunctorAwait: profunctorAwait,
    functorAwait: functorAwait,
    bifunctorTransform: bifunctorTransform,
    functorTransform: functorTransform,
    bifunctorCoTransform: bifunctorCoTransform,
    functorCoTransform: functorCoTransform
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Free.Trans/index.js":48,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.Trans.Class/index.js":61,"../Control.Parallel.Class/index.js":68,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266}],39:[function(require,module,exports){
"use strict";

exports.arrayExtend = function(f) {
  return function(xs) {
    return xs.map(function (_, i, xs) {
      return f(xs.slice(i));
    });
  };
};

},{}],40:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Extend = function (Functor0, extend) {
    this.Functor0 = Functor0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Data_Functor.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extendArray = new Extend(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayExtend);
var extend = function (dict) {
    return dict.extend;
};
var extendFlipped = function (dictExtend) {
    return function (w) {
        return function (f) {
            return extend(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};
var composeCoKleisliFlipped = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f(extend(dictExtend)(g)(w));
            };
        };
    };
};
var composeCoKleisli = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g(extend(dictExtend)(f)(w));
            };
        };
    };
};
module.exports = {
    Extend: Extend,
    extend: extend,
    extendFlipped: extendFlipped,
    composeCoKleisli: composeCoKleisli,
    composeCoKleisliFlipped: composeCoKleisliFlipped,
    duplicate: duplicate,
    extendFn: extendFn,
    extendArray: extendArray
};

},{"../Control.Category/index.js":36,"../Data.Functor/index.js":156,"../Data.Semigroup/index.js":230,"./foreign.js":39}],41:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var Lazy = function (defer) {
    this.defer = defer;
};
var lazyUnit = new Lazy(function (v) {
    return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
    return function (x) {
        return f(Data_Unit.unit)(x);
    };
});
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        var go = defer(dictLazy)(function (v) {
            return f(go);
        });
        return go;
    };
};
module.exports = {
    defer: defer,
    Lazy: Lazy,
    fix: fix,
    lazyFn: lazyFn,
    lazyUnit: lazyUnit
};

},{"../Data.Unit/index.js":266}],42:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var MonadCont = function (Monad0, callCC) {
    this.Monad0 = Monad0;
    this.callCC = callCC;
};
var callCC = function (dict) {
    return dict.callCC;
};
module.exports = {
    MonadCont: MonadCont,
    callCC: callCC
};

},{}],43:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ContT = function (x) {
    return x;
};
var withContT = function (f) {
    return function (v) {
        return function (k) {
            return v(f(k));
        };
    };
};
var runContT = function (v) {
    return function (k) {
        return v(k);
    };
};
var newtypeContT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ContT);
var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(k);
        };
    };
});
var mapContT = function (f) {
    return function (v) {
        return function (k) {
            return f(v(k));
        };
    };
};
var functorContT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (k) {
                return v(function (a) {
                    return k(f(a));
                });
            };
        };
    });
};
var applyContT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorContT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (k) {
                return v(function (g) {
                    return v1(function (a) {
                        return k(g(a));
                    });
                });
            };
        };
    });
};
var bindContT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyContT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (k$prime) {
                return v(function (a) {
                    var v1 = k(a);
                    return v1(k$prime);
                });
            };
        };
    });
};
var applicativeContT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyContT(dictApplicative.Apply0());
    }, function (a) {
        return function (k) {
            return k(a);
        };
    });
};
var monadContT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeContT(dictMonad.Applicative0());
    }, function () {
        return bindContT(dictMonad.Bind1());
    });
};
var monadAskContT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadContT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderContT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskContT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return function (v) {
            return function (k) {
                return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (v1) {
                    return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function ($45) {
                        return Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](v1))(k($45));
                    }));
                });
            };
        };
    });
};
var monadContContT = function (dictMonad) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadContT(dictMonad);
    }, function (f) {
        return function (k) {
            var v = f(function (a) {
                return function (v1) {
                    return k(a);
                };
            });
            return v(k);
        };
    });
};
var monadEffectContT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadContT(dictMonadEffect.Monad0());
    }, function ($46) {
        return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($46));
    });
};
var monadStateContT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadContT(dictMonadState.Monad0());
    }, function ($47) {
        return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($47));
    });
};
module.exports = {
    ContT: ContT,
    runContT: runContT,
    mapContT: mapContT,
    withContT: withContT,
    newtypeContT: newtypeContT,
    monadContContT: monadContContT,
    functorContT: functorContT,
    applyContT: applyContT,
    applicativeContT: applicativeContT,
    bindContT: bindContT,
    monadContT: monadContT,
    monadTransContT: monadTransContT,
    monadEffectContT: monadEffectContT,
    monadAskContT: monadAskContT,
    monadReaderContT: monadReaderContT,
    monadStateContT: monadStateContT
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad/index.js":65,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Effect.Class/index.js":279}],44:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var MonadThrow = function (Monad0, throwError) {
    this.Monad0 = Monad0;
    this.throwError = throwError;
};
var MonadError = function (MonadThrow0, catchError) {
    this.MonadThrow0 = MonadThrow0;
    this.catchError = catchError;
};
var throwError = function (dict) {
    return dict.throwError;
};
var monadThrowMaybe = new MonadThrow(function () {
    return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function () {
    return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function () {
    return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function () {
    return monadThrowMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
            return v1(Data_Unit.unit);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 79, column 50): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEither = new MonadError(function () {
    return monadThrowEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Either.Left) {
            return v1(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 72, column 53): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEffect = new MonadError(function () {
    return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));
var catchError = function (dict) {
    return dict.catchError;
};
var catchJust = function (dictMonadError) {
    return function (p) {
        return function (act) {
            return function (handler) {
                var handle = function (e) {
                    var v = p(e);
                    if (v instanceof Data_Maybe.Nothing) {
                        return throwError(dictMonadError.MonadThrow0())(e);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return handler(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [ v.constructor.name ]);
                };
                return catchError(dictMonadError)(act)(handle);
            };
        };
    };
};
var $$try = function (dictMonadError) {
    return function (a) {
        return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
            return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
        });
    };
};
var withResource = function (dictMonadError) {
    return function (acquire) {
        return function (release) {
            return function (kleisli) {
                return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (v) {
                    return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())($$try(dictMonadError)(kleisli(v)))(function (v1) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(v))(function () {
                            return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(v1);
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    catchError: catchError,
    throwError: throwError,
    MonadThrow: MonadThrow,
    MonadError: MonadError,
    catchJust: catchJust,
    "try": $$try,
    withResource: withResource,
    monadThrowEither: monadThrowEither,
    monadErrorEither: monadErrorEither,
    monadThrowMaybe: monadThrowMaybe,
    monadErrorMaybe: monadErrorMaybe,
    monadThrowEffect: monadThrowEffect,
    monadErrorEffect: monadErrorEffect
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Either/index.js":129,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Unit/index.js":266,"../Effect.Exception/index.js":284,"../Effect/index.js":294}],45:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ExceptT = function (x) {
    return x;
};
var withExceptT = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var mapLeft = function (v1) {
                return function (v2) {
                    if (v2 instanceof Data_Either.Right) {
                        return new Data_Either.Right(v2.value0);
                    };
                    if (v2 instanceof Data_Either.Left) {
                        return new Data_Either.Left(v1(v2.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                };
            };
            return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
        };
    };
};
var runExceptT = function (v) {
    return v;
};
var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
        });
    };
});
var mapExceptT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorExceptT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
    });
};
var except = function (dictApplicative) {
    return function ($96) {
        return ExceptT(Control_Applicative.pure(dictApplicative)($96));
    };
};
var monadExceptT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeExceptT(dictMonad);
    }, function () {
        return bindExceptT(dictMonad);
    });
};
var bindExceptT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
            })(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    });
};
var applyExceptT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadExceptT(dictMonad)));
};
var applicativeExceptT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyExceptT(dictMonad);
    }, function ($98) {
        return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
    });
};
var monadAskExceptT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadExceptT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderExceptT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskExceptT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContExceptT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadExceptT(dictMonadCont.Monad0());
    }, function (f) {
        return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return ExceptT(c(new Data_Either.Right(a)));
            });
            return v;
        }));
    });
};
var monadEffectExceptT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadExceptT(dictMonadEffect.Monad0());
    }, function ($99) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($99));
    });
};
var monadRecExceptT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadExceptT(dictMonadRec.Monad0());
    }, function (f) {
        return function ($100) {
            return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                    var v = f(a);
                    return v;
                })())(function (m$prime) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                        if (m$prime instanceof Data_Either.Left) {
                            return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                        };
                        if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                        };
                        if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                            return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                        };
                        throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [ m$prime.constructor.name ]);
                    })());
                });
            })($100));
        };
    });
};
var monadStateExceptT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadExceptT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellExceptT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadExceptT(dictMonadTell.Monad0());
    }, function ($101) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($101));
    });
};
var monadWriterExceptT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellExceptT(dictMonadWriter.MonadTell0());
    }, mapExceptT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapExceptT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (v instanceof Data_Either.Left) {
                    return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Control_Category.identity(Control_Category.categoryFn));
                };
                if (v instanceof Data_Either.Right) {
                    return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 44): " + [ v.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadExceptT(dictMonad);
    }, function ($102) {
        return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
    });
};
var monadErrorExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                var v1 = k(a);
                return v1;
            })(function ($103) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($103));
            }));
        };
    });
};
var altExceptT = function (dictSemigroup) {
    return function (dictMonad) {
        return new Control_Alt.Alt(function () {
            return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                    if (v2 instanceof Data_Either.Right) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                    };
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                            if (v3 instanceof Data_Either.Right) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                            };
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ v3.constructor.name ]);
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ v2.constructor.name ]);
                });
            };
        });
    };
};
var plusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Plus.Plus(function () {
            return altExceptT(dictMonoid.Semigroup0())(dictMonad);
        }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var alternativeExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Alternative.Alternative(function () {
            return applicativeExceptT(dictMonad);
        }, function () {
            return plusExceptT(dictMonoid)(dictMonad);
        });
    };
};
var monadZeroExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeExceptT(dictMonoid)(dictMonad);
        }, function () {
            return monadExceptT(dictMonad);
        });
    };
};
var monadPlusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroExceptT(dictMonoid)(dictMonad);
        });
    };
};
module.exports = {
    ExceptT: ExceptT,
    runExceptT: runExceptT,
    withExceptT: withExceptT,
    mapExceptT: mapExceptT,
    except: except,
    newtypeExceptT: newtypeExceptT,
    functorExceptT: functorExceptT,
    applyExceptT: applyExceptT,
    applicativeExceptT: applicativeExceptT,
    bindExceptT: bindExceptT,
    monadExceptT: monadExceptT,
    monadRecExceptT: monadRecExceptT,
    altExceptT: altExceptT,
    plusExceptT: plusExceptT,
    alternativeExceptT: alternativeExceptT,
    monadPlusExceptT: monadPlusExceptT,
    monadZeroExceptT: monadZeroExceptT,
    monadTransExceptT: monadTransExceptT,
    monadEffectExceptT: monadEffectExceptT,
    monadContExceptT: monadContExceptT,
    monadThrowExceptT: monadThrowExceptT,
    monadErrorExceptT: monadErrorExceptT,
    monadAskExceptT: monadAskExceptT,
    monadReaderExceptT: monadReaderExceptT,
    monadStateExceptT: monadStateExceptT,
    monadTellExceptT: monadTellExceptT,
    monadWriterExceptT: monadWriterExceptT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Effect.Class/index.js":279}],46:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
var runExcept = function ($0) {
    return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
};
var mapExcept = function (f) {
    return Control_Monad_Except_Trans.mapExceptT(function ($1) {
        return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
    });
};
module.exports = {
    runExcept: runExcept,
    mapExcept: mapExcept,
    withExcept: withExcept
};

},{"../Control.Monad.Except.Trans/index.js":45,"../Data.Identity/index.js":166,"../Data.Newtype/index.js":207}],47:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Completed = (function () {
    function Completed(value0) {
        this.value0 = value0;
    };
    Completed.create = function (value0) {
        return new Completed(value0);
    };
    return Completed;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
    this.Functor1 = Functor1;
    this.Monad0 = Monad0;
    this.fork = fork;
    this.join = join;
    this.suspend = suspend;
};
var MonadKill = function (MonadFork0, MonadThrow1, kill) {
    this.MonadFork0 = MonadFork0;
    this.MonadThrow1 = MonadThrow1;
    this.kill = kill;
};
var MonadBracket = function (MonadError1, MonadKill0, bracket, never, uninterruptible) {
    this.MonadError1 = MonadError1;
    this.MonadKill0 = MonadKill0;
    this.bracket = bracket;
    this.never = never;
    this.uninterruptible = uninterruptible;
};
var uninterruptible = function (dict) {
    return dict.uninterruptible;
};
var suspend = function (dict) {
    return dict.suspend;
};
var never = function (dict) {
    return dict.never;
};
var monadForkAff = new MonadFork(function () {
    return Effect_Aff.functorFiber;
}, function () {
    return Effect_Aff.monadAff;
}, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
var monadKillAff = new MonadKill(function () {
    return monadForkAff;
}, function () {
    return Effect_Aff.monadThrowAff;
}, Effect_Aff.killFiber);
var monadBracketAff = new MonadBracket(function () {
    return Effect_Aff.monadErrorAff;
}, function () {
    return monadKillAff;
}, function (acquire) {
    return function (release) {
        return function (run) {
            return Effect_Aff.generalBracket(acquire)({
                completed: function ($11) {
                    return release(Completed.create($11));
                },
                failed: function ($12) {
                    return release(Failed.create($12));
                },
                killed: function ($13) {
                    return release(Killed.create($13));
                }
            })(run);
        };
    };
}, Effect_Aff.never, Effect_Aff.invincible);
var kill = function (dict) {
    return dict.kill;
};
var join = function (dict) {
    return dict.join;
};
var fork = function (dict) {
    return dict.fork;
};
var monadForkReaderT = function (dictMonadFork) {
    return new MonadFork(dictMonadFork.Functor1, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictMonadFork.Monad0());
    }, function (v) {
        return function ($14) {
            return fork(dictMonadFork)(v($14));
        };
    }, function ($15) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadFork.Monad0())(join(dictMonadFork)($15));
    }, function (v) {
        return function ($16) {
            return suspend(dictMonadFork)(v($16));
        };
    });
};
var monadKillReaderT = function (dictMonadKill) {
    return new MonadKill(function () {
        return monadForkReaderT(dictMonadKill.MonadFork0());
    }, function () {
        return Control_Monad_Reader_Trans.monadThrowReaderT(dictMonadKill.MonadThrow1());
    }, function (e) {
        return function ($17) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadKill.MonadThrow1()).Monad0())(kill(dictMonadKill)(e)($17));
        };
    });
};
var bracket = function (dict) {
    return dict.bracket;
};
var monadBracketReaderT = function (dictMonadBracket) {
    return new MonadBracket(function () {
        return Control_Monad_Reader_Trans.monadErrorReaderT(dictMonadBracket.MonadError1());
    }, function () {
        return monadKillReaderT(dictMonadBracket.MonadKill0());
    }, function (v) {
        return function (release) {
            return function (run) {
                return function (r) {
                    return bracket(dictMonadBracket)(v(r))(function (c) {
                        return function (a) {
                            return Control_Monad_Reader_Trans.runReaderT(release(c)(a))(r);
                        };
                    })(function (a) {
                        return Control_Monad_Reader_Trans.runReaderT(run(a))(r);
                    });
                };
            };
        };
    }, Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(((dictMonadBracket.MonadError1()).MonadThrow0()).Monad0())(never(dictMonadBracket)), function (k) {
        return function (r) {
            return uninterruptible(dictMonadBracket)(Control_Monad_Reader_Trans.runReaderT(k)(r));
        };
    });
};
module.exports = {
    bracket: bracket,
    fork: fork,
    join: join,
    kill: kill,
    never: never,
    suspend: suspend,
    uninterruptible: uninterruptible,
    MonadFork: MonadFork,
    MonadKill: MonadKill,
    Completed: Completed,
    Failed: Failed,
    Killed: Killed,
    MonadBracket: MonadBracket,
    monadForkAff: monadForkAff,
    monadForkReaderT: monadForkReaderT,
    monadKillAff: monadKillAff,
    monadKillReaderT: monadKillReaderT,
    monadBracketAff: monadBracketAff,
    monadBracketReaderT: monadBracketReaderT
};

},{"../Control.Monad.Reader.Trans/index.js":54,"../Control.Monad.Trans.Class/index.js":61,"../Effect.Aff/index.js":277}],48:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Bound = (function () {
    function Bound(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bound.create = function (value0) {
        return function (value1) {
            return new Bound(value0, value1);
        };
    };
    return Bound;
})();
var FreeT = (function () {
    function FreeT(value0) {
        this.value0 = value0;
    };
    FreeT.create = function (value0) {
        return new FreeT(value0);
    };
    return FreeT;
})();
var Bind = (function () {
    function Bind(value0) {
        this.value0 = value0;
    };
    Bind.create = function (value0) {
        return new Bind(value0);
    };
    return Bind;
})();
var monadTransFreeT = function (dictFunctor) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (ma) {
            return new FreeT(function (v) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
            });
        };
    });
};
var freeT = FreeT.create;
var bound = function (m) {
    return function (f) {
        return new Bind(Data_Exists.mkExists(new Bound(m, f)));
    };
};
var functorFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                if (v instanceof FreeT) {
                    return new FreeT(function (v1) {
                        return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                    });
                };
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)(function ($123) {
                            return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($123));
                        });
                    })(v.value0);
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 59, column 1 - line 59, column 71): " + [ f.constructor.name, v.constructor.name ]);
            };
        });
    };
};
var bimapFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return function (nm) {
                return function (v) {
                    if (v instanceof Bind) {
                        return Data_Exists.runExists(function (v1) {
                            return bound(function ($124) {
                                return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value0($124));
                            })(function ($125) {
                                return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value1($125));
                            });
                        })(v.value0);
                    };
                    if (v instanceof FreeT) {
                        return new FreeT(function (v1) {
                            return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)(function ($126) {
                                return nf(Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm))($126));
                            }))(nm(v.value0(Data_Unit.unit)));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 123, column 1 - line 123, column 109): " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var hoistFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var interpret = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var monadFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeFreeT(dictFunctor)(dictMonad);
        }, function () {
            return bindFreeT(dictFunctor)(dictMonad);
        });
    };
};
var bindFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Bind.Bind(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (v) {
            return function (f) {
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)(function (x) {
                            return bound(function (v2) {
                                return v1.value1(x);
                            })(f);
                        });
                    })(v.value0);
                };
                return bound(function (v1) {
                    return v;
                })(f);
            };
        });
    };
};
var applyFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Apply.Apply(function () {
            return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
        }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
    };
};
var applicativeFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Applicative.Applicative(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (a) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
            });
        });
    };
};
var liftFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (fa) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
            });
        };
    };
};
var resume = function (dictFunctor) {
    return function (dictMonadRec) {
        var go = function (v) {
            if (v instanceof FreeT) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
            };
            if (v instanceof Bind) {
                return Data_Exists.runExists(function (v1) {
                    var v2 = v1.value0(Data_Unit.unit);
                    if (v2 instanceof FreeT) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                            };
                            if (v3 instanceof Data_Either.Right) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                    return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                })(v3.value0))));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 20 - line 56, column 67): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v2 instanceof Bind) {
                        return Data_Exists.runExists(function (v3) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                            })));
                        })(v2.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 5 - line 57, column 98): " + [ v2.constructor.name ]);
                })(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 49, column 3 - line 49, column 75): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var runFreeT = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (interp) {
            var go = function (v) {
                if (v instanceof Data_Either.Left) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 141, column 3 - line 141, column 63): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
        };
    };
};
var semigroupFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictSemigroup) {
            return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyFreeT(dictFunctor)(dictMonad))(Data_Semigroup.append(dictSemigroup)));
        };
    };
};
var monadAskFreeT = function (dictFunctor) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadFreeT(dictFunctor)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadEffectFreeT = function (dictFunctor) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadFreeT(dictFunctor)(dictMonadEffect.Monad0());
        }, function ($127) {
            return Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($127));
        });
    };
};
var monadAffFreeT = function (dictFunctor) {
    return function (dictMonadAff) {
        return new Effect_Aff_Class.MonadAff(function () {
            return monadEffectFreeT(dictFunctor)(dictMonadAff.MonadEffect0());
        }, function ($128) {
            return Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)($128));
        });
    };
};
var monadStateFreeT = function (dictFunctor) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadFreeT(dictFunctor)(dictMonadState.Monad0());
        }, function ($129) {
            return Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($129));
        });
    };
};
var monadTellFreeT = function (dictFunctor) {
    return function (dictMonadTell) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadFreeT(dictFunctor)(dictMonadTell.Monad0());
        }, function ($130) {
            return Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($130));
        });
    };
};
var monadThrowFreeT = function (dictFunctor) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadFreeT(dictFunctor)(dictMonadThrow.Monad0());
        }, function ($131) {
            return Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($131));
        });
    };
};
var monadRecFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadFreeT(dictFunctor)(dictMonad);
        }, function (f) {
            var go = function (s) {
                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                    if (v instanceof Control_Monad_Rec_Class.Loop) {
                        return go(v.value0);
                    };
                    if (v instanceof Control_Monad_Rec_Class.Done) {
                        return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 82, column 15 - line 84, column 25): " + [ v.constructor.name ]);
                });
            };
            return go;
        });
    };
};
var monoidFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictMonoid) {
            return new Data_Monoid.Monoid(function () {
                return semigroupFreeT(dictFunctor)(dictMonad)(dictMonoid.Semigroup0());
            }, Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(Data_Monoid.mempty(dictMonoid)));
        };
    };
};
var substFreeT = function (dictMonad) {
    return function (dictFunctor) {
        return function (fBind) {
            return function (v) {
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(function ($132) {
                            return substFreeT(dictMonad)(dictFunctor)(fBind)(v1.value0($132));
                        })(function ($133) {
                            return substFreeT(dictMonad)(dictFunctor)(fBind)(v1.value1($133));
                        });
                    })(v.value0);
                };
                if (v instanceof FreeT) {
                    return Control_Bind.join(bindFreeT(dictFunctor)(dictMonad))(new FreeT(function (v1) {
                        return Data_Functor.mapFlipped(((dictMonad.Bind1()).Apply0()).Functor0())(v.value0(Data_Unit.unit))(function (v2) {
                            if (v2 instanceof Data_Either.Left) {
                                return Data_Either.Left.create(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v2.value0));
                            };
                            if (v2 instanceof Data_Either.Right) {
                                return Data_Either.Left.create(bound(function (v3) {
                                    return fBind(v2.value0);
                                })(substFreeT(dictMonad)(dictFunctor)(fBind)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 132, column 60 - line 134, column 69): " + [ v2.constructor.name ]);
                        });
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 130, column 1 - line 130, column 101): " + [ fBind.constructor.name, v.constructor.name ]);
            };
        };
    };
};
module.exports = {
    freeT: freeT,
    liftFreeT: liftFreeT,
    hoistFreeT: hoistFreeT,
    interpret: interpret,
    bimapFreeT: bimapFreeT,
    substFreeT: substFreeT,
    resume: resume,
    runFreeT: runFreeT,
    functorFreeT: functorFreeT,
    applyFreeT: applyFreeT,
    applicativeFreeT: applicativeFreeT,
    bindFreeT: bindFreeT,
    monadFreeT: monadFreeT,
    monadTransFreeT: monadTransFreeT,
    monadRecFreeT: monadRecFreeT,
    semigroupFreeT: semigroupFreeT,
    monoidFreeT: monoidFreeT,
    monadEffectFreeT: monadEffectFreeT,
    monadAffFreeT: monadAffFreeT,
    monadAskFreeT: monadAskFreeT,
    monadTellFreeT: monadTellFreeT,
    monadStateFreeT: monadStateFreeT,
    monadThrowFreeT: monadThrowFreeT
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Exists/index.js":136,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266,"../Effect.Aff.Class/index.js":274,"../Effect.Class/index.js":279}],49:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_CatList = require("../Data.CatList/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ExpF = function (x) {
    return x;
};
var Free = (function () {
    function Free(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Free.create = function (value0) {
        return function (value1) {
            return new Free(value0, value1);
        };
    };
    return Free;
})();
var Return = (function () {
    function Return(value0) {
        this.value0 = value0;
    };
    Return.create = function (value0) {
        return new Return(value0);
    };
    return Return;
})();
var Bind = (function () {
    function Bind(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bind.create = function (value0) {
        return function (value1) {
            return new Bind(value0, value1);
        };
    };
    return Bind;
})();
var toView = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        var runExpF = function (v2) {
            return v2;
        };
        var concatF = function (v2) {
            return function (r) {
                return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
            };
        };
        if (v.value0 instanceof Return) {
            var v2 = Data_CatList.uncons(v.value1);
            if (v2 instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return new Return(v.value0.value0);
            };
            if (v2 instanceof Data_Maybe.Just) {
                $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                return;
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
        };
        if (v.value0 instanceof Bind) {
            $tco_done = true;
            return new Bind(v.value0.value0, function (a) {
                return concatF(v.value0.value1(a))(v.value1);
            });
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var runFreeM = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (k) {
            var go = function (f) {
                var v = toView(f);
                if (v instanceof Return) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
                };
                if (v instanceof Bind) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
        };
    };
};
var runFree = function (dictFunctor) {
    return function (k) {
        var go = function ($copy_f) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(f) {
                var v = toView(f);
                if (v instanceof Return) {
                    $tco_done = true;
                    return v.value0;
                };
                if (v instanceof Bind) {
                    $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
                    return;
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_f);
            };
            return $tco_result;
        };
        return go;
    };
};
var resume$prime = function (k) {
    return function (j) {
        return function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return j(v.value0);
            };
            if (v instanceof Bind) {
                return k(v.value0)(v.value1);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
        };
    };
};
var resume = function (dictFunctor) {
    return resume$prime(function (g) {
        return function (i) {
            return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
        };
    })(Data_Either.Right.create);
};
var fromView = function (f) {
    return new Free(f, Data_CatList.empty);
};
var wrap = function (f) {
    return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
};
var suspendF = function (dictApplicative) {
    return function (f) {
        return wrap(Control_Applicative.pure(dictApplicative)(f));
    };
};
var freeMonad = new Control_Monad.Monad(function () {
    return freeApplicative;
}, function () {
    return freeBind;
});
var freeFunctor = new Data_Functor.Functor(function (k) {
    return function (f) {
        return Control_Bind.bindFlipped(freeBind)(function ($120) {
            return Control_Applicative.pure(freeApplicative)(k($120));
        })(f);
    };
});
var freeBind = new Control_Bind.Bind(function () {
    return freeApply;
}, function (v) {
    return function (k) {
        return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
    };
});
var freeApply = new Control_Apply.Apply(function () {
    return freeFunctor;
}, Control_Monad.ap(freeMonad));
var freeApplicative = new Control_Applicative.Applicative(function () {
    return freeApply;
}, function ($121) {
    return fromView(Return.create($121));
});
var semigroupFree = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup)));
};
var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
    return freeMonad;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(freeBind)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(freeApplicative)(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
        });
    };
});
var liftF = function (f) {
    return fromView(new Bind(f, function ($122) {
        return Control_Applicative.pure(freeApplicative)($122);
    }));
};
var freeMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftF;
});
var monoidFree = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFree(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)));
};
var substFree = function (k) {
    var go = function (f) {
        var v = toView(f);
        if (v instanceof Return) {
            return Control_Applicative.pure(freeApplicative)(v.value0);
        };
        if (v instanceof Bind) {
            return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
    };
    return go;
};
var hoistFree = function (k) {
    return substFree(function ($123) {
        return liftF(k($123));
    });
};
var foldableFree = function (dictFunctor) {
    return function (dictFoldable) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                var go = function ($124) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(v.value0);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [ v.constructor.name ]);
                    })(resume(dictFunctor)($124));
                };
                return go;
            };
        }, function (f) {
            var go = function (r) {
                return function ($125) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(r)(v.value0);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [ v.constructor.name ]);
                    })(resume(dictFunctor)($125));
                };
            };
            return go;
        }, function (f) {
            var go = function (r) {
                return function ($126) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(v.value0)(r);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [ v.constructor.name ]);
                    })(resume(dictFunctor)($126));
                };
            };
            return go;
        });
    };
};
var traversableFree = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
    }, function () {
        return freeFunctor;
    }, function (dictApplicative) {
        return function (tma) {
            return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
        };
    }, function (dictApplicative) {
        return function (f) {
            var go = function ($127) {
                return (function (v) {
                    if (v instanceof Data_Either.Left) {
                        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($128) {
                            return Control_Bind.join(freeBind)(liftF($128));
                        })(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
                    };
                    if (v instanceof Data_Either.Right) {
                        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [ v.constructor.name ]);
                })(resume(dictTraversable.Functor0())($127));
            };
            return go;
        };
    });
};
var foldFree = function (dictMonadRec) {
    return function (k) {
        var go = function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
            };
            if (v instanceof Bind) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($129) {
                    return Control_Monad_Rec_Class.Loop.create(v.value1($129));
                })(k(v.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var eqFree = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                    };
                    return false;
                };
            });
        };
    };
};
var ordFree = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Left) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Either.Left) {
                        return Data_Ordering.GT.value;
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [ v1.constructor.name, v.constructor.name ]);
                };
            });
        };
    };
};
var eq1Free = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Free = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord1(function () {
                return eq1Free(dictFunctor)(dictOrd1.Eq10());
            }, function (dictOrd2) {
                return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd2));
            });
        };
    };
};
module.exports = {
    suspendF: suspendF,
    wrap: wrap,
    liftF: liftF,
    hoistFree: hoistFree,
    foldFree: foldFree,
    substFree: substFree,
    runFree: runFree,
    runFreeM: runFreeM,
    resume: resume,
    "resume'": resume$prime,
    eqFree: eqFree,
    eq1Free: eq1Free,
    ordFree: ordFree,
    ord1Free: ord1Free,
    freeFunctor: freeFunctor,
    freeBind: freeBind,
    freeApplicative: freeApplicative,
    freeApply: freeApply,
    freeMonad: freeMonad,
    freeMonadTrans: freeMonadTrans,
    freeMonadRec: freeMonadRec,
    foldableFree: foldableFree,
    traversableFree: traversableFree,
    semigroupFree: semigroupFree,
    monoidFree: monoidFree
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad/index.js":65,"../Data.CatList/index.js":111,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Traversable/index.js":257,"../Unsafe.Coerce/index.js":405}],50:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Yield = (function () {
    function Yield(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Yield.create = function (value0) {
        return function (value1) {
            return new Yield(value0, value1);
        };
    };
    return Yield;
})();
var Skip = (function () {
    function Skip(value0) {
        this.value0 = value0;
    };
    Skip.create = function (value0) {
        return new Skip(value0);
    };
    return Skip;
})();
var Done = (function () {
    function Done() {

    };
    Done.value = new Done();
    return Done;
})();
var ListT = function (x) {
    return x;
};
var wrapLazy = function (dictApplicative) {
    return function (v) {
        return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
    };
};
var wrapEffect = function (dictFunctor) {
    return function (v) {
        return ListT(Data_Functor.map(dictFunctor)(function ($187) {
            return Skip.create(Data_Lazy.defer(Data_Function["const"]($187)));
        })(v));
    };
};
var unfold = function (dictMonad) {
    return function (f) {
        return function (z) {
            var g = function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                        return unfold(dictMonad)(f)(v.value0.value0);
                    }));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [ v.constructor.name ]);
            };
            return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
        };
    };
};
var uncons = function (dictMonad) {
    return function (v) {
        var g = function (v1) {
            if (v1 instanceof Yield) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
            };
            if (v1 instanceof Skip) {
                return uncons(dictMonad)(Data_Lazy.force(v1.value0));
            };
            if (v1 instanceof Done) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [ v1.constructor.name ]);
        };
        return Control_Bind.bind(dictMonad.Bind1())(v)(g);
    };
};
var tail = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
    };
};
var stepMap = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return ListT(Data_Functor.map(dictFunctor)(f)(v));
        };
    };
};
var takeWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $101 = f(v.value0);
                if ($101) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                };
                return Done.value;
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var scanl = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (l) {
                var g = function (v) {
                    var h = function (v1) {
                        if (v1 instanceof Yield) {
                            var b$prime$prime = f(v.value0)(v1.value0);
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                        };
                        if (v1 instanceof Skip) {
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                        };
                        if (v1 instanceof Done) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [ v1.constructor.name ]);
                    };
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                };
                return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
            };
        };
    };
};
var prepend$prime = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
        };
    };
};
var prepend = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
        };
    };
};
var nil = function (dictApplicative) {
    return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
};
var singleton = function (dictApplicative) {
    return function (a) {
        return prepend(dictApplicative)(a)(nil(dictApplicative));
    };
};
var take = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return nil(dictApplicative);
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var zipWith$prime = function (dictMonad) {
    return function (f) {
        var g = function (v) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                        return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                    })))(f(v.value0.value0)(v1.value0.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        var loop = function (fa) {
            return function (fb) {
                return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (v1) {
                        return g(v)(v1);
                    });
                }));
            };
        };
        return loop;
    };
};
var zipWith = function (dictMonad) {
    return function (f) {
        var g = function (a) {
            return function (b) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
            };
        };
        return zipWith$prime(dictMonad)(g);
    };
};
var newtypeListT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ListT);
var mapMaybe = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var iterate = function (dictMonad) {
    return function (f) {
        return function (a) {
            var g = function (x) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
            };
            return unfold(dictMonad)(g)(a);
        };
    };
};
var repeat = function (dictMonad) {
    return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var head = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
    };
};
var functorListT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
            };
            if (v instanceof Skip) {
                return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    });
};
var fromEffect = function (dictApplicative) {
    return function (fa) {
        return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
            return nil(dictApplicative);
        })))(fa));
    };
};
var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return fromEffect(dictMonad.Applicative0());
});
var foldlRec$prime = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                a: b$prime,
                                b: v.value0.value1
                            }));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var runListTRec = function (dictMonadRec) {
    return foldlRec$prime(dictMonadRec)(function (v) {
        return function (v1) {
            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldlRec = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                            a: f(b)(v.value0.value0),
                            b: v.value0.value1
                        }));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var foldl$prime = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var runListT = function (dictMonad) {
    return foldl$prime(dictMonad)(function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldl = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return loop(f(b)(v.value0.value0))(v.value0.value1);
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var filter = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                var $154 = f(v.value0);
                if ($154) {
                    return new Yield(v.value0, s$prime);
                };
                return new Skip(s$prime);
            };
            if (v instanceof Skip) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                return new Skip(s$prime);
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var dropWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $159 = f(v.value0);
                if ($159) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                };
                return new Yield(v.value0, v.value1);
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var drop = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return fa;
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var cons = function (dictApplicative) {
    return function (lh) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
        };
    };
};
var unfoldable1ListT = function (dictMonad) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            var go = function (v) {
                if (v.value1 instanceof Data_Maybe.Nothing) {
                    return singleton(dictMonad.Applicative0())(v.value0);
                };
                if (v.value1 instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value1.value0));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var unfoldableListT = function (dictMonad) {
    return new Data_Unfoldable.Unfoldable(function () {
        return unfoldable1ListT(dictMonad);
    }, function (f) {
        return function (b) {
            var go = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return nil(dictMonad.Applicative0());
                };
                if (v instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value0.value1));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var semigroupListT = function (dictApplicative) {
    return new Data_Semigroup.Semigroup(concat(dictApplicative));
};
var concat = function (dictApplicative) {
    return function (x) {
        return function (y) {
            var f = function (v) {
                if (v instanceof Yield) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [ v.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
        };
    };
};
var monoidListT = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupListT(dictApplicative);
    }, nil(dictApplicative));
};
var catMaybes = function (dictFunctor) {
    return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};
var monadListT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return bindListT(dictMonad);
    });
};
var bindListT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyListT(dictMonad);
    }, function (fa) {
        return function (f) {
            var g = function (v) {
                if (v instanceof Yield) {
                    var h = function (s$prime) {
                        return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                    };
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [ v.constructor.name ]);
            };
            return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
        };
    });
};
var applyListT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadListT(dictMonad)));
};
var applicativeListT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyListT(dictMonad);
    }, singleton(dictMonad.Applicative0()));
};
var monadEffectListT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadListT(dictMonadEffect.Monad0());
    }, function ($188) {
        return Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($188));
    });
};
var altListT = function (dictApplicative) {
    return new Control_Alt.Alt(function () {
        return functorListT((dictApplicative.Apply0()).Functor0());
    }, concat(dictApplicative));
};
var plusListT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altListT(dictMonad.Applicative0());
    }, nil(dictMonad.Applicative0()));
};
var alternativeListT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return plusListT(dictMonad);
    });
};
var monadZeroListT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeListT(dictMonad);
    }, function () {
        return monadListT(dictMonad);
    });
};
var monadPlusListT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroListT(dictMonad);
    });
};
module.exports = {
    ListT: ListT,
    Yield: Yield,
    Skip: Skip,
    Done: Done,
    catMaybes: catMaybes,
    cons: cons,
    drop: drop,
    dropWhile: dropWhile,
    filter: filter,
    foldl: foldl,
    foldlRec: foldlRec,
    "foldl'": foldl$prime,
    "foldlRec'": foldlRec$prime,
    fromEffect: fromEffect,
    head: head,
    iterate: iterate,
    mapMaybe: mapMaybe,
    nil: nil,
    prepend: prepend,
    "prepend'": prepend$prime,
    repeat: repeat,
    runListT: runListT,
    runListTRec: runListTRec,
    scanl: scanl,
    singleton: singleton,
    tail: tail,
    take: take,
    takeWhile: takeWhile,
    uncons: uncons,
    unfold: unfold,
    wrapEffect: wrapEffect,
    wrapLazy: wrapLazy,
    zipWith: zipWith,
    "zipWith'": zipWith$prime,
    newtypeListT: newtypeListT,
    semigroupListT: semigroupListT,
    monoidListT: monoidListT,
    functorListT: functorListT,
    unfoldableListT: unfoldableListT,
    unfoldable1ListT: unfoldable1ListT,
    applyListT: applyListT,
    applicativeListT: applicativeListT,
    bindListT: bindListT,
    monadListT: monadListT,
    monadTransListT: monadTransListT,
    altListT: altListT,
    plusListT: plusListT,
    alternativeListT: alternativeListT,
    monadZeroListT: monadZeroListT,
    monadPlusListT: monadPlusListT,
    monadEffectListT: monadEffectListT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Lazy/index.js":173,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279}],51:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var MaybeT = function (x) {
    return x;
};
var runMaybeT = function (v) {
    return v;
};
var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
    return n;
}, MaybeT);
var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($75) {
        return MaybeT(Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create)($75));
    };
});
var mapMaybeT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorMaybeT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
        };
    });
};
var monadMaybeT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return bindMaybeT(dictMonad);
    });
};
var bindMaybeT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyMaybeT(dictMonad);
    }, function (v) {
        return function (f) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    var v2 = f(v1.value0);
                    return v2;
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [ v1.constructor.name ]);
            });
        };
    });
};
var applyMaybeT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadMaybeT(dictMonad)));
};
var applicativeMaybeT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyMaybeT(dictMonad);
    }, function ($76) {
        return MaybeT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create($76)));
    });
};
var monadAskMaybeT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadMaybeT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderMaybeT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskMaybeT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContMaybeT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadMaybeT(dictMonadCont.Monad0());
    }, function (f) {
        return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return MaybeT(c(new Data_Maybe.Just(a)));
            });
            return v;
        }));
    });
};
var monadEffectMaybe = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadMaybeT(dictMonadEffect.Monad0());
    }, function ($77) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($77));
    });
};
var monadRecMaybeT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadMaybeT(dictMonadRec.Monad0());
    }, function (f) {
        return function ($78) {
            return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                    var v = f(a);
                    return v;
                })())(function (m$prime) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                        if (m$prime instanceof Data_Maybe.Nothing) {
                            return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                        };
                        if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                        };
                        if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                            return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                        };
                        throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 84, column 16 - line 87, column 43): " + [ m$prime.constructor.name ]);
                    })());
                });
            })($78));
        };
    });
};
var monadStateMaybeT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadMaybeT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellMaybeT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadMaybeT(dictMonadTell.Monad0());
    }, function ($79) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($79));
    });
};
var monadWriterMaybeT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellMaybeT(dictMonadWriter.MonadTell0());
    }, mapMaybeT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapMaybeT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 121, column 10 - line 123, column 42): " + [ v.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowMaybeT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadMaybeT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorMaybeT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowMaybeT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                var v1 = h(a);
                return v1;
            }));
        };
    });
};
var altMaybeT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                if (v2 instanceof Data_Maybe.Nothing) {
                    return v1;
                };
                return Control_Applicative.pure(dictMonad.Applicative0())(v2);
            });
        };
    });
};
var plusMaybeT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altMaybeT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
};
var alternativeMaybeT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return plusMaybeT(dictMonad);
    });
};
var monadZeroMaybeT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeMaybeT(dictMonad);
    }, function () {
        return monadMaybeT(dictMonad);
    });
};
var monadPlusMaybeT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroMaybeT(dictMonad);
    });
};
module.exports = {
    MaybeT: MaybeT,
    runMaybeT: runMaybeT,
    mapMaybeT: mapMaybeT,
    newtypeMaybeT: newtypeMaybeT,
    functorMaybeT: functorMaybeT,
    applyMaybeT: applyMaybeT,
    applicativeMaybeT: applicativeMaybeT,
    bindMaybeT: bindMaybeT,
    monadMaybeT: monadMaybeT,
    monadTransMaybeT: monadTransMaybeT,
    altMaybeT: altMaybeT,
    plusMaybeT: plusMaybeT,
    alternativeMaybeT: alternativeMaybeT,
    monadPlusMaybeT: monadPlusMaybeT,
    monadZeroMaybeT: monadZeroMaybeT,
    monadRecMaybeT: monadRecMaybeT,
    monadEffectMaybe: monadEffectMaybe,
    monadContMaybeT: monadContMaybeT,
    monadThrowMaybeT: monadThrowMaybeT,
    monadErrorMaybeT: monadErrorMaybeT,
    monadAskMaybeT: monadAskMaybeT,
    monadReaderMaybeT: monadReaderMaybeT,
    monadStateMaybeT: monadStateMaybeT,
    monadTellMaybeT: monadTellMaybeT,
    monadWriterMaybeT: monadWriterMaybeT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Tuple/index.js":260,"../Effect.Class/index.js":279}],52:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var RWSResult = (function () {
    function RWSResult(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RWSResult.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RWSResult(value0, value1, value2);
            };
        };
    };
    return RWSResult;
})();
var RWST = function (x) {
    return x;
};
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(m)(f(r)(s));
            };
        };
    };
};
var runRWST = function (v) {
    return v;
};
var newtypeRWST = new Data_Newtype.Newtype(function (n) {
    return n;
}, RWST);
var monadTransRWST = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return function (v) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    });
                };
            };
        };
    });
};
var mapRWST = function (f) {
    return function (v) {
        return function (r) {
            return function (s) {
                return f(v(r)(s));
            };
        };
    };
};
var lazyRWST = new Control_Lazy.Lazy(function (f) {
    return function (r) {
        return function (s) {
            var v = f(Data_Unit.unit);
            return v(r)(s);
        };
    };
});
var functorRWST = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (r) {
                return function (s) {
                    return Data_Functor.map(dictFunctor)(function (v1) {
                        return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                    })(v(r)(s));
                };
            };
        };
    });
};
var execRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                });
            };
        };
    };
};
var evalRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                });
            };
        };
    };
};
var applyRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Apply.Apply(function () {
            return functorRWST((dictBind.Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var bindRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Bind.Bind(function () {
            return applyRWST(dictBind)(dictMonoid);
        }, function (v) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                            var v2 = f(v1.value1);
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var applicativeRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Applicative.Applicative(function () {
            return applyRWST(dictMonad.Bind1())(dictMonoid);
        }, function (a) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad.Monad(function () {
            return applicativeRWST(dictMonad)(dictMonoid);
        }, function () {
            return bindRWST(dictMonad.Bind1())(dictMonoid);
        });
    };
};
var monadAskRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (r) {
            return function (s) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
            };
        });
    };
};
var monadReaderRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return m(f(r))(s);
                    };
                };
            };
        });
    };
};
var monadEffectRWS = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
        }, function ($155) {
            return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($155));
        });
    };
};
var monadRecRWST = function (dictMonadRec) {
    return function (dictMonoid) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadRWST(dictMonadRec.Monad0())(dictMonoid);
        }, function (k) {
            return function (a) {
                var k$prime = function (r) {
                    return function (v) {
                        var v1 = k(v.value1);
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                    return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                    return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 127, column 16 - line 129, column 68): " + [ v2.value1.constructor.name ]);
                            })());
                        });
                    };
                };
                return function (r) {
                    return function (s) {
                        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    };
                };
            };
        });
    };
};
var monadStateRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (v) {
                return function (s) {
                    var v1 = f(s);
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadTellRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (w) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                };
            };
        });
    };
};
var monadWriterRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellRWST(dictMonad)(dictMonoid);
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                    });
                };
            };
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                    });
                };
            };
        });
    };
};
var monadThrowRWST = function (dictMonadThrow) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorRWST = function (dictMonadError) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
        }, function (m) {
            return function (h) {
                return RWST(function (r) {
                    return function (s) {
                        return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                            var v = h(e);
                            return v(r)(s);
                        });
                    };
                });
            };
        });
    };
};
var altRWST = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorRWST(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return RWST(function (r) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                };
            });
        };
    });
};
var plusRWST = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altRWST(dictPlus.Alt0());
    }, function (v) {
        return function (v1) {
            return Control_Plus.empty(dictPlus);
        };
    });
};
var alternativeRWST = function (dictMonoid) {
    return function (dictAlternative) {
        return function (dictMonad) {
            return new Control_Alternative.Alternative(function () {
                return applicativeRWST(dictMonad)(dictMonoid);
            }, function () {
                return plusRWST(dictAlternative.Plus1());
            });
        };
    };
};
module.exports = {
    RWSResult: RWSResult,
    RWST: RWST,
    runRWST: runRWST,
    evalRWST: evalRWST,
    execRWST: execRWST,
    mapRWST: mapRWST,
    withRWST: withRWST,
    newtypeRWST: newtypeRWST,
    functorRWST: functorRWST,
    applyRWST: applyRWST,
    altRWST: altRWST,
    alternativeRWST: alternativeRWST,
    bindRWST: bindRWST,
    applicativeRWST: applicativeRWST,
    monadRWST: monadRWST,
    monadTransRWST: monadTransRWST,
    lazyRWST: lazyRWST,
    monadEffectRWS: monadEffectRWS,
    monadAskRWST: monadAskRWST,
    monadReaderRWST: monadReaderRWST,
    monadStateRWST: monadStateRWST,
    monadTellRWST: monadTellRWST,
    monadWriterRWST: monadWriterRWST,
    monadThrowRWST: monadThrowRWST,
    monadErrorRWST: monadErrorRWST,
    monadRecRWST: monadRecRWST,
    plusRWST: plusRWST
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Lazy/index.js":41,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.Plus/index.js":70,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279}],53:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var MonadAsk = function (Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};
var MonadReader = function (MonadAsk0, local) {
    this.MonadAsk0 = MonadAsk0;
    this.local = local;
};
var monadAskFun = new MonadAsk(function () {
    return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
var local = function (dict) {
    return dict.local;
};
var ask = function (dict) {
    return dict.ask;
};
var asks = function (dictMonadAsk) {
    return function (f) {
        return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    ask: ask,
    local: local,
    MonadAsk: MonadAsk,
    asks: asks,
    MonadReader: MonadReader,
    monadAskFun: monadAskFun,
    monadReaderFun: monadReaderFun
};

},{"../Control.Category/index.js":36,"../Control.Monad/index.js":65,"../Control.Semigroupoid/index.js":71,"../Data.Functor/index.js":156}],54:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ReaderT = function (x) {
    return x;
};
var withReaderT = function (f) {
    return function (v) {
        return function ($66) {
            return v(f($66));
        };
    };
};
var runReaderT = function (v) {
    return v;
};
var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ReaderT);
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($67) {
        return ReaderT(Data_Function["const"]($67));
    };
});
var mapReaderT = function (f) {
    return function (v) {
        return function ($68) {
            return f(v($68));
        };
    };
};
var functorReaderT = function (dictFunctor) {
    return new Data_Functor.Functor(function ($69) {
        return mapReaderT(Data_Functor.map(dictFunctor)($69));
    });
};
var distributiveReaderT = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorReaderT(dictDistributive.Functor0());
    }, function (dictFunctor) {
        return function (f) {
            return function ($70) {
                return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($70));
            };
        };
    }, function (dictFunctor) {
        return function (a) {
            return function (e) {
                return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                    return r(e);
                })(a);
            };
        };
    });
};
var applyReaderT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorReaderT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Apply.apply(dictApply)(v(r))(v1(r));
            };
        };
    });
};
var bindReaderT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyReaderT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (r) {
                return Control_Bind.bind(dictBind)(v(r))(function (a) {
                    var v1 = k(a);
                    return v1(r);
                });
            };
        };
    });
};
var semigroupReaderT = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeReaderT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyReaderT(dictApplicative.Apply0());
    }, function ($71) {
        return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($71)));
    });
};
var monadReaderT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeReaderT(dictMonad.Applicative0());
    }, function () {
        return bindReaderT(dictMonad.Bind1());
    });
};
var monadAskReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadReaderT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var monadReaderReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskReaderT(dictMonad);
    }, withReaderT);
};
var monadContReaderT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadReaderT(dictMonadCont.Monad0());
    }, function (f) {
        return function (r) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function ($72) {
                    return ReaderT(Data_Function["const"](c($72)));
                });
                return v(r);
            });
        };
    });
};
var monadEffectReader = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadReaderT(dictMonadEffect.Monad0());
    }, function ($73) {
        return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($73));
    });
};
var monadRecReaderT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadReaderT(dictMonadRec.Monad0());
    }, function (k) {
        return function (a) {
            var k$prime = function (r) {
                return function (a$prime) {
                    var v = k(a$prime);
                    return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                };
            };
            return function (r) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
            };
        };
    });
};
var monadStateReaderT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadReaderT(dictMonadState.Monad0());
    }, function ($74) {
        return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($74));
    });
};
var monadTellReaderT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadReaderT(dictMonadTell.Monad0());
    }, function ($75) {
        return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($75));
    });
};
var monadWriterReaderT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellReaderT(dictMonadWriter.MonadTell0());
    }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
};
var monadThrowReaderT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadReaderT(dictMonadThrow.Monad0());
    }, function ($76) {
        return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($76));
    });
};
var monadErrorReaderT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowReaderT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (r) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                    var v1 = h(e);
                    return v1(r);
                });
            };
        };
    });
};
var monoidReaderT = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altReaderT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorReaderT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Alt.alt(dictAlt)(v(r))(v1(r));
            };
        };
    });
};
var plusReaderT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altReaderT(dictPlus.Alt0());
    }, Data_Function["const"](Control_Plus.empty(dictPlus)));
};
var alternativeReaderT = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeReaderT(dictAlternative.Applicative0());
    }, function () {
        return plusReaderT(dictAlternative.Plus1());
    });
};
var monadZeroReaderT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeReaderT(dictMonadZero.Alternative1());
    }, function () {
        return monadReaderT(dictMonadZero.Monad0());
    });
};
var monadPlusReaderT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroReaderT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    ReaderT: ReaderT,
    runReaderT: runReaderT,
    withReaderT: withReaderT,
    mapReaderT: mapReaderT,
    newtypeReaderT: newtypeReaderT,
    functorReaderT: functorReaderT,
    applyReaderT: applyReaderT,
    applicativeReaderT: applicativeReaderT,
    altReaderT: altReaderT,
    plusReaderT: plusReaderT,
    alternativeReaderT: alternativeReaderT,
    bindReaderT: bindReaderT,
    monadReaderT: monadReaderT,
    monadZeroReaderT: monadZeroReaderT,
    semigroupReaderT: semigroupReaderT,
    monoidReaderT: monoidReaderT,
    monadPlusReaderT: monadPlusReaderT,
    monadTransReaderT: monadTransReaderT,
    monadEffectReader: monadEffectReader,
    monadContReaderT: monadContReaderT,
    monadThrowReaderT: monadThrowReaderT,
    monadErrorReaderT: monadErrorReaderT,
    monadAskReaderT: monadAskReaderT,
    monadReaderReaderT: monadReaderReaderT,
    monadStateReaderT: monadStateReaderT,
    monadTellReaderT: monadTellReaderT,
    monadWriterReaderT: monadWriterReaderT,
    distributiveReaderT: distributiveReaderT,
    monadRecReaderT: monadRecReaderT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Distributive/index.js":127,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Effect.Class/index.js":279}],55:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Loop = (function () {
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var MonadRec = function (Monad0, tailRecM) {
    this.Monad0 = Monad0;
    this.tailRecM = tailRecM;
};
var tailRecM = function (dict) {
    return dict.tailRecM;
};
var tailRecM2 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return tailRecM(dictMonadRec)(function (o) {
                    return f(o.a)(o.b);
                })({
                    a: a,
                    b: b
                });
            };
        };
    };
};
var tailRecM3 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return tailRecM(dictMonadRec)(function (o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a,
                        b: b,
                        c: c
                    });
                };
            };
        };
    };
};
var untilJust = function (dictMonadRec) {
    return function (m) {
        return tailRecM(dictMonadRec)(function (v) {
            return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return new Loop(Data_Unit.unit);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return new Done(v1.value0);
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 18): " + [ v1.constructor.name ]);
            });
        })(Data_Unit.unit);
    };
};
var whileJust = function (dictMonoid) {
    return function (dictMonadRec) {
        return function (m) {
            return tailRecM(dictMonadRec)(function (v) {
                return Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(m)(function (v1) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Done(v);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [ v1.constructor.name ]);
                });
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var tailRec = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Loop) {
                $copy_v = f(v.value0);
                return;
            };
            if (v instanceof Done) {
                $tco_done = true;
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($63) {
        return go(f($63));
    };
};
var monadRecMaybe = new MonadRec(function () {
    return Data_Maybe.monadMaybe;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return new Done(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                return new Done(new Data_Maybe.Just(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecIdentity = new MonadRec(function () {
    return Data_Identity.monadIdentity;
}, function (f) {
    var runIdentity = function (v) {
        return v;
    };
    return function ($64) {
        return Data_Identity.Identity(tailRec(function ($65) {
            return runIdentity(f($65));
        })($64));
    };
});
var monadRecFunction = new MonadRec(function () {
    return Control_Monad.monadFn;
}, function (f) {
    return function (a0) {
        return function (e) {
            return tailRec(function (a) {
                return f(a)(e);
            })(a0);
        };
    };
});
var monadRecEither = new MonadRec(function () {
    return Data_Either.monadEither;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEffect = new MonadRec(function () {
    return Effect.monadEffect;
}, function (f) {
    return function (a) {
        var fromDone = function (v) {
            if (v instanceof Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
        };
        return function __do() {
            var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
            (function () {
                while (!(function __do() {
                    var v1 = Effect_Ref.read(v)();
                    if (v1 instanceof Loop) {
                        var v2 = f(v1.value0)();
                        var v3 = Effect_Ref.write(v2)(v)();
                        return false;
                    };
                    if (v1 instanceof Done) {
                        return true;
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v1.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
        };
    };
});
var functorStep = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Loop) {
            return new Loop(m.value0);
        };
        if (m instanceof Done) {
            return new Done(f(m.value0));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 8 - line 27, column 48): " + [ m.constructor.name ]);
    };
});
var forever = function (dictMonadRec) {
    return function (ma) {
        return tailRecM(dictMonadRec)(function (u) {
            return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
            };
            if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 29, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
module.exports = {
    Loop: Loop,
    Done: Done,
    MonadRec: MonadRec,
    tailRec: tailRec,
    tailRecM: tailRecM,
    tailRecM2: tailRecM2,
    tailRecM3: tailRecM3,
    forever: forever,
    whileJust: whileJust,
    untilJust: untilJust,
    functorStep: functorStep,
    bifunctorStep: bifunctorStep,
    monadRecIdentity: monadRecIdentity,
    monadRecEffect: monadRecEffect,
    monadRecFunction: monadRecFunction,
    monadRecEither: monadRecEither,
    monadRecMaybe: monadRecMaybe
};

},{"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266,"../Effect.Ref/index.js":288,"../Effect/index.js":294}],56:[function(require,module,exports){
"use strict";

exports.map_ = function (f) {
  return function (a) {
    return function () {
      return f(a());
    };
  };
};

exports.pure_ = function (a) {
  return function () {
    return a;
  };
};

exports.bind_ = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.run = function (f) {
  return f();
};

exports["while"] = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports["for"] = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreach = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (a) {
  return function (ref) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};

},{}],57:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function () {
    return applicativeST;
}, function () {
    return bindST;
});
var bindST = new Control_Bind.Bind(function () {
    return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function () {
    return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function () {
    return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadST;
}, function (f) {
    return function (a) {
        var isLooping = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return true;
            };
            return false;
        };
        var fromDone = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [ v.constructor.name ]);
        };
        return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (v) {
            return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(v)))(Control_Bind.bind(bindST)($foreign.read(v))(function (v1) {
                if (v1 instanceof Control_Monad_Rec_Class.Loop) {
                    return Control_Bind.bind(bindST)(f(v1.value0))(function (v2) {
                        return Data_Functor["void"](functorST)($foreign.write(v2)(v));
                    });
                };
                if (v1 instanceof Control_Monad_Rec_Class.Done) {
                    return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                };
                throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [ v1.constructor.name ]);
            })))(function () {
                return Data_Functor.map(functorST)(fromDone)($foreign.read(v));
            });
        });
    };
});
module.exports = {
    modify: modify,
    functorST: functorST,
    applyST: applyST,
    applicativeST: applicativeST,
    bindST: bindST,
    monadST: monadST,
    monadRecST: monadRecST,
    map_: $foreign.map_,
    pure_: $foreign.pure_,
    bind_: $foreign.bind_,
    run: $foreign.run,
    "while": $foreign["while"],
    "for": $foreign["for"],
    foreach: $foreign.foreach,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad/index.js":65,"../Data.Functor/index.js":156,"../Data.Unit/index.js":266,"./foreign.js":56}],58:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadState = function (Monad0, state) {
    this.Monad0 = Monad0;
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};
var put = function (dictMonadState) {
    return function (s) {
        return state(dictMonadState)(function (v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
    };
};
var modify_ = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
    };
};
var modify = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            var s$prime = f(s);
            return new Data_Tuple.Tuple(s$prime, s$prime);
        });
    };
};
var gets = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(f(s), s);
        });
    };
};
var get = function (dictMonadState) {
    return state(dictMonadState)(function (s) {
        return new Data_Tuple.Tuple(s, s);
    });
};
module.exports = {
    state: state,
    MonadState: MonadState,
    get: get,
    gets: gets,
    put: put,
    modify: modify,
    modify_: modify_
};

},{"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266}],59:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var StateT = function (x) {
    return x;
};
var withStateT = function (f) {
    return function (v) {
        return function ($107) {
            return v(f($107));
        };
    };
};
var runStateT = function (v) {
    return v;
};
var newtypeStateT = new Data_Newtype.Newtype(function (n) {
    return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (s) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
            });
        };
    };
});
var mapStateT = function (f) {
    return function (v) {
        return function ($108) {
            return f(v($108));
        };
    };
};
var lazyStateT = new Control_Lazy.Lazy(function (f) {
    return function (s) {
        var v = f(Data_Unit.unit);
        return v(s);
    };
});
var functorStateT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (s) {
                return Data_Functor.map(dictFunctor)(function (v1) {
                    return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                })(v(s));
            };
        };
    });
};
var execStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
        };
    };
};
var evalStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
        };
    };
};
var monadStateT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeStateT(dictMonad);
    }, function () {
        return bindStateT(dictMonad);
    });
};
var bindStateT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyStateT(dictMonad);
    }, function (v) {
        return function (f) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                    var v3 = f(v1.value0);
                    return v3(v1.value1);
                });
            };
        };
    });
};
var applyStateT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadStateT(dictMonad)));
};
var applicativeStateT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyStateT(dictMonad);
    }, function (a) {
        return function (s) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
        };
    });
};
var monadAskStateT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadStateT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderStateT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskStateT(dictMonadReader.MonadAsk0());
    }, function ($109) {
        return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)($109));
    });
};
var monadContStateT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadStateT(dictMonadCont.Monad0());
    }, function (f) {
        return function (s) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return function (s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    };
                });
                return v(s);
            });
        };
    });
};
var monadEffectState = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadStateT(dictMonadEffect.Monad0());
    }, function ($110) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($110));
    });
};
var monadRecStateT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadStateT(dictMonadRec.Monad0());
    }, function (f) {
        return function (a) {
            var f$prime = function (v) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                    var v1 = f(v.value0);
                    return v1;
                })()(v.value1))(function (v1) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                        if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                            return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                        };
                        if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                            return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                        };
                        throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [ v1.value0.constructor.name ]);
                    })());
                });
            };
            return function (s) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
            };
        };
    });
};
var monadStateStateT = function (dictMonad) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadStateT(dictMonad);
    }, function (f) {
        return StateT(function ($111) {
            return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
        });
    });
};
var monadTellStateT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadStateT(dictMonadTell.Monad0());
    }, function ($112) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($112));
    });
};
var monadWriterStateT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellStateT(dictMonadWriter.MonadTell0());
    }, function (m) {
        return function (s) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            });
        };
    }, function (m) {
        return function (s) {
            return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m(s))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            }));
        };
    });
};
var monadThrowStateT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadStateT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorStateT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowStateT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (s) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                    var v1 = h(e);
                    return v1(s);
                });
            };
        };
    });
};
var altStateT = function (dictMonad) {
    return function (dictAlt) {
        return new Control_Alt.Alt(function () {
            return functorStateT(dictAlt.Functor0());
        }, function (v) {
            return function (v1) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                };
            };
        });
    };
};
var plusStateT = function (dictMonad) {
    return function (dictPlus) {
        return new Control_Plus.Plus(function () {
            return altStateT(dictMonad)(dictPlus.Alt0());
        }, function (v) {
            return Control_Plus.empty(dictPlus);
        });
    };
};
var alternativeStateT = function (dictMonad) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeStateT(dictMonad);
        }, function () {
            return plusStateT(dictMonad)(dictAlternative.Plus1());
        });
    };
};
var monadZeroStateT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
    }, function () {
        return monadStateT(dictMonadZero.Monad0());
    });
};
var monadPlusStateT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroStateT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    StateT: StateT,
    runStateT: runStateT,
    evalStateT: evalStateT,
    execStateT: execStateT,
    mapStateT: mapStateT,
    withStateT: withStateT,
    newtypeStateT: newtypeStateT,
    functorStateT: functorStateT,
    applyStateT: applyStateT,
    applicativeStateT: applicativeStateT,
    altStateT: altStateT,
    plusStateT: plusStateT,
    alternativeStateT: alternativeStateT,
    bindStateT: bindStateT,
    monadStateT: monadStateT,
    monadRecStateT: monadRecStateT,
    monadZeroStateT: monadZeroStateT,
    monadPlusStateT: monadPlusStateT,
    monadTransStateT: monadTransStateT,
    lazyStateT: lazyStateT,
    monadEffectState: monadEffectState,
    monadContStateT: monadContStateT,
    monadThrowStateT: monadThrowStateT,
    monadErrorStateT: monadErrorStateT,
    monadAskStateT: monadAskStateT,
    monadReaderStateT: monadReaderStateT,
    monadStateStateT: monadStateStateT,
    monadTellStateT: monadTellStateT,
    monadWriterStateT: monadWriterStateT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Lazy/index.js":41,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279}],60:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withState = Control_Monad_State_Trans.withStateT;
var runState = function (v) {
    return function ($16) {
        return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($16));
    };
};
var mapState = function (f) {
    return Control_Monad_State_Trans.mapStateT(function ($17) {
        return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($17)));
    });
};
var execState = function (v) {
    return function (s) {
        var v1 = v(s);
        return v1.value1;
    };
};
var evalState = function (v) {
    return function (s) {
        var v1 = v(s);
        return v1.value0;
    };
};
module.exports = {
    runState: runState,
    evalState: evalState,
    execState: execState,
    mapState: mapState,
    withState: withState
};

},{"../Control.Monad.State.Trans/index.js":59,"../Data.Identity/index.js":166,"../Data.Newtype/index.js":207}],61:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var MonadTrans = function (lift) {
    this.lift = lift;
};
var lift = function (dict) {
    return dict.lift;
};
module.exports = {
    lift: lift,
    MonadTrans: MonadTrans
};

},{}],62:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var MonadTell = function (Monad0, tell) {
    this.Monad0 = Monad0;
    this.tell = tell;
};
var MonadWriter = function (MonadTell0, listen, pass) {
    this.MonadTell0 = MonadTell0;
    this.listen = listen;
    this.pass = pass;
};
var tell = function (dict) {
    return dict.tell;
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};
var listens = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};
var censor = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v, f));
            }));
        };
    };
};
module.exports = {
    listen: listen,
    pass: pass,
    tell: tell,
    MonadTell: MonadTell,
    MonadWriter: MonadWriter,
    listens: listens,
    censor: censor
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Tuple/index.js":260}],63:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var WriterT = function (x) {
    return x;
};
var runWriterT = function (v) {
    return v;
};
var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
    return n;
}, WriterT);
var monadTransWriterT = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
            });
        };
    });
};
var mapWriterT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWriterT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
            return new Data_Tuple.Tuple(f(v.value0), v.value1);
        }));
    });
};
var execWriterT = function (dictFunctor) {
    return function (v) {
        return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
    };
};
var applyWriterT = function (dictSemigroup) {
    return function (dictApply) {
        return new Control_Apply.Apply(function () {
            return functorWriterT(dictApply.Functor0());
        }, function (v) {
            return function (v1) {
                var k = function (v3) {
                    return function (v4) {
                        return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                    };
                };
                return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
            };
        });
    };
};
var bindWriterT = function (dictSemigroup) {
    return function (dictBind) {
        return new Control_Bind.Bind(function () {
            return applyWriterT(dictSemigroup)(dictBind.Apply0());
        }, function (v) {
            return function (k) {
                return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                    var v2 = k(v1.value0);
                    return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                        return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                    })(v2);
                }));
            };
        });
    };
};
var applicativeWriterT = function (dictMonoid) {
    return function (dictApplicative) {
        return new Control_Applicative.Applicative(function () {
            return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
        }, function (a) {
            return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
        });
    };
};
var monadWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
        }, function () {
            return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
        });
    };
};
var monadAskWriterT = function (dictMonoid) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadReaderWriterT = function (dictMonoid) {
    return function (dictMonadReader) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
        }, function (f) {
            return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
        });
    };
};
var monadContWriterT = function (dictMonoid) {
    return function (dictMonadCont) {
        return new Control_Monad_Cont_Class.MonadCont(function () {
            return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
        }, function (f) {
            return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                });
                return v;
            }));
        });
    };
};
var monadEffectWriter = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
        }, function ($123) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0())(Effect_Class.liftEffect(dictMonadEffect)($123));
        });
    };
};
var monadRecWriterT = function (dictMonoid) {
    return function (dictMonadRec) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
        }, function (f) {
            return function (a) {
                var f$prime = function (v) {
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                        var v1 = f(v.value0);
                        return v1;
                    })())(function (v1) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                            if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                            };
                            if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                                return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 83, column 16 - line 85, column 47): " + [ v1.value0.constructor.name ]);
                        })());
                    });
                };
                return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
            };
        });
    };
};
var monadStateWriterT = function (dictMonoid) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadWriterT(dictMonoid)(dictMonadState.Monad0());
        }, function (f) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
        });
    };
};
var monadTellWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadWriterT(dictMonoid)(dictMonad);
        }, function ($124) {
            return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
        });
    };
};
var monadWriterWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellWriterT(dictMonoid)(dictMonad);
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
            });
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
            });
        });
    };
};
var monadThrowWriterT = function (dictMonoid) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorWriterT = function (dictMonoid) {
    return function (dictMonadError) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
        }, function (v) {
            return function (h) {
                return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                    var v1 = h(e);
                    return v1;
                }));
            };
        });
    };
};
var altWriterT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorWriterT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var plusWriterT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altWriterT(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var alternativeWriterT = function (dictMonoid) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
        }, function () {
            return plusWriterT(dictAlternative.Plus1());
        });
    };
};
var monadZeroWriterT = function (dictMonoid) {
    return function (dictMonadZero) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
        }, function () {
            return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
        });
    };
};
var monadPlusWriterT = function (dictMonoid) {
    return function (dictMonadPlus) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
        });
    };
};
module.exports = {
    WriterT: WriterT,
    runWriterT: runWriterT,
    execWriterT: execWriterT,
    mapWriterT: mapWriterT,
    newtypeWriterT: newtypeWriterT,
    functorWriterT: functorWriterT,
    applyWriterT: applyWriterT,
    applicativeWriterT: applicativeWriterT,
    altWriterT: altWriterT,
    plusWriterT: plusWriterT,
    alternativeWriterT: alternativeWriterT,
    bindWriterT: bindWriterT,
    monadWriterT: monadWriterT,
    monadRecWriterT: monadRecWriterT,
    monadZeroWriterT: monadZeroWriterT,
    monadPlusWriterT: monadPlusWriterT,
    monadTransWriterT: monadTransWriterT,
    monadEffectWriter: monadEffectWriter,
    monadContWriterT: monadContWriterT,
    monadThrowWriterT: monadThrowWriterT,
    monadErrorWriterT: monadErrorWriterT,
    monadAskWriterT: monadAskWriterT,
    monadReaderWriterT: monadReaderWriterT,
    monadStateWriterT: monadStateWriterT,
    monadTellWriterT: monadTellWriterT,
    monadWriterWriterT: monadWriterWriterT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Cont.Class/index.js":42,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279}],64:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var writer = function ($0) {
    return Control_Monad_Writer_Trans.WriterT(Control_Applicative.pure(Data_Identity.applicativeIdentity)($0));
};
var runWriter = function ($1) {
    return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Writer_Trans.runWriterT($1));
};
var mapWriter = function (f) {
    return Control_Monad_Writer_Trans.mapWriterT(function ($2) {
        return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($2)));
    });
};
var execWriter = function (m) {
    return Data_Tuple.snd(runWriter(m));
};
module.exports = {
    writer: writer,
    runWriter: runWriter,
    execWriter: execWriter,
    mapWriter: mapWriter
};

},{"../Control.Applicative/index.js":29,"../Control.Monad.Writer.Trans/index.js":63,"../Data.Identity/index.js":166,"../Data.Newtype/index.js":207,"../Data.Tuple/index.js":260}],65:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
            });
        };
    };
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad,
    liftM1: liftM1,
    ap: ap,
    whenM: whenM,
    unlessM: unlessM,
    monadFn: monadFn,
    monadArray: monadArray
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35}],66:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var MonadPlus = function (MonadZero0) {
    this.MonadZero0 = MonadZero0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_MonadZero.monadZeroArray;
});
module.exports = {
    MonadPlus: MonadPlus,
    monadPlusArray: monadPlusArray
};

},{"../Control.MonadZero/index.js":67}],67:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadZero = function (Alternative1, Monad0) {
    this.Alternative1 = Alternative1;
    this.Monad0 = Monad0;
};
var monadZeroArray = new MonadZero(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Control_Monad.monadArray;
});
var guard = function (dictMonadZero) {
    return function (v) {
        if (v) {
            return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
        };
        throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadZero: MonadZero,
    guard: guard,
    monadZeroArray: monadZeroArray
};

},{"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Monad/index.js":65,"../Control.Plus/index.js":70,"../Data.Unit/index.js":266}],68:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var ParCont = function (x) {
    return x;
};
var Parallel = function (Applicative1, Monad0, parallel, sequential) {
    this.Applicative1 = Applicative1;
    this.Monad0 = Monad0;
    this.parallel = parallel;
    this.sequential = sequential;
};
var sequential = function (dict) {
    return dict.sequential;
};
var parallel = function (dict) {
    return dict.parallel;
};
var newtypeParCont = new Data_Newtype.Newtype(function (n) {
    return n;
}, ParCont);
var monadParWriterT = function (dictMonoid) {
    return function (dictParallel) {
        return new Parallel(function () {
            return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
        }, function () {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
        }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
    };
};
var monadParReaderT = function (dictParallel) {
    return new Parallel(function () {
        return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
    }, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
    }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
};
var monadParMaybeT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
    }, function () {
        return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParExceptT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
    }, function () {
        return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParParCont = function (dictMonadEffect) {
    return new Parallel(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
    }, ParCont, function (v) {
        return v;
    });
};
var functorParCont = function (dictMonadEffect) {
    return new Data_Functor.Functor(function (f) {
        return function ($54) {
            return parallel(monadParParCont(dictMonadEffect))(Data_Functor.map(Control_Monad_Cont_Trans.functorContT((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(f)(sequential(monadParParCont(dictMonadEffect))($54)));
        };
    });
};
var applyParCont = function (dictMonadEffect) {
    return new Control_Apply.Apply(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v2) {
                    return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v3)))(function (v4) {
                                if (v4 instanceof Data_Maybe.Nothing) {
                                    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(v2));
                                };
                                if (v4 instanceof Data_Maybe.Just) {
                                    return k(a(v4.value0));
                                };
                                throw new Error("Failed pattern match at Control.Parallel.Class (line 71, column 7 - line 73, column 26): " + [ v4.constructor.name ]);
                            });
                        }))(function () {
                            return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v4) {
                                    if (v4 instanceof Data_Maybe.Nothing) {
                                        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(v3));
                                    };
                                    if (v4 instanceof Data_Maybe.Just) {
                                        return k(v4.value0(b));
                                    };
                                    throw new Error("Failed pattern match at Control.Parallel.Class (line 77, column 7 - line 79, column 26): " + [ v4.constructor.name ]);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var applicativeParCont = function (dictMonadEffect) {
    return new Control_Applicative.Applicative(function () {
        return applyParCont(dictMonadEffect);
    }, function ($55) {
        return parallel(monadParParCont(dictMonadEffect))(Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT((dictMonadEffect.Monad0()).Applicative0()))($55));
    });
};
var altParCont = function (dictMonadEffect) {
    return new Control_Alt.Alt(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (v2) {
                    return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                        return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                            if (v3) {
                                return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                return k(a);
                            });
                        });
                    }))(function () {
                        return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                                if (v3) {
                                    return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                };
                                return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                    return k(a);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var plusParCont = function (dictMonadEffect) {
    return new Control_Plus.Plus(function () {
        return altParCont(dictMonadEffect);
    }, ParCont(function (v) {
        return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
    }));
};
var alternativeParCont = function (dictMonadEffect) {
    return new Control_Alternative.Alternative(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return plusParCont(dictMonadEffect);
    });
};
module.exports = {
    parallel: parallel,
    sequential: sequential,
    Parallel: Parallel,
    ParCont: ParCont,
    monadParExceptT: monadParExceptT,
    monadParReaderT: monadParReaderT,
    monadParWriterT: monadParWriterT,
    monadParMaybeT: monadParMaybeT,
    newtypeParCont: newtypeParCont,
    functorParCont: functorParCont,
    applyParCont: applyParCont,
    applicativeParCont: applicativeParCont,
    altParCont: altParCont,
    plusParCont: plusParCont,
    alternativeParCont: alternativeParCont,
    monadParParCont: monadParParCont
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Cont.Trans/index.js":43,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Maybe.Trans/index.js":51,"../Control.Monad.Reader.Trans/index.js":54,"../Control.Monad.Writer.Trans/index.js":63,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Functor.Compose/index.js":151,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279,"../Effect.Ref/index.js":288}],69:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var parTraverse_ = function (dictParallel) {
    return function (dictFoldable) {
        return function (f) {
            return function ($17) {
                return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                    return Control_Parallel_Class.parallel(dictParallel)(f($18));
                })($17));
            };
        };
    };
};
var parTraverse = function (dictParallel) {
    return function (dictTraversable) {
        return function (f) {
            return function ($19) {
                return Control_Parallel_Class.sequential(dictParallel)(Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function ($20) {
                    return Control_Parallel_Class.parallel(dictParallel)(f($20));
                })($19));
            };
        };
    };
};
var parSequence_ = function (dictParallel) {
    return function (dictFoldable) {
        return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parSequence = function (dictParallel) {
    return function (dictTraversable) {
        return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parOneOfMap = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                return function (f) {
                    return function ($21) {
                        return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(function ($22) {
                            return Control_Parallel_Class.parallel(dictParallel)(f($22));
                        })($21));
                    };
                };
            };
        };
    };
};
var parOneOf = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                return function ($23) {
                    return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel))($23));
                };
            };
        };
    };
};
var parApply = function (dictParallel) {
    return function (mf) {
        return function (ma) {
            return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
        };
    };
};
module.exports = {
    parApply: parApply,
    parTraverse: parTraverse,
    parTraverse_: parTraverse_,
    parSequence: parSequence,
    parSequence_: parSequence_,
    parOneOf: parOneOf,
    parOneOfMap: parOneOfMap
};

},{"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Control.Parallel.Class/index.js":68,"../Data.Foldable/index.js":138,"../Data.Traversable/index.js":257}],70:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Plus = function (Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus,
    empty: empty,
    plusArray: plusArray
};

},{"../Control.Alt/index.js":26}],71:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
module.exports = {
    compose: compose,
    Semigroupoid: Semigroupoid,
    composeFlipped: composeFlipped,
    semigroupoidFn: semigroupoidFn
};

},{}],72:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var ButtonButton = (function () {
    function ButtonButton() {

    };
    ButtonButton.value = new ButtonButton();
    return ButtonButton;
})();
var ButtonSubmit = (function () {
    function ButtonSubmit() {

    };
    ButtonSubmit.value = new ButtonSubmit();
    return ButtonSubmit;
})();
var ButtonReset = (function () {
    function ButtonReset() {

    };
    ButtonReset.value = new ButtonReset();
    return ButtonReset;
})();
var renderButtonType = function (v) {
    if (v instanceof ButtonButton) {
        return "button";
    };
    if (v instanceof ButtonSubmit) {
        return "submit";
    };
    if (v instanceof ButtonReset) {
        return "reset";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType (line 9, column 20 - line 12, column 18): " + [ v.constructor.name ]);
};
module.exports = {
    ButtonButton: ButtonButton,
    ButtonSubmit: ButtonSubmit,
    ButtonReset: ButtonReset,
    renderButtonType: renderButtonType
};

},{}],73:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Anonymous = (function () {
    function Anonymous() {

    };
    Anonymous.value = new Anonymous();
    return Anonymous;
})();
var UseCredentials = (function () {
    function UseCredentials() {

    };
    UseCredentials.value = new UseCredentials();
    return UseCredentials;
})();
var renderCrossOriginValue = function (v) {
    if (v instanceof Anonymous) {
        return "anonymous";
    };
    if (v instanceof UseCredentials) {
        return "use-credentials";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.CrossOriginValue (line 8, column 26 - line 10, column 21): " + [ v.constructor.name ]);
};
module.exports = {
    Anonymous: Anonymous,
    UseCredentials: UseCredentials,
    renderCrossOriginValue: renderCrossOriginValue
};

},{}],74:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var DirLTR = (function () {
    function DirLTR() {

    };
    DirLTR.value = new DirLTR();
    return DirLTR;
})();
var DirRTL = (function () {
    function DirRTL() {

    };
    DirRTL.value = new DirRTL();
    return DirRTL;
})();
var DirAuto = (function () {
    function DirAuto() {

    };
    DirAuto.value = new DirAuto();
    return DirAuto;
})();
var renderDirValue = function (v) {
    if (v instanceof DirLTR) {
        return "ltr";
    };
    if (v instanceof DirRTL) {
        return "rtl";
    };
    if (v instanceof DirAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.DirValue (line 9, column 18 - line 12, column 14): " + [ v.constructor.name ]);
};
module.exports = {
    DirLTR: DirLTR,
    DirRTL: DirRTL,
    DirAuto: DirAuto,
    renderDirValue: renderDirValue
};

},{}],75:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var renderFormMethod = function (v) {
    if (v instanceof POST) {
        return "post";
    };
    if (v instanceof GET) {
        return "get";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.FormMethod (line 8, column 20 - line 10, column 10): " + [ v.constructor.name ]);
};
module.exports = {
    POST: POST,
    GET: GET,
    renderFormMethod: renderFormMethod
};

},{}],76:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var AcceptMediaType = (function () {
    function AcceptMediaType(value0) {
        this.value0 = value0;
    };
    AcceptMediaType.create = function (value0) {
        return new AcceptMediaType(value0);
    };
    return AcceptMediaType;
})();
var AcceptFileExtension = (function () {
    function AcceptFileExtension(value0) {
        this.value0 = value0;
    };
    AcceptFileExtension.create = function (value0) {
        return new AcceptFileExtension(value0);
    };
    return AcceptFileExtension;
})();
var InputAcceptType = function (x) {
    return x;
};
var semigroupInputAcceptType = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v1);
    };
});
var renderInputAcceptTypeAtom = function (v) {
    if (v instanceof AcceptMediaType) {
        return v.value0;
    };
    if (v instanceof AcceptFileExtension) {
        return v.value0;
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputAcceptType (line 28, column 29 - line 30, column 30): " + [ v.constructor.name ]);
};
var renderInputAcceptType = function (v) {
    return Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(renderInputAcceptTypeAtom)(v));
};
var mediaType = function (mt) {
    return [ new AcceptMediaType(mt) ];
};
var extension = function (ext) {
    return [ new AcceptFileExtension(ext) ];
};
module.exports = {
    InputAcceptType: InputAcceptType,
    mediaType: mediaType,
    extension: extension,
    AcceptMediaType: AcceptMediaType,
    AcceptFileExtension: AcceptFileExtension,
    renderInputAcceptType: renderInputAcceptType,
    renderInputAcceptTypeAtom: renderInputAcceptTypeAtom,
    semigroupInputAcceptType: semigroupInputAcceptType
};

},{"../Data.Functor/index.js":156,"../Data.Semigroup/index.js":230,"../Data.String.Common/index.js":241}],77:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var InputButton = (function () {
    function InputButton() {

    };
    InputButton.value = new InputButton();
    return InputButton;
})();
var InputCheckbox = (function () {
    function InputCheckbox() {

    };
    InputCheckbox.value = new InputCheckbox();
    return InputCheckbox;
})();
var InputColor = (function () {
    function InputColor() {

    };
    InputColor.value = new InputColor();
    return InputColor;
})();
var InputDate = (function () {
    function InputDate() {

    };
    InputDate.value = new InputDate();
    return InputDate;
})();
var InputDatetimeLocal = (function () {
    function InputDatetimeLocal() {

    };
    InputDatetimeLocal.value = new InputDatetimeLocal();
    return InputDatetimeLocal;
})();
var InputEmail = (function () {
    function InputEmail() {

    };
    InputEmail.value = new InputEmail();
    return InputEmail;
})();
var InputFile = (function () {
    function InputFile() {

    };
    InputFile.value = new InputFile();
    return InputFile;
})();
var InputHidden = (function () {
    function InputHidden() {

    };
    InputHidden.value = new InputHidden();
    return InputHidden;
})();
var InputImage = (function () {
    function InputImage() {

    };
    InputImage.value = new InputImage();
    return InputImage;
})();
var InputMonth = (function () {
    function InputMonth() {

    };
    InputMonth.value = new InputMonth();
    return InputMonth;
})();
var InputNumber = (function () {
    function InputNumber() {

    };
    InputNumber.value = new InputNumber();
    return InputNumber;
})();
var InputPassword = (function () {
    function InputPassword() {

    };
    InputPassword.value = new InputPassword();
    return InputPassword;
})();
var InputRadio = (function () {
    function InputRadio() {

    };
    InputRadio.value = new InputRadio();
    return InputRadio;
})();
var InputRange = (function () {
    function InputRange() {

    };
    InputRange.value = new InputRange();
    return InputRange;
})();
var InputReset = (function () {
    function InputReset() {

    };
    InputReset.value = new InputReset();
    return InputReset;
})();
var InputSearch = (function () {
    function InputSearch() {

    };
    InputSearch.value = new InputSearch();
    return InputSearch;
})();
var InputSubmit = (function () {
    function InputSubmit() {

    };
    InputSubmit.value = new InputSubmit();
    return InputSubmit;
})();
var InputTel = (function () {
    function InputTel() {

    };
    InputTel.value = new InputTel();
    return InputTel;
})();
var InputText = (function () {
    function InputText() {

    };
    InputText.value = new InputText();
    return InputText;
})();
var InputTime = (function () {
    function InputTime() {

    };
    InputTime.value = new InputTime();
    return InputTime;
})();
var InputUrl = (function () {
    function InputUrl() {

    };
    InputUrl.value = new InputUrl();
    return InputUrl;
})();
var InputWeek = (function () {
    function InputWeek() {

    };
    InputWeek.value = new InputWeek();
    return InputWeek;
})();
var renderInputType = function (v) {
    if (v instanceof InputButton) {
        return "button";
    };
    if (v instanceof InputCheckbox) {
        return "checkbox";
    };
    if (v instanceof InputColor) {
        return "color";
    };
    if (v instanceof InputDate) {
        return "date";
    };
    if (v instanceof InputDatetimeLocal) {
        return "datetime-local";
    };
    if (v instanceof InputEmail) {
        return "email";
    };
    if (v instanceof InputFile) {
        return "file";
    };
    if (v instanceof InputHidden) {
        return "hidden";
    };
    if (v instanceof InputImage) {
        return "image";
    };
    if (v instanceof InputMonth) {
        return "month";
    };
    if (v instanceof InputNumber) {
        return "number";
    };
    if (v instanceof InputPassword) {
        return "password";
    };
    if (v instanceof InputRadio) {
        return "radio";
    };
    if (v instanceof InputRange) {
        return "range";
    };
    if (v instanceof InputReset) {
        return "reset";
    };
    if (v instanceof InputSearch) {
        return "search";
    };
    if (v instanceof InputSubmit) {
        return "submit";
    };
    if (v instanceof InputTel) {
        return "tel";
    };
    if (v instanceof InputText) {
        return "text";
    };
    if (v instanceof InputTime) {
        return "time";
    };
    if (v instanceof InputUrl) {
        return "url";
    };
    if (v instanceof InputWeek) {
        return "week";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 16): " + [ v.constructor.name ]);
};
module.exports = {
    InputButton: InputButton,
    InputCheckbox: InputCheckbox,
    InputColor: InputColor,
    InputDate: InputDate,
    InputDatetimeLocal: InputDatetimeLocal,
    InputEmail: InputEmail,
    InputFile: InputFile,
    InputHidden: InputHidden,
    InputImage: InputImage,
    InputMonth: InputMonth,
    InputNumber: InputNumber,
    InputPassword: InputPassword,
    InputRadio: InputRadio,
    InputRange: InputRange,
    InputReset: InputReset,
    InputSearch: InputSearch,
    InputSubmit: InputSubmit,
    InputTel: InputTel,
    InputText: InputText,
    InputTime: InputTime,
    InputUrl: InputUrl,
    InputWeek: InputWeek,
    renderInputType: renderInputType
};

},{}],78:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var KindSubtitles = (function () {
    function KindSubtitles() {

    };
    KindSubtitles.value = new KindSubtitles();
    return KindSubtitles;
})();
var KindCaptions = (function () {
    function KindCaptions() {

    };
    KindCaptions.value = new KindCaptions();
    return KindCaptions;
})();
var KindDescriptions = (function () {
    function KindDescriptions() {

    };
    KindDescriptions.value = new KindDescriptions();
    return KindDescriptions;
})();
var KindChapters = (function () {
    function KindChapters() {

    };
    KindChapters.value = new KindChapters();
    return KindChapters;
})();
var KindMetadata = (function () {
    function KindMetadata() {

    };
    KindMetadata.value = new KindMetadata();
    return KindMetadata;
})();
var renderKindValue = function (v) {
    if (v instanceof KindSubtitles) {
        return "subtitles";
    };
    if (v instanceof KindCaptions) {
        return "captions";
    };
    if (v instanceof KindDescriptions) {
        return "descriptions";
    };
    if (v instanceof KindChapters) {
        return "chapters";
    };
    if (v instanceof KindMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.KindValue (line 11, column 19 - line 16, column 19): " + [ v.constructor.name ]);
};
module.exports = {
    KindSubtitles: KindSubtitles,
    KindCaptions: KindCaptions,
    KindDescriptions: KindDescriptions,
    KindChapters: KindChapters,
    KindMetadata: KindMetadata,
    renderKindValue: renderKindValue
};

},{}],79:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var MenuList = (function () {
    function MenuList() {

    };
    MenuList.value = new MenuList();
    return MenuList;
})();
var MenuContext = (function () {
    function MenuContext() {

    };
    MenuContext.value = new MenuContext();
    return MenuContext;
})();
var MenuToolbar = (function () {
    function MenuToolbar() {

    };
    MenuToolbar.value = new MenuToolbar();
    return MenuToolbar;
})();
var renderMenuType = function (v) {
    if (v instanceof MenuList) {
        return "list";
    };
    if (v instanceof MenuContext) {
        return "context";
    };
    if (v instanceof MenuToolbar) {
        return "toolbar";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuType (line 9, column 18 - line 12, column 18): " + [ v.constructor.name ]);
};
module.exports = {
    MenuList: MenuList,
    MenuContext: MenuContext,
    MenuToolbar: MenuToolbar,
    renderMenuType: renderMenuType
};

},{}],80:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var MenuitemCommand = (function () {
    function MenuitemCommand() {

    };
    MenuitemCommand.value = new MenuitemCommand();
    return MenuitemCommand;
})();
var MenuitemCheckbox = (function () {
    function MenuitemCheckbox() {

    };
    MenuitemCheckbox.value = new MenuitemCheckbox();
    return MenuitemCheckbox;
})();
var MenuitemRadio = (function () {
    function MenuitemRadio() {

    };
    MenuitemRadio.value = new MenuitemRadio();
    return MenuitemRadio;
})();
var renderMenuitemType = function (v) {
    if (v instanceof MenuitemCommand) {
        return "command";
    };
    if (v instanceof MenuitemCheckbox) {
        return "checkbox";
    };
    if (v instanceof MenuitemRadio) {
        return "radio";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuitemType (line 9, column 22 - line 12, column 20): " + [ v.constructor.name ]);
};
module.exports = {
    MenuitemCommand: MenuitemCommand,
    MenuitemCheckbox: MenuitemCheckbox,
    MenuitemRadio: MenuitemRadio,
    renderMenuitemType: renderMenuitemType
};

},{}],81:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var On = (function () {
    function On() {

    };
    On.value = new On();
    return On;
})();
var Off = (function () {
    function Off() {

    };
    Off.value = new Off();
    return Off;
})();
var renderOnOff = function (v) {
    if (v instanceof On) {
        return "on";
    };
    if (v instanceof Off) {
        return "off";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OnOff (line 8, column 15 - line 10, column 10): " + [ v.constructor.name ]);
};
module.exports = {
    On: On,
    Off: Off,
    renderOnOff: renderOnOff
};

},{}],82:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Uppercase = (function () {
    function Uppercase() {

    };
    Uppercase.value = new Uppercase();
    return Uppercase;
})();
var Lowercase = (function () {
    function Lowercase() {

    };
    Lowercase.value = new Lowercase();
    return Lowercase;
})();
var NumeralDecimal = (function () {
    function NumeralDecimal() {

    };
    NumeralDecimal.value = new NumeralDecimal();
    return NumeralDecimal;
})();
var NumeralRoman = (function () {
    function NumeralRoman(value0) {
        this.value0 = value0;
    };
    NumeralRoman.create = function (value0) {
        return new NumeralRoman(value0);
    };
    return NumeralRoman;
})();
var OrderedListNumeric = (function () {
    function OrderedListNumeric(value0) {
        this.value0 = value0;
    };
    OrderedListNumeric.create = function (value0) {
        return new OrderedListNumeric(value0);
    };
    return OrderedListNumeric;
})();
var OrderedListAlphabetic = (function () {
    function OrderedListAlphabetic(value0) {
        this.value0 = value0;
    };
    OrderedListAlphabetic.create = function (value0) {
        return new OrderedListAlphabetic(value0);
    };
    return OrderedListAlphabetic;
})();
var renderOrderedListType = function (v) {
    if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralDecimal) {
        return "1";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Lowercase)) {
        return "i";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Uppercase)) {
        return "I";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Lowercase) {
        return "a";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Uppercase) {
        return "A";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OrderedListType (line 16, column 25 - line 21, column 38): " + [ v.constructor.name ]);
};
module.exports = {
    Uppercase: Uppercase,
    Lowercase: Lowercase,
    NumeralDecimal: NumeralDecimal,
    NumeralRoman: NumeralRoman,
    OrderedListNumeric: OrderedListNumeric,
    OrderedListAlphabetic: OrderedListAlphabetic,
    renderOrderedListType: renderOrderedListType
};

},{}],83:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var PreloadNone = (function () {
    function PreloadNone() {

    };
    PreloadNone.value = new PreloadNone();
    return PreloadNone;
})();
var PreloadAuto = (function () {
    function PreloadAuto() {

    };
    PreloadAuto.value = new PreloadAuto();
    return PreloadAuto;
})();
var PreloadMetadata = (function () {
    function PreloadMetadata() {

    };
    PreloadMetadata.value = new PreloadMetadata();
    return PreloadMetadata;
})();
var renderPreloadValue = function (v) {
    if (v instanceof PreloadNone) {
        return "none";
    };
    if (v instanceof PreloadAuto) {
        return "auto";
    };
    if (v instanceof PreloadMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.PreloadValue (line 9, column 22 - line 12, column 22): " + [ v.constructor.name ]);
};
module.exports = {
    PreloadNone: PreloadNone,
    PreloadAuto: PreloadAuto,
    PreloadMetadata: PreloadMetadata,
    renderPreloadValue: renderPreloadValue
};

},{}],84:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var ScopeRow = (function () {
    function ScopeRow() {

    };
    ScopeRow.value = new ScopeRow();
    return ScopeRow;
})();
var ScopeCol = (function () {
    function ScopeCol() {

    };
    ScopeCol.value = new ScopeCol();
    return ScopeCol;
})();
var ScopeRowGroup = (function () {
    function ScopeRowGroup() {

    };
    ScopeRowGroup.value = new ScopeRowGroup();
    return ScopeRowGroup;
})();
var ScopeColGroup = (function () {
    function ScopeColGroup() {

    };
    ScopeColGroup.value = new ScopeColGroup();
    return ScopeColGroup;
})();
var ScopeAuto = (function () {
    function ScopeAuto() {

    };
    ScopeAuto.value = new ScopeAuto();
    return ScopeAuto;
})();
var renderScopeValue = function (v) {
    if (v instanceof ScopeRow) {
        return "row";
    };
    if (v instanceof ScopeCol) {
        return "col";
    };
    if (v instanceof ScopeRowGroup) {
        return "rowgroup";
    };
    if (v instanceof ScopeColGroup) {
        return "colgroup";
    };
    if (v instanceof ScopeAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ScopeValue (line 11, column 20 - line 16, column 16): " + [ v.constructor.name ]);
};
module.exports = {
    ScopeRow: ScopeRow,
    ScopeCol: ScopeCol,
    ScopeRowGroup: ScopeRowGroup,
    ScopeColGroup: ScopeColGroup,
    ScopeAuto: ScopeAuto,
    renderScopeValue: renderScopeValue
};

},{}],85:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Any = (function () {
    function Any() {

    };
    Any.value = new Any();
    return Any;
})();
var Step = (function () {
    function Step(value0) {
        this.value0 = value0;
    };
    Step.create = function (value0) {
        return new Step(value0);
    };
    return Step;
})();
var renderStepValue = function (v) {
    if (v instanceof Any) {
        return "any";
    };
    if (v instanceof Step) {
        return Data_Show.show(Data_Show.showNumber)(v.value0);
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.StepValue (line 10, column 19 - line 12, column 18): " + [ v.constructor.name ]);
};
module.exports = {
    Any: Any,
    Step: Step,
    renderStepValue: renderStepValue
};

},{"../Data.Show/index.js":235}],86:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Hard = (function () {
    function Hard() {

    };
    Hard.value = new Hard();
    return Hard;
})();
var Soft = (function () {
    function Soft() {

    };
    Soft.value = new Soft();
    return Soft;
})();
var renderWrapValue = function (v) {
    if (v instanceof Hard) {
        return "hard";
    };
    if (v instanceof Soft) {
        return "soft";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.WrapValue (line 8, column 19 - line 10, column 11): " + [ v.constructor.name ]);
};
module.exports = {
    Hard: Hard,
    Soft: Soft,
    renderWrapValue: renderWrapValue
};

},{}],87:[function(require,module,exports){
"use strict";

function id(x) {
  return x;
}

exports.fromBoolean = id;
exports.fromNumber = id;
exports.fromString = id;
exports.fromArray = id;
exports.fromObject = id;

exports.jsonNull = null;

exports.stringify = function (j) {
  return JSON.stringify(j);
};

function isArray(a) {
  return Object.prototype.toString.call(a) === "[object Array]";
}

exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
  if (j == null) return isNull();
  else if (typeof j === "boolean") return isBool(j);
  else if (typeof j === "number") return isNum(j);
  else if (typeof j === "string") return isStr(j);
  else if (Object.prototype.toString.call(j) === "[object Array]")
    return isArr(j);
  else return isObj(j);
};

exports._compare = function _compare (EQ, GT, LT, a, b) {
  if (a == null) {
    if (b == null) return EQ;
    else return LT;
  } else if (typeof a === "boolean") {
    if (typeof b === "boolean") {
      // boolean / boolean
      if (a === b) return EQ;
      else if (a === false) return LT;
      else return GT;
    } else if (b == null) return GT;
    else return LT;
  } else if (typeof a === "number") {
    if (typeof b === "number") {
      if (a === b) return EQ;
      else if (a < b) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else return LT;
  } else if (typeof a === "string") {
    if (typeof b === "string") {
      if (a === b) return EQ;
      else if (a < b) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else return LT;
  } else if (isArray(a)) {
    if (isArray(b)) {
      for (var i = 0; i < Math.min(a.length, b.length); i++) {
        var ca = _compare(EQ, GT, LT, a[i], b[i]);
        if (ca !== EQ) return ca;
      }
      if (a.length === b.length) return EQ;
      else if (a.length < b.length) return LT;
      else return GT;
    } else if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else if (typeof b === "string") return GT;
    else return LT;
  } else {
    if (b == null) return GT;
    else if (typeof b === "boolean") return GT;
    else if (typeof b === "number") return GT;
    else if (typeof b === "string") return GT;
    else if (isArray(b)) return GT;
    else {
      var akeys = Object.keys(a);
      var bkeys = Object.keys(b);
      if (akeys.length < bkeys.length) return LT;
      else if (akeys.length > bkeys.length) return GT;
      var keys = akeys.concat(bkeys).sort();
      for (var j = 0; j < keys.length; j++) {
        var k = keys[j];
        if (a[k] === undefined) return LT;
        else if (b[k] === undefined) return GT;
        var ck = _compare(EQ, GT, LT, a[k], b[k]);
        if (ck !== EQ) return ck;
      }
      return EQ;
    }
  }
};

},{}],88:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var verbJsonType = function (def) {
    return function (f) {
        return function (g) {
            return g(def)(f);
        };
    };
};
var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var jsonZero = $foreign.fromNumber(0.0);
var jsonTrue = $foreign.fromBoolean(true);
var jsonSingletonObject = function (key) {
    return function (val) {
        return $foreign.fromObject(Foreign_Object.singleton(key)(val));
    };
};
var jsonSingletonArray = function (j) {
    return $foreign.fromArray([ j ]);
};
var jsonFalse = $foreign.fromBoolean(false);
var jsonEmptyString = $foreign.fromString("");
var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
var jsonEmptyArray = $foreign.fromArray([  ]);
var isJsonType = verbJsonType(false)(Data_Function["const"](true));
var ordJson = new Data_Ord.Ord(function () {
    return eqJson;
}, function (a) {
    return function (b) {
        return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
    };
});
var eqJson = new Data_Eq.Eq(function (j1) {
    return function (j2) {
        return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
    };
});
var eqJNull = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var ordJNull = new Data_Ord.Ord(function () {
    return eqJNull;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var caseJsonString = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isString = isJsonType(caseJsonString);
var toString = toJsonType(caseJsonString);
var caseJsonObject = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
        };
    };
};
var isObject = isJsonType(caseJsonObject);
var toObject = toJsonType(caseJsonObject);
var caseJsonNumber = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isNumber = isJsonType(caseJsonNumber);
var toNumber = toJsonType(caseJsonNumber);
var caseJsonNull = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isNull = isJsonType(caseJsonNull);
var toNull = toJsonType(caseJsonNull);
var caseJsonBoolean = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
    };
};
var isBoolean = isJsonType(caseJsonBoolean);
var toBoolean = toJsonType(caseJsonBoolean);
var caseJsonArray = function (d) {
    return function (f) {
        return function (j) {
            return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
        };
    };
};
var isArray = isJsonType(caseJsonArray);
var toArray = toJsonType(caseJsonArray);
var caseJson = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (json) {
                            return $foreign["_caseJson"](a, b, c, d, e, f, json);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    caseJson: caseJson,
    caseJsonNull: caseJsonNull,
    caseJsonBoolean: caseJsonBoolean,
    caseJsonNumber: caseJsonNumber,
    caseJsonString: caseJsonString,
    caseJsonArray: caseJsonArray,
    caseJsonObject: caseJsonObject,
    isNull: isNull,
    isBoolean: isBoolean,
    isNumber: isNumber,
    isString: isString,
    isArray: isArray,
    isObject: isObject,
    toNull: toNull,
    toBoolean: toBoolean,
    toNumber: toNumber,
    toString: toString,
    toArray: toArray,
    toObject: toObject,
    jsonTrue: jsonTrue,
    jsonFalse: jsonFalse,
    jsonZero: jsonZero,
    jsonEmptyString: jsonEmptyString,
    jsonEmptyArray: jsonEmptyArray,
    jsonSingletonArray: jsonSingletonArray,
    jsonEmptyObject: jsonEmptyObject,
    jsonSingletonObject: jsonSingletonObject,
    eqJson: eqJson,
    ordJson: ordJson,
    fromBoolean: $foreign.fromBoolean,
    fromNumber: $foreign.fromNumber,
    fromString: $foreign.fromString,
    fromArray: $foreign.fromArray,
    fromObject: $foreign.fromObject,
    jsonNull: $foreign.jsonNull,
    stringify: $foreign.stringify
};

},{"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Foreign.Object/index.js":311,"./foreign.js":87}],89:[function(require,module,exports){
"use strict";

exports._jsonParser = function (fail, succ, s) {
  try {
    return succ(JSON.parse(s));
  }
  catch (e) {
    return fail(e.message);
  }
};

},{}],90:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var jsonParser = function (j) {
    return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
};
module.exports = {
    jsonParser: jsonParser
};

},{"../Data.Either/index.js":129,"./foreign.js":89}],91:[function(require,module,exports){
"use strict";

exports.fold1Impl = function (f) {
  return function (xs) {
    var acc = xs[0];
    var len = xs.length;
    for (var i = 1; i < len; i++) {
      acc = f(acc)(xs[i]);
    }
    return acc;
  };
};

exports.traverse1Impl = function () {
  function Cont(fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function finalCell(head) {
    return new ConsCell(head, emptyList);
  }

  function consList(x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (f) {
        var buildFrom = function (x, ys) {
          return apply(map(consList)(f(x)))(ys);
        };

        var go = function (acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last = xs[currentLen - 1];
            return new Cont(function () {
              var built = go(buildFrom(last, acc), currentLen - 1, xs);
              return built;
            });
          }
        };

        return function (array) {
          var acc = map(finalCell)(f(array[array.length - 1]));
          var result = go(acc, array.length - 1, array);
          while (result instanceof Cont) {
            result = result.fn();
          }

          return map(listToArray)(result);
        };
      };
    };
  };
}();

},{}],92:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmptyArray = function (x) {
    return x;
};
var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableNonEmptyArray = Data_Traversable.traversableArray;
var showNonEmptyArray = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
    });
};
var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
var ordNonEmptyArray = function (dictOrd) {
    return Data_Ord.ordArray(dictOrd);
};
var ord1NonEmptyArray = Data_Ord.ord1Array;
var monadNonEmptyArray = Control_Monad.monadArray;
var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
var functorNonEmptyArray = Data_Functor.functorArray;
var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableNonEmptyArray = Data_Foldable.foldableArray;
var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableNonEmptyArray;
}, function (dictSemigroup) {
    return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
});
var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyArray;
}, function () {
    return traversableNonEmptyArray;
}, function (dictApply) {
    return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
}, function (dictApply) {
    return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
});
var eqNonEmptyArray = function (dictEq) {
    return Data_Eq.eqArray(dictEq);
};
var eq1NonEmptyArray = Data_Eq.eq1Array;
var bindNonEmptyArray = Control_Bind.bindArray;
var applyNonEmptyArray = Control_Apply.applyArray;
var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
var altNonEmptyArray = Control_Alt.altArray;
module.exports = {
    showNonEmptyArray: showNonEmptyArray,
    eqNonEmptyArray: eqNonEmptyArray,
    eq1NonEmptyArray: eq1NonEmptyArray,
    ordNonEmptyArray: ordNonEmptyArray,
    ord1NonEmptyArray: ord1NonEmptyArray,
    semigroupNonEmptyArray: semigroupNonEmptyArray,
    functorNonEmptyArray: functorNonEmptyArray,
    functorWithIndexNonEmptyArray: functorWithIndexNonEmptyArray,
    foldableNonEmptyArray: foldableNonEmptyArray,
    foldableWithIndexNonEmptyArray: foldableWithIndexNonEmptyArray,
    foldable1NonEmptyArray: foldable1NonEmptyArray,
    unfoldable1NonEmptyArray: unfoldable1NonEmptyArray,
    traversableNonEmptyArray: traversableNonEmptyArray,
    traversableWithIndexNonEmptyArray: traversableWithIndexNonEmptyArray,
    traversable1NonEmptyArray: traversable1NonEmptyArray,
    applyNonEmptyArray: applyNonEmptyArray,
    applicativeNonEmptyArray: applicativeNonEmptyArray,
    bindNonEmptyArray: bindNonEmptyArray,
    monadNonEmptyArray: monadNonEmptyArray,
    altNonEmptyArray: altNonEmptyArray
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Ord/index.js":214,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup.Traversable/index.js":228,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Unfoldable1/index.js":264,"./foreign.js":91}],93:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
var toArray = Unsafe_Coerce.unsafeCoerce;
var unionBy$prime = function (eq) {
    return function (xs) {
        return function ($39) {
            return unsafeFromArray(Data_Array.unionBy(eq)(toArray(xs))($39));
        };
    };
};
var union$prime = function (dictEq) {
    return unionBy$prime(Data_Eq.eq(dictEq));
};
var unionBy = function (eq) {
    return function (xs) {
        return function ($40) {
            return unionBy$prime(eq)(xs)(toArray($40));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var unzip = function ($41) {
    return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray)(Data_Array.unzip(toArray($41)));
};
var updateAt = function (i) {
    return function (x) {
        return function ($42) {
            return unsafeFromArrayF(Data_Array.updateAt(i)(x)(toArray($42)));
        };
    };
};
var zip = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
            };
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function ($43) {
            return unsafeFromArrayF(Data_Array.some(dictAlternative)(dictLazy)($43));
        };
    };
};
var snoc$prime = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(xs)(x));
    };
};
var snoc = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
    };
};
var singleton = function ($44) {
    return unsafeFromArray(Data_Array.singleton($44));
};
var replicate = function (i) {
    return function (x) {
        return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
    };
};
var range = function (x) {
    return function (y) {
        return unsafeFromArray(Data_Array.range(x)(y));
    };
};
var modifyAt = function (i) {
    return function (f) {
        return function ($45) {
            return unsafeFromArrayF(Data_Array.modifyAt(i)(f)(toArray($45)));
        };
    };
};
var intersectBy$prime = function (eq) {
    return function (xs) {
        return Data_Array.intersectBy(eq)(toArray(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function ($46) {
            return intersectBy$prime(eq)(xs)(toArray($46));
        };
    };
};
var intersect$prime = function (dictEq) {
    return intersectBy$prime(Data_Eq.eq(dictEq));
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var insertAt = function (i) {
    return function (x) {
        return function ($47) {
            return unsafeFromArrayF(Data_Array.insertAt(i)(x)(toArray($47)));
        };
    };
};
var fromFoldable1 = function (dictFoldable1) {
    return function ($48) {
        return unsafeFromArray(Data_Array.fromFoldable(dictFoldable1.Foldable0())($48));
    };
};
var fromArray = function (xs) {
    if (Data_Array.length(xs) > 0) {
        return new Data_Maybe.Just(unsafeFromArray(xs));
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    return function ($49) {
        return fromArray(Data_Array.fromFoldable(dictFoldable)($49));
    };
};
var difference$prime = function (dictEq) {
    return function (xs) {
        return Data_Array.difference(dictEq)(toArray(xs));
    };
};
var cons$prime = function (x) {
    return function (xs) {
        return unsafeFromArray(Data_Array.cons(x)(xs));
    };
};
var fromNonEmpty = function (v) {
    return cons$prime(v.value0)(v.value1);
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
var concat = function ($50) {
    return unsafeFromArray(Data_Array.concat(toArray(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray)($50))));
};
var appendArray = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
    };
};
var alterAt = function (i) {
    return function (f) {
        return function ($51) {
            return Data_Array.alterAt(i)(f)(toArray($51));
        };
    };
};
var adaptMaybe = function (f) {
    return function ($52) {
        return Data_Maybe.fromJust()(f(toArray($52)));
    };
};
var head = adaptMaybe(Data_Array.head);
var init = adaptMaybe(Data_Array.init);
var last = adaptMaybe(Data_Array.last);
var tail = adaptMaybe(Data_Array.tail);
var uncons = adaptMaybe(Data_Array.uncons);
var toNonEmpty = function ($53) {
    return (function (v) {
        return new Data_NonEmpty.NonEmpty(v.head, v.tail);
    })(uncons($53));
};
var unsnoc = adaptMaybe(Data_Array.unsnoc);
var adaptAny = function (f) {
    return function ($54) {
        return f(toArray($54));
    };
};
var catMaybes = adaptAny(Data_Array.catMaybes);
var $$delete = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array["delete"](dictEq)(x));
    };
};
var deleteAt = function (i) {
    return adaptAny(Data_Array.deleteAt(i));
};
var deleteBy = function (f) {
    return function (x) {
        return adaptAny(Data_Array.deleteBy(f)(x));
    };
};
var difference = function (dictEq) {
    return function (xs) {
        return adaptAny(difference$prime(dictEq)(xs));
    };
};
var drop = function (i) {
    return adaptAny(Data_Array.drop(i));
};
var dropEnd = function (i) {
    return adaptAny(Data_Array.dropEnd(i));
};
var dropWhile = function (f) {
    return adaptAny(Data_Array.dropWhile(f));
};
var elemIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemIndex(dictEq)(x));
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
    };
};
var filter = function (f) {
    return adaptAny(Data_Array.filter(f));
};
var filterA = function (dictApplicative) {
    return function (f) {
        return adaptAny(Data_Array.filterA(dictApplicative)(f));
    };
};
var findIndex = function (x) {
    return adaptAny(Data_Array.findIndex(x));
};
var findLastIndex = function (x) {
    return adaptAny(Data_Array.findLastIndex(x));
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
        };
    };
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
        };
    };
};
var index = adaptAny(Data_Array.index);
var length = adaptAny(Data_Array.length);
var mapMaybe = function (f) {
    return adaptAny(Data_Array.mapMaybe(f));
};
var partition = function (f) {
    return adaptAny(Data_Array.partition(f));
};
var slice = function (start) {
    return function (end) {
        return adaptAny(Data_Array.slice(start)(end));
    };
};
var span = function (f) {
    return adaptAny(Data_Array.span(f));
};
var take = function (i) {
    return adaptAny(Data_Array.take(i));
};
var takeEnd = function (i) {
    return adaptAny(Data_Array.takeEnd(i));
};
var takeWhile = function (f) {
    return adaptAny(Data_Array.takeWhile(f));
};
var toUnfoldable = function (dictUnfoldable) {
    return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
};
var unsafeAdapt = function (f) {
    return function ($55) {
        return unsafeFromArray(adaptAny(f)($55));
    };
};
var cons = function (x) {
    return unsafeAdapt(Data_Array.cons(x));
};
var insert = function (dictOrd) {
    return function (x) {
        return unsafeAdapt(Data_Array.insert(dictOrd)(x));
    };
};
var insertBy = function (f) {
    return function (x) {
        return unsafeAdapt(Data_Array.insertBy(f)(x));
    };
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
        };
    };
};
var nub = function (dictOrd) {
    return unsafeAdapt(Data_Array.nub(dictOrd));
};
var nubBy = function (f) {
    return unsafeAdapt(Data_Array.nubBy(f));
};
var nubByEq = function (f) {
    return unsafeAdapt(Data_Array.nubByEq(f));
};
var nubEq = function (dictEq) {
    return unsafeAdapt(Data_Array.nubEq(dictEq));
};
var reverse = unsafeAdapt(Data_Array.reverse);
var sort = function (dictOrd) {
    return unsafeAdapt(Data_Array.sort(dictOrd));
};
var sortBy = function (f) {
    return unsafeAdapt(Data_Array.sortBy(f));
};
var sortWith = function (dictOrd) {
    return function (f) {
        return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
    };
};
var updateAtIndices = function (dictFoldable) {
    return function (pairs) {
        return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
    };
};
var unsafeIndex = function (dictPartial) {
    return adaptAny(Data_Array.unsafeIndex(dictPartial));
};
var toUnfoldable1 = function (dictUnfoldable1) {
    return function (xs) {
        var len = length(xs);
        var f = function (i) {
            return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))((function () {
                var $38 = i < (len - 1 | 0);
                if ($38) {
                    return new Data_Maybe.Just(i + 1 | 0);
                };
                return Data_Maybe.Nothing.value;
            })());
        };
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
    };
};
module.exports = {
    fromArray: fromArray,
    fromNonEmpty: fromNonEmpty,
    toArray: toArray,
    toNonEmpty: toNonEmpty,
    fromFoldable: fromFoldable,
    fromFoldable1: fromFoldable1,
    toUnfoldable: toUnfoldable,
    toUnfoldable1: toUnfoldable1,
    singleton: singleton,
    range: range,
    replicate: replicate,
    some: some,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    appendArray: appendArray,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    partition: partition,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    nub: nub,
    nubBy: nubBy,
    nubEq: nubEq,
    nubByEq: nubByEq,
    union: union,
    "union'": union$prime,
    unionBy: unionBy,
    "unionBy'": unionBy$prime,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    "difference'": difference$prime,
    intersect: intersect,
    "intersect'": intersect$prime,
    intersectBy: intersectBy,
    "intersectBy'": intersectBy$prime,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex
};

},{"../Control.Bind/index.js":35,"../Data.Array.NonEmpty.Internal/index.js":92,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unfoldable1/index.js":264,"../Unsafe.Coerce/index.js":405}],94:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Iterator = (function () {
    function Iterator(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Iterator.create = function (value0) {
        return function (value1) {
            return new Iterator(value0, value1);
        };
    };
    return Iterator;
})();
var peek = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST_Internal.read(v.value1)();
        return v.value0(v1);
    };
};
var next = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST_Internal.read(v.value1)();
        var v2 = Control_Monad_ST_Internal.modify(function (v2) {
            return v2 + 1 | 0;
        })(v.value1)();
        return v.value0(v1);
    };
};
var pushWhile = function (p) {
    return function (iter) {
        return function (array) {
            return function __do() {
                var v = Control_Monad_ST_Internal["new"](false)();
                while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                    (function __do() {
                        var v1 = peek(iter)();
                        if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                            var v2 = Data_Array_ST.push(v1.value0)(array)();
                            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                        };
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                    })();
                };
                return {};
            };
        };
    };
};
var pushAll = pushWhile(Data_Function["const"](true));
var iterator = function (f) {
    return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};
var iterate = function (iter) {
    return function (f) {
        return function __do() {
            var v = Control_Monad_ST_Internal["new"](false)();
            while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                (function __do() {
                    var v1 = next(iter)();
                    if (v1 instanceof Data_Maybe.Just) {
                        return f(v1.value0)();
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                    };
                    throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ v1.constructor.name ]);
                })();
            };
            return {};
        };
    };
};
var exhausted = function ($27) {
    return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing)(peek($27));
};
module.exports = {
    iterator: iterator,
    iterate: iterate,
    next: next,
    peek: peek,
    exhausted: exhausted,
    pushWhile: pushWhile,
    pushAll: pushAll
};

},{"../Control.Monad.ST.Internal/index.js":57,"../Data.Array.ST/index.js":96,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe/index.js":197}],95:[function(require,module,exports){
"use strict";

exports.empty = function () {
  return [];
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (i) {
      return function (xs) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (i) {
  return function (a) {
    return function (xs) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.popImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.pop()) : nothing;
      };
    };
  };
};

exports.pushAll = function (as) {
  return function (xs) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.shiftImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.shift()) : nothing;
      };
    };
  };
};

exports.unshiftAll = function (as) {
  return function (xs) {
    return function () {
      return xs.unshift.apply(xs, as);
    };
  };
};

exports.splice = function (i) {
  return function (howMany) {
    return function (bs) {
      return function (xs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.unsafeFreeze = function (xs) {
  return function () {
    return xs;
  };
};

exports.unsafeThaw = function (xs) {
  return function () {
    return xs;
  };
};

function copyImpl(xs) {
  return function () {
    return xs.slice();
  };
}

exports.freeze = copyImpl;

exports.thaw = copyImpl;

exports.sortByImpl = function (comp) {
  return function (xs) {
    return function () {
      return xs.sort(function (x, y) {
        return comp(x)(y);
      });
    };
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);
    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
    return as;
  };
};

},{}],96:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var withArray = function (f) {
    return function (xs) {
        return function __do() {
            var v = $foreign.thaw(xs)();
            var v1 = f(v)();
            return $foreign.unsafeFreeze(v)();
        };
    };
};
var unshift = function (a) {
    return $foreign.unshiftAll([ a ]);
};
var sortBy = function (comp) {
    var comp$prime = function (x) {
        return function (y) {
            var v = comp(x)(y);
            if (v instanceof Data_Ordering.GT) {
                return 1;
            };
            if (v instanceof Data_Ordering.EQ) {
                return 0;
            };
            if (v instanceof Data_Ordering.LT) {
                return -1 | 0;
            };
            throw new Error("Failed pattern match at Data.Array.ST (line 105, column 15 - line 110, column 1): " + [ v.constructor.name ]);
        };
    };
    return $foreign.sortByImpl(comp$prime);
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return sortBy(Data_Ord.compare(dictOrd));
};
var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var run = function (st) {
    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
};
var push = function (a) {
    return $foreign.pushAll([ a ]);
};
var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var modify = function (i) {
    return function (f) {
        return function (xs) {
            return function __do() {
                var v = peek(i)(xs)();
                if (v instanceof Data_Maybe.Just) {
                    return $foreign.poke(i)(f(v.value0))(xs)();
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Array.ST (line 188, column 3 - line 190, column 26): " + [ v.constructor.name ]);
            };
        };
    };
};
module.exports = {
    run: run,
    withArray: withArray,
    peek: peek,
    modify: modify,
    pop: pop,
    push: push,
    shift: shift,
    unshift: unshift,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    empty: $foreign.empty,
    poke: $foreign.poke,
    pushAll: $foreign.pushAll,
    unshiftAll: $foreign.unshiftAll,
    splice: $foreign.splice,
    freeze: $foreign.freeze,
    thaw: $foreign.thaw,
    unsafeFreeze: $foreign.unsafeFreeze,
    unsafeThaw: $foreign.unsafeThaw,
    toAssocArray: $foreign.toAssocArray
};

},{"../Control.Bind/index.js":35,"../Control.Monad.ST.Internal/index.js":57,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"./foreign.js":95}],97:[function(require,module,exports){
"use strict";

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = new Array(step * (end - start) + 1);
    var i = start, n = 0;
    while (i !== end) {
      result[n++] = i;
      i += step;
    }
    result[n] = i;
    return result;
  };
};

var replicateFill = function (count) {
  return function (value) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function (count) {
  return function (value) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }
    return result;
  };
};

// In browsers that have Array.prototype.fill we use it, as it's faster.
exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

exports.fromFoldableImpl = (function () {
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }
  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
})();

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no  = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes: yes, no: no };
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

//------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};

},{}],98:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAtIndices = function (dictFoldable) {
    return function (us) {
        return function (xs) {
            return Data_Array_ST.withArray(function (res) {
                return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                    return Data_Array_ST.poke(v.value0)(v.value1)(res);
                })(us);
            })(xs)();
        };
    };
};
var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x,
            tail: xs
        });
    };
});
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 707, column 1): " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubByEq = function (eq) {
    return function (xs) {
        return (function __do() {
            var v = Data_Array_ST.empty();
            Control_Monad_ST_Internal.foreach(xs)(function (x) {
                return function __do() {
                    var v1 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function ($113) {
                        return !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                            return eq(v1)(x);
                        })($113);
                    })(Data_Array_ST.unsafeFreeze(v))();
                    return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(v1)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(v)))();
                };
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        })();
    };
};
var nubEq = function (dictEq) {
    return nubByEq(Data_Eq.eq(dictEq));
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return function (xs) {
                return Data_Array_ST.withArray(function (res) {
                    return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                        return Data_Array_ST.modify(i)(f)(res);
                    })(is);
                })(xs)();
            };
        };
    };
};
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};
var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v,
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
var span = function (p) {
    return function (arr) {
        var go = function ($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $77 = p(v.value0);
                    if ($77) {
                        $copy_i = i + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_i);
            };
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ],
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr),
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr,
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
    };
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var unzip = function (xs) {
    return (function __do() {
        var v = Data_Array_ST.empty();
        var v1 = Data_Array_ST.empty();
        var v2 = Data_Array_ST_Iterator.iterator(function (v2) {
            return index(xs)(v2);
        })();
        Data_Array_ST_Iterator.iterate(v2)(function (v3) {
            return function __do() {
                Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value0)(v))();
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value1)(v1))();
            };
        })();
        var v3 = Data_Array_ST.unsafeFreeze(v)();
        var v4 = Data_Array_ST.unsafeFreeze(v1)();
        return new Data_Tuple.Tuple(v3, v4);
    })();
};
var head = function (xs) {
    return index(xs)(0);
};
var nubBy = function (comp) {
    return function (xs) {
        var indexedAndSorted = sortBy(function (x) {
            return function (y) {
                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
            };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                var v1 = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v2) {
                    return function __do() {
                        var v3 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function ($114) {
                            return Data_Tuple.snd((function ($115) {
                                return Data_Maybe.fromJust()(last($115));
                            })($114));
                        })(Data_Array_ST.unsafeFreeze(v1))();
                        return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(v3)(v2.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v2)(v1)))();
                    };
                })();
                return Data_Array_ST.unsafeFreeze(v1)();
            })()));
        };
        throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [ v.constructor.name ]);
    };
};
var nub = function (dictOrd) {
    return nubBy(Data_Ord.compare(dictOrd));
};
var groupBy = function (op) {
    return function (xs) {
        return (function __do() {
            var v = Data_Array_ST.empty();
            var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                return index(xs)(v1);
            })();
            Data_Array_ST_Iterator.iterate(v1)(function (x) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                    var v2 = Data_Array_ST.empty();
                    var v3 = Data_Array_ST.push(x)(v2)();
                    Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                    var v4 = Data_Array_ST.unsafeFreeze(v2)();
                    return Data_Array_ST.push(v4)(v)();
                });
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        })();
    };
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    return function ($116) {
        return group(dictOrd.Eq0())(sort(dictOrd)($116));
    };
};
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: v,
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var dropEnd = function (n) {
    return function (xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};
var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
var mapMaybe = function (f) {
    return concatMap(function ($117) {
        return Data_Maybe.maybe([  ])(singleton)(f($117));
    });
};
var filterA = function (dictApplicative) {
    return function (p) {
        return function ($118) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                if (v.value1) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
            })($118));
        };
    };
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    singleton: singleton,
    some: some,
    many: many,
    "null": $$null,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    concatMap: concatMap,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    nub: nub,
    nubEq: nubEq,
    nubBy: nubBy,
    nubByEq: nubByEq,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex,
    range: $foreign.range,
    replicate: $foreign.replicate,
    length: $foreign.length,
    cons: $foreign.cons,
    snoc: $foreign.snoc,
    reverse: $foreign.reverse,
    concat: $foreign.concat,
    filter: $foreign.filter,
    partition: $foreign.partition,
    slice: $foreign.slice,
    take: $foreign.take,
    drop: $foreign.drop,
    zipWith: $foreign.zipWith
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Lazy/index.js":41,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.ST.Internal/index.js":57,"../Data.Array.ST.Iterator/index.js":94,"../Data.Array.ST/index.js":96,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"./foreign.js":97}],99:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($97) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(f($97));
                })(function ($98) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(g($98));
                })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldableJoker = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                };
            };
        };
    });
};
var bifoldableClown = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                };
            };
        };
    });
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($99) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f($99));
                })(function ($100) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(g($100));
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldl(dictBifoldable)(function (m) {
                    return function (a) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                    };
                })(function (m) {
                    return function (b) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldableFlip = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldableWrap = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function ($101) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($101)));
                    })(function ($102) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($102)));
                    })(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($103) {
                        return Data_Monoid_Endo.Endo(f($103));
                    })(function ($104) {
                        return Data_Monoid_Endo.Endo(g($104));
                    })(p))(z);
                };
            };
        };
    };
};
var bifoldableProduct = function (dictBifoldable) {
    return function (dictBifoldable1) {
        return new Bifoldable(function (dictMonoid) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        });
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($105) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($106) {
                        return Data_Monoid_Disj.Disj(p($106));
                    })(function ($107) {
                        return Data_Monoid_Disj.Disj(q($107));
                    })($105));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($108) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($109) {
                        return Data_Monoid_Conj.Conj(p($109));
                    })(function ($110) {
                        return Data_Monoid_Conj.Conj(q($110));
                    })($108));
                };
            };
        };
    };
};
module.exports = {
    bifoldMap: bifoldMap,
    bifoldl: bifoldl,
    bifoldr: bifoldr,
    Bifoldable: Bifoldable,
    bifoldrDefault: bifoldrDefault,
    bifoldlDefault: bifoldlDefault,
    bifoldMapDefaultR: bifoldMapDefaultR,
    bifoldMapDefaultL: bifoldMapDefaultL,
    bifold: bifold,
    bitraverse_: bitraverse_,
    bifor_: bifor_,
    bisequence_: bisequence_,
    biany: biany,
    biall: biall,
    bifoldableClown: bifoldableClown,
    bifoldableJoker: bifoldableJoker,
    bifoldableFlip: bifoldableFlip,
    bifoldableProduct: bifoldableProduct,
    bifoldableWrap: bifoldableWrap
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Endo/index.js":204,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266}],100:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Clown = function (x) {
    return x;
};
var showClown = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordClown = function (dictOrd) {
    return dictOrd;
};
var newtypeClown = new Data_Newtype.Newtype(function (n) {
    return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
    return function (v1) {
        return v1;
    };
});
var eqClown = function (dictEq) {
    return dictEq;
};
var bifunctorClown = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(f)(v1);
            };
        };
    });
};
var biapplyClown = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorClown(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeClown = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyClown(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
module.exports = {
    Clown: Clown,
    newtypeClown: newtypeClown,
    eqClown: eqClown,
    ordClown: ordClown,
    showClown: showClown,
    functorClown: functorClown,
    bifunctorClown: bifunctorClown,
    biapplyClown: biapplyClown,
    biapplicativeClown: biapplicativeClown
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Data.Bifunctor/index.js":105,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Show/index.js":235}],101:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Flip = function (x) {
    return x;
};
var showFlip = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordFlip = function (dictOrd) {
    return dictOrd;
};
var newtypeFlip = new Data_Newtype.Newtype(function (n) {
    return n;
}, Flip);
var functorFlip = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
        };
    });
};
var eqFlip = function (dictEq) {
    return dictEq;
};
var bifunctorFlip = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
        };
    });
};
var biapplyFlip = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorFlip(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeFlip = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyFlip(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
        };
    });
};
module.exports = {
    Flip: Flip,
    newtypeFlip: newtypeFlip,
    eqFlip: eqFlip,
    ordFlip: ordFlip,
    showFlip: showFlip,
    functorFlip: functorFlip,
    bifunctorFlip: bifunctorFlip,
    biapplyFlip: biapplyFlip,
    biapplicativeFlip: biapplicativeFlip
};

},{"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Data.Bifunctor/index.js":105,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Show/index.js":235}],102:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Joker = function (x) {
    return x;
};
var showJoker = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoker = function (dictOrd) {
    return dictOrd;
};
var newtypeJoker = new Data_Newtype.Newtype(function (n) {
    return n;
}, Joker);
var functorJoker = function (dictFunctor) {
    return new Data_Functor.Functor(function (g) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(g)(v);
        };
    });
};
var eqJoker = function (dictEq) {
    return dictEq;
};
var bifunctorJoker = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (v) {
        return function (g) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(g)(v1);
            };
        };
    });
};
var biapplyJoker = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorJoker(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeJoker = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyJoker(dictApplicative.Apply0());
    }, function (v) {
        return function (b) {
            return Control_Applicative.pure(dictApplicative)(b);
        };
    });
};
module.exports = {
    Joker: Joker,
    newtypeJoker: newtypeJoker,
    eqJoker: eqJoker,
    ordJoker: ordJoker,
    showJoker: showJoker,
    functorJoker: functorJoker,
    bifunctorJoker: bifunctorJoker,
    biapplyJoker: biapplyJoker,
    biapplicativeJoker: biapplicativeJoker
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Data.Bifunctor/index.js":105,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Show/index.js":235}],103:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var showProduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var eqProduct = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordProduct = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorProduct = function (dictBifunctor) {
    return function (dictBifunctor1) {
        return new Data_Bifunctor.Bifunctor(function (f) {
            return function (g) {
                return function (v) {
                    return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                };
            };
        });
    };
};
var biapplyProduct = function (dictBiapply) {
    return function (dictBiapply1) {
        return new Control_Biapply.Biapply(function () {
            return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
        }, function (v) {
            return function (v1) {
                return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
        });
    };
};
var biapplicativeProduct = function (dictBiapplicative) {
    return function (dictBiapplicative1) {
        return new Control_Biapplicative.Biapplicative(function () {
            return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
        }, function (a) {
            return function (b) {
                return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
        });
    };
};
module.exports = {
    Product: Product,
    eqProduct: eqProduct,
    ordProduct: ordProduct,
    showProduct: showProduct,
    bifunctorProduct: bifunctorProduct,
    biapplyProduct: biapplyProduct,
    biapplicativeProduct: biapplicativeProduct
};

},{"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Data.Bifunctor/index.js":105,"../Data.Eq/index.js":133,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],104:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Wrap = function (x) {
    return x;
};
var showWrap = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordWrap = function (dictOrd) {
    return dictOrd;
};
var newtypeWrap = new Data_Newtype.Newtype(function (n) {
    return n;
}, Wrap);
var functorWrap = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
        };
    });
};
var eqWrap = function (dictEq) {
    return dictEq;
};
var bifunctorWrap = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
            };
        };
    });
};
var biapplyWrap = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorWrap(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeWrap = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyWrap(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
        };
    });
};
module.exports = {
    Wrap: Wrap,
    newtypeWrap: newtypeWrap,
    eqWrap: eqWrap,
    ordWrap: ordWrap,
    showWrap: showWrap,
    functorWrap: functorWrap,
    bifunctorWrap: bifunctorWrap,
    biapplyWrap: biapplyWrap,
    biapplicativeWrap: biapplicativeWrap
};

},{"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Data.Bifunctor/index.js":105,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Show/index.js":235}],105:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};
module.exports = {
    bimap: bimap,
    Bifunctor: Bifunctor,
    lmap: lmap,
    rmap: rmap
};

},{"../Control.Category/index.js":36}],106:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
    this.Bifoldable1 = Bifoldable1;
    this.Bifunctor0 = Bifunctor0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var lfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
            };
        };
    };
};
var ltraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
    };
};
var rfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
            };
        };
    };
};
var rtraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
    };
};
var bitraversableJoker = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                };
            };
        };
    });
};
var bitraversableClown = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                };
            };
        };
    });
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraversableFlip = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraversableProduct = function (dictBitraversable) {
    return function (dictBitraversable1) {
        return new Bitraversable(function () {
            return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
        }, function () {
            return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                    };
                };
            };
        });
    };
};
var bitraversableWrap = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable,
    bitraverse: bitraverse,
    bisequence: bisequence,
    bitraverseDefault: bitraverseDefault,
    bisequenceDefault: bisequenceDefault,
    ltraverse: ltraverse,
    rtraverse: rtraverse,
    bifor: bifor,
    lfor: lfor,
    rfor: rfor,
    bitraversableClown: bitraversableClown,
    bitraversableJoker: bitraversableJoker,
    bitraversableFlip: bitraversableFlip,
    bitraversableProduct: bitraversableProduct,
    bitraversableWrap: bitraversableWrap
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor.Clown/index.js":100,"../Data.Bifunctor.Flip/index.js":101,"../Data.Bifunctor.Joker/index.js":102,"../Data.Bifunctor.Product/index.js":103,"../Data.Bifunctor.Wrap/index.js":104,"../Data.Bifunctor/index.js":105,"../Data.Functor/index.js":156,"../Data.Traversable/index.js":257}],107:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var otherwise = true;
module.exports = {
    otherwise: otherwise
};

},{}],108:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {
    this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};
var BooleanAlgebra = function (HeytingAlgebra0) {
    this.HeytingAlgebra0 = HeytingAlgebra0;
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
    return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});
var booleanAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictBooleanAlgebraRecord) {
            return function (dictBooleanAlgebra) {
                return new BooleanAlgebraRecord(function () {
                    return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)(dictCons)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                });
            };
        };
    };
};
var booleanAlgebraRecord = function (dictRowToList) {
    return function (dictBooleanAlgebraRecord) {
        return new BooleanAlgebra(function () {
            return Data_HeytingAlgebra.heytingAlgebraRecord(dictRowToList)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
        });
    };
};
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
    BooleanAlgebra: BooleanAlgebra,
    BooleanAlgebraRecord: BooleanAlgebraRecord,
    booleanAlgebraBoolean: booleanAlgebraBoolean,
    booleanAlgebraUnit: booleanAlgebraUnit,
    booleanAlgebraFn: booleanAlgebraFn,
    booleanAlgebraRecord: booleanAlgebraRecord,
    booleanAlgebraRecordNil: booleanAlgebraRecordNil,
    booleanAlgebraRecordCons: booleanAlgebraRecordCons
};

},{"../Data.HeytingAlgebra/index.js":165}],109:[function(require,module,exports){
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;

},{}],110:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bounded = function (Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
var top = function (dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function () {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function () {
    return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
    return Data_Ord.ordBoolean;
}, false, true);
var bottom = function (dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded,
    bottom: bottom,
    top: top,
    boundedBoolean: boundedBoolean,
    boundedInt: boundedInt,
    boundedChar: boundedChar,
    boundedOrdering: boundedOrdering,
    boundedUnit: boundedUnit,
    boundedNumber: boundedNumber
};

},{"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Unit/index.js":266,"./foreign.js":109}],111:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_CatQueue = require("../Data.CatQueue/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatNil = (function () {
    function CatNil() {

    };
    CatNil.value = new CatNil();
    return CatNil;
})();
var CatCons = (function () {
    function CatCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatCons.create = function (value0) {
        return function (value1) {
            return new CatCons(value0, value1);
        };
    };
    return CatCons;
})();
var showCatList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof CatNil) {
            return "CatNil";
        };
        if (v instanceof CatCons) {
            return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
        };
        throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 148, column 51): " + [ v.constructor.name ]);
    });
};
var $$null = function (v) {
    if (v instanceof CatNil) {
        return true;
    };
    return false;
};
var link = function (v) {
    return function (v1) {
        if (v instanceof CatNil) {
            return v1;
        };
        if (v1 instanceof CatNil) {
            return v;
        };
        if (v instanceof CatCons) {
            return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var foldr = function (k) {
    return function (b) {
        return function (q) {
            var foldl = function ($copy_v) {
                return function ($copy_c) {
                    return function ($copy_v1) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_c = $copy_c;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, c, v1) {
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return c;
                            };
                            if (v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v;
                                $tco_var_c = v(c)(v1.value0);
                                $copy_v1 = v1.value1;
                                return;
                            };
                            throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                        };
                        return $tco_result;
                    };
                };
            };
            var go = function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_xs = $copy_xs;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(xs, ys) {
                        var v = Data_CatQueue.uncons(xs);
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return foldl(function (x) {
                                return function (i) {
                                    return i(x);
                                };
                            })(b)(ys);
                        };
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_xs = v.value0.value1;
                            $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                            return;
                        };
                        throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                    };
                    return $tco_result;
                };
            };
            return go(q)(Data_List_Types.Nil.value);
        };
    };
};
var uncons = function (v) {
    if (v instanceof CatNil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof CatCons) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
            var $44 = Data_CatQueue["null"](v.value1);
            if ($44) {
                return CatNil.value;
            };
            return foldr(link)(CatNil.value)(v.value1);
        })()));
    };
    throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
};
var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (s) {
        return function (l) {
            return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
        };
    };
});
var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);
var foldMap = function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof CatNil) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof CatCons) {
                var d = (function () {
                    var $53 = Data_CatQueue["null"](v.value1);
                    if ($53) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v.value1);
                })();
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
};
var empty = CatNil.value;
var append = link;
var cons = function (a) {
    return function (cat) {
        return append(new CatCons(a, Data_CatQueue.empty))(cat);
    };
};
var functorCatList = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof CatNil) {
            return CatNil.value;
        };
        if (v1 instanceof CatCons) {
            var d = (function () {
                var $58 = Data_CatQueue["null"](v1.value1);
                if ($58) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v1.value1);
            })();
            return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 185, column 43): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var singleton = function (a) {
    return cons(a)(CatNil.value);
};
var traversableCatList = new Data_Traversable.Traversable(function () {
    return foldableCatList;
}, function () {
    return functorCatList;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof CatNil) {
            return Control_Applicative.pure(dictApplicative)(CatNil.value);
        };
        if (v instanceof CatCons) {
            var d = (function () {
                var $62 = Data_CatQueue["null"](v.value1);
                if ($62) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v.value1);
            })();
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 175, column 51): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof CatNil) {
                return Control_Applicative.pure(dictApplicative)(CatNil.value);
            };
            if (v1 instanceof CatCons) {
                var d = (function () {
                    var $67 = Data_CatQueue["null"](v1.value1);
                    if ($67) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v1.value1);
                })();
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 175, column 51): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var semigroupCatList = new Data_Semigroup.Semigroup(append);
var monoidCatList = new Data_Monoid.Monoid(function () {
    return semigroupCatList;
}, CatNil.value);
var monadCatList = new Control_Monad.Monad(function () {
    return applicativeCatList;
}, function () {
    return bindCatList;
});
var bindCatList = new Control_Bind.Bind(function () {
    return applyCatList;
}, Data_Function.flip(foldMap(monoidCatList)));
var applyCatList = new Control_Apply.Apply(function () {
    return functorCatList;
}, Control_Monad.ap(monadCatList));
var applicativeCatList = new Control_Applicative.Applicative(function () {
    return applyCatList;
}, singleton);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
    };
};
var snoc = function (cat) {
    return function (a) {
        return append(cat)(new CatCons(a, Data_CatQueue.empty));
    };
};
var unfoldable1CatList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var unfoldableCatList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatList;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var altCatList = new Control_Alt.Alt(function () {
    return functorCatList;
}, append);
var plusCatList = new Control_Plus.Plus(function () {
    return altCatList;
}, empty);
var alternativeCatList = new Control_Alternative.Alternative(function () {
    return applicativeCatList;
}, function () {
    return plusCatList;
});
var monadZeroCatList = new Control_MonadZero.MonadZero(function () {
    return alternativeCatList;
}, function () {
    return monadCatList;
});
var monadPlusCatList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatList;
});
module.exports = {
    CatNil: CatNil,
    CatCons: CatCons,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    append: append,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    fromFoldable: fromFoldable,
    semigroupCatList: semigroupCatList,
    monoidCatList: monoidCatList,
    showCatList: showCatList,
    foldableCatList: foldableCatList,
    unfoldableCatList: unfoldableCatList,
    unfoldable1CatList: unfoldable1CatList,
    traversableCatList: traversableCatList,
    functorCatList: functorCatList,
    applyCatList: applyCatList,
    applicativeCatList: applicativeCatList,
    bindCatList: bindCatList,
    monadCatList: monadCatList,
    altCatList: altCatList,
    plusCatList: plusCatList,
    alternativeCatList: alternativeCatList,
    monadZeroCatList: monadZeroCatList,
    monadPlusCatList: monadPlusCatList
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.CatQueue/index.js":112,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264}],112:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatQueue = (function () {
    function CatQueue(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatQueue.create = function (value0) {
        return function (value1) {
            return new CatQueue(value0, value1);
        };
    };
    return CatQueue;
})();
var unsnoc = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value1 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
        };
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value1 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
            return;
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var uncons = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value0 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
            return;
        };
        if (v.value0 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var snoc = function (v) {
    return function (a) {
        return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
    };
};
var showCatQueue = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
    });
};
var $$null = function (v) {
    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var length = function (v) {
    return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
};
var functorCatQueue = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
    };
});
var foldableCatQueue = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return Data_Foldable.foldrDefault(foldableCatQueue)(f);
});
var semigroupCatQueue = new Data_Semigroup.Semigroup(Data_Foldable.foldl(foldableCatQueue)(snoc));
var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
var monoidCatQueue = new Data_Monoid.Monoid(function () {
    return semigroupCatQueue;
}, empty);
var singleton = snoc(empty);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
    };
};
var traversableCatQueue = new Data_Traversable.Traversable(function () {
    return foldableCatQueue;
}, function () {
    return functorCatQueue;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
}, function (dictApplicative) {
    return function (f) {
        return function ($100) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty))(Data_Foldable.foldl(foldableCatQueue)(function (acc) {
                return function ($101) {
                    return Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc)(f($101));
                };
            })(Control_Applicative.pure(dictApplicative)(empty))($100));
        };
    };
});
var unfoldable1CatQueue = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var unfoldableCatQueue = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatQueue;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var cqEq = function (dictEq) {
    var elemEq = Data_Eq.eq(dictEq);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0))) {
                    $tco_var_xs = v1.value0.value1;
                    $copy_ys = v.value0.value1;
                    return;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return true;
                };
                $tco_done = true;
                return false;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var eqCatQueue = function (dictEq) {
    return new Data_Eq.Eq(cqEq(dictEq));
};
var cqCompare = function (dictOrd) {
    var elemCompare = Data_Ord.compare(dictOrd);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
                    var v2 = elemCompare(v1.value0.value0)(v.value0.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_var_xs = v1.value0.value1;
                        $copy_ys = v.value0.value1;
                        return;
                    };
                    $tco_done = true;
                    return v2;
                };
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.GT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.EQ.value;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [ v1.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var ordCatQueue = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqCatQueue(dictOrd.Eq0());
    }, cqCompare(dictOrd));
};
var cons = function (a) {
    return function (v) {
        return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
    };
};
var monadCatQueue = new Control_Monad.Monad(function () {
    return applicativeCatQueue;
}, function () {
    return bindCatQueue;
});
var bindCatQueue = new Control_Bind.Bind(function () {
    return applyCatQueue;
}, Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)));
var applyCatQueue = new Control_Apply.Apply(function () {
    return functorCatQueue;
}, Control_Monad.ap(monadCatQueue));
var applicativeCatQueue = new Control_Applicative.Applicative(function () {
    return applyCatQueue;
}, singleton);
var altCatQueue = new Control_Alt.Alt(function () {
    return functorCatQueue;
}, Data_Semigroup.append(semigroupCatQueue));
var plusCatQueue = new Control_Plus.Plus(function () {
    return altCatQueue;
}, empty);
var alternativeCatQueue = new Control_Alternative.Alternative(function () {
    return applicativeCatQueue;
}, function () {
    return plusCatQueue;
});
var monadZeroCatQueue = new Control_MonadZero.MonadZero(function () {
    return alternativeCatQueue;
}, function () {
    return monadCatQueue;
});
var monadPlusCatQueue = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatQueue;
});
module.exports = {
    CatQueue: CatQueue,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    unsnoc: unsnoc,
    fromFoldable: fromFoldable,
    eqCatQueue: eqCatQueue,
    ordCatQueue: ordCatQueue,
    semigroupCatQueue: semigroupCatQueue,
    monoidCatQueue: monoidCatQueue,
    showCatQueue: showCatQueue,
    foldableCatQueue: foldableCatQueue,
    unfoldable1CatQueue: unfoldable1CatQueue,
    unfoldableCatQueue: unfoldableCatQueue,
    traversableCatQueue: traversableCatQueue,
    functorCatQueue: functorCatQueue,
    applyCatQueue: applyCatQueue,
    applicativeCatQueue: applicativeCatQueue,
    bindCatQueue: bindCatQueue,
    monadCatQueue: monadCatQueue,
    altCatQueue: altCatQueue,
    plusCatQueue: plusCatQueue,
    alternativeCatQueue: alternativeCatQueue,
    monadZeroCatQueue: monadZeroCatQueue,
    monadPlusCatQueue: monadPlusCatQueue
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264}],113:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var NUMCAT_LU = (function () {
    function NUMCAT_LU() {

    };
    NUMCAT_LU.value = new NUMCAT_LU();
    return NUMCAT_LU;
})();
var NUMCAT_LL = (function () {
    function NUMCAT_LL() {

    };
    NUMCAT_LL.value = new NUMCAT_LL();
    return NUMCAT_LL;
})();
var NUMCAT_LT = (function () {
    function NUMCAT_LT() {

    };
    NUMCAT_LT.value = new NUMCAT_LT();
    return NUMCAT_LT;
})();
var NUMCAT_LM = (function () {
    function NUMCAT_LM() {

    };
    NUMCAT_LM.value = new NUMCAT_LM();
    return NUMCAT_LM;
})();
var NUMCAT_LO = (function () {
    function NUMCAT_LO() {

    };
    NUMCAT_LO.value = new NUMCAT_LO();
    return NUMCAT_LO;
})();
var NUMCAT_MN = (function () {
    function NUMCAT_MN() {

    };
    NUMCAT_MN.value = new NUMCAT_MN();
    return NUMCAT_MN;
})();
var NUMCAT_MC = (function () {
    function NUMCAT_MC() {

    };
    NUMCAT_MC.value = new NUMCAT_MC();
    return NUMCAT_MC;
})();
var NUMCAT_ME = (function () {
    function NUMCAT_ME() {

    };
    NUMCAT_ME.value = new NUMCAT_ME();
    return NUMCAT_ME;
})();
var NUMCAT_ND = (function () {
    function NUMCAT_ND() {

    };
    NUMCAT_ND.value = new NUMCAT_ND();
    return NUMCAT_ND;
})();
var NUMCAT_NL = (function () {
    function NUMCAT_NL() {

    };
    NUMCAT_NL.value = new NUMCAT_NL();
    return NUMCAT_NL;
})();
var NUMCAT_NO = (function () {
    function NUMCAT_NO() {

    };
    NUMCAT_NO.value = new NUMCAT_NO();
    return NUMCAT_NO;
})();
var NUMCAT_PC = (function () {
    function NUMCAT_PC() {

    };
    NUMCAT_PC.value = new NUMCAT_PC();
    return NUMCAT_PC;
})();
var NUMCAT_PD = (function () {
    function NUMCAT_PD() {

    };
    NUMCAT_PD.value = new NUMCAT_PD();
    return NUMCAT_PD;
})();
var NUMCAT_PS = (function () {
    function NUMCAT_PS() {

    };
    NUMCAT_PS.value = new NUMCAT_PS();
    return NUMCAT_PS;
})();
var NUMCAT_PE = (function () {
    function NUMCAT_PE() {

    };
    NUMCAT_PE.value = new NUMCAT_PE();
    return NUMCAT_PE;
})();
var NUMCAT_PI = (function () {
    function NUMCAT_PI() {

    };
    NUMCAT_PI.value = new NUMCAT_PI();
    return NUMCAT_PI;
})();
var NUMCAT_PF = (function () {
    function NUMCAT_PF() {

    };
    NUMCAT_PF.value = new NUMCAT_PF();
    return NUMCAT_PF;
})();
var NUMCAT_PO = (function () {
    function NUMCAT_PO() {

    };
    NUMCAT_PO.value = new NUMCAT_PO();
    return NUMCAT_PO;
})();
var NUMCAT_SM = (function () {
    function NUMCAT_SM() {

    };
    NUMCAT_SM.value = new NUMCAT_SM();
    return NUMCAT_SM;
})();
var NUMCAT_SC = (function () {
    function NUMCAT_SC() {

    };
    NUMCAT_SC.value = new NUMCAT_SC();
    return NUMCAT_SC;
})();
var NUMCAT_SK = (function () {
    function NUMCAT_SK() {

    };
    NUMCAT_SK.value = new NUMCAT_SK();
    return NUMCAT_SK;
})();
var NUMCAT_SO = (function () {
    function NUMCAT_SO() {

    };
    NUMCAT_SO.value = new NUMCAT_SO();
    return NUMCAT_SO;
})();
var NUMCAT_ZS = (function () {
    function NUMCAT_ZS() {

    };
    NUMCAT_ZS.value = new NUMCAT_ZS();
    return NUMCAT_ZS;
})();
var NUMCAT_ZL = (function () {
    function NUMCAT_ZL() {

    };
    NUMCAT_ZL.value = new NUMCAT_ZL();
    return NUMCAT_ZL;
})();
var NUMCAT_ZP = (function () {
    function NUMCAT_ZP() {

    };
    NUMCAT_ZP.value = new NUMCAT_ZP();
    return NUMCAT_ZP;
})();
var NUMCAT_CC = (function () {
    function NUMCAT_CC() {

    };
    NUMCAT_CC.value = new NUMCAT_CC();
    return NUMCAT_CC;
})();
var NUMCAT_CF = (function () {
    function NUMCAT_CF() {

    };
    NUMCAT_CF.value = new NUMCAT_CF();
    return NUMCAT_CF;
})();
var NUMCAT_CS = (function () {
    function NUMCAT_CS() {

    };
    NUMCAT_CS.value = new NUMCAT_CS();
    return NUMCAT_CS;
})();
var NUMCAT_CO = (function () {
    function NUMCAT_CO() {

    };
    NUMCAT_CO.value = new NUMCAT_CO();
    return NUMCAT_CO;
})();
var NUMCAT_CN = (function () {
    function NUMCAT_CN() {

    };
    NUMCAT_CN.value = new NUMCAT_CN();
    return NUMCAT_CN;
})();
var ConversionRule = function (x) {
    return x;
};
var CharBlock = function (x) {
    return x;
};
var showUnicodeCategory = new Data_Show.Show(function (v) {
    if (v instanceof NUMCAT_LU) {
        return "NUMCAT_LU";
    };
    if (v instanceof NUMCAT_LL) {
        return "NUMCAT_LL";
    };
    if (v instanceof NUMCAT_LT) {
        return "NUMCAT_LT";
    };
    if (v instanceof NUMCAT_LM) {
        return "NUMCAT_LM";
    };
    if (v instanceof NUMCAT_LO) {
        return "NUMCAT_LO";
    };
    if (v instanceof NUMCAT_MN) {
        return "NUMCAT_MN";
    };
    if (v instanceof NUMCAT_MC) {
        return "NUMCAT_MC";
    };
    if (v instanceof NUMCAT_ME) {
        return "NUMCAT_ME";
    };
    if (v instanceof NUMCAT_ND) {
        return "NUMCAT_ND";
    };
    if (v instanceof NUMCAT_NL) {
        return "NUMCAT_NL";
    };
    if (v instanceof NUMCAT_NO) {
        return "NUMCAT_NO";
    };
    if (v instanceof NUMCAT_PC) {
        return "NUMCAT_PC";
    };
    if (v instanceof NUMCAT_PD) {
        return "NUMCAT_PD";
    };
    if (v instanceof NUMCAT_PS) {
        return "NUMCAT_PS";
    };
    if (v instanceof NUMCAT_PE) {
        return "NUMCAT_PE";
    };
    if (v instanceof NUMCAT_PI) {
        return "NUMCAT_PI";
    };
    if (v instanceof NUMCAT_PF) {
        return "NUMCAT_PF";
    };
    if (v instanceof NUMCAT_PO) {
        return "NUMCAT_PO";
    };
    if (v instanceof NUMCAT_SM) {
        return "NUMCAT_SM";
    };
    if (v instanceof NUMCAT_SC) {
        return "NUMCAT_SC";
    };
    if (v instanceof NUMCAT_SK) {
        return "NUMCAT_SK";
    };
    if (v instanceof NUMCAT_SO) {
        return "NUMCAT_SO";
    };
    if (v instanceof NUMCAT_ZS) {
        return "NUMCAT_ZS";
    };
    if (v instanceof NUMCAT_ZL) {
        return "NUMCAT_ZL";
    };
    if (v instanceof NUMCAT_ZP) {
        return "NUMCAT_ZP";
    };
    if (v instanceof NUMCAT_CC) {
        return "NUMCAT_CC";
    };
    if (v instanceof NUMCAT_CF) {
        return "NUMCAT_CF";
    };
    if (v instanceof NUMCAT_CS) {
        return "NUMCAT_CS";
    };
    if (v instanceof NUMCAT_CO) {
        return "NUMCAT_CO";
    };
    if (v instanceof NUMCAT_CN) {
        return "NUMCAT_CN";
    };
    throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 49, column 1 - line 49, column 53): " + [ v.constructor.name ]);
});
var showConversionRule = new Data_Show.Show(function (v) {
    return "ConversionRule { category: " + (Data_Show.show(Data_Show.showInt)(v.category) + (", unicodeCat: " + (Data_Show.show(showUnicodeCategory)(v.unicodeCat) + (", possible: " + (Data_Show.show(Data_Show.showInt)(v.possible) + (", updist: " + (Data_Show.show(Data_Show.showInt)(v.updist) + (", lowdist: " + (Data_Show.show(Data_Show.showInt)(v.lowdist) + (", titledist: " + (Data_Show.show(Data_Show.showInt)(v.titledist) + " }")))))))))));
});
var showCharBlock = new Data_Show.Show(function (v) {
    return "CharBlock { start: " + (Data_Show.show(Data_Show.showInt)(v.start) + (", length: " + (Data_Show.show(Data_Show.showInt)(v.length) + (", convRule: " + (Data_Show.show(showConversionRule)(v.convRule) + " }")))));
});
var numSpaceBlocks = 8;
var numRules = 167;
var numLat1Blocks = 63;
var numConvBlocks = 1230;
var numBlocks = 2783;
var maxUniChar = 1114109;
var gencatZS = 2;
var rule1 = {
    category: gencatZS,
    unicodeCat: NUMCAT_ZS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var spacechars = [ {
    start: 32,
    length: 1,
    convRule: rule1
}, {
    start: 160,
    length: 1,
    convRule: rule1
}, {
    start: 5760,
    length: 1,
    convRule: rule1
}, {
    start: 6158,
    length: 1,
    convRule: rule1
}, {
    start: 8192,
    length: 11,
    convRule: rule1
}, {
    start: 8239,
    length: 1,
    convRule: rule1
}, {
    start: 8287,
    length: 1,
    convRule: rule1
}, {
    start: 12288,
    length: 1,
    convRule: rule1
} ];
var gencatZP = 67108864;
var rule140 = {
    category: gencatZP,
    unicodeCat: NUMCAT_ZP.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatZL = 33554432;
var rule139 = {
    category: gencatZL,
    unicodeCat: NUMCAT_ZL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSO = 8192;
var rule13 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule148 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: 0,
    lowdist: 26,
    titledist: 0
};
var rule149 = {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: -26 | 0,
    lowdist: 0,
    titledist: -26 | 0
};
var gencatSM = 64;
var rule6 = {
    category: gencatSM,
    unicodeCat: NUMCAT_SM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSK = 1024;
var rule10 = {
    category: gencatSK,
    unicodeCat: NUMCAT_SK.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatSC = 8;
var rule3 = {
    category: gencatSC,
    unicodeCat: NUMCAT_SC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPS = 16;
var rule4 = {
    category: gencatPS,
    unicodeCat: NUMCAT_PS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPO = 4;
var rule2 = {
    category: gencatPO,
    unicodeCat: NUMCAT_PO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPI = 16384;
var rule15 = {
    category: gencatPI,
    unicodeCat: NUMCAT_PI.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPF = 131072;
var rule19 = {
    category: gencatPF,
    unicodeCat: NUMCAT_PF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPE = 32;
var rule5 = {
    category: gencatPE,
    unicodeCat: NUMCAT_PE.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPD = 128;
var rule7 = {
    category: gencatPD,
    unicodeCat: NUMCAT_PD.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatPC = 2048;
var rule11 = {
    category: gencatPC,
    unicodeCat: NUMCAT_PC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNO = 65536;
var rule17 = {
    category: gencatNO,
    unicodeCat: NUMCAT_NO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatNL = 16777216;
var rule116 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule146 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: 0,
    lowdist: 16,
    titledist: 0
};
var rule147 = {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: -16 | 0,
    lowdist: 0,
    titledist: -16 | 0
};
var gencatND = 256;
var rule8 = {
    category: gencatND,
    unicodeCat: NUMCAT_ND.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMN = 2097152;
var rule84 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule85 = {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 1,
    updist: 84,
    lowdist: 0,
    titledist: 84
};
var gencatME = 4194304;
var rule109 = {
    category: gencatME,
    unicodeCat: NUMCAT_ME.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatMC = 8388608;
var rule114 = {
    category: gencatMC,
    unicodeCat: NUMCAT_MC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLU = 512;
var nullrule = {
    category: gencatLU,
    unicodeCat: NUMCAT_CN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule105 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -60 | 0,
    titledist: 0
};
var rule107 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7 | 0,
    titledist: 0
};
var rule108 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 80,
    titledist: 0
};
var rule110 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 15,
    titledist: 0
};
var rule112 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 48,
    titledist: 0
};
var rule115 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 7264,
    titledist: 0
};
var rule120 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7615 | 0,
    titledist: 0
};
var rule122 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
};
var rule131 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -74 | 0,
    titledist: 0
};
var rule134 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -86 | 0,
    titledist: 0
};
var rule135 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -100 | 0,
    titledist: 0
};
var rule136 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -112 | 0,
    titledist: 0
};
var rule137 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -128 | 0,
    titledist: 0
};
var rule138 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -126 | 0,
    titledist: 0
};
var rule141 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7517 | 0,
    titledist: 0
};
var rule142 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8383 | 0,
    titledist: 0
};
var rule143 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8262 | 0,
    titledist: 0
};
var rule144 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 28,
    titledist: 0
};
var rule150 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10743 | 0,
    titledist: 0
};
var rule151 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -3814 | 0,
    titledist: 0
};
var rule152 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10727 | 0,
    titledist: 0
};
var rule155 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10780 | 0,
    titledist: 0
};
var rule156 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10749 | 0,
    titledist: 0
};
var rule157 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10783 | 0,
    titledist: 0
};
var rule158 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10782 | 0,
    titledist: 0
};
var rule159 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10815 | 0,
    titledist: 0
};
var rule161 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -35332 | 0,
    titledist: 0
};
var rule162 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42280 | 0,
    titledist: 0
};
var rule165 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 40,
    titledist: 0
};
var rule21 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 1,
    titledist: 0
};
var rule23 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -199 | 0,
    titledist: 0
};
var rule25 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -121 | 0,
    titledist: 0
};
var rule28 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 210,
    titledist: 0
};
var rule29 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 206,
    titledist: 0
};
var rule30 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 205,
    titledist: 0
};
var rule31 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 79,
    titledist: 0
};
var rule32 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 202,
    titledist: 0
};
var rule33 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 203,
    titledist: 0
};
var rule34 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 207,
    titledist: 0
};
var rule36 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 211,
    titledist: 0
};
var rule37 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 209,
    titledist: 0
};
var rule39 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 213,
    titledist: 0
};
var rule41 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 214,
    titledist: 0
};
var rule42 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 218,
    titledist: 0
};
var rule43 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 217,
    titledist: 0
};
var rule44 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 219,
    titledist: 0
};
var rule47 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 2,
    titledist: 1
};
var rule51 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -97 | 0,
    titledist: 0
};
var rule52 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -56 | 0,
    titledist: 0
};
var rule53 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -130 | 0,
    titledist: 0
};
var rule54 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10795,
    titledist: 0
};
var rule55 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -163 | 0,
    titledist: 0
};
var rule56 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10792,
    titledist: 0
};
var rule58 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -195 | 0,
    titledist: 0
};
var rule59 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 69,
    titledist: 0
};
var rule60 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 71,
    titledist: 0
};
var rule86 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 38,
    titledist: 0
};
var rule87 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 37,
    titledist: 0
};
var rule88 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 64,
    titledist: 0
};
var rule89 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 63,
    titledist: 0
};
var rule9 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 32,
    titledist: 0
};
var rule95 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 8,
    titledist: 0
};
var rule98 = {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLT = 524288;
var rule129 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
};
var rule132 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -9 | 0,
    titledist: 0
};
var rule48 = {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 1,
    titledist: 0
};
var gencatLO = 262144;
var rule45 = {
    category: gencatLO,
    unicodeCat: NUMCAT_LO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLM = 1048576;
var rule83 = {
    category: gencatLM,
    unicodeCat: NUMCAT_LM.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatLL = 4096;
var rule100 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -54 | 0,
    lowdist: 0,
    titledist: -54 | 0
};
var rule101 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -8 | 0,
    lowdist: 0,
    titledist: -8 | 0
};
var rule102 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -86 | 0,
    lowdist: 0,
    titledist: -86 | 0
};
var rule103 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -80 | 0,
    lowdist: 0,
    titledist: -80 | 0
};
var rule104 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 7,
    lowdist: 0,
    titledist: 7
};
var rule106 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -96 | 0,
    lowdist: 0,
    titledist: -96 | 0
};
var rule111 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -15 | 0,
    lowdist: 0,
    titledist: -15 | 0
};
var rule113 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -48 | 0,
    lowdist: 0,
    titledist: -48 | 0
};
var rule117 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35332,
    lowdist: 0,
    titledist: 35332
};
var rule118 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 3814,
    lowdist: 0,
    titledist: 3814
};
var rule119 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -59 | 0,
    lowdist: 0,
    titledist: -59 | 0
};
var rule12 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -32 | 0,
    lowdist: 0,
    titledist: -32 | 0
};
var rule121 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 8,
    lowdist: 0,
    titledist: 8
};
var rule123 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 74,
    lowdist: 0,
    titledist: 74
};
var rule124 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 86,
    lowdist: 0,
    titledist: 86
};
var rule125 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 100,
    lowdist: 0,
    titledist: 100
};
var rule126 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 128,
    lowdist: 0,
    titledist: 128
};
var rule127 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 112,
    lowdist: 0,
    titledist: 112
};
var rule128 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 126,
    lowdist: 0,
    titledist: 126
};
var rule130 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 9,
    lowdist: 0,
    titledist: 9
};
var rule133 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7205 | 0,
    lowdist: 0,
    titledist: -7205 | 0
};
var rule14 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var rule145 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -28 | 0,
    lowdist: 0,
    titledist: -28 | 0
};
var rule153 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10795 | 0,
    lowdist: 0,
    titledist: -10795 | 0
};
var rule154 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10792 | 0,
    lowdist: 0,
    titledist: -10792 | 0
};
var rule160 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7264 | 0,
    lowdist: 0,
    titledist: -7264 | 0
};
var rule166 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -40 | 0,
    lowdist: 0,
    titledist: -40 | 0
};
var rule18 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 743,
    lowdist: 0,
    titledist: 743
};
var rule20 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 121,
    lowdist: 0,
    titledist: 121
};
var rule22 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 0,
    titledist: -1 | 0
};
var rule24 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -232 | 0,
    lowdist: 0,
    titledist: -232 | 0
};
var rule26 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -300 | 0,
    lowdist: 0,
    titledist: -300 | 0
};
var rule27 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 195,
    lowdist: 0,
    titledist: 195
};
var rule35 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 97,
    lowdist: 0,
    titledist: 97
};
var rule38 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 163,
    lowdist: 0,
    titledist: 163
};
var rule40 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 130,
    lowdist: 0,
    titledist: 130
};
var rule46 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 56,
    lowdist: 0,
    titledist: 56
};
var rule49 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -2 | 0,
    lowdist: 0,
    titledist: -1 | 0
};
var rule50 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -79 | 0,
    lowdist: 0,
    titledist: -79 | 0
};
var rule57 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10815,
    lowdist: 0,
    titledist: 10815
};
var rule61 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10783,
    lowdist: 0,
    titledist: 10783
};
var rule62 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10780,
    lowdist: 0,
    titledist: 10780
};
var rule63 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10782,
    lowdist: 0,
    titledist: 10782
};
var rule64 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -210 | 0,
    lowdist: 0,
    titledist: -210 | 0
};
var rule65 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -206 | 0,
    lowdist: 0,
    titledist: -206 | 0
};
var rule66 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -205 | 0,
    lowdist: 0,
    titledist: -205 | 0
};
var rule67 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -202 | 0,
    lowdist: 0,
    titledist: -202 | 0
};
var rule68 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -203 | 0,
    lowdist: 0,
    titledist: -203 | 0
};
var rule69 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -207 | 0,
    lowdist: 0,
    titledist: -207 | 0
};
var rule70 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42280,
    lowdist: 0,
    titledist: 42280
};
var rule71 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -209 | 0,
    lowdist: 0,
    titledist: -209 | 0
};
var rule72 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -211 | 0,
    lowdist: 0,
    titledist: -211 | 0
};
var rule73 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10743,
    lowdist: 0,
    titledist: 10743
};
var rule74 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10749,
    lowdist: 0,
    titledist: 10749
};
var rule75 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -213 | 0,
    lowdist: 0,
    titledist: -213 | 0
};
var rule76 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -214 | 0,
    lowdist: 0,
    titledist: -214 | 0
};
var rule77 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10727,
    lowdist: 0,
    titledist: 10727
};
var rule78 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -218 | 0,
    lowdist: 0,
    titledist: -218 | 0
};
var rule79 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -69 | 0,
    lowdist: 0,
    titledist: -69 | 0
};
var rule80 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -217 | 0,
    lowdist: 0,
    titledist: -217 | 0
};
var rule81 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -71 | 0,
    lowdist: 0,
    titledist: -71 | 0
};
var rule82 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -219 | 0,
    lowdist: 0,
    titledist: -219 | 0
};
var rule90 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -38 | 0,
    lowdist: 0,
    titledist: -38 | 0
};
var rule91 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -37 | 0,
    lowdist: 0,
    titledist: -37 | 0
};
var rule92 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -31 | 0,
    lowdist: 0,
    titledist: -31 | 0
};
var rule93 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -64 | 0,
    lowdist: 0,
    titledist: -64 | 0
};
var rule94 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -63 | 0,
    lowdist: 0,
    titledist: -63 | 0
};
var rule96 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -62 | 0,
    lowdist: 0,
    titledist: -62 | 0
};
var rule97 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -57 | 0,
    lowdist: 0,
    titledist: -57 | 0
};
var rule99 = {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -47 | 0,
    lowdist: 0,
    titledist: -47 | 0
};
var gencatCS = 134217728;
var rule163 = {
    category: gencatCS,
    unicodeCat: NUMCAT_CS.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCO = 268435456;
var rule164 = {
    category: gencatCO,
    unicodeCat: NUMCAT_CO.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCF = 32768;
var rule16 = {
    category: gencatCF,
    unicodeCat: NUMCAT_CF.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var gencatCC = 1;
var rule0 = {
    category: gencatCC,
    unicodeCat: NUMCAT_CC.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
};
var convchars = [ {
    start: 65,
    length: 26,
    convRule: rule9
}, {
    start: 97,
    length: 26,
    convRule: rule12
}, {
    start: 181,
    length: 1,
    convRule: rule18
}, {
    start: 192,
    length: 23,
    convRule: rule9
}, {
    start: 216,
    length: 7,
    convRule: rule9
}, {
    start: 224,
    length: 23,
    convRule: rule12
}, {
    start: 248,
    length: 7,
    convRule: rule12
}, {
    start: 255,
    length: 1,
    convRule: rule20
}, {
    start: 256,
    length: 1,
    convRule: rule21
}, {
    start: 257,
    length: 1,
    convRule: rule22
}, {
    start: 258,
    length: 1,
    convRule: rule21
}, {
    start: 259,
    length: 1,
    convRule: rule22
}, {
    start: 260,
    length: 1,
    convRule: rule21
}, {
    start: 261,
    length: 1,
    convRule: rule22
}, {
    start: 262,
    length: 1,
    convRule: rule21
}, {
    start: 263,
    length: 1,
    convRule: rule22
}, {
    start: 264,
    length: 1,
    convRule: rule21
}, {
    start: 265,
    length: 1,
    convRule: rule22
}, {
    start: 266,
    length: 1,
    convRule: rule21
}, {
    start: 267,
    length: 1,
    convRule: rule22
}, {
    start: 268,
    length: 1,
    convRule: rule21
}, {
    start: 269,
    length: 1,
    convRule: rule22
}, {
    start: 270,
    length: 1,
    convRule: rule21
}, {
    start: 271,
    length: 1,
    convRule: rule22
}, {
    start: 272,
    length: 1,
    convRule: rule21
}, {
    start: 273,
    length: 1,
    convRule: rule22
}, {
    start: 274,
    length: 1,
    convRule: rule21
}, {
    start: 275,
    length: 1,
    convRule: rule22
}, {
    start: 276,
    length: 1,
    convRule: rule21
}, {
    start: 277,
    length: 1,
    convRule: rule22
}, {
    start: 278,
    length: 1,
    convRule: rule21
}, {
    start: 279,
    length: 1,
    convRule: rule22
}, {
    start: 280,
    length: 1,
    convRule: rule21
}, {
    start: 281,
    length: 1,
    convRule: rule22
}, {
    start: 282,
    length: 1,
    convRule: rule21
}, {
    start: 283,
    length: 1,
    convRule: rule22
}, {
    start: 284,
    length: 1,
    convRule: rule21
}, {
    start: 285,
    length: 1,
    convRule: rule22
}, {
    start: 286,
    length: 1,
    convRule: rule21
}, {
    start: 287,
    length: 1,
    convRule: rule22
}, {
    start: 288,
    length: 1,
    convRule: rule21
}, {
    start: 289,
    length: 1,
    convRule: rule22
}, {
    start: 290,
    length: 1,
    convRule: rule21
}, {
    start: 291,
    length: 1,
    convRule: rule22
}, {
    start: 292,
    length: 1,
    convRule: rule21
}, {
    start: 293,
    length: 1,
    convRule: rule22
}, {
    start: 294,
    length: 1,
    convRule: rule21
}, {
    start: 295,
    length: 1,
    convRule: rule22
}, {
    start: 296,
    length: 1,
    convRule: rule21
}, {
    start: 297,
    length: 1,
    convRule: rule22
}, {
    start: 298,
    length: 1,
    convRule: rule21
}, {
    start: 299,
    length: 1,
    convRule: rule22
}, {
    start: 300,
    length: 1,
    convRule: rule21
}, {
    start: 301,
    length: 1,
    convRule: rule22
}, {
    start: 302,
    length: 1,
    convRule: rule21
}, {
    start: 303,
    length: 1,
    convRule: rule22
}, {
    start: 304,
    length: 1,
    convRule: rule23
}, {
    start: 305,
    length: 1,
    convRule: rule24
}, {
    start: 306,
    length: 1,
    convRule: rule21
}, {
    start: 307,
    length: 1,
    convRule: rule22
}, {
    start: 308,
    length: 1,
    convRule: rule21
}, {
    start: 309,
    length: 1,
    convRule: rule22
}, {
    start: 310,
    length: 1,
    convRule: rule21
}, {
    start: 311,
    length: 1,
    convRule: rule22
}, {
    start: 313,
    length: 1,
    convRule: rule21
}, {
    start: 314,
    length: 1,
    convRule: rule22
}, {
    start: 315,
    length: 1,
    convRule: rule21
}, {
    start: 316,
    length: 1,
    convRule: rule22
}, {
    start: 317,
    length: 1,
    convRule: rule21
}, {
    start: 318,
    length: 1,
    convRule: rule22
}, {
    start: 319,
    length: 1,
    convRule: rule21
}, {
    start: 320,
    length: 1,
    convRule: rule22
}, {
    start: 321,
    length: 1,
    convRule: rule21
}, {
    start: 322,
    length: 1,
    convRule: rule22
}, {
    start: 323,
    length: 1,
    convRule: rule21
}, {
    start: 324,
    length: 1,
    convRule: rule22
}, {
    start: 325,
    length: 1,
    convRule: rule21
}, {
    start: 326,
    length: 1,
    convRule: rule22
}, {
    start: 327,
    length: 1,
    convRule: rule21
}, {
    start: 328,
    length: 1,
    convRule: rule22
}, {
    start: 330,
    length: 1,
    convRule: rule21
}, {
    start: 331,
    length: 1,
    convRule: rule22
}, {
    start: 332,
    length: 1,
    convRule: rule21
}, {
    start: 333,
    length: 1,
    convRule: rule22
}, {
    start: 334,
    length: 1,
    convRule: rule21
}, {
    start: 335,
    length: 1,
    convRule: rule22
}, {
    start: 336,
    length: 1,
    convRule: rule21
}, {
    start: 337,
    length: 1,
    convRule: rule22
}, {
    start: 338,
    length: 1,
    convRule: rule21
}, {
    start: 339,
    length: 1,
    convRule: rule22
}, {
    start: 340,
    length: 1,
    convRule: rule21
}, {
    start: 341,
    length: 1,
    convRule: rule22
}, {
    start: 342,
    length: 1,
    convRule: rule21
}, {
    start: 343,
    length: 1,
    convRule: rule22
}, {
    start: 344,
    length: 1,
    convRule: rule21
}, {
    start: 345,
    length: 1,
    convRule: rule22
}, {
    start: 346,
    length: 1,
    convRule: rule21
}, {
    start: 347,
    length: 1,
    convRule: rule22
}, {
    start: 348,
    length: 1,
    convRule: rule21
}, {
    start: 349,
    length: 1,
    convRule: rule22
}, {
    start: 350,
    length: 1,
    convRule: rule21
}, {
    start: 351,
    length: 1,
    convRule: rule22
}, {
    start: 352,
    length: 1,
    convRule: rule21
}, {
    start: 353,
    length: 1,
    convRule: rule22
}, {
    start: 354,
    length: 1,
    convRule: rule21
}, {
    start: 355,
    length: 1,
    convRule: rule22
}, {
    start: 356,
    length: 1,
    convRule: rule21
}, {
    start: 357,
    length: 1,
    convRule: rule22
}, {
    start: 358,
    length: 1,
    convRule: rule21
}, {
    start: 359,
    length: 1,
    convRule: rule22
}, {
    start: 360,
    length: 1,
    convRule: rule21
}, {
    start: 361,
    length: 1,
    convRule: rule22
}, {
    start: 362,
    length: 1,
    convRule: rule21
}, {
    start: 363,
    length: 1,
    convRule: rule22
}, {
    start: 364,
    length: 1,
    convRule: rule21
}, {
    start: 365,
    length: 1,
    convRule: rule22
}, {
    start: 366,
    length: 1,
    convRule: rule21
}, {
    start: 367,
    length: 1,
    convRule: rule22
}, {
    start: 368,
    length: 1,
    convRule: rule21
}, {
    start: 369,
    length: 1,
    convRule: rule22
}, {
    start: 370,
    length: 1,
    convRule: rule21
}, {
    start: 371,
    length: 1,
    convRule: rule22
}, {
    start: 372,
    length: 1,
    convRule: rule21
}, {
    start: 373,
    length: 1,
    convRule: rule22
}, {
    start: 374,
    length: 1,
    convRule: rule21
}, {
    start: 375,
    length: 1,
    convRule: rule22
}, {
    start: 376,
    length: 1,
    convRule: rule25
}, {
    start: 377,
    length: 1,
    convRule: rule21
}, {
    start: 378,
    length: 1,
    convRule: rule22
}, {
    start: 379,
    length: 1,
    convRule: rule21
}, {
    start: 380,
    length: 1,
    convRule: rule22
}, {
    start: 381,
    length: 1,
    convRule: rule21
}, {
    start: 382,
    length: 1,
    convRule: rule22
}, {
    start: 383,
    length: 1,
    convRule: rule26
}, {
    start: 384,
    length: 1,
    convRule: rule27
}, {
    start: 385,
    length: 1,
    convRule: rule28
}, {
    start: 386,
    length: 1,
    convRule: rule21
}, {
    start: 387,
    length: 1,
    convRule: rule22
}, {
    start: 388,
    length: 1,
    convRule: rule21
}, {
    start: 389,
    length: 1,
    convRule: rule22
}, {
    start: 390,
    length: 1,
    convRule: rule29
}, {
    start: 391,
    length: 1,
    convRule: rule21
}, {
    start: 392,
    length: 1,
    convRule: rule22
}, {
    start: 393,
    length: 2,
    convRule: rule30
}, {
    start: 395,
    length: 1,
    convRule: rule21
}, {
    start: 396,
    length: 1,
    convRule: rule22
}, {
    start: 398,
    length: 1,
    convRule: rule31
}, {
    start: 399,
    length: 1,
    convRule: rule32
}, {
    start: 400,
    length: 1,
    convRule: rule33
}, {
    start: 401,
    length: 1,
    convRule: rule21
}, {
    start: 402,
    length: 1,
    convRule: rule22
}, {
    start: 403,
    length: 1,
    convRule: rule30
}, {
    start: 404,
    length: 1,
    convRule: rule34
}, {
    start: 405,
    length: 1,
    convRule: rule35
}, {
    start: 406,
    length: 1,
    convRule: rule36
}, {
    start: 407,
    length: 1,
    convRule: rule37
}, {
    start: 408,
    length: 1,
    convRule: rule21
}, {
    start: 409,
    length: 1,
    convRule: rule22
}, {
    start: 410,
    length: 1,
    convRule: rule38
}, {
    start: 412,
    length: 1,
    convRule: rule36
}, {
    start: 413,
    length: 1,
    convRule: rule39
}, {
    start: 414,
    length: 1,
    convRule: rule40
}, {
    start: 415,
    length: 1,
    convRule: rule41
}, {
    start: 416,
    length: 1,
    convRule: rule21
}, {
    start: 417,
    length: 1,
    convRule: rule22
}, {
    start: 418,
    length: 1,
    convRule: rule21
}, {
    start: 419,
    length: 1,
    convRule: rule22
}, {
    start: 420,
    length: 1,
    convRule: rule21
}, {
    start: 421,
    length: 1,
    convRule: rule22
}, {
    start: 422,
    length: 1,
    convRule: rule42
}, {
    start: 423,
    length: 1,
    convRule: rule21
}, {
    start: 424,
    length: 1,
    convRule: rule22
}, {
    start: 425,
    length: 1,
    convRule: rule42
}, {
    start: 428,
    length: 1,
    convRule: rule21
}, {
    start: 429,
    length: 1,
    convRule: rule22
}, {
    start: 430,
    length: 1,
    convRule: rule42
}, {
    start: 431,
    length: 1,
    convRule: rule21
}, {
    start: 432,
    length: 1,
    convRule: rule22
}, {
    start: 433,
    length: 2,
    convRule: rule43
}, {
    start: 435,
    length: 1,
    convRule: rule21
}, {
    start: 436,
    length: 1,
    convRule: rule22
}, {
    start: 437,
    length: 1,
    convRule: rule21
}, {
    start: 438,
    length: 1,
    convRule: rule22
}, {
    start: 439,
    length: 1,
    convRule: rule44
}, {
    start: 440,
    length: 1,
    convRule: rule21
}, {
    start: 441,
    length: 1,
    convRule: rule22
}, {
    start: 444,
    length: 1,
    convRule: rule21
}, {
    start: 445,
    length: 1,
    convRule: rule22
}, {
    start: 447,
    length: 1,
    convRule: rule46
}, {
    start: 452,
    length: 1,
    convRule: rule47
}, {
    start: 453,
    length: 1,
    convRule: rule48
}, {
    start: 454,
    length: 1,
    convRule: rule49
}, {
    start: 455,
    length: 1,
    convRule: rule47
}, {
    start: 456,
    length: 1,
    convRule: rule48
}, {
    start: 457,
    length: 1,
    convRule: rule49
}, {
    start: 458,
    length: 1,
    convRule: rule47
}, {
    start: 459,
    length: 1,
    convRule: rule48
}, {
    start: 460,
    length: 1,
    convRule: rule49
}, {
    start: 461,
    length: 1,
    convRule: rule21
}, {
    start: 462,
    length: 1,
    convRule: rule22
}, {
    start: 463,
    length: 1,
    convRule: rule21
}, {
    start: 464,
    length: 1,
    convRule: rule22
}, {
    start: 465,
    length: 1,
    convRule: rule21
}, {
    start: 466,
    length: 1,
    convRule: rule22
}, {
    start: 467,
    length: 1,
    convRule: rule21
}, {
    start: 468,
    length: 1,
    convRule: rule22
}, {
    start: 469,
    length: 1,
    convRule: rule21
}, {
    start: 470,
    length: 1,
    convRule: rule22
}, {
    start: 471,
    length: 1,
    convRule: rule21
}, {
    start: 472,
    length: 1,
    convRule: rule22
}, {
    start: 473,
    length: 1,
    convRule: rule21
}, {
    start: 474,
    length: 1,
    convRule: rule22
}, {
    start: 475,
    length: 1,
    convRule: rule21
}, {
    start: 476,
    length: 1,
    convRule: rule22
}, {
    start: 477,
    length: 1,
    convRule: rule50
}, {
    start: 478,
    length: 1,
    convRule: rule21
}, {
    start: 479,
    length: 1,
    convRule: rule22
}, {
    start: 480,
    length: 1,
    convRule: rule21
}, {
    start: 481,
    length: 1,
    convRule: rule22
}, {
    start: 482,
    length: 1,
    convRule: rule21
}, {
    start: 483,
    length: 1,
    convRule: rule22
}, {
    start: 484,
    length: 1,
    convRule: rule21
}, {
    start: 485,
    length: 1,
    convRule: rule22
}, {
    start: 486,
    length: 1,
    convRule: rule21
}, {
    start: 487,
    length: 1,
    convRule: rule22
}, {
    start: 488,
    length: 1,
    convRule: rule21
}, {
    start: 489,
    length: 1,
    convRule: rule22
}, {
    start: 490,
    length: 1,
    convRule: rule21
}, {
    start: 491,
    length: 1,
    convRule: rule22
}, {
    start: 492,
    length: 1,
    convRule: rule21
}, {
    start: 493,
    length: 1,
    convRule: rule22
}, {
    start: 494,
    length: 1,
    convRule: rule21
}, {
    start: 495,
    length: 1,
    convRule: rule22
}, {
    start: 497,
    length: 1,
    convRule: rule47
}, {
    start: 498,
    length: 1,
    convRule: rule48
}, {
    start: 499,
    length: 1,
    convRule: rule49
}, {
    start: 500,
    length: 1,
    convRule: rule21
}, {
    start: 501,
    length: 1,
    convRule: rule22
}, {
    start: 502,
    length: 1,
    convRule: rule51
}, {
    start: 503,
    length: 1,
    convRule: rule52
}, {
    start: 504,
    length: 1,
    convRule: rule21
}, {
    start: 505,
    length: 1,
    convRule: rule22
}, {
    start: 506,
    length: 1,
    convRule: rule21
}, {
    start: 507,
    length: 1,
    convRule: rule22
}, {
    start: 508,
    length: 1,
    convRule: rule21
}, {
    start: 509,
    length: 1,
    convRule: rule22
}, {
    start: 510,
    length: 1,
    convRule: rule21
}, {
    start: 511,
    length: 1,
    convRule: rule22
}, {
    start: 512,
    length: 1,
    convRule: rule21
}, {
    start: 513,
    length: 1,
    convRule: rule22
}, {
    start: 514,
    length: 1,
    convRule: rule21
}, {
    start: 515,
    length: 1,
    convRule: rule22
}, {
    start: 516,
    length: 1,
    convRule: rule21
}, {
    start: 517,
    length: 1,
    convRule: rule22
}, {
    start: 518,
    length: 1,
    convRule: rule21
}, {
    start: 519,
    length: 1,
    convRule: rule22
}, {
    start: 520,
    length: 1,
    convRule: rule21
}, {
    start: 521,
    length: 1,
    convRule: rule22
}, {
    start: 522,
    length: 1,
    convRule: rule21
}, {
    start: 523,
    length: 1,
    convRule: rule22
}, {
    start: 524,
    length: 1,
    convRule: rule21
}, {
    start: 525,
    length: 1,
    convRule: rule22
}, {
    start: 526,
    length: 1,
    convRule: rule21
}, {
    start: 527,
    length: 1,
    convRule: rule22
}, {
    start: 528,
    length: 1,
    convRule: rule21
}, {
    start: 529,
    length: 1,
    convRule: rule22
}, {
    start: 530,
    length: 1,
    convRule: rule21
}, {
    start: 531,
    length: 1,
    convRule: rule22
}, {
    start: 532,
    length: 1,
    convRule: rule21
}, {
    start: 533,
    length: 1,
    convRule: rule22
}, {
    start: 534,
    length: 1,
    convRule: rule21
}, {
    start: 535,
    length: 1,
    convRule: rule22
}, {
    start: 536,
    length: 1,
    convRule: rule21
}, {
    start: 537,
    length: 1,
    convRule: rule22
}, {
    start: 538,
    length: 1,
    convRule: rule21
}, {
    start: 539,
    length: 1,
    convRule: rule22
}, {
    start: 540,
    length: 1,
    convRule: rule21
}, {
    start: 541,
    length: 1,
    convRule: rule22
}, {
    start: 542,
    length: 1,
    convRule: rule21
}, {
    start: 543,
    length: 1,
    convRule: rule22
}, {
    start: 544,
    length: 1,
    convRule: rule53
}, {
    start: 546,
    length: 1,
    convRule: rule21
}, {
    start: 547,
    length: 1,
    convRule: rule22
}, {
    start: 548,
    length: 1,
    convRule: rule21
}, {
    start: 549,
    length: 1,
    convRule: rule22
}, {
    start: 550,
    length: 1,
    convRule: rule21
}, {
    start: 551,
    length: 1,
    convRule: rule22
}, {
    start: 552,
    length: 1,
    convRule: rule21
}, {
    start: 553,
    length: 1,
    convRule: rule22
}, {
    start: 554,
    length: 1,
    convRule: rule21
}, {
    start: 555,
    length: 1,
    convRule: rule22
}, {
    start: 556,
    length: 1,
    convRule: rule21
}, {
    start: 557,
    length: 1,
    convRule: rule22
}, {
    start: 558,
    length: 1,
    convRule: rule21
}, {
    start: 559,
    length: 1,
    convRule: rule22
}, {
    start: 560,
    length: 1,
    convRule: rule21
}, {
    start: 561,
    length: 1,
    convRule: rule22
}, {
    start: 562,
    length: 1,
    convRule: rule21
}, {
    start: 563,
    length: 1,
    convRule: rule22
}, {
    start: 570,
    length: 1,
    convRule: rule54
}, {
    start: 571,
    length: 1,
    convRule: rule21
}, {
    start: 572,
    length: 1,
    convRule: rule22
}, {
    start: 573,
    length: 1,
    convRule: rule55
}, {
    start: 574,
    length: 1,
    convRule: rule56
}, {
    start: 575,
    length: 2,
    convRule: rule57
}, {
    start: 577,
    length: 1,
    convRule: rule21
}, {
    start: 578,
    length: 1,
    convRule: rule22
}, {
    start: 579,
    length: 1,
    convRule: rule58
}, {
    start: 580,
    length: 1,
    convRule: rule59
}, {
    start: 581,
    length: 1,
    convRule: rule60
}, {
    start: 582,
    length: 1,
    convRule: rule21
}, {
    start: 583,
    length: 1,
    convRule: rule22
}, {
    start: 584,
    length: 1,
    convRule: rule21
}, {
    start: 585,
    length: 1,
    convRule: rule22
}, {
    start: 586,
    length: 1,
    convRule: rule21
}, {
    start: 587,
    length: 1,
    convRule: rule22
}, {
    start: 588,
    length: 1,
    convRule: rule21
}, {
    start: 589,
    length: 1,
    convRule: rule22
}, {
    start: 590,
    length: 1,
    convRule: rule21
}, {
    start: 591,
    length: 1,
    convRule: rule22
}, {
    start: 592,
    length: 1,
    convRule: rule61
}, {
    start: 593,
    length: 1,
    convRule: rule62
}, {
    start: 594,
    length: 1,
    convRule: rule63
}, {
    start: 595,
    length: 1,
    convRule: rule64
}, {
    start: 596,
    length: 1,
    convRule: rule65
}, {
    start: 598,
    length: 2,
    convRule: rule66
}, {
    start: 601,
    length: 1,
    convRule: rule67
}, {
    start: 603,
    length: 1,
    convRule: rule68
}, {
    start: 608,
    length: 1,
    convRule: rule66
}, {
    start: 611,
    length: 1,
    convRule: rule69
}, {
    start: 613,
    length: 1,
    convRule: rule70
}, {
    start: 616,
    length: 1,
    convRule: rule71
}, {
    start: 617,
    length: 1,
    convRule: rule72
}, {
    start: 619,
    length: 1,
    convRule: rule73
}, {
    start: 623,
    length: 1,
    convRule: rule72
}, {
    start: 625,
    length: 1,
    convRule: rule74
}, {
    start: 626,
    length: 1,
    convRule: rule75
}, {
    start: 629,
    length: 1,
    convRule: rule76
}, {
    start: 637,
    length: 1,
    convRule: rule77
}, {
    start: 640,
    length: 1,
    convRule: rule78
}, {
    start: 643,
    length: 1,
    convRule: rule78
}, {
    start: 648,
    length: 1,
    convRule: rule78
}, {
    start: 649,
    length: 1,
    convRule: rule79
}, {
    start: 650,
    length: 2,
    convRule: rule80
}, {
    start: 652,
    length: 1,
    convRule: rule81
}, {
    start: 658,
    length: 1,
    convRule: rule82
}, {
    start: 837,
    length: 1,
    convRule: rule85
}, {
    start: 880,
    length: 1,
    convRule: rule21
}, {
    start: 881,
    length: 1,
    convRule: rule22
}, {
    start: 882,
    length: 1,
    convRule: rule21
}, {
    start: 883,
    length: 1,
    convRule: rule22
}, {
    start: 886,
    length: 1,
    convRule: rule21
}, {
    start: 887,
    length: 1,
    convRule: rule22
}, {
    start: 891,
    length: 3,
    convRule: rule40
}, {
    start: 902,
    length: 1,
    convRule: rule86
}, {
    start: 904,
    length: 3,
    convRule: rule87
}, {
    start: 908,
    length: 1,
    convRule: rule88
}, {
    start: 910,
    length: 2,
    convRule: rule89
}, {
    start: 913,
    length: 17,
    convRule: rule9
}, {
    start: 931,
    length: 9,
    convRule: rule9
}, {
    start: 940,
    length: 1,
    convRule: rule90
}, {
    start: 941,
    length: 3,
    convRule: rule91
}, {
    start: 945,
    length: 17,
    convRule: rule12
}, {
    start: 962,
    length: 1,
    convRule: rule92
}, {
    start: 963,
    length: 9,
    convRule: rule12
}, {
    start: 972,
    length: 1,
    convRule: rule93
}, {
    start: 973,
    length: 2,
    convRule: rule94
}, {
    start: 975,
    length: 1,
    convRule: rule95
}, {
    start: 976,
    length: 1,
    convRule: rule96
}, {
    start: 977,
    length: 1,
    convRule: rule97
}, {
    start: 981,
    length: 1,
    convRule: rule99
}, {
    start: 982,
    length: 1,
    convRule: rule100
}, {
    start: 983,
    length: 1,
    convRule: rule101
}, {
    start: 984,
    length: 1,
    convRule: rule21
}, {
    start: 985,
    length: 1,
    convRule: rule22
}, {
    start: 986,
    length: 1,
    convRule: rule21
}, {
    start: 987,
    length: 1,
    convRule: rule22
}, {
    start: 988,
    length: 1,
    convRule: rule21
}, {
    start: 989,
    length: 1,
    convRule: rule22
}, {
    start: 990,
    length: 1,
    convRule: rule21
}, {
    start: 991,
    length: 1,
    convRule: rule22
}, {
    start: 992,
    length: 1,
    convRule: rule21
}, {
    start: 993,
    length: 1,
    convRule: rule22
}, {
    start: 994,
    length: 1,
    convRule: rule21
}, {
    start: 995,
    length: 1,
    convRule: rule22
}, {
    start: 996,
    length: 1,
    convRule: rule21
}, {
    start: 997,
    length: 1,
    convRule: rule22
}, {
    start: 998,
    length: 1,
    convRule: rule21
}, {
    start: 999,
    length: 1,
    convRule: rule22
}, {
    start: 1000,
    length: 1,
    convRule: rule21
}, {
    start: 1001,
    length: 1,
    convRule: rule22
}, {
    start: 1002,
    length: 1,
    convRule: rule21
}, {
    start: 1003,
    length: 1,
    convRule: rule22
}, {
    start: 1004,
    length: 1,
    convRule: rule21
}, {
    start: 1005,
    length: 1,
    convRule: rule22
}, {
    start: 1006,
    length: 1,
    convRule: rule21
}, {
    start: 1007,
    length: 1,
    convRule: rule22
}, {
    start: 1008,
    length: 1,
    convRule: rule102
}, {
    start: 1009,
    length: 1,
    convRule: rule103
}, {
    start: 1010,
    length: 1,
    convRule: rule104
}, {
    start: 1012,
    length: 1,
    convRule: rule105
}, {
    start: 1013,
    length: 1,
    convRule: rule106
}, {
    start: 1015,
    length: 1,
    convRule: rule21
}, {
    start: 1016,
    length: 1,
    convRule: rule22
}, {
    start: 1017,
    length: 1,
    convRule: rule107
}, {
    start: 1018,
    length: 1,
    convRule: rule21
}, {
    start: 1019,
    length: 1,
    convRule: rule22
}, {
    start: 1021,
    length: 3,
    convRule: rule53
}, {
    start: 1024,
    length: 16,
    convRule: rule108
}, {
    start: 1040,
    length: 32,
    convRule: rule9
}, {
    start: 1072,
    length: 32,
    convRule: rule12
}, {
    start: 1104,
    length: 16,
    convRule: rule103
}, {
    start: 1120,
    length: 1,
    convRule: rule21
}, {
    start: 1121,
    length: 1,
    convRule: rule22
}, {
    start: 1122,
    length: 1,
    convRule: rule21
}, {
    start: 1123,
    length: 1,
    convRule: rule22
}, {
    start: 1124,
    length: 1,
    convRule: rule21
}, {
    start: 1125,
    length: 1,
    convRule: rule22
}, {
    start: 1126,
    length: 1,
    convRule: rule21
}, {
    start: 1127,
    length: 1,
    convRule: rule22
}, {
    start: 1128,
    length: 1,
    convRule: rule21
}, {
    start: 1129,
    length: 1,
    convRule: rule22
}, {
    start: 1130,
    length: 1,
    convRule: rule21
}, {
    start: 1131,
    length: 1,
    convRule: rule22
}, {
    start: 1132,
    length: 1,
    convRule: rule21
}, {
    start: 1133,
    length: 1,
    convRule: rule22
}, {
    start: 1134,
    length: 1,
    convRule: rule21
}, {
    start: 1135,
    length: 1,
    convRule: rule22
}, {
    start: 1136,
    length: 1,
    convRule: rule21
}, {
    start: 1137,
    length: 1,
    convRule: rule22
}, {
    start: 1138,
    length: 1,
    convRule: rule21
}, {
    start: 1139,
    length: 1,
    convRule: rule22
}, {
    start: 1140,
    length: 1,
    convRule: rule21
}, {
    start: 1141,
    length: 1,
    convRule: rule22
}, {
    start: 1142,
    length: 1,
    convRule: rule21
}, {
    start: 1143,
    length: 1,
    convRule: rule22
}, {
    start: 1144,
    length: 1,
    convRule: rule21
}, {
    start: 1145,
    length: 1,
    convRule: rule22
}, {
    start: 1146,
    length: 1,
    convRule: rule21
}, {
    start: 1147,
    length: 1,
    convRule: rule22
}, {
    start: 1148,
    length: 1,
    convRule: rule21
}, {
    start: 1149,
    length: 1,
    convRule: rule22
}, {
    start: 1150,
    length: 1,
    convRule: rule21
}, {
    start: 1151,
    length: 1,
    convRule: rule22
}, {
    start: 1152,
    length: 1,
    convRule: rule21
}, {
    start: 1153,
    length: 1,
    convRule: rule22
}, {
    start: 1162,
    length: 1,
    convRule: rule21
}, {
    start: 1163,
    length: 1,
    convRule: rule22
}, {
    start: 1164,
    length: 1,
    convRule: rule21
}, {
    start: 1165,
    length: 1,
    convRule: rule22
}, {
    start: 1166,
    length: 1,
    convRule: rule21
}, {
    start: 1167,
    length: 1,
    convRule: rule22
}, {
    start: 1168,
    length: 1,
    convRule: rule21
}, {
    start: 1169,
    length: 1,
    convRule: rule22
}, {
    start: 1170,
    length: 1,
    convRule: rule21
}, {
    start: 1171,
    length: 1,
    convRule: rule22
}, {
    start: 1172,
    length: 1,
    convRule: rule21
}, {
    start: 1173,
    length: 1,
    convRule: rule22
}, {
    start: 1174,
    length: 1,
    convRule: rule21
}, {
    start: 1175,
    length: 1,
    convRule: rule22
}, {
    start: 1176,
    length: 1,
    convRule: rule21
}, {
    start: 1177,
    length: 1,
    convRule: rule22
}, {
    start: 1178,
    length: 1,
    convRule: rule21
}, {
    start: 1179,
    length: 1,
    convRule: rule22
}, {
    start: 1180,
    length: 1,
    convRule: rule21
}, {
    start: 1181,
    length: 1,
    convRule: rule22
}, {
    start: 1182,
    length: 1,
    convRule: rule21
}, {
    start: 1183,
    length: 1,
    convRule: rule22
}, {
    start: 1184,
    length: 1,
    convRule: rule21
}, {
    start: 1185,
    length: 1,
    convRule: rule22
}, {
    start: 1186,
    length: 1,
    convRule: rule21
}, {
    start: 1187,
    length: 1,
    convRule: rule22
}, {
    start: 1188,
    length: 1,
    convRule: rule21
}, {
    start: 1189,
    length: 1,
    convRule: rule22
}, {
    start: 1190,
    length: 1,
    convRule: rule21
}, {
    start: 1191,
    length: 1,
    convRule: rule22
}, {
    start: 1192,
    length: 1,
    convRule: rule21
}, {
    start: 1193,
    length: 1,
    convRule: rule22
}, {
    start: 1194,
    length: 1,
    convRule: rule21
}, {
    start: 1195,
    length: 1,
    convRule: rule22
}, {
    start: 1196,
    length: 1,
    convRule: rule21
}, {
    start: 1197,
    length: 1,
    convRule: rule22
}, {
    start: 1198,
    length: 1,
    convRule: rule21
}, {
    start: 1199,
    length: 1,
    convRule: rule22
}, {
    start: 1200,
    length: 1,
    convRule: rule21
}, {
    start: 1201,
    length: 1,
    convRule: rule22
}, {
    start: 1202,
    length: 1,
    convRule: rule21
}, {
    start: 1203,
    length: 1,
    convRule: rule22
}, {
    start: 1204,
    length: 1,
    convRule: rule21
}, {
    start: 1205,
    length: 1,
    convRule: rule22
}, {
    start: 1206,
    length: 1,
    convRule: rule21
}, {
    start: 1207,
    length: 1,
    convRule: rule22
}, {
    start: 1208,
    length: 1,
    convRule: rule21
}, {
    start: 1209,
    length: 1,
    convRule: rule22
}, {
    start: 1210,
    length: 1,
    convRule: rule21
}, {
    start: 1211,
    length: 1,
    convRule: rule22
}, {
    start: 1212,
    length: 1,
    convRule: rule21
}, {
    start: 1213,
    length: 1,
    convRule: rule22
}, {
    start: 1214,
    length: 1,
    convRule: rule21
}, {
    start: 1215,
    length: 1,
    convRule: rule22
}, {
    start: 1216,
    length: 1,
    convRule: rule110
}, {
    start: 1217,
    length: 1,
    convRule: rule21
}, {
    start: 1218,
    length: 1,
    convRule: rule22
}, {
    start: 1219,
    length: 1,
    convRule: rule21
}, {
    start: 1220,
    length: 1,
    convRule: rule22
}, {
    start: 1221,
    length: 1,
    convRule: rule21
}, {
    start: 1222,
    length: 1,
    convRule: rule22
}, {
    start: 1223,
    length: 1,
    convRule: rule21
}, {
    start: 1224,
    length: 1,
    convRule: rule22
}, {
    start: 1225,
    length: 1,
    convRule: rule21
}, {
    start: 1226,
    length: 1,
    convRule: rule22
}, {
    start: 1227,
    length: 1,
    convRule: rule21
}, {
    start: 1228,
    length: 1,
    convRule: rule22
}, {
    start: 1229,
    length: 1,
    convRule: rule21
}, {
    start: 1230,
    length: 1,
    convRule: rule22
}, {
    start: 1231,
    length: 1,
    convRule: rule111
}, {
    start: 1232,
    length: 1,
    convRule: rule21
}, {
    start: 1233,
    length: 1,
    convRule: rule22
}, {
    start: 1234,
    length: 1,
    convRule: rule21
}, {
    start: 1235,
    length: 1,
    convRule: rule22
}, {
    start: 1236,
    length: 1,
    convRule: rule21
}, {
    start: 1237,
    length: 1,
    convRule: rule22
}, {
    start: 1238,
    length: 1,
    convRule: rule21
}, {
    start: 1239,
    length: 1,
    convRule: rule22
}, {
    start: 1240,
    length: 1,
    convRule: rule21
}, {
    start: 1241,
    length: 1,
    convRule: rule22
}, {
    start: 1242,
    length: 1,
    convRule: rule21
}, {
    start: 1243,
    length: 1,
    convRule: rule22
}, {
    start: 1244,
    length: 1,
    convRule: rule21
}, {
    start: 1245,
    length: 1,
    convRule: rule22
}, {
    start: 1246,
    length: 1,
    convRule: rule21
}, {
    start: 1247,
    length: 1,
    convRule: rule22
}, {
    start: 1248,
    length: 1,
    convRule: rule21
}, {
    start: 1249,
    length: 1,
    convRule: rule22
}, {
    start: 1250,
    length: 1,
    convRule: rule21
}, {
    start: 1251,
    length: 1,
    convRule: rule22
}, {
    start: 1252,
    length: 1,
    convRule: rule21
}, {
    start: 1253,
    length: 1,
    convRule: rule22
}, {
    start: 1254,
    length: 1,
    convRule: rule21
}, {
    start: 1255,
    length: 1,
    convRule: rule22
}, {
    start: 1256,
    length: 1,
    convRule: rule21
}, {
    start: 1257,
    length: 1,
    convRule: rule22
}, {
    start: 1258,
    length: 1,
    convRule: rule21
}, {
    start: 1259,
    length: 1,
    convRule: rule22
}, {
    start: 1260,
    length: 1,
    convRule: rule21
}, {
    start: 1261,
    length: 1,
    convRule: rule22
}, {
    start: 1262,
    length: 1,
    convRule: rule21
}, {
    start: 1263,
    length: 1,
    convRule: rule22
}, {
    start: 1264,
    length: 1,
    convRule: rule21
}, {
    start: 1265,
    length: 1,
    convRule: rule22
}, {
    start: 1266,
    length: 1,
    convRule: rule21
}, {
    start: 1267,
    length: 1,
    convRule: rule22
}, {
    start: 1268,
    length: 1,
    convRule: rule21
}, {
    start: 1269,
    length: 1,
    convRule: rule22
}, {
    start: 1270,
    length: 1,
    convRule: rule21
}, {
    start: 1271,
    length: 1,
    convRule: rule22
}, {
    start: 1272,
    length: 1,
    convRule: rule21
}, {
    start: 1273,
    length: 1,
    convRule: rule22
}, {
    start: 1274,
    length: 1,
    convRule: rule21
}, {
    start: 1275,
    length: 1,
    convRule: rule22
}, {
    start: 1276,
    length: 1,
    convRule: rule21
}, {
    start: 1277,
    length: 1,
    convRule: rule22
}, {
    start: 1278,
    length: 1,
    convRule: rule21
}, {
    start: 1279,
    length: 1,
    convRule: rule22
}, {
    start: 1280,
    length: 1,
    convRule: rule21
}, {
    start: 1281,
    length: 1,
    convRule: rule22
}, {
    start: 1282,
    length: 1,
    convRule: rule21
}, {
    start: 1283,
    length: 1,
    convRule: rule22
}, {
    start: 1284,
    length: 1,
    convRule: rule21
}, {
    start: 1285,
    length: 1,
    convRule: rule22
}, {
    start: 1286,
    length: 1,
    convRule: rule21
}, {
    start: 1287,
    length: 1,
    convRule: rule22
}, {
    start: 1288,
    length: 1,
    convRule: rule21
}, {
    start: 1289,
    length: 1,
    convRule: rule22
}, {
    start: 1290,
    length: 1,
    convRule: rule21
}, {
    start: 1291,
    length: 1,
    convRule: rule22
}, {
    start: 1292,
    length: 1,
    convRule: rule21
}, {
    start: 1293,
    length: 1,
    convRule: rule22
}, {
    start: 1294,
    length: 1,
    convRule: rule21
}, {
    start: 1295,
    length: 1,
    convRule: rule22
}, {
    start: 1296,
    length: 1,
    convRule: rule21
}, {
    start: 1297,
    length: 1,
    convRule: rule22
}, {
    start: 1298,
    length: 1,
    convRule: rule21
}, {
    start: 1299,
    length: 1,
    convRule: rule22
}, {
    start: 1300,
    length: 1,
    convRule: rule21
}, {
    start: 1301,
    length: 1,
    convRule: rule22
}, {
    start: 1302,
    length: 1,
    convRule: rule21
}, {
    start: 1303,
    length: 1,
    convRule: rule22
}, {
    start: 1304,
    length: 1,
    convRule: rule21
}, {
    start: 1305,
    length: 1,
    convRule: rule22
}, {
    start: 1306,
    length: 1,
    convRule: rule21
}, {
    start: 1307,
    length: 1,
    convRule: rule22
}, {
    start: 1308,
    length: 1,
    convRule: rule21
}, {
    start: 1309,
    length: 1,
    convRule: rule22
}, {
    start: 1310,
    length: 1,
    convRule: rule21
}, {
    start: 1311,
    length: 1,
    convRule: rule22
}, {
    start: 1312,
    length: 1,
    convRule: rule21
}, {
    start: 1313,
    length: 1,
    convRule: rule22
}, {
    start: 1314,
    length: 1,
    convRule: rule21
}, {
    start: 1315,
    length: 1,
    convRule: rule22
}, {
    start: 1316,
    length: 1,
    convRule: rule21
}, {
    start: 1317,
    length: 1,
    convRule: rule22
}, {
    start: 1318,
    length: 1,
    convRule: rule21
}, {
    start: 1319,
    length: 1,
    convRule: rule22
}, {
    start: 1329,
    length: 38,
    convRule: rule112
}, {
    start: 1377,
    length: 38,
    convRule: rule113
}, {
    start: 4256,
    length: 38,
    convRule: rule115
}, {
    start: 7545,
    length: 1,
    convRule: rule117
}, {
    start: 7549,
    length: 1,
    convRule: rule118
}, {
    start: 7680,
    length: 1,
    convRule: rule21
}, {
    start: 7681,
    length: 1,
    convRule: rule22
}, {
    start: 7682,
    length: 1,
    convRule: rule21
}, {
    start: 7683,
    length: 1,
    convRule: rule22
}, {
    start: 7684,
    length: 1,
    convRule: rule21
}, {
    start: 7685,
    length: 1,
    convRule: rule22
}, {
    start: 7686,
    length: 1,
    convRule: rule21
}, {
    start: 7687,
    length: 1,
    convRule: rule22
}, {
    start: 7688,
    length: 1,
    convRule: rule21
}, {
    start: 7689,
    length: 1,
    convRule: rule22
}, {
    start: 7690,
    length: 1,
    convRule: rule21
}, {
    start: 7691,
    length: 1,
    convRule: rule22
}, {
    start: 7692,
    length: 1,
    convRule: rule21
}, {
    start: 7693,
    length: 1,
    convRule: rule22
}, {
    start: 7694,
    length: 1,
    convRule: rule21
}, {
    start: 7695,
    length: 1,
    convRule: rule22
}, {
    start: 7696,
    length: 1,
    convRule: rule21
}, {
    start: 7697,
    length: 1,
    convRule: rule22
}, {
    start: 7698,
    length: 1,
    convRule: rule21
}, {
    start: 7699,
    length: 1,
    convRule: rule22
}, {
    start: 7700,
    length: 1,
    convRule: rule21
}, {
    start: 7701,
    length: 1,
    convRule: rule22
}, {
    start: 7702,
    length: 1,
    convRule: rule21
}, {
    start: 7703,
    length: 1,
    convRule: rule22
}, {
    start: 7704,
    length: 1,
    convRule: rule21
}, {
    start: 7705,
    length: 1,
    convRule: rule22
}, {
    start: 7706,
    length: 1,
    convRule: rule21
}, {
    start: 7707,
    length: 1,
    convRule: rule22
}, {
    start: 7708,
    length: 1,
    convRule: rule21
}, {
    start: 7709,
    length: 1,
    convRule: rule22
}, {
    start: 7710,
    length: 1,
    convRule: rule21
}, {
    start: 7711,
    length: 1,
    convRule: rule22
}, {
    start: 7712,
    length: 1,
    convRule: rule21
}, {
    start: 7713,
    length: 1,
    convRule: rule22
}, {
    start: 7714,
    length: 1,
    convRule: rule21
}, {
    start: 7715,
    length: 1,
    convRule: rule22
}, {
    start: 7716,
    length: 1,
    convRule: rule21
}, {
    start: 7717,
    length: 1,
    convRule: rule22
}, {
    start: 7718,
    length: 1,
    convRule: rule21
}, {
    start: 7719,
    length: 1,
    convRule: rule22
}, {
    start: 7720,
    length: 1,
    convRule: rule21
}, {
    start: 7721,
    length: 1,
    convRule: rule22
}, {
    start: 7722,
    length: 1,
    convRule: rule21
}, {
    start: 7723,
    length: 1,
    convRule: rule22
}, {
    start: 7724,
    length: 1,
    convRule: rule21
}, {
    start: 7725,
    length: 1,
    convRule: rule22
}, {
    start: 7726,
    length: 1,
    convRule: rule21
}, {
    start: 7727,
    length: 1,
    convRule: rule22
}, {
    start: 7728,
    length: 1,
    convRule: rule21
}, {
    start: 7729,
    length: 1,
    convRule: rule22
}, {
    start: 7730,
    length: 1,
    convRule: rule21
}, {
    start: 7731,
    length: 1,
    convRule: rule22
}, {
    start: 7732,
    length: 1,
    convRule: rule21
}, {
    start: 7733,
    length: 1,
    convRule: rule22
}, {
    start: 7734,
    length: 1,
    convRule: rule21
}, {
    start: 7735,
    length: 1,
    convRule: rule22
}, {
    start: 7736,
    length: 1,
    convRule: rule21
}, {
    start: 7737,
    length: 1,
    convRule: rule22
}, {
    start: 7738,
    length: 1,
    convRule: rule21
}, {
    start: 7739,
    length: 1,
    convRule: rule22
}, {
    start: 7740,
    length: 1,
    convRule: rule21
}, {
    start: 7741,
    length: 1,
    convRule: rule22
}, {
    start: 7742,
    length: 1,
    convRule: rule21
}, {
    start: 7743,
    length: 1,
    convRule: rule22
}, {
    start: 7744,
    length: 1,
    convRule: rule21
}, {
    start: 7745,
    length: 1,
    convRule: rule22
}, {
    start: 7746,
    length: 1,
    convRule: rule21
}, {
    start: 7747,
    length: 1,
    convRule: rule22
}, {
    start: 7748,
    length: 1,
    convRule: rule21
}, {
    start: 7749,
    length: 1,
    convRule: rule22
}, {
    start: 7750,
    length: 1,
    convRule: rule21
}, {
    start: 7751,
    length: 1,
    convRule: rule22
}, {
    start: 7752,
    length: 1,
    convRule: rule21
}, {
    start: 7753,
    length: 1,
    convRule: rule22
}, {
    start: 7754,
    length: 1,
    convRule: rule21
}, {
    start: 7755,
    length: 1,
    convRule: rule22
}, {
    start: 7756,
    length: 1,
    convRule: rule21
}, {
    start: 7757,
    length: 1,
    convRule: rule22
}, {
    start: 7758,
    length: 1,
    convRule: rule21
}, {
    start: 7759,
    length: 1,
    convRule: rule22
}, {
    start: 7760,
    length: 1,
    convRule: rule21
}, {
    start: 7761,
    length: 1,
    convRule: rule22
}, {
    start: 7762,
    length: 1,
    convRule: rule21
}, {
    start: 7763,
    length: 1,
    convRule: rule22
}, {
    start: 7764,
    length: 1,
    convRule: rule21
}, {
    start: 7765,
    length: 1,
    convRule: rule22
}, {
    start: 7766,
    length: 1,
    convRule: rule21
}, {
    start: 7767,
    length: 1,
    convRule: rule22
}, {
    start: 7768,
    length: 1,
    convRule: rule21
}, {
    start: 7769,
    length: 1,
    convRule: rule22
}, {
    start: 7770,
    length: 1,
    convRule: rule21
}, {
    start: 7771,
    length: 1,
    convRule: rule22
}, {
    start: 7772,
    length: 1,
    convRule: rule21
}, {
    start: 7773,
    length: 1,
    convRule: rule22
}, {
    start: 7774,
    length: 1,
    convRule: rule21
}, {
    start: 7775,
    length: 1,
    convRule: rule22
}, {
    start: 7776,
    length: 1,
    convRule: rule21
}, {
    start: 7777,
    length: 1,
    convRule: rule22
}, {
    start: 7778,
    length: 1,
    convRule: rule21
}, {
    start: 7779,
    length: 1,
    convRule: rule22
}, {
    start: 7780,
    length: 1,
    convRule: rule21
}, {
    start: 7781,
    length: 1,
    convRule: rule22
}, {
    start: 7782,
    length: 1,
    convRule: rule21
}, {
    start: 7783,
    length: 1,
    convRule: rule22
}, {
    start: 7784,
    length: 1,
    convRule: rule21
}, {
    start: 7785,
    length: 1,
    convRule: rule22
}, {
    start: 7786,
    length: 1,
    convRule: rule21
}, {
    start: 7787,
    length: 1,
    convRule: rule22
}, {
    start: 7788,
    length: 1,
    convRule: rule21
}, {
    start: 7789,
    length: 1,
    convRule: rule22
}, {
    start: 7790,
    length: 1,
    convRule: rule21
}, {
    start: 7791,
    length: 1,
    convRule: rule22
}, {
    start: 7792,
    length: 1,
    convRule: rule21
}, {
    start: 7793,
    length: 1,
    convRule: rule22
}, {
    start: 7794,
    length: 1,
    convRule: rule21
}, {
    start: 7795,
    length: 1,
    convRule: rule22
}, {
    start: 7796,
    length: 1,
    convRule: rule21
}, {
    start: 7797,
    length: 1,
    convRule: rule22
}, {
    start: 7798,
    length: 1,
    convRule: rule21
}, {
    start: 7799,
    length: 1,
    convRule: rule22
}, {
    start: 7800,
    length: 1,
    convRule: rule21
}, {
    start: 7801,
    length: 1,
    convRule: rule22
}, {
    start: 7802,
    length: 1,
    convRule: rule21
}, {
    start: 7803,
    length: 1,
    convRule: rule22
}, {
    start: 7804,
    length: 1,
    convRule: rule21
}, {
    start: 7805,
    length: 1,
    convRule: rule22
}, {
    start: 7806,
    length: 1,
    convRule: rule21
}, {
    start: 7807,
    length: 1,
    convRule: rule22
}, {
    start: 7808,
    length: 1,
    convRule: rule21
}, {
    start: 7809,
    length: 1,
    convRule: rule22
}, {
    start: 7810,
    length: 1,
    convRule: rule21
}, {
    start: 7811,
    length: 1,
    convRule: rule22
}, {
    start: 7812,
    length: 1,
    convRule: rule21
}, {
    start: 7813,
    length: 1,
    convRule: rule22
}, {
    start: 7814,
    length: 1,
    convRule: rule21
}, {
    start: 7815,
    length: 1,
    convRule: rule22
}, {
    start: 7816,
    length: 1,
    convRule: rule21
}, {
    start: 7817,
    length: 1,
    convRule: rule22
}, {
    start: 7818,
    length: 1,
    convRule: rule21
}, {
    start: 7819,
    length: 1,
    convRule: rule22
}, {
    start: 7820,
    length: 1,
    convRule: rule21
}, {
    start: 7821,
    length: 1,
    convRule: rule22
}, {
    start: 7822,
    length: 1,
    convRule: rule21
}, {
    start: 7823,
    length: 1,
    convRule: rule22
}, {
    start: 7824,
    length: 1,
    convRule: rule21
}, {
    start: 7825,
    length: 1,
    convRule: rule22
}, {
    start: 7826,
    length: 1,
    convRule: rule21
}, {
    start: 7827,
    length: 1,
    convRule: rule22
}, {
    start: 7828,
    length: 1,
    convRule: rule21
}, {
    start: 7829,
    length: 1,
    convRule: rule22
}, {
    start: 7835,
    length: 1,
    convRule: rule119
}, {
    start: 7838,
    length: 1,
    convRule: rule120
}, {
    start: 7840,
    length: 1,
    convRule: rule21
}, {
    start: 7841,
    length: 1,
    convRule: rule22
}, {
    start: 7842,
    length: 1,
    convRule: rule21
}, {
    start: 7843,
    length: 1,
    convRule: rule22
}, {
    start: 7844,
    length: 1,
    convRule: rule21
}, {
    start: 7845,
    length: 1,
    convRule: rule22
}, {
    start: 7846,
    length: 1,
    convRule: rule21
}, {
    start: 7847,
    length: 1,
    convRule: rule22
}, {
    start: 7848,
    length: 1,
    convRule: rule21
}, {
    start: 7849,
    length: 1,
    convRule: rule22
}, {
    start: 7850,
    length: 1,
    convRule: rule21
}, {
    start: 7851,
    length: 1,
    convRule: rule22
}, {
    start: 7852,
    length: 1,
    convRule: rule21
}, {
    start: 7853,
    length: 1,
    convRule: rule22
}, {
    start: 7854,
    length: 1,
    convRule: rule21
}, {
    start: 7855,
    length: 1,
    convRule: rule22
}, {
    start: 7856,
    length: 1,
    convRule: rule21
}, {
    start: 7857,
    length: 1,
    convRule: rule22
}, {
    start: 7858,
    length: 1,
    convRule: rule21
}, {
    start: 7859,
    length: 1,
    convRule: rule22
}, {
    start: 7860,
    length: 1,
    convRule: rule21
}, {
    start: 7861,
    length: 1,
    convRule: rule22
}, {
    start: 7862,
    length: 1,
    convRule: rule21
}, {
    start: 7863,
    length: 1,
    convRule: rule22
}, {
    start: 7864,
    length: 1,
    convRule: rule21
}, {
    start: 7865,
    length: 1,
    convRule: rule22
}, {
    start: 7866,
    length: 1,
    convRule: rule21
}, {
    start: 7867,
    length: 1,
    convRule: rule22
}, {
    start: 7868,
    length: 1,
    convRule: rule21
}, {
    start: 7869,
    length: 1,
    convRule: rule22
}, {
    start: 7870,
    length: 1,
    convRule: rule21
}, {
    start: 7871,
    length: 1,
    convRule: rule22
}, {
    start: 7872,
    length: 1,
    convRule: rule21
}, {
    start: 7873,
    length: 1,
    convRule: rule22
}, {
    start: 7874,
    length: 1,
    convRule: rule21
}, {
    start: 7875,
    length: 1,
    convRule: rule22
}, {
    start: 7876,
    length: 1,
    convRule: rule21
}, {
    start: 7877,
    length: 1,
    convRule: rule22
}, {
    start: 7878,
    length: 1,
    convRule: rule21
}, {
    start: 7879,
    length: 1,
    convRule: rule22
}, {
    start: 7880,
    length: 1,
    convRule: rule21
}, {
    start: 7881,
    length: 1,
    convRule: rule22
}, {
    start: 7882,
    length: 1,
    convRule: rule21
}, {
    start: 7883,
    length: 1,
    convRule: rule22
}, {
    start: 7884,
    length: 1,
    convRule: rule21
}, {
    start: 7885,
    length: 1,
    convRule: rule22
}, {
    start: 7886,
    length: 1,
    convRule: rule21
}, {
    start: 7887,
    length: 1,
    convRule: rule22
}, {
    start: 7888,
    length: 1,
    convRule: rule21
}, {
    start: 7889,
    length: 1,
    convRule: rule22
}, {
    start: 7890,
    length: 1,
    convRule: rule21
}, {
    start: 7891,
    length: 1,
    convRule: rule22
}, {
    start: 7892,
    length: 1,
    convRule: rule21
}, {
    start: 7893,
    length: 1,
    convRule: rule22
}, {
    start: 7894,
    length: 1,
    convRule: rule21
}, {
    start: 7895,
    length: 1,
    convRule: rule22
}, {
    start: 7896,
    length: 1,
    convRule: rule21
}, {
    start: 7897,
    length: 1,
    convRule: rule22
}, {
    start: 7898,
    length: 1,
    convRule: rule21
}, {
    start: 7899,
    length: 1,
    convRule: rule22
}, {
    start: 7900,
    length: 1,
    convRule: rule21
}, {
    start: 7901,
    length: 1,
    convRule: rule22
}, {
    start: 7902,
    length: 1,
    convRule: rule21
}, {
    start: 7903,
    length: 1,
    convRule: rule22
}, {
    start: 7904,
    length: 1,
    convRule: rule21
}, {
    start: 7905,
    length: 1,
    convRule: rule22
}, {
    start: 7906,
    length: 1,
    convRule: rule21
}, {
    start: 7907,
    length: 1,
    convRule: rule22
}, {
    start: 7908,
    length: 1,
    convRule: rule21
}, {
    start: 7909,
    length: 1,
    convRule: rule22
}, {
    start: 7910,
    length: 1,
    convRule: rule21
}, {
    start: 7911,
    length: 1,
    convRule: rule22
}, {
    start: 7912,
    length: 1,
    convRule: rule21
}, {
    start: 7913,
    length: 1,
    convRule: rule22
}, {
    start: 7914,
    length: 1,
    convRule: rule21
}, {
    start: 7915,
    length: 1,
    convRule: rule22
}, {
    start: 7916,
    length: 1,
    convRule: rule21
}, {
    start: 7917,
    length: 1,
    convRule: rule22
}, {
    start: 7918,
    length: 1,
    convRule: rule21
}, {
    start: 7919,
    length: 1,
    convRule: rule22
}, {
    start: 7920,
    length: 1,
    convRule: rule21
}, {
    start: 7921,
    length: 1,
    convRule: rule22
}, {
    start: 7922,
    length: 1,
    convRule: rule21
}, {
    start: 7923,
    length: 1,
    convRule: rule22
}, {
    start: 7924,
    length: 1,
    convRule: rule21
}, {
    start: 7925,
    length: 1,
    convRule: rule22
}, {
    start: 7926,
    length: 1,
    convRule: rule21
}, {
    start: 7927,
    length: 1,
    convRule: rule22
}, {
    start: 7928,
    length: 1,
    convRule: rule21
}, {
    start: 7929,
    length: 1,
    convRule: rule22
}, {
    start: 7930,
    length: 1,
    convRule: rule21
}, {
    start: 7931,
    length: 1,
    convRule: rule22
}, {
    start: 7932,
    length: 1,
    convRule: rule21
}, {
    start: 7933,
    length: 1,
    convRule: rule22
}, {
    start: 7934,
    length: 1,
    convRule: rule21
}, {
    start: 7935,
    length: 1,
    convRule: rule22
}, {
    start: 7936,
    length: 8,
    convRule: rule121
}, {
    start: 7944,
    length: 8,
    convRule: rule122
}, {
    start: 7952,
    length: 6,
    convRule: rule121
}, {
    start: 7960,
    length: 6,
    convRule: rule122
}, {
    start: 7968,
    length: 8,
    convRule: rule121
}, {
    start: 7976,
    length: 8,
    convRule: rule122
}, {
    start: 7984,
    length: 8,
    convRule: rule121
}, {
    start: 7992,
    length: 8,
    convRule: rule122
}, {
    start: 8000,
    length: 6,
    convRule: rule121
}, {
    start: 8008,
    length: 6,
    convRule: rule122
}, {
    start: 8017,
    length: 1,
    convRule: rule121
}, {
    start: 8019,
    length: 1,
    convRule: rule121
}, {
    start: 8021,
    length: 1,
    convRule: rule121
}, {
    start: 8023,
    length: 1,
    convRule: rule121
}, {
    start: 8025,
    length: 1,
    convRule: rule122
}, {
    start: 8027,
    length: 1,
    convRule: rule122
}, {
    start: 8029,
    length: 1,
    convRule: rule122
}, {
    start: 8031,
    length: 1,
    convRule: rule122
}, {
    start: 8032,
    length: 8,
    convRule: rule121
}, {
    start: 8040,
    length: 8,
    convRule: rule122
}, {
    start: 8048,
    length: 2,
    convRule: rule123
}, {
    start: 8050,
    length: 4,
    convRule: rule124
}, {
    start: 8054,
    length: 2,
    convRule: rule125
}, {
    start: 8056,
    length: 2,
    convRule: rule126
}, {
    start: 8058,
    length: 2,
    convRule: rule127
}, {
    start: 8060,
    length: 2,
    convRule: rule128
}, {
    start: 8064,
    length: 8,
    convRule: rule121
}, {
    start: 8072,
    length: 8,
    convRule: rule129
}, {
    start: 8080,
    length: 8,
    convRule: rule121
}, {
    start: 8088,
    length: 8,
    convRule: rule129
}, {
    start: 8096,
    length: 8,
    convRule: rule121
}, {
    start: 8104,
    length: 8,
    convRule: rule129
}, {
    start: 8112,
    length: 2,
    convRule: rule121
}, {
    start: 8115,
    length: 1,
    convRule: rule130
}, {
    start: 8120,
    length: 2,
    convRule: rule122
}, {
    start: 8122,
    length: 2,
    convRule: rule131
}, {
    start: 8124,
    length: 1,
    convRule: rule132
}, {
    start: 8126,
    length: 1,
    convRule: rule133
}, {
    start: 8131,
    length: 1,
    convRule: rule130
}, {
    start: 8136,
    length: 4,
    convRule: rule134
}, {
    start: 8140,
    length: 1,
    convRule: rule132
}, {
    start: 8144,
    length: 2,
    convRule: rule121
}, {
    start: 8152,
    length: 2,
    convRule: rule122
}, {
    start: 8154,
    length: 2,
    convRule: rule135
}, {
    start: 8160,
    length: 2,
    convRule: rule121
}, {
    start: 8165,
    length: 1,
    convRule: rule104
}, {
    start: 8168,
    length: 2,
    convRule: rule122
}, {
    start: 8170,
    length: 2,
    convRule: rule136
}, {
    start: 8172,
    length: 1,
    convRule: rule107
}, {
    start: 8179,
    length: 1,
    convRule: rule130
}, {
    start: 8184,
    length: 2,
    convRule: rule137
}, {
    start: 8186,
    length: 2,
    convRule: rule138
}, {
    start: 8188,
    length: 1,
    convRule: rule132
}, {
    start: 8486,
    length: 1,
    convRule: rule141
}, {
    start: 8490,
    length: 1,
    convRule: rule142
}, {
    start: 8491,
    length: 1,
    convRule: rule143
}, {
    start: 8498,
    length: 1,
    convRule: rule144
}, {
    start: 8526,
    length: 1,
    convRule: rule145
}, {
    start: 8544,
    length: 16,
    convRule: rule146
}, {
    start: 8560,
    length: 16,
    convRule: rule147
}, {
    start: 8579,
    length: 1,
    convRule: rule21
}, {
    start: 8580,
    length: 1,
    convRule: rule22
}, {
    start: 9398,
    length: 26,
    convRule: rule148
}, {
    start: 9424,
    length: 26,
    convRule: rule149
}, {
    start: 11264,
    length: 47,
    convRule: rule112
}, {
    start: 11312,
    length: 47,
    convRule: rule113
}, {
    start: 11360,
    length: 1,
    convRule: rule21
}, {
    start: 11361,
    length: 1,
    convRule: rule22
}, {
    start: 11362,
    length: 1,
    convRule: rule150
}, {
    start: 11363,
    length: 1,
    convRule: rule151
}, {
    start: 11364,
    length: 1,
    convRule: rule152
}, {
    start: 11365,
    length: 1,
    convRule: rule153
}, {
    start: 11366,
    length: 1,
    convRule: rule154
}, {
    start: 11367,
    length: 1,
    convRule: rule21
}, {
    start: 11368,
    length: 1,
    convRule: rule22
}, {
    start: 11369,
    length: 1,
    convRule: rule21
}, {
    start: 11370,
    length: 1,
    convRule: rule22
}, {
    start: 11371,
    length: 1,
    convRule: rule21
}, {
    start: 11372,
    length: 1,
    convRule: rule22
}, {
    start: 11373,
    length: 1,
    convRule: rule155
}, {
    start: 11374,
    length: 1,
    convRule: rule156
}, {
    start: 11375,
    length: 1,
    convRule: rule157
}, {
    start: 11376,
    length: 1,
    convRule: rule158
}, {
    start: 11378,
    length: 1,
    convRule: rule21
}, {
    start: 11379,
    length: 1,
    convRule: rule22
}, {
    start: 11381,
    length: 1,
    convRule: rule21
}, {
    start: 11382,
    length: 1,
    convRule: rule22
}, {
    start: 11390,
    length: 2,
    convRule: rule159
}, {
    start: 11392,
    length: 1,
    convRule: rule21
}, {
    start: 11393,
    length: 1,
    convRule: rule22
}, {
    start: 11394,
    length: 1,
    convRule: rule21
}, {
    start: 11395,
    length: 1,
    convRule: rule22
}, {
    start: 11396,
    length: 1,
    convRule: rule21
}, {
    start: 11397,
    length: 1,
    convRule: rule22
}, {
    start: 11398,
    length: 1,
    convRule: rule21
}, {
    start: 11399,
    length: 1,
    convRule: rule22
}, {
    start: 11400,
    length: 1,
    convRule: rule21
}, {
    start: 11401,
    length: 1,
    convRule: rule22
}, {
    start: 11402,
    length: 1,
    convRule: rule21
}, {
    start: 11403,
    length: 1,
    convRule: rule22
}, {
    start: 11404,
    length: 1,
    convRule: rule21
}, {
    start: 11405,
    length: 1,
    convRule: rule22
}, {
    start: 11406,
    length: 1,
    convRule: rule21
}, {
    start: 11407,
    length: 1,
    convRule: rule22
}, {
    start: 11408,
    length: 1,
    convRule: rule21
}, {
    start: 11409,
    length: 1,
    convRule: rule22
}, {
    start: 11410,
    length: 1,
    convRule: rule21
}, {
    start: 11411,
    length: 1,
    convRule: rule22
}, {
    start: 11412,
    length: 1,
    convRule: rule21
}, {
    start: 11413,
    length: 1,
    convRule: rule22
}, {
    start: 11414,
    length: 1,
    convRule: rule21
}, {
    start: 11415,
    length: 1,
    convRule: rule22
}, {
    start: 11416,
    length: 1,
    convRule: rule21
}, {
    start: 11417,
    length: 1,
    convRule: rule22
}, {
    start: 11418,
    length: 1,
    convRule: rule21
}, {
    start: 11419,
    length: 1,
    convRule: rule22
}, {
    start: 11420,
    length: 1,
    convRule: rule21
}, {
    start: 11421,
    length: 1,
    convRule: rule22
}, {
    start: 11422,
    length: 1,
    convRule: rule21
}, {
    start: 11423,
    length: 1,
    convRule: rule22
}, {
    start: 11424,
    length: 1,
    convRule: rule21
}, {
    start: 11425,
    length: 1,
    convRule: rule22
}, {
    start: 11426,
    length: 1,
    convRule: rule21
}, {
    start: 11427,
    length: 1,
    convRule: rule22
}, {
    start: 11428,
    length: 1,
    convRule: rule21
}, {
    start: 11429,
    length: 1,
    convRule: rule22
}, {
    start: 11430,
    length: 1,
    convRule: rule21
}, {
    start: 11431,
    length: 1,
    convRule: rule22
}, {
    start: 11432,
    length: 1,
    convRule: rule21
}, {
    start: 11433,
    length: 1,
    convRule: rule22
}, {
    start: 11434,
    length: 1,
    convRule: rule21
}, {
    start: 11435,
    length: 1,
    convRule: rule22
}, {
    start: 11436,
    length: 1,
    convRule: rule21
}, {
    start: 11437,
    length: 1,
    convRule: rule22
}, {
    start: 11438,
    length: 1,
    convRule: rule21
}, {
    start: 11439,
    length: 1,
    convRule: rule22
}, {
    start: 11440,
    length: 1,
    convRule: rule21
}, {
    start: 11441,
    length: 1,
    convRule: rule22
}, {
    start: 11442,
    length: 1,
    convRule: rule21
}, {
    start: 11443,
    length: 1,
    convRule: rule22
}, {
    start: 11444,
    length: 1,
    convRule: rule21
}, {
    start: 11445,
    length: 1,
    convRule: rule22
}, {
    start: 11446,
    length: 1,
    convRule: rule21
}, {
    start: 11447,
    length: 1,
    convRule: rule22
}, {
    start: 11448,
    length: 1,
    convRule: rule21
}, {
    start: 11449,
    length: 1,
    convRule: rule22
}, {
    start: 11450,
    length: 1,
    convRule: rule21
}, {
    start: 11451,
    length: 1,
    convRule: rule22
}, {
    start: 11452,
    length: 1,
    convRule: rule21
}, {
    start: 11453,
    length: 1,
    convRule: rule22
}, {
    start: 11454,
    length: 1,
    convRule: rule21
}, {
    start: 11455,
    length: 1,
    convRule: rule22
}, {
    start: 11456,
    length: 1,
    convRule: rule21
}, {
    start: 11457,
    length: 1,
    convRule: rule22
}, {
    start: 11458,
    length: 1,
    convRule: rule21
}, {
    start: 11459,
    length: 1,
    convRule: rule22
}, {
    start: 11460,
    length: 1,
    convRule: rule21
}, {
    start: 11461,
    length: 1,
    convRule: rule22
}, {
    start: 11462,
    length: 1,
    convRule: rule21
}, {
    start: 11463,
    length: 1,
    convRule: rule22
}, {
    start: 11464,
    length: 1,
    convRule: rule21
}, {
    start: 11465,
    length: 1,
    convRule: rule22
}, {
    start: 11466,
    length: 1,
    convRule: rule21
}, {
    start: 11467,
    length: 1,
    convRule: rule22
}, {
    start: 11468,
    length: 1,
    convRule: rule21
}, {
    start: 11469,
    length: 1,
    convRule: rule22
}, {
    start: 11470,
    length: 1,
    convRule: rule21
}, {
    start: 11471,
    length: 1,
    convRule: rule22
}, {
    start: 11472,
    length: 1,
    convRule: rule21
}, {
    start: 11473,
    length: 1,
    convRule: rule22
}, {
    start: 11474,
    length: 1,
    convRule: rule21
}, {
    start: 11475,
    length: 1,
    convRule: rule22
}, {
    start: 11476,
    length: 1,
    convRule: rule21
}, {
    start: 11477,
    length: 1,
    convRule: rule22
}, {
    start: 11478,
    length: 1,
    convRule: rule21
}, {
    start: 11479,
    length: 1,
    convRule: rule22
}, {
    start: 11480,
    length: 1,
    convRule: rule21
}, {
    start: 11481,
    length: 1,
    convRule: rule22
}, {
    start: 11482,
    length: 1,
    convRule: rule21
}, {
    start: 11483,
    length: 1,
    convRule: rule22
}, {
    start: 11484,
    length: 1,
    convRule: rule21
}, {
    start: 11485,
    length: 1,
    convRule: rule22
}, {
    start: 11486,
    length: 1,
    convRule: rule21
}, {
    start: 11487,
    length: 1,
    convRule: rule22
}, {
    start: 11488,
    length: 1,
    convRule: rule21
}, {
    start: 11489,
    length: 1,
    convRule: rule22
}, {
    start: 11490,
    length: 1,
    convRule: rule21
}, {
    start: 11491,
    length: 1,
    convRule: rule22
}, {
    start: 11499,
    length: 1,
    convRule: rule21
}, {
    start: 11500,
    length: 1,
    convRule: rule22
}, {
    start: 11501,
    length: 1,
    convRule: rule21
}, {
    start: 11502,
    length: 1,
    convRule: rule22
}, {
    start: 11520,
    length: 38,
    convRule: rule160
}, {
    start: 42560,
    length: 1,
    convRule: rule21
}, {
    start: 42561,
    length: 1,
    convRule: rule22
}, {
    start: 42562,
    length: 1,
    convRule: rule21
}, {
    start: 42563,
    length: 1,
    convRule: rule22
}, {
    start: 42564,
    length: 1,
    convRule: rule21
}, {
    start: 42565,
    length: 1,
    convRule: rule22
}, {
    start: 42566,
    length: 1,
    convRule: rule21
}, {
    start: 42567,
    length: 1,
    convRule: rule22
}, {
    start: 42568,
    length: 1,
    convRule: rule21
}, {
    start: 42569,
    length: 1,
    convRule: rule22
}, {
    start: 42570,
    length: 1,
    convRule: rule21
}, {
    start: 42571,
    length: 1,
    convRule: rule22
}, {
    start: 42572,
    length: 1,
    convRule: rule21
}, {
    start: 42573,
    length: 1,
    convRule: rule22
}, {
    start: 42574,
    length: 1,
    convRule: rule21
}, {
    start: 42575,
    length: 1,
    convRule: rule22
}, {
    start: 42576,
    length: 1,
    convRule: rule21
}, {
    start: 42577,
    length: 1,
    convRule: rule22
}, {
    start: 42578,
    length: 1,
    convRule: rule21
}, {
    start: 42579,
    length: 1,
    convRule: rule22
}, {
    start: 42580,
    length: 1,
    convRule: rule21
}, {
    start: 42581,
    length: 1,
    convRule: rule22
}, {
    start: 42582,
    length: 1,
    convRule: rule21
}, {
    start: 42583,
    length: 1,
    convRule: rule22
}, {
    start: 42584,
    length: 1,
    convRule: rule21
}, {
    start: 42585,
    length: 1,
    convRule: rule22
}, {
    start: 42586,
    length: 1,
    convRule: rule21
}, {
    start: 42587,
    length: 1,
    convRule: rule22
}, {
    start: 42588,
    length: 1,
    convRule: rule21
}, {
    start: 42589,
    length: 1,
    convRule: rule22
}, {
    start: 42590,
    length: 1,
    convRule: rule21
}, {
    start: 42591,
    length: 1,
    convRule: rule22
}, {
    start: 42592,
    length: 1,
    convRule: rule21
}, {
    start: 42593,
    length: 1,
    convRule: rule22
}, {
    start: 42594,
    length: 1,
    convRule: rule21
}, {
    start: 42595,
    length: 1,
    convRule: rule22
}, {
    start: 42596,
    length: 1,
    convRule: rule21
}, {
    start: 42597,
    length: 1,
    convRule: rule22
}, {
    start: 42598,
    length: 1,
    convRule: rule21
}, {
    start: 42599,
    length: 1,
    convRule: rule22
}, {
    start: 42600,
    length: 1,
    convRule: rule21
}, {
    start: 42601,
    length: 1,
    convRule: rule22
}, {
    start: 42602,
    length: 1,
    convRule: rule21
}, {
    start: 42603,
    length: 1,
    convRule: rule22
}, {
    start: 42604,
    length: 1,
    convRule: rule21
}, {
    start: 42605,
    length: 1,
    convRule: rule22
}, {
    start: 42624,
    length: 1,
    convRule: rule21
}, {
    start: 42625,
    length: 1,
    convRule: rule22
}, {
    start: 42626,
    length: 1,
    convRule: rule21
}, {
    start: 42627,
    length: 1,
    convRule: rule22
}, {
    start: 42628,
    length: 1,
    convRule: rule21
}, {
    start: 42629,
    length: 1,
    convRule: rule22
}, {
    start: 42630,
    length: 1,
    convRule: rule21
}, {
    start: 42631,
    length: 1,
    convRule: rule22
}, {
    start: 42632,
    length: 1,
    convRule: rule21
}, {
    start: 42633,
    length: 1,
    convRule: rule22
}, {
    start: 42634,
    length: 1,
    convRule: rule21
}, {
    start: 42635,
    length: 1,
    convRule: rule22
}, {
    start: 42636,
    length: 1,
    convRule: rule21
}, {
    start: 42637,
    length: 1,
    convRule: rule22
}, {
    start: 42638,
    length: 1,
    convRule: rule21
}, {
    start: 42639,
    length: 1,
    convRule: rule22
}, {
    start: 42640,
    length: 1,
    convRule: rule21
}, {
    start: 42641,
    length: 1,
    convRule: rule22
}, {
    start: 42642,
    length: 1,
    convRule: rule21
}, {
    start: 42643,
    length: 1,
    convRule: rule22
}, {
    start: 42644,
    length: 1,
    convRule: rule21
}, {
    start: 42645,
    length: 1,
    convRule: rule22
}, {
    start: 42646,
    length: 1,
    convRule: rule21
}, {
    start: 42647,
    length: 1,
    convRule: rule22
}, {
    start: 42786,
    length: 1,
    convRule: rule21
}, {
    start: 42787,
    length: 1,
    convRule: rule22
}, {
    start: 42788,
    length: 1,
    convRule: rule21
}, {
    start: 42789,
    length: 1,
    convRule: rule22
}, {
    start: 42790,
    length: 1,
    convRule: rule21
}, {
    start: 42791,
    length: 1,
    convRule: rule22
}, {
    start: 42792,
    length: 1,
    convRule: rule21
}, {
    start: 42793,
    length: 1,
    convRule: rule22
}, {
    start: 42794,
    length: 1,
    convRule: rule21
}, {
    start: 42795,
    length: 1,
    convRule: rule22
}, {
    start: 42796,
    length: 1,
    convRule: rule21
}, {
    start: 42797,
    length: 1,
    convRule: rule22
}, {
    start: 42798,
    length: 1,
    convRule: rule21
}, {
    start: 42799,
    length: 1,
    convRule: rule22
}, {
    start: 42802,
    length: 1,
    convRule: rule21
}, {
    start: 42803,
    length: 1,
    convRule: rule22
}, {
    start: 42804,
    length: 1,
    convRule: rule21
}, {
    start: 42805,
    length: 1,
    convRule: rule22
}, {
    start: 42806,
    length: 1,
    convRule: rule21
}, {
    start: 42807,
    length: 1,
    convRule: rule22
}, {
    start: 42808,
    length: 1,
    convRule: rule21
}, {
    start: 42809,
    length: 1,
    convRule: rule22
}, {
    start: 42810,
    length: 1,
    convRule: rule21
}, {
    start: 42811,
    length: 1,
    convRule: rule22
}, {
    start: 42812,
    length: 1,
    convRule: rule21
}, {
    start: 42813,
    length: 1,
    convRule: rule22
}, {
    start: 42814,
    length: 1,
    convRule: rule21
}, {
    start: 42815,
    length: 1,
    convRule: rule22
}, {
    start: 42816,
    length: 1,
    convRule: rule21
}, {
    start: 42817,
    length: 1,
    convRule: rule22
}, {
    start: 42818,
    length: 1,
    convRule: rule21
}, {
    start: 42819,
    length: 1,
    convRule: rule22
}, {
    start: 42820,
    length: 1,
    convRule: rule21
}, {
    start: 42821,
    length: 1,
    convRule: rule22
}, {
    start: 42822,
    length: 1,
    convRule: rule21
}, {
    start: 42823,
    length: 1,
    convRule: rule22
}, {
    start: 42824,
    length: 1,
    convRule: rule21
}, {
    start: 42825,
    length: 1,
    convRule: rule22
}, {
    start: 42826,
    length: 1,
    convRule: rule21
}, {
    start: 42827,
    length: 1,
    convRule: rule22
}, {
    start: 42828,
    length: 1,
    convRule: rule21
}, {
    start: 42829,
    length: 1,
    convRule: rule22
}, {
    start: 42830,
    length: 1,
    convRule: rule21
}, {
    start: 42831,
    length: 1,
    convRule: rule22
}, {
    start: 42832,
    length: 1,
    convRule: rule21
}, {
    start: 42833,
    length: 1,
    convRule: rule22
}, {
    start: 42834,
    length: 1,
    convRule: rule21
}, {
    start: 42835,
    length: 1,
    convRule: rule22
}, {
    start: 42836,
    length: 1,
    convRule: rule21
}, {
    start: 42837,
    length: 1,
    convRule: rule22
}, {
    start: 42838,
    length: 1,
    convRule: rule21
}, {
    start: 42839,
    length: 1,
    convRule: rule22
}, {
    start: 42840,
    length: 1,
    convRule: rule21
}, {
    start: 42841,
    length: 1,
    convRule: rule22
}, {
    start: 42842,
    length: 1,
    convRule: rule21
}, {
    start: 42843,
    length: 1,
    convRule: rule22
}, {
    start: 42844,
    length: 1,
    convRule: rule21
}, {
    start: 42845,
    length: 1,
    convRule: rule22
}, {
    start: 42846,
    length: 1,
    convRule: rule21
}, {
    start: 42847,
    length: 1,
    convRule: rule22
}, {
    start: 42848,
    length: 1,
    convRule: rule21
}, {
    start: 42849,
    length: 1,
    convRule: rule22
}, {
    start: 42850,
    length: 1,
    convRule: rule21
}, {
    start: 42851,
    length: 1,
    convRule: rule22
}, {
    start: 42852,
    length: 1,
    convRule: rule21
}, {
    start: 42853,
    length: 1,
    convRule: rule22
}, {
    start: 42854,
    length: 1,
    convRule: rule21
}, {
    start: 42855,
    length: 1,
    convRule: rule22
}, {
    start: 42856,
    length: 1,
    convRule: rule21
}, {
    start: 42857,
    length: 1,
    convRule: rule22
}, {
    start: 42858,
    length: 1,
    convRule: rule21
}, {
    start: 42859,
    length: 1,
    convRule: rule22
}, {
    start: 42860,
    length: 1,
    convRule: rule21
}, {
    start: 42861,
    length: 1,
    convRule: rule22
}, {
    start: 42862,
    length: 1,
    convRule: rule21
}, {
    start: 42863,
    length: 1,
    convRule: rule22
}, {
    start: 42873,
    length: 1,
    convRule: rule21
}, {
    start: 42874,
    length: 1,
    convRule: rule22
}, {
    start: 42875,
    length: 1,
    convRule: rule21
}, {
    start: 42876,
    length: 1,
    convRule: rule22
}, {
    start: 42877,
    length: 1,
    convRule: rule161
}, {
    start: 42878,
    length: 1,
    convRule: rule21
}, {
    start: 42879,
    length: 1,
    convRule: rule22
}, {
    start: 42880,
    length: 1,
    convRule: rule21
}, {
    start: 42881,
    length: 1,
    convRule: rule22
}, {
    start: 42882,
    length: 1,
    convRule: rule21
}, {
    start: 42883,
    length: 1,
    convRule: rule22
}, {
    start: 42884,
    length: 1,
    convRule: rule21
}, {
    start: 42885,
    length: 1,
    convRule: rule22
}, {
    start: 42886,
    length: 1,
    convRule: rule21
}, {
    start: 42887,
    length: 1,
    convRule: rule22
}, {
    start: 42891,
    length: 1,
    convRule: rule21
}, {
    start: 42892,
    length: 1,
    convRule: rule22
}, {
    start: 42893,
    length: 1,
    convRule: rule162
}, {
    start: 42896,
    length: 1,
    convRule: rule21
}, {
    start: 42897,
    length: 1,
    convRule: rule22
}, {
    start: 42912,
    length: 1,
    convRule: rule21
}, {
    start: 42913,
    length: 1,
    convRule: rule22
}, {
    start: 42914,
    length: 1,
    convRule: rule21
}, {
    start: 42915,
    length: 1,
    convRule: rule22
}, {
    start: 42916,
    length: 1,
    convRule: rule21
}, {
    start: 42917,
    length: 1,
    convRule: rule22
}, {
    start: 42918,
    length: 1,
    convRule: rule21
}, {
    start: 42919,
    length: 1,
    convRule: rule22
}, {
    start: 42920,
    length: 1,
    convRule: rule21
}, {
    start: 42921,
    length: 1,
    convRule: rule22
}, {
    start: 65313,
    length: 26,
    convRule: rule9
}, {
    start: 65345,
    length: 26,
    convRule: rule12
}, {
    start: 66560,
    length: 40,
    convRule: rule165
}, {
    start: 66600,
    length: 40,
    convRule: rule166
} ];
var bsearch = function (a) {
    return function (array) {
        return function (size) {
            return function (compare) {
                var go = function ($copy_i) {
                    return function ($copy_k) {
                        var $tco_var_i = $copy_i;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(i, k) {
                            if (i > k) {
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            };
                            if (Data_Boolean.otherwise) {
                                var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                var v = compare(a)(array[j]);
                                if (v instanceof Data_Ordering.EQ) {
                                    $tco_done = true;
                                    return new Data_Maybe.Just(array[j]);
                                };
                                if (v instanceof Data_Ordering.GT) {
                                    $tco_var_i = j + 1 | 0;
                                    $copy_k = k;
                                    return;
                                };
                                $tco_var_i = i;
                                $copy_k = j - 1 | 0;
                                return;
                            };
                            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [ i.constructor.name, k.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_i, $copy_k);
                        };
                        return $tco_result;
                    };
                };
                return go(0)(size);
            };
        };
    };
};
var blkCmp = function (v) {
    return function (v1) {
        if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
            return Data_Ordering.EQ.value;
        };
        if (v.start > v1.start) {
            return Data_Ordering.GT.value;
        };
        if (Data_Boolean.otherwise) {
            return Data_Ordering.LT.value;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var getRule = function (blocks) {
    return function (unichar) {
        return function (size) {
            var key = {
                start: unichar,
                length: 1,
                convRule: nullrule
            };
            var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
            if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (maybeCharBlock instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
            };
            throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [ maybeCharBlock.constructor.name ]);
        };
    };
};
var caseConv = function (f) {
    return function ($$char) {
        var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return $$char;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return $$char + f(maybeConversionRule.value0) | 0;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uTowlower = caseConv(function (v) {
    return v.lowdist;
});
var uTowtitle = caseConv(function (v) {
    return v.titledist;
});
var uTowupper = caseConv(function (v) {
    return v.updist;
});
var checkAttrS = function (categories) {
    return function ($$char) {
        var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return false;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uIswspace = checkAttrS([ gencatZS ]);
var allchars = [ {
    start: 0,
    length: 32,
    convRule: rule0
}, {
    start: 32,
    length: 1,
    convRule: rule1
}, {
    start: 33,
    length: 3,
    convRule: rule2
}, {
    start: 36,
    length: 1,
    convRule: rule3
}, {
    start: 37,
    length: 3,
    convRule: rule2
}, {
    start: 40,
    length: 1,
    convRule: rule4
}, {
    start: 41,
    length: 1,
    convRule: rule5
}, {
    start: 42,
    length: 1,
    convRule: rule2
}, {
    start: 43,
    length: 1,
    convRule: rule6
}, {
    start: 44,
    length: 1,
    convRule: rule2
}, {
    start: 45,
    length: 1,
    convRule: rule7
}, {
    start: 46,
    length: 2,
    convRule: rule2
}, {
    start: 48,
    length: 10,
    convRule: rule8
}, {
    start: 58,
    length: 2,
    convRule: rule2
}, {
    start: 60,
    length: 3,
    convRule: rule6
}, {
    start: 63,
    length: 2,
    convRule: rule2
}, {
    start: 65,
    length: 26,
    convRule: rule9
}, {
    start: 91,
    length: 1,
    convRule: rule4
}, {
    start: 92,
    length: 1,
    convRule: rule2
}, {
    start: 93,
    length: 1,
    convRule: rule5
}, {
    start: 94,
    length: 1,
    convRule: rule10
}, {
    start: 95,
    length: 1,
    convRule: rule11
}, {
    start: 96,
    length: 1,
    convRule: rule10
}, {
    start: 97,
    length: 26,
    convRule: rule12
}, {
    start: 123,
    length: 1,
    convRule: rule4
}, {
    start: 124,
    length: 1,
    convRule: rule6
}, {
    start: 125,
    length: 1,
    convRule: rule5
}, {
    start: 126,
    length: 1,
    convRule: rule6
}, {
    start: 127,
    length: 33,
    convRule: rule0
}, {
    start: 160,
    length: 1,
    convRule: rule1
}, {
    start: 161,
    length: 1,
    convRule: rule2
}, {
    start: 162,
    length: 4,
    convRule: rule3
}, {
    start: 166,
    length: 2,
    convRule: rule13
}, {
    start: 168,
    length: 1,
    convRule: rule10
}, {
    start: 169,
    length: 1,
    convRule: rule13
}, {
    start: 170,
    length: 1,
    convRule: rule14
}, {
    start: 171,
    length: 1,
    convRule: rule15
}, {
    start: 172,
    length: 1,
    convRule: rule6
}, {
    start: 173,
    length: 1,
    convRule: rule16
}, {
    start: 174,
    length: 1,
    convRule: rule13
}, {
    start: 175,
    length: 1,
    convRule: rule10
}, {
    start: 176,
    length: 1,
    convRule: rule13
}, {
    start: 177,
    length: 1,
    convRule: rule6
}, {
    start: 178,
    length: 2,
    convRule: rule17
}, {
    start: 180,
    length: 1,
    convRule: rule10
}, {
    start: 181,
    length: 1,
    convRule: rule18
}, {
    start: 182,
    length: 1,
    convRule: rule13
}, {
    start: 183,
    length: 1,
    convRule: rule2
}, {
    start: 184,
    length: 1,
    convRule: rule10
}, {
    start: 185,
    length: 1,
    convRule: rule17
}, {
    start: 186,
    length: 1,
    convRule: rule14
}, {
    start: 187,
    length: 1,
    convRule: rule19
}, {
    start: 188,
    length: 3,
    convRule: rule17
}, {
    start: 191,
    length: 1,
    convRule: rule2
}, {
    start: 192,
    length: 23,
    convRule: rule9
}, {
    start: 215,
    length: 1,
    convRule: rule6
}, {
    start: 216,
    length: 7,
    convRule: rule9
}, {
    start: 223,
    length: 1,
    convRule: rule14
}, {
    start: 224,
    length: 23,
    convRule: rule12
}, {
    start: 247,
    length: 1,
    convRule: rule6
}, {
    start: 248,
    length: 7,
    convRule: rule12
}, {
    start: 255,
    length: 1,
    convRule: rule20
}, {
    start: 256,
    length: 1,
    convRule: rule21
}, {
    start: 257,
    length: 1,
    convRule: rule22
}, {
    start: 258,
    length: 1,
    convRule: rule21
}, {
    start: 259,
    length: 1,
    convRule: rule22
}, {
    start: 260,
    length: 1,
    convRule: rule21
}, {
    start: 261,
    length: 1,
    convRule: rule22
}, {
    start: 262,
    length: 1,
    convRule: rule21
}, {
    start: 263,
    length: 1,
    convRule: rule22
}, {
    start: 264,
    length: 1,
    convRule: rule21
}, {
    start: 265,
    length: 1,
    convRule: rule22
}, {
    start: 266,
    length: 1,
    convRule: rule21
}, {
    start: 267,
    length: 1,
    convRule: rule22
}, {
    start: 268,
    length: 1,
    convRule: rule21
}, {
    start: 269,
    length: 1,
    convRule: rule22
}, {
    start: 270,
    length: 1,
    convRule: rule21
}, {
    start: 271,
    length: 1,
    convRule: rule22
}, {
    start: 272,
    length: 1,
    convRule: rule21
}, {
    start: 273,
    length: 1,
    convRule: rule22
}, {
    start: 274,
    length: 1,
    convRule: rule21
}, {
    start: 275,
    length: 1,
    convRule: rule22
}, {
    start: 276,
    length: 1,
    convRule: rule21
}, {
    start: 277,
    length: 1,
    convRule: rule22
}, {
    start: 278,
    length: 1,
    convRule: rule21
}, {
    start: 279,
    length: 1,
    convRule: rule22
}, {
    start: 280,
    length: 1,
    convRule: rule21
}, {
    start: 281,
    length: 1,
    convRule: rule22
}, {
    start: 282,
    length: 1,
    convRule: rule21
}, {
    start: 283,
    length: 1,
    convRule: rule22
}, {
    start: 284,
    length: 1,
    convRule: rule21
}, {
    start: 285,
    length: 1,
    convRule: rule22
}, {
    start: 286,
    length: 1,
    convRule: rule21
}, {
    start: 287,
    length: 1,
    convRule: rule22
}, {
    start: 288,
    length: 1,
    convRule: rule21
}, {
    start: 289,
    length: 1,
    convRule: rule22
}, {
    start: 290,
    length: 1,
    convRule: rule21
}, {
    start: 291,
    length: 1,
    convRule: rule22
}, {
    start: 292,
    length: 1,
    convRule: rule21
}, {
    start: 293,
    length: 1,
    convRule: rule22
}, {
    start: 294,
    length: 1,
    convRule: rule21
}, {
    start: 295,
    length: 1,
    convRule: rule22
}, {
    start: 296,
    length: 1,
    convRule: rule21
}, {
    start: 297,
    length: 1,
    convRule: rule22
}, {
    start: 298,
    length: 1,
    convRule: rule21
}, {
    start: 299,
    length: 1,
    convRule: rule22
}, {
    start: 300,
    length: 1,
    convRule: rule21
}, {
    start: 301,
    length: 1,
    convRule: rule22
}, {
    start: 302,
    length: 1,
    convRule: rule21
}, {
    start: 303,
    length: 1,
    convRule: rule22
}, {
    start: 304,
    length: 1,
    convRule: rule23
}, {
    start: 305,
    length: 1,
    convRule: rule24
}, {
    start: 306,
    length: 1,
    convRule: rule21
}, {
    start: 307,
    length: 1,
    convRule: rule22
}, {
    start: 308,
    length: 1,
    convRule: rule21
}, {
    start: 309,
    length: 1,
    convRule: rule22
}, {
    start: 310,
    length: 1,
    convRule: rule21
}, {
    start: 311,
    length: 1,
    convRule: rule22
}, {
    start: 312,
    length: 1,
    convRule: rule14
}, {
    start: 313,
    length: 1,
    convRule: rule21
}, {
    start: 314,
    length: 1,
    convRule: rule22
}, {
    start: 315,
    length: 1,
    convRule: rule21
}, {
    start: 316,
    length: 1,
    convRule: rule22
}, {
    start: 317,
    length: 1,
    convRule: rule21
}, {
    start: 318,
    length: 1,
    convRule: rule22
}, {
    start: 319,
    length: 1,
    convRule: rule21
}, {
    start: 320,
    length: 1,
    convRule: rule22
}, {
    start: 321,
    length: 1,
    convRule: rule21
}, {
    start: 322,
    length: 1,
    convRule: rule22
}, {
    start: 323,
    length: 1,
    convRule: rule21
}, {
    start: 324,
    length: 1,
    convRule: rule22
}, {
    start: 325,
    length: 1,
    convRule: rule21
}, {
    start: 326,
    length: 1,
    convRule: rule22
}, {
    start: 327,
    length: 1,
    convRule: rule21
}, {
    start: 328,
    length: 1,
    convRule: rule22
}, {
    start: 329,
    length: 1,
    convRule: rule14
}, {
    start: 330,
    length: 1,
    convRule: rule21
}, {
    start: 331,
    length: 1,
    convRule: rule22
}, {
    start: 332,
    length: 1,
    convRule: rule21
}, {
    start: 333,
    length: 1,
    convRule: rule22
}, {
    start: 334,
    length: 1,
    convRule: rule21
}, {
    start: 335,
    length: 1,
    convRule: rule22
}, {
    start: 336,
    length: 1,
    convRule: rule21
}, {
    start: 337,
    length: 1,
    convRule: rule22
}, {
    start: 338,
    length: 1,
    convRule: rule21
}, {
    start: 339,
    length: 1,
    convRule: rule22
}, {
    start: 340,
    length: 1,
    convRule: rule21
}, {
    start: 341,
    length: 1,
    convRule: rule22
}, {
    start: 342,
    length: 1,
    convRule: rule21
}, {
    start: 343,
    length: 1,
    convRule: rule22
}, {
    start: 344,
    length: 1,
    convRule: rule21
}, {
    start: 345,
    length: 1,
    convRule: rule22
}, {
    start: 346,
    length: 1,
    convRule: rule21
}, {
    start: 347,
    length: 1,
    convRule: rule22
}, {
    start: 348,
    length: 1,
    convRule: rule21
}, {
    start: 349,
    length: 1,
    convRule: rule22
}, {
    start: 350,
    length: 1,
    convRule: rule21
}, {
    start: 351,
    length: 1,
    convRule: rule22
}, {
    start: 352,
    length: 1,
    convRule: rule21
}, {
    start: 353,
    length: 1,
    convRule: rule22
}, {
    start: 354,
    length: 1,
    convRule: rule21
}, {
    start: 355,
    length: 1,
    convRule: rule22
}, {
    start: 356,
    length: 1,
    convRule: rule21
}, {
    start: 357,
    length: 1,
    convRule: rule22
}, {
    start: 358,
    length: 1,
    convRule: rule21
}, {
    start: 359,
    length: 1,
    convRule: rule22
}, {
    start: 360,
    length: 1,
    convRule: rule21
}, {
    start: 361,
    length: 1,
    convRule: rule22
}, {
    start: 362,
    length: 1,
    convRule: rule21
}, {
    start: 363,
    length: 1,
    convRule: rule22
}, {
    start: 364,
    length: 1,
    convRule: rule21
}, {
    start: 365,
    length: 1,
    convRule: rule22
}, {
    start: 366,
    length: 1,
    convRule: rule21
}, {
    start: 367,
    length: 1,
    convRule: rule22
}, {
    start: 368,
    length: 1,
    convRule: rule21
}, {
    start: 369,
    length: 1,
    convRule: rule22
}, {
    start: 370,
    length: 1,
    convRule: rule21
}, {
    start: 371,
    length: 1,
    convRule: rule22
}, {
    start: 372,
    length: 1,
    convRule: rule21
}, {
    start: 373,
    length: 1,
    convRule: rule22
}, {
    start: 374,
    length: 1,
    convRule: rule21
}, {
    start: 375,
    length: 1,
    convRule: rule22
}, {
    start: 376,
    length: 1,
    convRule: rule25
}, {
    start: 377,
    length: 1,
    convRule: rule21
}, {
    start: 378,
    length: 1,
    convRule: rule22
}, {
    start: 379,
    length: 1,
    convRule: rule21
}, {
    start: 380,
    length: 1,
    convRule: rule22
}, {
    start: 381,
    length: 1,
    convRule: rule21
}, {
    start: 382,
    length: 1,
    convRule: rule22
}, {
    start: 383,
    length: 1,
    convRule: rule26
}, {
    start: 384,
    length: 1,
    convRule: rule27
}, {
    start: 385,
    length: 1,
    convRule: rule28
}, {
    start: 386,
    length: 1,
    convRule: rule21
}, {
    start: 387,
    length: 1,
    convRule: rule22
}, {
    start: 388,
    length: 1,
    convRule: rule21
}, {
    start: 389,
    length: 1,
    convRule: rule22
}, {
    start: 390,
    length: 1,
    convRule: rule29
}, {
    start: 391,
    length: 1,
    convRule: rule21
}, {
    start: 392,
    length: 1,
    convRule: rule22
}, {
    start: 393,
    length: 2,
    convRule: rule30
}, {
    start: 395,
    length: 1,
    convRule: rule21
}, {
    start: 396,
    length: 1,
    convRule: rule22
}, {
    start: 397,
    length: 1,
    convRule: rule14
}, {
    start: 398,
    length: 1,
    convRule: rule31
}, {
    start: 399,
    length: 1,
    convRule: rule32
}, {
    start: 400,
    length: 1,
    convRule: rule33
}, {
    start: 401,
    length: 1,
    convRule: rule21
}, {
    start: 402,
    length: 1,
    convRule: rule22
}, {
    start: 403,
    length: 1,
    convRule: rule30
}, {
    start: 404,
    length: 1,
    convRule: rule34
}, {
    start: 405,
    length: 1,
    convRule: rule35
}, {
    start: 406,
    length: 1,
    convRule: rule36
}, {
    start: 407,
    length: 1,
    convRule: rule37
}, {
    start: 408,
    length: 1,
    convRule: rule21
}, {
    start: 409,
    length: 1,
    convRule: rule22
}, {
    start: 410,
    length: 1,
    convRule: rule38
}, {
    start: 411,
    length: 1,
    convRule: rule14
}, {
    start: 412,
    length: 1,
    convRule: rule36
}, {
    start: 413,
    length: 1,
    convRule: rule39
}, {
    start: 414,
    length: 1,
    convRule: rule40
}, {
    start: 415,
    length: 1,
    convRule: rule41
}, {
    start: 416,
    length: 1,
    convRule: rule21
}, {
    start: 417,
    length: 1,
    convRule: rule22
}, {
    start: 418,
    length: 1,
    convRule: rule21
}, {
    start: 419,
    length: 1,
    convRule: rule22
}, {
    start: 420,
    length: 1,
    convRule: rule21
}, {
    start: 421,
    length: 1,
    convRule: rule22
}, {
    start: 422,
    length: 1,
    convRule: rule42
}, {
    start: 423,
    length: 1,
    convRule: rule21
}, {
    start: 424,
    length: 1,
    convRule: rule22
}, {
    start: 425,
    length: 1,
    convRule: rule42
}, {
    start: 426,
    length: 2,
    convRule: rule14
}, {
    start: 428,
    length: 1,
    convRule: rule21
}, {
    start: 429,
    length: 1,
    convRule: rule22
}, {
    start: 430,
    length: 1,
    convRule: rule42
}, {
    start: 431,
    length: 1,
    convRule: rule21
}, {
    start: 432,
    length: 1,
    convRule: rule22
}, {
    start: 433,
    length: 2,
    convRule: rule43
}, {
    start: 435,
    length: 1,
    convRule: rule21
}, {
    start: 436,
    length: 1,
    convRule: rule22
}, {
    start: 437,
    length: 1,
    convRule: rule21
}, {
    start: 438,
    length: 1,
    convRule: rule22
}, {
    start: 439,
    length: 1,
    convRule: rule44
}, {
    start: 440,
    length: 1,
    convRule: rule21
}, {
    start: 441,
    length: 1,
    convRule: rule22
}, {
    start: 442,
    length: 1,
    convRule: rule14
}, {
    start: 443,
    length: 1,
    convRule: rule45
}, {
    start: 444,
    length: 1,
    convRule: rule21
}, {
    start: 445,
    length: 1,
    convRule: rule22
}, {
    start: 446,
    length: 1,
    convRule: rule14
}, {
    start: 447,
    length: 1,
    convRule: rule46
}, {
    start: 448,
    length: 4,
    convRule: rule45
}, {
    start: 452,
    length: 1,
    convRule: rule47
}, {
    start: 453,
    length: 1,
    convRule: rule48
}, {
    start: 454,
    length: 1,
    convRule: rule49
}, {
    start: 455,
    length: 1,
    convRule: rule47
}, {
    start: 456,
    length: 1,
    convRule: rule48
}, {
    start: 457,
    length: 1,
    convRule: rule49
}, {
    start: 458,
    length: 1,
    convRule: rule47
}, {
    start: 459,
    length: 1,
    convRule: rule48
}, {
    start: 460,
    length: 1,
    convRule: rule49
}, {
    start: 461,
    length: 1,
    convRule: rule21
}, {
    start: 462,
    length: 1,
    convRule: rule22
}, {
    start: 463,
    length: 1,
    convRule: rule21
}, {
    start: 464,
    length: 1,
    convRule: rule22
}, {
    start: 465,
    length: 1,
    convRule: rule21
}, {
    start: 466,
    length: 1,
    convRule: rule22
}, {
    start: 467,
    length: 1,
    convRule: rule21
}, {
    start: 468,
    length: 1,
    convRule: rule22
}, {
    start: 469,
    length: 1,
    convRule: rule21
}, {
    start: 470,
    length: 1,
    convRule: rule22
}, {
    start: 471,
    length: 1,
    convRule: rule21
}, {
    start: 472,
    length: 1,
    convRule: rule22
}, {
    start: 473,
    length: 1,
    convRule: rule21
}, {
    start: 474,
    length: 1,
    convRule: rule22
}, {
    start: 475,
    length: 1,
    convRule: rule21
}, {
    start: 476,
    length: 1,
    convRule: rule22
}, {
    start: 477,
    length: 1,
    convRule: rule50
}, {
    start: 478,
    length: 1,
    convRule: rule21
}, {
    start: 479,
    length: 1,
    convRule: rule22
}, {
    start: 480,
    length: 1,
    convRule: rule21
}, {
    start: 481,
    length: 1,
    convRule: rule22
}, {
    start: 482,
    length: 1,
    convRule: rule21
}, {
    start: 483,
    length: 1,
    convRule: rule22
}, {
    start: 484,
    length: 1,
    convRule: rule21
}, {
    start: 485,
    length: 1,
    convRule: rule22
}, {
    start: 486,
    length: 1,
    convRule: rule21
}, {
    start: 487,
    length: 1,
    convRule: rule22
}, {
    start: 488,
    length: 1,
    convRule: rule21
}, {
    start: 489,
    length: 1,
    convRule: rule22
}, {
    start: 490,
    length: 1,
    convRule: rule21
}, {
    start: 491,
    length: 1,
    convRule: rule22
}, {
    start: 492,
    length: 1,
    convRule: rule21
}, {
    start: 493,
    length: 1,
    convRule: rule22
}, {
    start: 494,
    length: 1,
    convRule: rule21
}, {
    start: 495,
    length: 1,
    convRule: rule22
}, {
    start: 496,
    length: 1,
    convRule: rule14
}, {
    start: 497,
    length: 1,
    convRule: rule47
}, {
    start: 498,
    length: 1,
    convRule: rule48
}, {
    start: 499,
    length: 1,
    convRule: rule49
}, {
    start: 500,
    length: 1,
    convRule: rule21
}, {
    start: 501,
    length: 1,
    convRule: rule22
}, {
    start: 502,
    length: 1,
    convRule: rule51
}, {
    start: 503,
    length: 1,
    convRule: rule52
}, {
    start: 504,
    length: 1,
    convRule: rule21
}, {
    start: 505,
    length: 1,
    convRule: rule22
}, {
    start: 506,
    length: 1,
    convRule: rule21
}, {
    start: 507,
    length: 1,
    convRule: rule22
}, {
    start: 508,
    length: 1,
    convRule: rule21
}, {
    start: 509,
    length: 1,
    convRule: rule22
}, {
    start: 510,
    length: 1,
    convRule: rule21
}, {
    start: 511,
    length: 1,
    convRule: rule22
}, {
    start: 512,
    length: 1,
    convRule: rule21
}, {
    start: 513,
    length: 1,
    convRule: rule22
}, {
    start: 514,
    length: 1,
    convRule: rule21
}, {
    start: 515,
    length: 1,
    convRule: rule22
}, {
    start: 516,
    length: 1,
    convRule: rule21
}, {
    start: 517,
    length: 1,
    convRule: rule22
}, {
    start: 518,
    length: 1,
    convRule: rule21
}, {
    start: 519,
    length: 1,
    convRule: rule22
}, {
    start: 520,
    length: 1,
    convRule: rule21
}, {
    start: 521,
    length: 1,
    convRule: rule22
}, {
    start: 522,
    length: 1,
    convRule: rule21
}, {
    start: 523,
    length: 1,
    convRule: rule22
}, {
    start: 524,
    length: 1,
    convRule: rule21
}, {
    start: 525,
    length: 1,
    convRule: rule22
}, {
    start: 526,
    length: 1,
    convRule: rule21
}, {
    start: 527,
    length: 1,
    convRule: rule22
}, {
    start: 528,
    length: 1,
    convRule: rule21
}, {
    start: 529,
    length: 1,
    convRule: rule22
}, {
    start: 530,
    length: 1,
    convRule: rule21
}, {
    start: 531,
    length: 1,
    convRule: rule22
}, {
    start: 532,
    length: 1,
    convRule: rule21
}, {
    start: 533,
    length: 1,
    convRule: rule22
}, {
    start: 534,
    length: 1,
    convRule: rule21
}, {
    start: 535,
    length: 1,
    convRule: rule22
}, {
    start: 536,
    length: 1,
    convRule: rule21
}, {
    start: 537,
    length: 1,
    convRule: rule22
}, {
    start: 538,
    length: 1,
    convRule: rule21
}, {
    start: 539,
    length: 1,
    convRule: rule22
}, {
    start: 540,
    length: 1,
    convRule: rule21
}, {
    start: 541,
    length: 1,
    convRule: rule22
}, {
    start: 542,
    length: 1,
    convRule: rule21
}, {
    start: 543,
    length: 1,
    convRule: rule22
}, {
    start: 544,
    length: 1,
    convRule: rule53
}, {
    start: 545,
    length: 1,
    convRule: rule14
}, {
    start: 546,
    length: 1,
    convRule: rule21
}, {
    start: 547,
    length: 1,
    convRule: rule22
}, {
    start: 548,
    length: 1,
    convRule: rule21
}, {
    start: 549,
    length: 1,
    convRule: rule22
}, {
    start: 550,
    length: 1,
    convRule: rule21
}, {
    start: 551,
    length: 1,
    convRule: rule22
}, {
    start: 552,
    length: 1,
    convRule: rule21
}, {
    start: 553,
    length: 1,
    convRule: rule22
}, {
    start: 554,
    length: 1,
    convRule: rule21
}, {
    start: 555,
    length: 1,
    convRule: rule22
}, {
    start: 556,
    length: 1,
    convRule: rule21
}, {
    start: 557,
    length: 1,
    convRule: rule22
}, {
    start: 558,
    length: 1,
    convRule: rule21
}, {
    start: 559,
    length: 1,
    convRule: rule22
}, {
    start: 560,
    length: 1,
    convRule: rule21
}, {
    start: 561,
    length: 1,
    convRule: rule22
}, {
    start: 562,
    length: 1,
    convRule: rule21
}, {
    start: 563,
    length: 1,
    convRule: rule22
}, {
    start: 564,
    length: 6,
    convRule: rule14
}, {
    start: 570,
    length: 1,
    convRule: rule54
}, {
    start: 571,
    length: 1,
    convRule: rule21
}, {
    start: 572,
    length: 1,
    convRule: rule22
}, {
    start: 573,
    length: 1,
    convRule: rule55
}, {
    start: 574,
    length: 1,
    convRule: rule56
}, {
    start: 575,
    length: 2,
    convRule: rule57
}, {
    start: 577,
    length: 1,
    convRule: rule21
}, {
    start: 578,
    length: 1,
    convRule: rule22
}, {
    start: 579,
    length: 1,
    convRule: rule58
}, {
    start: 580,
    length: 1,
    convRule: rule59
}, {
    start: 581,
    length: 1,
    convRule: rule60
}, {
    start: 582,
    length: 1,
    convRule: rule21
}, {
    start: 583,
    length: 1,
    convRule: rule22
}, {
    start: 584,
    length: 1,
    convRule: rule21
}, {
    start: 585,
    length: 1,
    convRule: rule22
}, {
    start: 586,
    length: 1,
    convRule: rule21
}, {
    start: 587,
    length: 1,
    convRule: rule22
}, {
    start: 588,
    length: 1,
    convRule: rule21
}, {
    start: 589,
    length: 1,
    convRule: rule22
}, {
    start: 590,
    length: 1,
    convRule: rule21
}, {
    start: 591,
    length: 1,
    convRule: rule22
}, {
    start: 592,
    length: 1,
    convRule: rule61
}, {
    start: 593,
    length: 1,
    convRule: rule62
}, {
    start: 594,
    length: 1,
    convRule: rule63
}, {
    start: 595,
    length: 1,
    convRule: rule64
}, {
    start: 596,
    length: 1,
    convRule: rule65
}, {
    start: 597,
    length: 1,
    convRule: rule14
}, {
    start: 598,
    length: 2,
    convRule: rule66
}, {
    start: 600,
    length: 1,
    convRule: rule14
}, {
    start: 601,
    length: 1,
    convRule: rule67
}, {
    start: 602,
    length: 1,
    convRule: rule14
}, {
    start: 603,
    length: 1,
    convRule: rule68
}, {
    start: 604,
    length: 4,
    convRule: rule14
}, {
    start: 608,
    length: 1,
    convRule: rule66
}, {
    start: 609,
    length: 2,
    convRule: rule14
}, {
    start: 611,
    length: 1,
    convRule: rule69
}, {
    start: 612,
    length: 1,
    convRule: rule14
}, {
    start: 613,
    length: 1,
    convRule: rule70
}, {
    start: 614,
    length: 2,
    convRule: rule14
}, {
    start: 616,
    length: 1,
    convRule: rule71
}, {
    start: 617,
    length: 1,
    convRule: rule72
}, {
    start: 618,
    length: 1,
    convRule: rule14
}, {
    start: 619,
    length: 1,
    convRule: rule73
}, {
    start: 620,
    length: 3,
    convRule: rule14
}, {
    start: 623,
    length: 1,
    convRule: rule72
}, {
    start: 624,
    length: 1,
    convRule: rule14
}, {
    start: 625,
    length: 1,
    convRule: rule74
}, {
    start: 626,
    length: 1,
    convRule: rule75
}, {
    start: 627,
    length: 2,
    convRule: rule14
}, {
    start: 629,
    length: 1,
    convRule: rule76
}, {
    start: 630,
    length: 7,
    convRule: rule14
}, {
    start: 637,
    length: 1,
    convRule: rule77
}, {
    start: 638,
    length: 2,
    convRule: rule14
}, {
    start: 640,
    length: 1,
    convRule: rule78
}, {
    start: 641,
    length: 2,
    convRule: rule14
}, {
    start: 643,
    length: 1,
    convRule: rule78
}, {
    start: 644,
    length: 4,
    convRule: rule14
}, {
    start: 648,
    length: 1,
    convRule: rule78
}, {
    start: 649,
    length: 1,
    convRule: rule79
}, {
    start: 650,
    length: 2,
    convRule: rule80
}, {
    start: 652,
    length: 1,
    convRule: rule81
}, {
    start: 653,
    length: 5,
    convRule: rule14
}, {
    start: 658,
    length: 1,
    convRule: rule82
}, {
    start: 659,
    length: 1,
    convRule: rule14
}, {
    start: 660,
    length: 1,
    convRule: rule45
}, {
    start: 661,
    length: 27,
    convRule: rule14
}, {
    start: 688,
    length: 18,
    convRule: rule83
}, {
    start: 706,
    length: 4,
    convRule: rule10
}, {
    start: 710,
    length: 12,
    convRule: rule83
}, {
    start: 722,
    length: 14,
    convRule: rule10
}, {
    start: 736,
    length: 5,
    convRule: rule83
}, {
    start: 741,
    length: 7,
    convRule: rule10
}, {
    start: 748,
    length: 1,
    convRule: rule83
}, {
    start: 749,
    length: 1,
    convRule: rule10
}, {
    start: 750,
    length: 1,
    convRule: rule83
}, {
    start: 751,
    length: 17,
    convRule: rule10
}, {
    start: 768,
    length: 69,
    convRule: rule84
}, {
    start: 837,
    length: 1,
    convRule: rule85
}, {
    start: 838,
    length: 42,
    convRule: rule84
}, {
    start: 880,
    length: 1,
    convRule: rule21
}, {
    start: 881,
    length: 1,
    convRule: rule22
}, {
    start: 882,
    length: 1,
    convRule: rule21
}, {
    start: 883,
    length: 1,
    convRule: rule22
}, {
    start: 884,
    length: 1,
    convRule: rule83
}, {
    start: 885,
    length: 1,
    convRule: rule10
}, {
    start: 886,
    length: 1,
    convRule: rule21
}, {
    start: 887,
    length: 1,
    convRule: rule22
}, {
    start: 890,
    length: 1,
    convRule: rule83
}, {
    start: 891,
    length: 3,
    convRule: rule40
}, {
    start: 894,
    length: 1,
    convRule: rule2
}, {
    start: 900,
    length: 2,
    convRule: rule10
}, {
    start: 902,
    length: 1,
    convRule: rule86
}, {
    start: 903,
    length: 1,
    convRule: rule2
}, {
    start: 904,
    length: 3,
    convRule: rule87
}, {
    start: 908,
    length: 1,
    convRule: rule88
}, {
    start: 910,
    length: 2,
    convRule: rule89
}, {
    start: 912,
    length: 1,
    convRule: rule14
}, {
    start: 913,
    length: 17,
    convRule: rule9
}, {
    start: 931,
    length: 9,
    convRule: rule9
}, {
    start: 940,
    length: 1,
    convRule: rule90
}, {
    start: 941,
    length: 3,
    convRule: rule91
}, {
    start: 944,
    length: 1,
    convRule: rule14
}, {
    start: 945,
    length: 17,
    convRule: rule12
}, {
    start: 962,
    length: 1,
    convRule: rule92
}, {
    start: 963,
    length: 9,
    convRule: rule12
}, {
    start: 972,
    length: 1,
    convRule: rule93
}, {
    start: 973,
    length: 2,
    convRule: rule94
}, {
    start: 975,
    length: 1,
    convRule: rule95
}, {
    start: 976,
    length: 1,
    convRule: rule96
}, {
    start: 977,
    length: 1,
    convRule: rule97
}, {
    start: 978,
    length: 3,
    convRule: rule98
}, {
    start: 981,
    length: 1,
    convRule: rule99
}, {
    start: 982,
    length: 1,
    convRule: rule100
}, {
    start: 983,
    length: 1,
    convRule: rule101
}, {
    start: 984,
    length: 1,
    convRule: rule21
}, {
    start: 985,
    length: 1,
    convRule: rule22
}, {
    start: 986,
    length: 1,
    convRule: rule21
}, {
    start: 987,
    length: 1,
    convRule: rule22
}, {
    start: 988,
    length: 1,
    convRule: rule21
}, {
    start: 989,
    length: 1,
    convRule: rule22
}, {
    start: 990,
    length: 1,
    convRule: rule21
}, {
    start: 991,
    length: 1,
    convRule: rule22
}, {
    start: 992,
    length: 1,
    convRule: rule21
}, {
    start: 993,
    length: 1,
    convRule: rule22
}, {
    start: 994,
    length: 1,
    convRule: rule21
}, {
    start: 995,
    length: 1,
    convRule: rule22
}, {
    start: 996,
    length: 1,
    convRule: rule21
}, {
    start: 997,
    length: 1,
    convRule: rule22
}, {
    start: 998,
    length: 1,
    convRule: rule21
}, {
    start: 999,
    length: 1,
    convRule: rule22
}, {
    start: 1000,
    length: 1,
    convRule: rule21
}, {
    start: 1001,
    length: 1,
    convRule: rule22
}, {
    start: 1002,
    length: 1,
    convRule: rule21
}, {
    start: 1003,
    length: 1,
    convRule: rule22
}, {
    start: 1004,
    length: 1,
    convRule: rule21
}, {
    start: 1005,
    length: 1,
    convRule: rule22
}, {
    start: 1006,
    length: 1,
    convRule: rule21
}, {
    start: 1007,
    length: 1,
    convRule: rule22
}, {
    start: 1008,
    length: 1,
    convRule: rule102
}, {
    start: 1009,
    length: 1,
    convRule: rule103
}, {
    start: 1010,
    length: 1,
    convRule: rule104
}, {
    start: 1011,
    length: 1,
    convRule: rule14
}, {
    start: 1012,
    length: 1,
    convRule: rule105
}, {
    start: 1013,
    length: 1,
    convRule: rule106
}, {
    start: 1014,
    length: 1,
    convRule: rule6
}, {
    start: 1015,
    length: 1,
    convRule: rule21
}, {
    start: 1016,
    length: 1,
    convRule: rule22
}, {
    start: 1017,
    length: 1,
    convRule: rule107
}, {
    start: 1018,
    length: 1,
    convRule: rule21
}, {
    start: 1019,
    length: 1,
    convRule: rule22
}, {
    start: 1020,
    length: 1,
    convRule: rule14
}, {
    start: 1021,
    length: 3,
    convRule: rule53
}, {
    start: 1024,
    length: 16,
    convRule: rule108
}, {
    start: 1040,
    length: 32,
    convRule: rule9
}, {
    start: 1072,
    length: 32,
    convRule: rule12
}, {
    start: 1104,
    length: 16,
    convRule: rule103
}, {
    start: 1120,
    length: 1,
    convRule: rule21
}, {
    start: 1121,
    length: 1,
    convRule: rule22
}, {
    start: 1122,
    length: 1,
    convRule: rule21
}, {
    start: 1123,
    length: 1,
    convRule: rule22
}, {
    start: 1124,
    length: 1,
    convRule: rule21
}, {
    start: 1125,
    length: 1,
    convRule: rule22
}, {
    start: 1126,
    length: 1,
    convRule: rule21
}, {
    start: 1127,
    length: 1,
    convRule: rule22
}, {
    start: 1128,
    length: 1,
    convRule: rule21
}, {
    start: 1129,
    length: 1,
    convRule: rule22
}, {
    start: 1130,
    length: 1,
    convRule: rule21
}, {
    start: 1131,
    length: 1,
    convRule: rule22
}, {
    start: 1132,
    length: 1,
    convRule: rule21
}, {
    start: 1133,
    length: 1,
    convRule: rule22
}, {
    start: 1134,
    length: 1,
    convRule: rule21
}, {
    start: 1135,
    length: 1,
    convRule: rule22
}, {
    start: 1136,
    length: 1,
    convRule: rule21
}, {
    start: 1137,
    length: 1,
    convRule: rule22
}, {
    start: 1138,
    length: 1,
    convRule: rule21
}, {
    start: 1139,
    length: 1,
    convRule: rule22
}, {
    start: 1140,
    length: 1,
    convRule: rule21
}, {
    start: 1141,
    length: 1,
    convRule: rule22
}, {
    start: 1142,
    length: 1,
    convRule: rule21
}, {
    start: 1143,
    length: 1,
    convRule: rule22
}, {
    start: 1144,
    length: 1,
    convRule: rule21
}, {
    start: 1145,
    length: 1,
    convRule: rule22
}, {
    start: 1146,
    length: 1,
    convRule: rule21
}, {
    start: 1147,
    length: 1,
    convRule: rule22
}, {
    start: 1148,
    length: 1,
    convRule: rule21
}, {
    start: 1149,
    length: 1,
    convRule: rule22
}, {
    start: 1150,
    length: 1,
    convRule: rule21
}, {
    start: 1151,
    length: 1,
    convRule: rule22
}, {
    start: 1152,
    length: 1,
    convRule: rule21
}, {
    start: 1153,
    length: 1,
    convRule: rule22
}, {
    start: 1154,
    length: 1,
    convRule: rule13
}, {
    start: 1155,
    length: 5,
    convRule: rule84
}, {
    start: 1160,
    length: 2,
    convRule: rule109
}, {
    start: 1162,
    length: 1,
    convRule: rule21
}, {
    start: 1163,
    length: 1,
    convRule: rule22
}, {
    start: 1164,
    length: 1,
    convRule: rule21
}, {
    start: 1165,
    length: 1,
    convRule: rule22
}, {
    start: 1166,
    length: 1,
    convRule: rule21
}, {
    start: 1167,
    length: 1,
    convRule: rule22
}, {
    start: 1168,
    length: 1,
    convRule: rule21
}, {
    start: 1169,
    length: 1,
    convRule: rule22
}, {
    start: 1170,
    length: 1,
    convRule: rule21
}, {
    start: 1171,
    length: 1,
    convRule: rule22
}, {
    start: 1172,
    length: 1,
    convRule: rule21
}, {
    start: 1173,
    length: 1,
    convRule: rule22
}, {
    start: 1174,
    length: 1,
    convRule: rule21
}, {
    start: 1175,
    length: 1,
    convRule: rule22
}, {
    start: 1176,
    length: 1,
    convRule: rule21
}, {
    start: 1177,
    length: 1,
    convRule: rule22
}, {
    start: 1178,
    length: 1,
    convRule: rule21
}, {
    start: 1179,
    length: 1,
    convRule: rule22
}, {
    start: 1180,
    length: 1,
    convRule: rule21
}, {
    start: 1181,
    length: 1,
    convRule: rule22
}, {
    start: 1182,
    length: 1,
    convRule: rule21
}, {
    start: 1183,
    length: 1,
    convRule: rule22
}, {
    start: 1184,
    length: 1,
    convRule: rule21
}, {
    start: 1185,
    length: 1,
    convRule: rule22
}, {
    start: 1186,
    length: 1,
    convRule: rule21
}, {
    start: 1187,
    length: 1,
    convRule: rule22
}, {
    start: 1188,
    length: 1,
    convRule: rule21
}, {
    start: 1189,
    length: 1,
    convRule: rule22
}, {
    start: 1190,
    length: 1,
    convRule: rule21
}, {
    start: 1191,
    length: 1,
    convRule: rule22
}, {
    start: 1192,
    length: 1,
    convRule: rule21
}, {
    start: 1193,
    length: 1,
    convRule: rule22
}, {
    start: 1194,
    length: 1,
    convRule: rule21
}, {
    start: 1195,
    length: 1,
    convRule: rule22
}, {
    start: 1196,
    length: 1,
    convRule: rule21
}, {
    start: 1197,
    length: 1,
    convRule: rule22
}, {
    start: 1198,
    length: 1,
    convRule: rule21
}, {
    start: 1199,
    length: 1,
    convRule: rule22
}, {
    start: 1200,
    length: 1,
    convRule: rule21
}, {
    start: 1201,
    length: 1,
    convRule: rule22
}, {
    start: 1202,
    length: 1,
    convRule: rule21
}, {
    start: 1203,
    length: 1,
    convRule: rule22
}, {
    start: 1204,
    length: 1,
    convRule: rule21
}, {
    start: 1205,
    length: 1,
    convRule: rule22
}, {
    start: 1206,
    length: 1,
    convRule: rule21
}, {
    start: 1207,
    length: 1,
    convRule: rule22
}, {
    start: 1208,
    length: 1,
    convRule: rule21
}, {
    start: 1209,
    length: 1,
    convRule: rule22
}, {
    start: 1210,
    length: 1,
    convRule: rule21
}, {
    start: 1211,
    length: 1,
    convRule: rule22
}, {
    start: 1212,
    length: 1,
    convRule: rule21
}, {
    start: 1213,
    length: 1,
    convRule: rule22
}, {
    start: 1214,
    length: 1,
    convRule: rule21
}, {
    start: 1215,
    length: 1,
    convRule: rule22
}, {
    start: 1216,
    length: 1,
    convRule: rule110
}, {
    start: 1217,
    length: 1,
    convRule: rule21
}, {
    start: 1218,
    length: 1,
    convRule: rule22
}, {
    start: 1219,
    length: 1,
    convRule: rule21
}, {
    start: 1220,
    length: 1,
    convRule: rule22
}, {
    start: 1221,
    length: 1,
    convRule: rule21
}, {
    start: 1222,
    length: 1,
    convRule: rule22
}, {
    start: 1223,
    length: 1,
    convRule: rule21
}, {
    start: 1224,
    length: 1,
    convRule: rule22
}, {
    start: 1225,
    length: 1,
    convRule: rule21
}, {
    start: 1226,
    length: 1,
    convRule: rule22
}, {
    start: 1227,
    length: 1,
    convRule: rule21
}, {
    start: 1228,
    length: 1,
    convRule: rule22
}, {
    start: 1229,
    length: 1,
    convRule: rule21
}, {
    start: 1230,
    length: 1,
    convRule: rule22
}, {
    start: 1231,
    length: 1,
    convRule: rule111
}, {
    start: 1232,
    length: 1,
    convRule: rule21
}, {
    start: 1233,
    length: 1,
    convRule: rule22
}, {
    start: 1234,
    length: 1,
    convRule: rule21
}, {
    start: 1235,
    length: 1,
    convRule: rule22
}, {
    start: 1236,
    length: 1,
    convRule: rule21
}, {
    start: 1237,
    length: 1,
    convRule: rule22
}, {
    start: 1238,
    length: 1,
    convRule: rule21
}, {
    start: 1239,
    length: 1,
    convRule: rule22
}, {
    start: 1240,
    length: 1,
    convRule: rule21
}, {
    start: 1241,
    length: 1,
    convRule: rule22
}, {
    start: 1242,
    length: 1,
    convRule: rule21
}, {
    start: 1243,
    length: 1,
    convRule: rule22
}, {
    start: 1244,
    length: 1,
    convRule: rule21
}, {
    start: 1245,
    length: 1,
    convRule: rule22
}, {
    start: 1246,
    length: 1,
    convRule: rule21
}, {
    start: 1247,
    length: 1,
    convRule: rule22
}, {
    start: 1248,
    length: 1,
    convRule: rule21
}, {
    start: 1249,
    length: 1,
    convRule: rule22
}, {
    start: 1250,
    length: 1,
    convRule: rule21
}, {
    start: 1251,
    length: 1,
    convRule: rule22
}, {
    start: 1252,
    length: 1,
    convRule: rule21
}, {
    start: 1253,
    length: 1,
    convRule: rule22
}, {
    start: 1254,
    length: 1,
    convRule: rule21
}, {
    start: 1255,
    length: 1,
    convRule: rule22
}, {
    start: 1256,
    length: 1,
    convRule: rule21
}, {
    start: 1257,
    length: 1,
    convRule: rule22
}, {
    start: 1258,
    length: 1,
    convRule: rule21
}, {
    start: 1259,
    length: 1,
    convRule: rule22
}, {
    start: 1260,
    length: 1,
    convRule: rule21
}, {
    start: 1261,
    length: 1,
    convRule: rule22
}, {
    start: 1262,
    length: 1,
    convRule: rule21
}, {
    start: 1263,
    length: 1,
    convRule: rule22
}, {
    start: 1264,
    length: 1,
    convRule: rule21
}, {
    start: 1265,
    length: 1,
    convRule: rule22
}, {
    start: 1266,
    length: 1,
    convRule: rule21
}, {
    start: 1267,
    length: 1,
    convRule: rule22
}, {
    start: 1268,
    length: 1,
    convRule: rule21
}, {
    start: 1269,
    length: 1,
    convRule: rule22
}, {
    start: 1270,
    length: 1,
    convRule: rule21
}, {
    start: 1271,
    length: 1,
    convRule: rule22
}, {
    start: 1272,
    length: 1,
    convRule: rule21
}, {
    start: 1273,
    length: 1,
    convRule: rule22
}, {
    start: 1274,
    length: 1,
    convRule: rule21
}, {
    start: 1275,
    length: 1,
    convRule: rule22
}, {
    start: 1276,
    length: 1,
    convRule: rule21
}, {
    start: 1277,
    length: 1,
    convRule: rule22
}, {
    start: 1278,
    length: 1,
    convRule: rule21
}, {
    start: 1279,
    length: 1,
    convRule: rule22
}, {
    start: 1280,
    length: 1,
    convRule: rule21
}, {
    start: 1281,
    length: 1,
    convRule: rule22
}, {
    start: 1282,
    length: 1,
    convRule: rule21
}, {
    start: 1283,
    length: 1,
    convRule: rule22
}, {
    start: 1284,
    length: 1,
    convRule: rule21
}, {
    start: 1285,
    length: 1,
    convRule: rule22
}, {
    start: 1286,
    length: 1,
    convRule: rule21
}, {
    start: 1287,
    length: 1,
    convRule: rule22
}, {
    start: 1288,
    length: 1,
    convRule: rule21
}, {
    start: 1289,
    length: 1,
    convRule: rule22
}, {
    start: 1290,
    length: 1,
    convRule: rule21
}, {
    start: 1291,
    length: 1,
    convRule: rule22
}, {
    start: 1292,
    length: 1,
    convRule: rule21
}, {
    start: 1293,
    length: 1,
    convRule: rule22
}, {
    start: 1294,
    length: 1,
    convRule: rule21
}, {
    start: 1295,
    length: 1,
    convRule: rule22
}, {
    start: 1296,
    length: 1,
    convRule: rule21
}, {
    start: 1297,
    length: 1,
    convRule: rule22
}, {
    start: 1298,
    length: 1,
    convRule: rule21
}, {
    start: 1299,
    length: 1,
    convRule: rule22
}, {
    start: 1300,
    length: 1,
    convRule: rule21
}, {
    start: 1301,
    length: 1,
    convRule: rule22
}, {
    start: 1302,
    length: 1,
    convRule: rule21
}, {
    start: 1303,
    length: 1,
    convRule: rule22
}, {
    start: 1304,
    length: 1,
    convRule: rule21
}, {
    start: 1305,
    length: 1,
    convRule: rule22
}, {
    start: 1306,
    length: 1,
    convRule: rule21
}, {
    start: 1307,
    length: 1,
    convRule: rule22
}, {
    start: 1308,
    length: 1,
    convRule: rule21
}, {
    start: 1309,
    length: 1,
    convRule: rule22
}, {
    start: 1310,
    length: 1,
    convRule: rule21
}, {
    start: 1311,
    length: 1,
    convRule: rule22
}, {
    start: 1312,
    length: 1,
    convRule: rule21
}, {
    start: 1313,
    length: 1,
    convRule: rule22
}, {
    start: 1314,
    length: 1,
    convRule: rule21
}, {
    start: 1315,
    length: 1,
    convRule: rule22
}, {
    start: 1316,
    length: 1,
    convRule: rule21
}, {
    start: 1317,
    length: 1,
    convRule: rule22
}, {
    start: 1318,
    length: 1,
    convRule: rule21
}, {
    start: 1319,
    length: 1,
    convRule: rule22
}, {
    start: 1329,
    length: 38,
    convRule: rule112
}, {
    start: 1369,
    length: 1,
    convRule: rule83
}, {
    start: 1370,
    length: 6,
    convRule: rule2
}, {
    start: 1377,
    length: 38,
    convRule: rule113
}, {
    start: 1415,
    length: 1,
    convRule: rule14
}, {
    start: 1417,
    length: 1,
    convRule: rule2
}, {
    start: 1418,
    length: 1,
    convRule: rule7
}, {
    start: 1425,
    length: 45,
    convRule: rule84
}, {
    start: 1470,
    length: 1,
    convRule: rule7
}, {
    start: 1471,
    length: 1,
    convRule: rule84
}, {
    start: 1472,
    length: 1,
    convRule: rule2
}, {
    start: 1473,
    length: 2,
    convRule: rule84
}, {
    start: 1475,
    length: 1,
    convRule: rule2
}, {
    start: 1476,
    length: 2,
    convRule: rule84
}, {
    start: 1478,
    length: 1,
    convRule: rule2
}, {
    start: 1479,
    length: 1,
    convRule: rule84
}, {
    start: 1488,
    length: 27,
    convRule: rule45
}, {
    start: 1520,
    length: 3,
    convRule: rule45
}, {
    start: 1523,
    length: 2,
    convRule: rule2
}, {
    start: 1536,
    length: 4,
    convRule: rule16
}, {
    start: 1542,
    length: 3,
    convRule: rule6
}, {
    start: 1545,
    length: 2,
    convRule: rule2
}, {
    start: 1547,
    length: 1,
    convRule: rule3
}, {
    start: 1548,
    length: 2,
    convRule: rule2
}, {
    start: 1550,
    length: 2,
    convRule: rule13
}, {
    start: 1552,
    length: 11,
    convRule: rule84
}, {
    start: 1563,
    length: 1,
    convRule: rule2
}, {
    start: 1566,
    length: 2,
    convRule: rule2
}, {
    start: 1568,
    length: 32,
    convRule: rule45
}, {
    start: 1600,
    length: 1,
    convRule: rule83
}, {
    start: 1601,
    length: 10,
    convRule: rule45
}, {
    start: 1611,
    length: 21,
    convRule: rule84
}, {
    start: 1632,
    length: 10,
    convRule: rule8
}, {
    start: 1642,
    length: 4,
    convRule: rule2
}, {
    start: 1646,
    length: 2,
    convRule: rule45
}, {
    start: 1648,
    length: 1,
    convRule: rule84
}, {
    start: 1649,
    length: 99,
    convRule: rule45
}, {
    start: 1748,
    length: 1,
    convRule: rule2
}, {
    start: 1749,
    length: 1,
    convRule: rule45
}, {
    start: 1750,
    length: 7,
    convRule: rule84
}, {
    start: 1757,
    length: 1,
    convRule: rule16
}, {
    start: 1758,
    length: 1,
    convRule: rule13
}, {
    start: 1759,
    length: 6,
    convRule: rule84
}, {
    start: 1765,
    length: 2,
    convRule: rule83
}, {
    start: 1767,
    length: 2,
    convRule: rule84
}, {
    start: 1769,
    length: 1,
    convRule: rule13
}, {
    start: 1770,
    length: 4,
    convRule: rule84
}, {
    start: 1774,
    length: 2,
    convRule: rule45
}, {
    start: 1776,
    length: 10,
    convRule: rule8
}, {
    start: 1786,
    length: 3,
    convRule: rule45
}, {
    start: 1789,
    length: 2,
    convRule: rule13
}, {
    start: 1791,
    length: 1,
    convRule: rule45
}, {
    start: 1792,
    length: 14,
    convRule: rule2
}, {
    start: 1807,
    length: 1,
    convRule: rule16
}, {
    start: 1808,
    length: 1,
    convRule: rule45
}, {
    start: 1809,
    length: 1,
    convRule: rule84
}, {
    start: 1810,
    length: 30,
    convRule: rule45
}, {
    start: 1840,
    length: 27,
    convRule: rule84
}, {
    start: 1869,
    length: 89,
    convRule: rule45
}, {
    start: 1958,
    length: 11,
    convRule: rule84
}, {
    start: 1969,
    length: 1,
    convRule: rule45
}, {
    start: 1984,
    length: 10,
    convRule: rule8
}, {
    start: 1994,
    length: 33,
    convRule: rule45
}, {
    start: 2027,
    length: 9,
    convRule: rule84
}, {
    start: 2036,
    length: 2,
    convRule: rule83
}, {
    start: 2038,
    length: 1,
    convRule: rule13
}, {
    start: 2039,
    length: 3,
    convRule: rule2
}, {
    start: 2042,
    length: 1,
    convRule: rule83
}, {
    start: 2048,
    length: 22,
    convRule: rule45
}, {
    start: 2070,
    length: 4,
    convRule: rule84
}, {
    start: 2074,
    length: 1,
    convRule: rule83
}, {
    start: 2075,
    length: 9,
    convRule: rule84
}, {
    start: 2084,
    length: 1,
    convRule: rule83
}, {
    start: 2085,
    length: 3,
    convRule: rule84
}, {
    start: 2088,
    length: 1,
    convRule: rule83
}, {
    start: 2089,
    length: 5,
    convRule: rule84
}, {
    start: 2096,
    length: 15,
    convRule: rule2
}, {
    start: 2112,
    length: 25,
    convRule: rule45
}, {
    start: 2137,
    length: 3,
    convRule: rule84
}, {
    start: 2142,
    length: 1,
    convRule: rule2
}, {
    start: 2304,
    length: 3,
    convRule: rule84
}, {
    start: 2307,
    length: 1,
    convRule: rule114
}, {
    start: 2308,
    length: 54,
    convRule: rule45
}, {
    start: 2362,
    length: 1,
    convRule: rule84
}, {
    start: 2363,
    length: 1,
    convRule: rule114
}, {
    start: 2364,
    length: 1,
    convRule: rule84
}, {
    start: 2365,
    length: 1,
    convRule: rule45
}, {
    start: 2366,
    length: 3,
    convRule: rule114
}, {
    start: 2369,
    length: 8,
    convRule: rule84
}, {
    start: 2377,
    length: 4,
    convRule: rule114
}, {
    start: 2381,
    length: 1,
    convRule: rule84
}, {
    start: 2382,
    length: 2,
    convRule: rule114
}, {
    start: 2384,
    length: 1,
    convRule: rule45
}, {
    start: 2385,
    length: 7,
    convRule: rule84
}, {
    start: 2392,
    length: 10,
    convRule: rule45
}, {
    start: 2402,
    length: 2,
    convRule: rule84
}, {
    start: 2404,
    length: 2,
    convRule: rule2
}, {
    start: 2406,
    length: 10,
    convRule: rule8
}, {
    start: 2416,
    length: 1,
    convRule: rule2
}, {
    start: 2417,
    length: 1,
    convRule: rule83
}, {
    start: 2418,
    length: 6,
    convRule: rule45
}, {
    start: 2425,
    length: 7,
    convRule: rule45
}, {
    start: 2433,
    length: 1,
    convRule: rule84
}, {
    start: 2434,
    length: 2,
    convRule: rule114
}, {
    start: 2437,
    length: 8,
    convRule: rule45
}, {
    start: 2447,
    length: 2,
    convRule: rule45
}, {
    start: 2451,
    length: 22,
    convRule: rule45
}, {
    start: 2474,
    length: 7,
    convRule: rule45
}, {
    start: 2482,
    length: 1,
    convRule: rule45
}, {
    start: 2486,
    length: 4,
    convRule: rule45
}, {
    start: 2492,
    length: 1,
    convRule: rule84
}, {
    start: 2493,
    length: 1,
    convRule: rule45
}, {
    start: 2494,
    length: 3,
    convRule: rule114
}, {
    start: 2497,
    length: 4,
    convRule: rule84
}, {
    start: 2503,
    length: 2,
    convRule: rule114
}, {
    start: 2507,
    length: 2,
    convRule: rule114
}, {
    start: 2509,
    length: 1,
    convRule: rule84
}, {
    start: 2510,
    length: 1,
    convRule: rule45
}, {
    start: 2519,
    length: 1,
    convRule: rule114
}, {
    start: 2524,
    length: 2,
    convRule: rule45
}, {
    start: 2527,
    length: 3,
    convRule: rule45
}, {
    start: 2530,
    length: 2,
    convRule: rule84
}, {
    start: 2534,
    length: 10,
    convRule: rule8
}, {
    start: 2544,
    length: 2,
    convRule: rule45
}, {
    start: 2546,
    length: 2,
    convRule: rule3
}, {
    start: 2548,
    length: 6,
    convRule: rule17
}, {
    start: 2554,
    length: 1,
    convRule: rule13
}, {
    start: 2555,
    length: 1,
    convRule: rule3
}, {
    start: 2561,
    length: 2,
    convRule: rule84
}, {
    start: 2563,
    length: 1,
    convRule: rule114
}, {
    start: 2565,
    length: 6,
    convRule: rule45
}, {
    start: 2575,
    length: 2,
    convRule: rule45
}, {
    start: 2579,
    length: 22,
    convRule: rule45
}, {
    start: 2602,
    length: 7,
    convRule: rule45
}, {
    start: 2610,
    length: 2,
    convRule: rule45
}, {
    start: 2613,
    length: 2,
    convRule: rule45
}, {
    start: 2616,
    length: 2,
    convRule: rule45
}, {
    start: 2620,
    length: 1,
    convRule: rule84
}, {
    start: 2622,
    length: 3,
    convRule: rule114
}, {
    start: 2625,
    length: 2,
    convRule: rule84
}, {
    start: 2631,
    length: 2,
    convRule: rule84
}, {
    start: 2635,
    length: 3,
    convRule: rule84
}, {
    start: 2641,
    length: 1,
    convRule: rule84
}, {
    start: 2649,
    length: 4,
    convRule: rule45
}, {
    start: 2654,
    length: 1,
    convRule: rule45
}, {
    start: 2662,
    length: 10,
    convRule: rule8
}, {
    start: 2672,
    length: 2,
    convRule: rule84
}, {
    start: 2674,
    length: 3,
    convRule: rule45
}, {
    start: 2677,
    length: 1,
    convRule: rule84
}, {
    start: 2689,
    length: 2,
    convRule: rule84
}, {
    start: 2691,
    length: 1,
    convRule: rule114
}, {
    start: 2693,
    length: 9,
    convRule: rule45
}, {
    start: 2703,
    length: 3,
    convRule: rule45
}, {
    start: 2707,
    length: 22,
    convRule: rule45
}, {
    start: 2730,
    length: 7,
    convRule: rule45
}, {
    start: 2738,
    length: 2,
    convRule: rule45
}, {
    start: 2741,
    length: 5,
    convRule: rule45
}, {
    start: 2748,
    length: 1,
    convRule: rule84
}, {
    start: 2749,
    length: 1,
    convRule: rule45
}, {
    start: 2750,
    length: 3,
    convRule: rule114
}, {
    start: 2753,
    length: 5,
    convRule: rule84
}, {
    start: 2759,
    length: 2,
    convRule: rule84
}, {
    start: 2761,
    length: 1,
    convRule: rule114
}, {
    start: 2763,
    length: 2,
    convRule: rule114
}, {
    start: 2765,
    length: 1,
    convRule: rule84
}, {
    start: 2768,
    length: 1,
    convRule: rule45
}, {
    start: 2784,
    length: 2,
    convRule: rule45
}, {
    start: 2786,
    length: 2,
    convRule: rule84
}, {
    start: 2790,
    length: 10,
    convRule: rule8
}, {
    start: 2801,
    length: 1,
    convRule: rule3
}, {
    start: 2817,
    length: 1,
    convRule: rule84
}, {
    start: 2818,
    length: 2,
    convRule: rule114
}, {
    start: 2821,
    length: 8,
    convRule: rule45
}, {
    start: 2831,
    length: 2,
    convRule: rule45
}, {
    start: 2835,
    length: 22,
    convRule: rule45
}, {
    start: 2858,
    length: 7,
    convRule: rule45
}, {
    start: 2866,
    length: 2,
    convRule: rule45
}, {
    start: 2869,
    length: 5,
    convRule: rule45
}, {
    start: 2876,
    length: 1,
    convRule: rule84
}, {
    start: 2877,
    length: 1,
    convRule: rule45
}, {
    start: 2878,
    length: 1,
    convRule: rule114
}, {
    start: 2879,
    length: 1,
    convRule: rule84
}, {
    start: 2880,
    length: 1,
    convRule: rule114
}, {
    start: 2881,
    length: 4,
    convRule: rule84
}, {
    start: 2887,
    length: 2,
    convRule: rule114
}, {
    start: 2891,
    length: 2,
    convRule: rule114
}, {
    start: 2893,
    length: 1,
    convRule: rule84
}, {
    start: 2902,
    length: 1,
    convRule: rule84
}, {
    start: 2903,
    length: 1,
    convRule: rule114
}, {
    start: 2908,
    length: 2,
    convRule: rule45
}, {
    start: 2911,
    length: 3,
    convRule: rule45
}, {
    start: 2914,
    length: 2,
    convRule: rule84
}, {
    start: 2918,
    length: 10,
    convRule: rule8
}, {
    start: 2928,
    length: 1,
    convRule: rule13
}, {
    start: 2929,
    length: 1,
    convRule: rule45
}, {
    start: 2930,
    length: 6,
    convRule: rule17
}, {
    start: 2946,
    length: 1,
    convRule: rule84
}, {
    start: 2947,
    length: 1,
    convRule: rule45
}, {
    start: 2949,
    length: 6,
    convRule: rule45
}, {
    start: 2958,
    length: 3,
    convRule: rule45
}, {
    start: 2962,
    length: 4,
    convRule: rule45
}, {
    start: 2969,
    length: 2,
    convRule: rule45
}, {
    start: 2972,
    length: 1,
    convRule: rule45
}, {
    start: 2974,
    length: 2,
    convRule: rule45
}, {
    start: 2979,
    length: 2,
    convRule: rule45
}, {
    start: 2984,
    length: 3,
    convRule: rule45
}, {
    start: 2990,
    length: 12,
    convRule: rule45
}, {
    start: 3006,
    length: 2,
    convRule: rule114
}, {
    start: 3008,
    length: 1,
    convRule: rule84
}, {
    start: 3009,
    length: 2,
    convRule: rule114
}, {
    start: 3014,
    length: 3,
    convRule: rule114
}, {
    start: 3018,
    length: 3,
    convRule: rule114
}, {
    start: 3021,
    length: 1,
    convRule: rule84
}, {
    start: 3024,
    length: 1,
    convRule: rule45
}, {
    start: 3031,
    length: 1,
    convRule: rule114
}, {
    start: 3046,
    length: 10,
    convRule: rule8
}, {
    start: 3056,
    length: 3,
    convRule: rule17
}, {
    start: 3059,
    length: 6,
    convRule: rule13
}, {
    start: 3065,
    length: 1,
    convRule: rule3
}, {
    start: 3066,
    length: 1,
    convRule: rule13
}, {
    start: 3073,
    length: 3,
    convRule: rule114
}, {
    start: 3077,
    length: 8,
    convRule: rule45
}, {
    start: 3086,
    length: 3,
    convRule: rule45
}, {
    start: 3090,
    length: 23,
    convRule: rule45
}, {
    start: 3114,
    length: 10,
    convRule: rule45
}, {
    start: 3125,
    length: 5,
    convRule: rule45
}, {
    start: 3133,
    length: 1,
    convRule: rule45
}, {
    start: 3134,
    length: 3,
    convRule: rule84
}, {
    start: 3137,
    length: 4,
    convRule: rule114
}, {
    start: 3142,
    length: 3,
    convRule: rule84
}, {
    start: 3146,
    length: 4,
    convRule: rule84
}, {
    start: 3157,
    length: 2,
    convRule: rule84
}, {
    start: 3160,
    length: 2,
    convRule: rule45
}, {
    start: 3168,
    length: 2,
    convRule: rule45
}, {
    start: 3170,
    length: 2,
    convRule: rule84
}, {
    start: 3174,
    length: 10,
    convRule: rule8
}, {
    start: 3192,
    length: 7,
    convRule: rule17
}, {
    start: 3199,
    length: 1,
    convRule: rule13
}, {
    start: 3202,
    length: 2,
    convRule: rule114
}, {
    start: 3205,
    length: 8,
    convRule: rule45
}, {
    start: 3214,
    length: 3,
    convRule: rule45
}, {
    start: 3218,
    length: 23,
    convRule: rule45
}, {
    start: 3242,
    length: 10,
    convRule: rule45
}, {
    start: 3253,
    length: 5,
    convRule: rule45
}, {
    start: 3260,
    length: 1,
    convRule: rule84
}, {
    start: 3261,
    length: 1,
    convRule: rule45
}, {
    start: 3262,
    length: 1,
    convRule: rule114
}, {
    start: 3263,
    length: 1,
    convRule: rule84
}, {
    start: 3264,
    length: 5,
    convRule: rule114
}, {
    start: 3270,
    length: 1,
    convRule: rule84
}, {
    start: 3271,
    length: 2,
    convRule: rule114
}, {
    start: 3274,
    length: 2,
    convRule: rule114
}, {
    start: 3276,
    length: 2,
    convRule: rule84
}, {
    start: 3285,
    length: 2,
    convRule: rule114
}, {
    start: 3294,
    length: 1,
    convRule: rule45
}, {
    start: 3296,
    length: 2,
    convRule: rule45
}, {
    start: 3298,
    length: 2,
    convRule: rule84
}, {
    start: 3302,
    length: 10,
    convRule: rule8
}, {
    start: 3313,
    length: 2,
    convRule: rule45
}, {
    start: 3330,
    length: 2,
    convRule: rule114
}, {
    start: 3333,
    length: 8,
    convRule: rule45
}, {
    start: 3342,
    length: 3,
    convRule: rule45
}, {
    start: 3346,
    length: 41,
    convRule: rule45
}, {
    start: 3389,
    length: 1,
    convRule: rule45
}, {
    start: 3390,
    length: 3,
    convRule: rule114
}, {
    start: 3393,
    length: 4,
    convRule: rule84
}, {
    start: 3398,
    length: 3,
    convRule: rule114
}, {
    start: 3402,
    length: 3,
    convRule: rule114
}, {
    start: 3405,
    length: 1,
    convRule: rule84
}, {
    start: 3406,
    length: 1,
    convRule: rule45
}, {
    start: 3415,
    length: 1,
    convRule: rule114
}, {
    start: 3424,
    length: 2,
    convRule: rule45
}, {
    start: 3426,
    length: 2,
    convRule: rule84
}, {
    start: 3430,
    length: 10,
    convRule: rule8
}, {
    start: 3440,
    length: 6,
    convRule: rule17
}, {
    start: 3449,
    length: 1,
    convRule: rule13
}, {
    start: 3450,
    length: 6,
    convRule: rule45
}, {
    start: 3458,
    length: 2,
    convRule: rule114
}, {
    start: 3461,
    length: 18,
    convRule: rule45
}, {
    start: 3482,
    length: 24,
    convRule: rule45
}, {
    start: 3507,
    length: 9,
    convRule: rule45
}, {
    start: 3517,
    length: 1,
    convRule: rule45
}, {
    start: 3520,
    length: 7,
    convRule: rule45
}, {
    start: 3530,
    length: 1,
    convRule: rule84
}, {
    start: 3535,
    length: 3,
    convRule: rule114
}, {
    start: 3538,
    length: 3,
    convRule: rule84
}, {
    start: 3542,
    length: 1,
    convRule: rule84
}, {
    start: 3544,
    length: 8,
    convRule: rule114
}, {
    start: 3570,
    length: 2,
    convRule: rule114
}, {
    start: 3572,
    length: 1,
    convRule: rule2
}, {
    start: 3585,
    length: 48,
    convRule: rule45
}, {
    start: 3633,
    length: 1,
    convRule: rule84
}, {
    start: 3634,
    length: 2,
    convRule: rule45
}, {
    start: 3636,
    length: 7,
    convRule: rule84
}, {
    start: 3647,
    length: 1,
    convRule: rule3
}, {
    start: 3648,
    length: 6,
    convRule: rule45
}, {
    start: 3654,
    length: 1,
    convRule: rule83
}, {
    start: 3655,
    length: 8,
    convRule: rule84
}, {
    start: 3663,
    length: 1,
    convRule: rule2
}, {
    start: 3664,
    length: 10,
    convRule: rule8
}, {
    start: 3674,
    length: 2,
    convRule: rule2
}, {
    start: 3713,
    length: 2,
    convRule: rule45
}, {
    start: 3716,
    length: 1,
    convRule: rule45
}, {
    start: 3719,
    length: 2,
    convRule: rule45
}, {
    start: 3722,
    length: 1,
    convRule: rule45
}, {
    start: 3725,
    length: 1,
    convRule: rule45
}, {
    start: 3732,
    length: 4,
    convRule: rule45
}, {
    start: 3737,
    length: 7,
    convRule: rule45
}, {
    start: 3745,
    length: 3,
    convRule: rule45
}, {
    start: 3749,
    length: 1,
    convRule: rule45
}, {
    start: 3751,
    length: 1,
    convRule: rule45
}, {
    start: 3754,
    length: 2,
    convRule: rule45
}, {
    start: 3757,
    length: 4,
    convRule: rule45
}, {
    start: 3761,
    length: 1,
    convRule: rule84
}, {
    start: 3762,
    length: 2,
    convRule: rule45
}, {
    start: 3764,
    length: 6,
    convRule: rule84
}, {
    start: 3771,
    length: 2,
    convRule: rule84
}, {
    start: 3773,
    length: 1,
    convRule: rule45
}, {
    start: 3776,
    length: 5,
    convRule: rule45
}, {
    start: 3782,
    length: 1,
    convRule: rule83
}, {
    start: 3784,
    length: 6,
    convRule: rule84
}, {
    start: 3792,
    length: 10,
    convRule: rule8
}, {
    start: 3804,
    length: 2,
    convRule: rule45
}, {
    start: 3840,
    length: 1,
    convRule: rule45
}, {
    start: 3841,
    length: 3,
    convRule: rule13
}, {
    start: 3844,
    length: 15,
    convRule: rule2
}, {
    start: 3859,
    length: 5,
    convRule: rule13
}, {
    start: 3864,
    length: 2,
    convRule: rule84
}, {
    start: 3866,
    length: 6,
    convRule: rule13
}, {
    start: 3872,
    length: 10,
    convRule: rule8
}, {
    start: 3882,
    length: 10,
    convRule: rule17
}, {
    start: 3892,
    length: 1,
    convRule: rule13
}, {
    start: 3893,
    length: 1,
    convRule: rule84
}, {
    start: 3894,
    length: 1,
    convRule: rule13
}, {
    start: 3895,
    length: 1,
    convRule: rule84
}, {
    start: 3896,
    length: 1,
    convRule: rule13
}, {
    start: 3897,
    length: 1,
    convRule: rule84
}, {
    start: 3898,
    length: 1,
    convRule: rule4
}, {
    start: 3899,
    length: 1,
    convRule: rule5
}, {
    start: 3900,
    length: 1,
    convRule: rule4
}, {
    start: 3901,
    length: 1,
    convRule: rule5
}, {
    start: 3902,
    length: 2,
    convRule: rule114
}, {
    start: 3904,
    length: 8,
    convRule: rule45
}, {
    start: 3913,
    length: 36,
    convRule: rule45
}, {
    start: 3953,
    length: 14,
    convRule: rule84
}, {
    start: 3967,
    length: 1,
    convRule: rule114
}, {
    start: 3968,
    length: 5,
    convRule: rule84
}, {
    start: 3973,
    length: 1,
    convRule: rule2
}, {
    start: 3974,
    length: 2,
    convRule: rule84
}, {
    start: 3976,
    length: 5,
    convRule: rule45
}, {
    start: 3981,
    length: 11,
    convRule: rule84
}, {
    start: 3993,
    length: 36,
    convRule: rule84
}, {
    start: 4030,
    length: 8,
    convRule: rule13
}, {
    start: 4038,
    length: 1,
    convRule: rule84
}, {
    start: 4039,
    length: 6,
    convRule: rule13
}, {
    start: 4046,
    length: 2,
    convRule: rule13
}, {
    start: 4048,
    length: 5,
    convRule: rule2
}, {
    start: 4053,
    length: 4,
    convRule: rule13
}, {
    start: 4057,
    length: 2,
    convRule: rule2
}, {
    start: 4096,
    length: 43,
    convRule: rule45
}, {
    start: 4139,
    length: 2,
    convRule: rule114
}, {
    start: 4141,
    length: 4,
    convRule: rule84
}, {
    start: 4145,
    length: 1,
    convRule: rule114
}, {
    start: 4146,
    length: 6,
    convRule: rule84
}, {
    start: 4152,
    length: 1,
    convRule: rule114
}, {
    start: 4153,
    length: 2,
    convRule: rule84
}, {
    start: 4155,
    length: 2,
    convRule: rule114
}, {
    start: 4157,
    length: 2,
    convRule: rule84
}, {
    start: 4159,
    length: 1,
    convRule: rule45
}, {
    start: 4160,
    length: 10,
    convRule: rule8
}, {
    start: 4170,
    length: 6,
    convRule: rule2
}, {
    start: 4176,
    length: 6,
    convRule: rule45
}, {
    start: 4182,
    length: 2,
    convRule: rule114
}, {
    start: 4184,
    length: 2,
    convRule: rule84
}, {
    start: 4186,
    length: 4,
    convRule: rule45
}, {
    start: 4190,
    length: 3,
    convRule: rule84
}, {
    start: 4193,
    length: 1,
    convRule: rule45
}, {
    start: 4194,
    length: 3,
    convRule: rule114
}, {
    start: 4197,
    length: 2,
    convRule: rule45
}, {
    start: 4199,
    length: 7,
    convRule: rule114
}, {
    start: 4206,
    length: 3,
    convRule: rule45
}, {
    start: 4209,
    length: 4,
    convRule: rule84
}, {
    start: 4213,
    length: 13,
    convRule: rule45
}, {
    start: 4226,
    length: 1,
    convRule: rule84
}, {
    start: 4227,
    length: 2,
    convRule: rule114
}, {
    start: 4229,
    length: 2,
    convRule: rule84
}, {
    start: 4231,
    length: 6,
    convRule: rule114
}, {
    start: 4237,
    length: 1,
    convRule: rule84
}, {
    start: 4238,
    length: 1,
    convRule: rule45
}, {
    start: 4239,
    length: 1,
    convRule: rule114
}, {
    start: 4240,
    length: 10,
    convRule: rule8
}, {
    start: 4250,
    length: 3,
    convRule: rule114
}, {
    start: 4253,
    length: 1,
    convRule: rule84
}, {
    start: 4254,
    length: 2,
    convRule: rule13
}, {
    start: 4256,
    length: 38,
    convRule: rule115
}, {
    start: 4304,
    length: 43,
    convRule: rule45
}, {
    start: 4347,
    length: 1,
    convRule: rule2
}, {
    start: 4348,
    length: 1,
    convRule: rule83
}, {
    start: 4352,
    length: 329,
    convRule: rule45
}, {
    start: 4682,
    length: 4,
    convRule: rule45
}, {
    start: 4688,
    length: 7,
    convRule: rule45
}, {
    start: 4696,
    length: 1,
    convRule: rule45
}, {
    start: 4698,
    length: 4,
    convRule: rule45
}, {
    start: 4704,
    length: 41,
    convRule: rule45
}, {
    start: 4746,
    length: 4,
    convRule: rule45
}, {
    start: 4752,
    length: 33,
    convRule: rule45
}, {
    start: 4786,
    length: 4,
    convRule: rule45
}, {
    start: 4792,
    length: 7,
    convRule: rule45
}, {
    start: 4800,
    length: 1,
    convRule: rule45
}, {
    start: 4802,
    length: 4,
    convRule: rule45
}, {
    start: 4808,
    length: 15,
    convRule: rule45
}, {
    start: 4824,
    length: 57,
    convRule: rule45
}, {
    start: 4882,
    length: 4,
    convRule: rule45
}, {
    start: 4888,
    length: 67,
    convRule: rule45
}, {
    start: 4957,
    length: 3,
    convRule: rule84
}, {
    start: 4960,
    length: 1,
    convRule: rule13
}, {
    start: 4961,
    length: 8,
    convRule: rule2
}, {
    start: 4969,
    length: 20,
    convRule: rule17
}, {
    start: 4992,
    length: 16,
    convRule: rule45
}, {
    start: 5008,
    length: 10,
    convRule: rule13
}, {
    start: 5024,
    length: 85,
    convRule: rule45
}, {
    start: 5120,
    length: 1,
    convRule: rule7
}, {
    start: 5121,
    length: 620,
    convRule: rule45
}, {
    start: 5741,
    length: 2,
    convRule: rule2
}, {
    start: 5743,
    length: 17,
    convRule: rule45
}, {
    start: 5760,
    length: 1,
    convRule: rule1
}, {
    start: 5761,
    length: 26,
    convRule: rule45
}, {
    start: 5787,
    length: 1,
    convRule: rule4
}, {
    start: 5788,
    length: 1,
    convRule: rule5
}, {
    start: 5792,
    length: 75,
    convRule: rule45
}, {
    start: 5867,
    length: 3,
    convRule: rule2
}, {
    start: 5870,
    length: 3,
    convRule: rule116
}, {
    start: 5888,
    length: 13,
    convRule: rule45
}, {
    start: 5902,
    length: 4,
    convRule: rule45
}, {
    start: 5906,
    length: 3,
    convRule: rule84
}, {
    start: 5920,
    length: 18,
    convRule: rule45
}, {
    start: 5938,
    length: 3,
    convRule: rule84
}, {
    start: 5941,
    length: 2,
    convRule: rule2
}, {
    start: 5952,
    length: 18,
    convRule: rule45
}, {
    start: 5970,
    length: 2,
    convRule: rule84
}, {
    start: 5984,
    length: 13,
    convRule: rule45
}, {
    start: 5998,
    length: 3,
    convRule: rule45
}, {
    start: 6002,
    length: 2,
    convRule: rule84
}, {
    start: 6016,
    length: 52,
    convRule: rule45
}, {
    start: 6068,
    length: 2,
    convRule: rule16
}, {
    start: 6070,
    length: 1,
    convRule: rule114
}, {
    start: 6071,
    length: 7,
    convRule: rule84
}, {
    start: 6078,
    length: 8,
    convRule: rule114
}, {
    start: 6086,
    length: 1,
    convRule: rule84
}, {
    start: 6087,
    length: 2,
    convRule: rule114
}, {
    start: 6089,
    length: 11,
    convRule: rule84
}, {
    start: 6100,
    length: 3,
    convRule: rule2
}, {
    start: 6103,
    length: 1,
    convRule: rule83
}, {
    start: 6104,
    length: 3,
    convRule: rule2
}, {
    start: 6107,
    length: 1,
    convRule: rule3
}, {
    start: 6108,
    length: 1,
    convRule: rule45
}, {
    start: 6109,
    length: 1,
    convRule: rule84
}, {
    start: 6112,
    length: 10,
    convRule: rule8
}, {
    start: 6128,
    length: 10,
    convRule: rule17
}, {
    start: 6144,
    length: 6,
    convRule: rule2
}, {
    start: 6150,
    length: 1,
    convRule: rule7
}, {
    start: 6151,
    length: 4,
    convRule: rule2
}, {
    start: 6155,
    length: 3,
    convRule: rule84
}, {
    start: 6158,
    length: 1,
    convRule: rule1
}, {
    start: 6160,
    length: 10,
    convRule: rule8
}, {
    start: 6176,
    length: 35,
    convRule: rule45
}, {
    start: 6211,
    length: 1,
    convRule: rule83
}, {
    start: 6212,
    length: 52,
    convRule: rule45
}, {
    start: 6272,
    length: 41,
    convRule: rule45
}, {
    start: 6313,
    length: 1,
    convRule: rule84
}, {
    start: 6314,
    length: 1,
    convRule: rule45
}, {
    start: 6320,
    length: 70,
    convRule: rule45
}, {
    start: 6400,
    length: 29,
    convRule: rule45
}, {
    start: 6432,
    length: 3,
    convRule: rule84
}, {
    start: 6435,
    length: 4,
    convRule: rule114
}, {
    start: 6439,
    length: 2,
    convRule: rule84
}, {
    start: 6441,
    length: 3,
    convRule: rule114
}, {
    start: 6448,
    length: 2,
    convRule: rule114
}, {
    start: 6450,
    length: 1,
    convRule: rule84
}, {
    start: 6451,
    length: 6,
    convRule: rule114
}, {
    start: 6457,
    length: 3,
    convRule: rule84
}, {
    start: 6464,
    length: 1,
    convRule: rule13
}, {
    start: 6468,
    length: 2,
    convRule: rule2
}, {
    start: 6470,
    length: 10,
    convRule: rule8
}, {
    start: 6480,
    length: 30,
    convRule: rule45
}, {
    start: 6512,
    length: 5,
    convRule: rule45
}, {
    start: 6528,
    length: 44,
    convRule: rule45
}, {
    start: 6576,
    length: 17,
    convRule: rule114
}, {
    start: 6593,
    length: 7,
    convRule: rule45
}, {
    start: 6600,
    length: 2,
    convRule: rule114
}, {
    start: 6608,
    length: 10,
    convRule: rule8
}, {
    start: 6618,
    length: 1,
    convRule: rule17
}, {
    start: 6622,
    length: 34,
    convRule: rule13
}, {
    start: 6656,
    length: 23,
    convRule: rule45
}, {
    start: 6679,
    length: 2,
    convRule: rule84
}, {
    start: 6681,
    length: 3,
    convRule: rule114
}, {
    start: 6686,
    length: 2,
    convRule: rule2
}, {
    start: 6688,
    length: 53,
    convRule: rule45
}, {
    start: 6741,
    length: 1,
    convRule: rule114
}, {
    start: 6742,
    length: 1,
    convRule: rule84
}, {
    start: 6743,
    length: 1,
    convRule: rule114
}, {
    start: 6744,
    length: 7,
    convRule: rule84
}, {
    start: 6752,
    length: 1,
    convRule: rule84
}, {
    start: 6753,
    length: 1,
    convRule: rule114
}, {
    start: 6754,
    length: 1,
    convRule: rule84
}, {
    start: 6755,
    length: 2,
    convRule: rule114
}, {
    start: 6757,
    length: 8,
    convRule: rule84
}, {
    start: 6765,
    length: 6,
    convRule: rule114
}, {
    start: 6771,
    length: 10,
    convRule: rule84
}, {
    start: 6783,
    length: 1,
    convRule: rule84
}, {
    start: 6784,
    length: 10,
    convRule: rule8
}, {
    start: 6800,
    length: 10,
    convRule: rule8
}, {
    start: 6816,
    length: 7,
    convRule: rule2
}, {
    start: 6823,
    length: 1,
    convRule: rule83
}, {
    start: 6824,
    length: 6,
    convRule: rule2
}, {
    start: 6912,
    length: 4,
    convRule: rule84
}, {
    start: 6916,
    length: 1,
    convRule: rule114
}, {
    start: 6917,
    length: 47,
    convRule: rule45
}, {
    start: 6964,
    length: 1,
    convRule: rule84
}, {
    start: 6965,
    length: 1,
    convRule: rule114
}, {
    start: 6966,
    length: 5,
    convRule: rule84
}, {
    start: 6971,
    length: 1,
    convRule: rule114
}, {
    start: 6972,
    length: 1,
    convRule: rule84
}, {
    start: 6973,
    length: 5,
    convRule: rule114
}, {
    start: 6978,
    length: 1,
    convRule: rule84
}, {
    start: 6979,
    length: 2,
    convRule: rule114
}, {
    start: 6981,
    length: 7,
    convRule: rule45
}, {
    start: 6992,
    length: 10,
    convRule: rule8
}, {
    start: 7002,
    length: 7,
    convRule: rule2
}, {
    start: 7009,
    length: 10,
    convRule: rule13
}, {
    start: 7019,
    length: 9,
    convRule: rule84
}, {
    start: 7028,
    length: 9,
    convRule: rule13
}, {
    start: 7040,
    length: 2,
    convRule: rule84
}, {
    start: 7042,
    length: 1,
    convRule: rule114
}, {
    start: 7043,
    length: 30,
    convRule: rule45
}, {
    start: 7073,
    length: 1,
    convRule: rule114
}, {
    start: 7074,
    length: 4,
    convRule: rule84
}, {
    start: 7078,
    length: 2,
    convRule: rule114
}, {
    start: 7080,
    length: 2,
    convRule: rule84
}, {
    start: 7082,
    length: 1,
    convRule: rule114
}, {
    start: 7086,
    length: 2,
    convRule: rule45
}, {
    start: 7088,
    length: 10,
    convRule: rule8
}, {
    start: 7104,
    length: 38,
    convRule: rule45
}, {
    start: 7142,
    length: 1,
    convRule: rule84
}, {
    start: 7143,
    length: 1,
    convRule: rule114
}, {
    start: 7144,
    length: 2,
    convRule: rule84
}, {
    start: 7146,
    length: 3,
    convRule: rule114
}, {
    start: 7149,
    length: 1,
    convRule: rule84
}, {
    start: 7150,
    length: 1,
    convRule: rule114
}, {
    start: 7151,
    length: 3,
    convRule: rule84
}, {
    start: 7154,
    length: 2,
    convRule: rule114
}, {
    start: 7164,
    length: 4,
    convRule: rule2
}, {
    start: 7168,
    length: 36,
    convRule: rule45
}, {
    start: 7204,
    length: 8,
    convRule: rule114
}, {
    start: 7212,
    length: 8,
    convRule: rule84
}, {
    start: 7220,
    length: 2,
    convRule: rule114
}, {
    start: 7222,
    length: 2,
    convRule: rule84
}, {
    start: 7227,
    length: 5,
    convRule: rule2
}, {
    start: 7232,
    length: 10,
    convRule: rule8
}, {
    start: 7245,
    length: 3,
    convRule: rule45
}, {
    start: 7248,
    length: 10,
    convRule: rule8
}, {
    start: 7258,
    length: 30,
    convRule: rule45
}, {
    start: 7288,
    length: 6,
    convRule: rule83
}, {
    start: 7294,
    length: 2,
    convRule: rule2
}, {
    start: 7376,
    length: 3,
    convRule: rule84
}, {
    start: 7379,
    length: 1,
    convRule: rule2
}, {
    start: 7380,
    length: 13,
    convRule: rule84
}, {
    start: 7393,
    length: 1,
    convRule: rule114
}, {
    start: 7394,
    length: 7,
    convRule: rule84
}, {
    start: 7401,
    length: 4,
    convRule: rule45
}, {
    start: 7405,
    length: 1,
    convRule: rule84
}, {
    start: 7406,
    length: 4,
    convRule: rule45
}, {
    start: 7410,
    length: 1,
    convRule: rule114
}, {
    start: 7424,
    length: 44,
    convRule: rule14
}, {
    start: 7468,
    length: 54,
    convRule: rule83
}, {
    start: 7522,
    length: 22,
    convRule: rule14
}, {
    start: 7544,
    length: 1,
    convRule: rule83
}, {
    start: 7545,
    length: 1,
    convRule: rule117
}, {
    start: 7546,
    length: 3,
    convRule: rule14
}, {
    start: 7549,
    length: 1,
    convRule: rule118
}, {
    start: 7550,
    length: 29,
    convRule: rule14
}, {
    start: 7579,
    length: 37,
    convRule: rule83
}, {
    start: 7616,
    length: 39,
    convRule: rule84
}, {
    start: 7676,
    length: 4,
    convRule: rule84
}, {
    start: 7680,
    length: 1,
    convRule: rule21
}, {
    start: 7681,
    length: 1,
    convRule: rule22
}, {
    start: 7682,
    length: 1,
    convRule: rule21
}, {
    start: 7683,
    length: 1,
    convRule: rule22
}, {
    start: 7684,
    length: 1,
    convRule: rule21
}, {
    start: 7685,
    length: 1,
    convRule: rule22
}, {
    start: 7686,
    length: 1,
    convRule: rule21
}, {
    start: 7687,
    length: 1,
    convRule: rule22
}, {
    start: 7688,
    length: 1,
    convRule: rule21
}, {
    start: 7689,
    length: 1,
    convRule: rule22
}, {
    start: 7690,
    length: 1,
    convRule: rule21
}, {
    start: 7691,
    length: 1,
    convRule: rule22
}, {
    start: 7692,
    length: 1,
    convRule: rule21
}, {
    start: 7693,
    length: 1,
    convRule: rule22
}, {
    start: 7694,
    length: 1,
    convRule: rule21
}, {
    start: 7695,
    length: 1,
    convRule: rule22
}, {
    start: 7696,
    length: 1,
    convRule: rule21
}, {
    start: 7697,
    length: 1,
    convRule: rule22
}, {
    start: 7698,
    length: 1,
    convRule: rule21
}, {
    start: 7699,
    length: 1,
    convRule: rule22
}, {
    start: 7700,
    length: 1,
    convRule: rule21
}, {
    start: 7701,
    length: 1,
    convRule: rule22
}, {
    start: 7702,
    length: 1,
    convRule: rule21
}, {
    start: 7703,
    length: 1,
    convRule: rule22
}, {
    start: 7704,
    length: 1,
    convRule: rule21
}, {
    start: 7705,
    length: 1,
    convRule: rule22
}, {
    start: 7706,
    length: 1,
    convRule: rule21
}, {
    start: 7707,
    length: 1,
    convRule: rule22
}, {
    start: 7708,
    length: 1,
    convRule: rule21
}, {
    start: 7709,
    length: 1,
    convRule: rule22
}, {
    start: 7710,
    length: 1,
    convRule: rule21
}, {
    start: 7711,
    length: 1,
    convRule: rule22
}, {
    start: 7712,
    length: 1,
    convRule: rule21
}, {
    start: 7713,
    length: 1,
    convRule: rule22
}, {
    start: 7714,
    length: 1,
    convRule: rule21
}, {
    start: 7715,
    length: 1,
    convRule: rule22
}, {
    start: 7716,
    length: 1,
    convRule: rule21
}, {
    start: 7717,
    length: 1,
    convRule: rule22
}, {
    start: 7718,
    length: 1,
    convRule: rule21
}, {
    start: 7719,
    length: 1,
    convRule: rule22
}, {
    start: 7720,
    length: 1,
    convRule: rule21
}, {
    start: 7721,
    length: 1,
    convRule: rule22
}, {
    start: 7722,
    length: 1,
    convRule: rule21
}, {
    start: 7723,
    length: 1,
    convRule: rule22
}, {
    start: 7724,
    length: 1,
    convRule: rule21
}, {
    start: 7725,
    length: 1,
    convRule: rule22
}, {
    start: 7726,
    length: 1,
    convRule: rule21
}, {
    start: 7727,
    length: 1,
    convRule: rule22
}, {
    start: 7728,
    length: 1,
    convRule: rule21
}, {
    start: 7729,
    length: 1,
    convRule: rule22
}, {
    start: 7730,
    length: 1,
    convRule: rule21
}, {
    start: 7731,
    length: 1,
    convRule: rule22
}, {
    start: 7732,
    length: 1,
    convRule: rule21
}, {
    start: 7733,
    length: 1,
    convRule: rule22
}, {
    start: 7734,
    length: 1,
    convRule: rule21
}, {
    start: 7735,
    length: 1,
    convRule: rule22
}, {
    start: 7736,
    length: 1,
    convRule: rule21
}, {
    start: 7737,
    length: 1,
    convRule: rule22
}, {
    start: 7738,
    length: 1,
    convRule: rule21
}, {
    start: 7739,
    length: 1,
    convRule: rule22
}, {
    start: 7740,
    length: 1,
    convRule: rule21
}, {
    start: 7741,
    length: 1,
    convRule: rule22
}, {
    start: 7742,
    length: 1,
    convRule: rule21
}, {
    start: 7743,
    length: 1,
    convRule: rule22
}, {
    start: 7744,
    length: 1,
    convRule: rule21
}, {
    start: 7745,
    length: 1,
    convRule: rule22
}, {
    start: 7746,
    length: 1,
    convRule: rule21
}, {
    start: 7747,
    length: 1,
    convRule: rule22
}, {
    start: 7748,
    length: 1,
    convRule: rule21
}, {
    start: 7749,
    length: 1,
    convRule: rule22
}, {
    start: 7750,
    length: 1,
    convRule: rule21
}, {
    start: 7751,
    length: 1,
    convRule: rule22
}, {
    start: 7752,
    length: 1,
    convRule: rule21
}, {
    start: 7753,
    length: 1,
    convRule: rule22
}, {
    start: 7754,
    length: 1,
    convRule: rule21
}, {
    start: 7755,
    length: 1,
    convRule: rule22
}, {
    start: 7756,
    length: 1,
    convRule: rule21
}, {
    start: 7757,
    length: 1,
    convRule: rule22
}, {
    start: 7758,
    length: 1,
    convRule: rule21
}, {
    start: 7759,
    length: 1,
    convRule: rule22
}, {
    start: 7760,
    length: 1,
    convRule: rule21
}, {
    start: 7761,
    length: 1,
    convRule: rule22
}, {
    start: 7762,
    length: 1,
    convRule: rule21
}, {
    start: 7763,
    length: 1,
    convRule: rule22
}, {
    start: 7764,
    length: 1,
    convRule: rule21
}, {
    start: 7765,
    length: 1,
    convRule: rule22
}, {
    start: 7766,
    length: 1,
    convRule: rule21
}, {
    start: 7767,
    length: 1,
    convRule: rule22
}, {
    start: 7768,
    length: 1,
    convRule: rule21
}, {
    start: 7769,
    length: 1,
    convRule: rule22
}, {
    start: 7770,
    length: 1,
    convRule: rule21
}, {
    start: 7771,
    length: 1,
    convRule: rule22
}, {
    start: 7772,
    length: 1,
    convRule: rule21
}, {
    start: 7773,
    length: 1,
    convRule: rule22
}, {
    start: 7774,
    length: 1,
    convRule: rule21
}, {
    start: 7775,
    length: 1,
    convRule: rule22
}, {
    start: 7776,
    length: 1,
    convRule: rule21
}, {
    start: 7777,
    length: 1,
    convRule: rule22
}, {
    start: 7778,
    length: 1,
    convRule: rule21
}, {
    start: 7779,
    length: 1,
    convRule: rule22
}, {
    start: 7780,
    length: 1,
    convRule: rule21
}, {
    start: 7781,
    length: 1,
    convRule: rule22
}, {
    start: 7782,
    length: 1,
    convRule: rule21
}, {
    start: 7783,
    length: 1,
    convRule: rule22
}, {
    start: 7784,
    length: 1,
    convRule: rule21
}, {
    start: 7785,
    length: 1,
    convRule: rule22
}, {
    start: 7786,
    length: 1,
    convRule: rule21
}, {
    start: 7787,
    length: 1,
    convRule: rule22
}, {
    start: 7788,
    length: 1,
    convRule: rule21
}, {
    start: 7789,
    length: 1,
    convRule: rule22
}, {
    start: 7790,
    length: 1,
    convRule: rule21
}, {
    start: 7791,
    length: 1,
    convRule: rule22
}, {
    start: 7792,
    length: 1,
    convRule: rule21
}, {
    start: 7793,
    length: 1,
    convRule: rule22
}, {
    start: 7794,
    length: 1,
    convRule: rule21
}, {
    start: 7795,
    length: 1,
    convRule: rule22
}, {
    start: 7796,
    length: 1,
    convRule: rule21
}, {
    start: 7797,
    length: 1,
    convRule: rule22
}, {
    start: 7798,
    length: 1,
    convRule: rule21
}, {
    start: 7799,
    length: 1,
    convRule: rule22
}, {
    start: 7800,
    length: 1,
    convRule: rule21
}, {
    start: 7801,
    length: 1,
    convRule: rule22
}, {
    start: 7802,
    length: 1,
    convRule: rule21
}, {
    start: 7803,
    length: 1,
    convRule: rule22
}, {
    start: 7804,
    length: 1,
    convRule: rule21
}, {
    start: 7805,
    length: 1,
    convRule: rule22
}, {
    start: 7806,
    length: 1,
    convRule: rule21
}, {
    start: 7807,
    length: 1,
    convRule: rule22
}, {
    start: 7808,
    length: 1,
    convRule: rule21
}, {
    start: 7809,
    length: 1,
    convRule: rule22
}, {
    start: 7810,
    length: 1,
    convRule: rule21
}, {
    start: 7811,
    length: 1,
    convRule: rule22
}, {
    start: 7812,
    length: 1,
    convRule: rule21
}, {
    start: 7813,
    length: 1,
    convRule: rule22
}, {
    start: 7814,
    length: 1,
    convRule: rule21
}, {
    start: 7815,
    length: 1,
    convRule: rule22
}, {
    start: 7816,
    length: 1,
    convRule: rule21
}, {
    start: 7817,
    length: 1,
    convRule: rule22
}, {
    start: 7818,
    length: 1,
    convRule: rule21
}, {
    start: 7819,
    length: 1,
    convRule: rule22
}, {
    start: 7820,
    length: 1,
    convRule: rule21
}, {
    start: 7821,
    length: 1,
    convRule: rule22
}, {
    start: 7822,
    length: 1,
    convRule: rule21
}, {
    start: 7823,
    length: 1,
    convRule: rule22
}, {
    start: 7824,
    length: 1,
    convRule: rule21
}, {
    start: 7825,
    length: 1,
    convRule: rule22
}, {
    start: 7826,
    length: 1,
    convRule: rule21
}, {
    start: 7827,
    length: 1,
    convRule: rule22
}, {
    start: 7828,
    length: 1,
    convRule: rule21
}, {
    start: 7829,
    length: 1,
    convRule: rule22
}, {
    start: 7830,
    length: 5,
    convRule: rule14
}, {
    start: 7835,
    length: 1,
    convRule: rule119
}, {
    start: 7836,
    length: 2,
    convRule: rule14
}, {
    start: 7838,
    length: 1,
    convRule: rule120
}, {
    start: 7839,
    length: 1,
    convRule: rule14
}, {
    start: 7840,
    length: 1,
    convRule: rule21
}, {
    start: 7841,
    length: 1,
    convRule: rule22
}, {
    start: 7842,
    length: 1,
    convRule: rule21
}, {
    start: 7843,
    length: 1,
    convRule: rule22
}, {
    start: 7844,
    length: 1,
    convRule: rule21
}, {
    start: 7845,
    length: 1,
    convRule: rule22
}, {
    start: 7846,
    length: 1,
    convRule: rule21
}, {
    start: 7847,
    length: 1,
    convRule: rule22
}, {
    start: 7848,
    length: 1,
    convRule: rule21
}, {
    start: 7849,
    length: 1,
    convRule: rule22
}, {
    start: 7850,
    length: 1,
    convRule: rule21
}, {
    start: 7851,
    length: 1,
    convRule: rule22
}, {
    start: 7852,
    length: 1,
    convRule: rule21
}, {
    start: 7853,
    length: 1,
    convRule: rule22
}, {
    start: 7854,
    length: 1,
    convRule: rule21
}, {
    start: 7855,
    length: 1,
    convRule: rule22
}, {
    start: 7856,
    length: 1,
    convRule: rule21
}, {
    start: 7857,
    length: 1,
    convRule: rule22
}, {
    start: 7858,
    length: 1,
    convRule: rule21
}, {
    start: 7859,
    length: 1,
    convRule: rule22
}, {
    start: 7860,
    length: 1,
    convRule: rule21
}, {
    start: 7861,
    length: 1,
    convRule: rule22
}, {
    start: 7862,
    length: 1,
    convRule: rule21
}, {
    start: 7863,
    length: 1,
    convRule: rule22
}, {
    start: 7864,
    length: 1,
    convRule: rule21
}, {
    start: 7865,
    length: 1,
    convRule: rule22
}, {
    start: 7866,
    length: 1,
    convRule: rule21
}, {
    start: 7867,
    length: 1,
    convRule: rule22
}, {
    start: 7868,
    length: 1,
    convRule: rule21
}, {
    start: 7869,
    length: 1,
    convRule: rule22
}, {
    start: 7870,
    length: 1,
    convRule: rule21
}, {
    start: 7871,
    length: 1,
    convRule: rule22
}, {
    start: 7872,
    length: 1,
    convRule: rule21
}, {
    start: 7873,
    length: 1,
    convRule: rule22
}, {
    start: 7874,
    length: 1,
    convRule: rule21
}, {
    start: 7875,
    length: 1,
    convRule: rule22
}, {
    start: 7876,
    length: 1,
    convRule: rule21
}, {
    start: 7877,
    length: 1,
    convRule: rule22
}, {
    start: 7878,
    length: 1,
    convRule: rule21
}, {
    start: 7879,
    length: 1,
    convRule: rule22
}, {
    start: 7880,
    length: 1,
    convRule: rule21
}, {
    start: 7881,
    length: 1,
    convRule: rule22
}, {
    start: 7882,
    length: 1,
    convRule: rule21
}, {
    start: 7883,
    length: 1,
    convRule: rule22
}, {
    start: 7884,
    length: 1,
    convRule: rule21
}, {
    start: 7885,
    length: 1,
    convRule: rule22
}, {
    start: 7886,
    length: 1,
    convRule: rule21
}, {
    start: 7887,
    length: 1,
    convRule: rule22
}, {
    start: 7888,
    length: 1,
    convRule: rule21
}, {
    start: 7889,
    length: 1,
    convRule: rule22
}, {
    start: 7890,
    length: 1,
    convRule: rule21
}, {
    start: 7891,
    length: 1,
    convRule: rule22
}, {
    start: 7892,
    length: 1,
    convRule: rule21
}, {
    start: 7893,
    length: 1,
    convRule: rule22
}, {
    start: 7894,
    length: 1,
    convRule: rule21
}, {
    start: 7895,
    length: 1,
    convRule: rule22
}, {
    start: 7896,
    length: 1,
    convRule: rule21
}, {
    start: 7897,
    length: 1,
    convRule: rule22
}, {
    start: 7898,
    length: 1,
    convRule: rule21
}, {
    start: 7899,
    length: 1,
    convRule: rule22
}, {
    start: 7900,
    length: 1,
    convRule: rule21
}, {
    start: 7901,
    length: 1,
    convRule: rule22
}, {
    start: 7902,
    length: 1,
    convRule: rule21
}, {
    start: 7903,
    length: 1,
    convRule: rule22
}, {
    start: 7904,
    length: 1,
    convRule: rule21
}, {
    start: 7905,
    length: 1,
    convRule: rule22
}, {
    start: 7906,
    length: 1,
    convRule: rule21
}, {
    start: 7907,
    length: 1,
    convRule: rule22
}, {
    start: 7908,
    length: 1,
    convRule: rule21
}, {
    start: 7909,
    length: 1,
    convRule: rule22
}, {
    start: 7910,
    length: 1,
    convRule: rule21
}, {
    start: 7911,
    length: 1,
    convRule: rule22
}, {
    start: 7912,
    length: 1,
    convRule: rule21
}, {
    start: 7913,
    length: 1,
    convRule: rule22
}, {
    start: 7914,
    length: 1,
    convRule: rule21
}, {
    start: 7915,
    length: 1,
    convRule: rule22
}, {
    start: 7916,
    length: 1,
    convRule: rule21
}, {
    start: 7917,
    length: 1,
    convRule: rule22
}, {
    start: 7918,
    length: 1,
    convRule: rule21
}, {
    start: 7919,
    length: 1,
    convRule: rule22
}, {
    start: 7920,
    length: 1,
    convRule: rule21
}, {
    start: 7921,
    length: 1,
    convRule: rule22
}, {
    start: 7922,
    length: 1,
    convRule: rule21
}, {
    start: 7923,
    length: 1,
    convRule: rule22
}, {
    start: 7924,
    length: 1,
    convRule: rule21
}, {
    start: 7925,
    length: 1,
    convRule: rule22
}, {
    start: 7926,
    length: 1,
    convRule: rule21
}, {
    start: 7927,
    length: 1,
    convRule: rule22
}, {
    start: 7928,
    length: 1,
    convRule: rule21
}, {
    start: 7929,
    length: 1,
    convRule: rule22
}, {
    start: 7930,
    length: 1,
    convRule: rule21
}, {
    start: 7931,
    length: 1,
    convRule: rule22
}, {
    start: 7932,
    length: 1,
    convRule: rule21
}, {
    start: 7933,
    length: 1,
    convRule: rule22
}, {
    start: 7934,
    length: 1,
    convRule: rule21
}, {
    start: 7935,
    length: 1,
    convRule: rule22
}, {
    start: 7936,
    length: 8,
    convRule: rule121
}, {
    start: 7944,
    length: 8,
    convRule: rule122
}, {
    start: 7952,
    length: 6,
    convRule: rule121
}, {
    start: 7960,
    length: 6,
    convRule: rule122
}, {
    start: 7968,
    length: 8,
    convRule: rule121
}, {
    start: 7976,
    length: 8,
    convRule: rule122
}, {
    start: 7984,
    length: 8,
    convRule: rule121
}, {
    start: 7992,
    length: 8,
    convRule: rule122
}, {
    start: 8000,
    length: 6,
    convRule: rule121
}, {
    start: 8008,
    length: 6,
    convRule: rule122
}, {
    start: 8016,
    length: 1,
    convRule: rule14
}, {
    start: 8017,
    length: 1,
    convRule: rule121
}, {
    start: 8018,
    length: 1,
    convRule: rule14
}, {
    start: 8019,
    length: 1,
    convRule: rule121
}, {
    start: 8020,
    length: 1,
    convRule: rule14
}, {
    start: 8021,
    length: 1,
    convRule: rule121
}, {
    start: 8022,
    length: 1,
    convRule: rule14
}, {
    start: 8023,
    length: 1,
    convRule: rule121
}, {
    start: 8025,
    length: 1,
    convRule: rule122
}, {
    start: 8027,
    length: 1,
    convRule: rule122
}, {
    start: 8029,
    length: 1,
    convRule: rule122
}, {
    start: 8031,
    length: 1,
    convRule: rule122
}, {
    start: 8032,
    length: 8,
    convRule: rule121
}, {
    start: 8040,
    length: 8,
    convRule: rule122
}, {
    start: 8048,
    length: 2,
    convRule: rule123
}, {
    start: 8050,
    length: 4,
    convRule: rule124
}, {
    start: 8054,
    length: 2,
    convRule: rule125
}, {
    start: 8056,
    length: 2,
    convRule: rule126
}, {
    start: 8058,
    length: 2,
    convRule: rule127
}, {
    start: 8060,
    length: 2,
    convRule: rule128
}, {
    start: 8064,
    length: 8,
    convRule: rule121
}, {
    start: 8072,
    length: 8,
    convRule: rule129
}, {
    start: 8080,
    length: 8,
    convRule: rule121
}, {
    start: 8088,
    length: 8,
    convRule: rule129
}, {
    start: 8096,
    length: 8,
    convRule: rule121
}, {
    start: 8104,
    length: 8,
    convRule: rule129
}, {
    start: 8112,
    length: 2,
    convRule: rule121
}, {
    start: 8114,
    length: 1,
    convRule: rule14
}, {
    start: 8115,
    length: 1,
    convRule: rule130
}, {
    start: 8116,
    length: 1,
    convRule: rule14
}, {
    start: 8118,
    length: 2,
    convRule: rule14
}, {
    start: 8120,
    length: 2,
    convRule: rule122
}, {
    start: 8122,
    length: 2,
    convRule: rule131
}, {
    start: 8124,
    length: 1,
    convRule: rule132
}, {
    start: 8125,
    length: 1,
    convRule: rule10
}, {
    start: 8126,
    length: 1,
    convRule: rule133
}, {
    start: 8127,
    length: 3,
    convRule: rule10
}, {
    start: 8130,
    length: 1,
    convRule: rule14
}, {
    start: 8131,
    length: 1,
    convRule: rule130
}, {
    start: 8132,
    length: 1,
    convRule: rule14
}, {
    start: 8134,
    length: 2,
    convRule: rule14
}, {
    start: 8136,
    length: 4,
    convRule: rule134
}, {
    start: 8140,
    length: 1,
    convRule: rule132
}, {
    start: 8141,
    length: 3,
    convRule: rule10
}, {
    start: 8144,
    length: 2,
    convRule: rule121
}, {
    start: 8146,
    length: 2,
    convRule: rule14
}, {
    start: 8150,
    length: 2,
    convRule: rule14
}, {
    start: 8152,
    length: 2,
    convRule: rule122
}, {
    start: 8154,
    length: 2,
    convRule: rule135
}, {
    start: 8157,
    length: 3,
    convRule: rule10
}, {
    start: 8160,
    length: 2,
    convRule: rule121
}, {
    start: 8162,
    length: 3,
    convRule: rule14
}, {
    start: 8165,
    length: 1,
    convRule: rule104
}, {
    start: 8166,
    length: 2,
    convRule: rule14
}, {
    start: 8168,
    length: 2,
    convRule: rule122
}, {
    start: 8170,
    length: 2,
    convRule: rule136
}, {
    start: 8172,
    length: 1,
    convRule: rule107
}, {
    start: 8173,
    length: 3,
    convRule: rule10
}, {
    start: 8178,
    length: 1,
    convRule: rule14
}, {
    start: 8179,
    length: 1,
    convRule: rule130
}, {
    start: 8180,
    length: 1,
    convRule: rule14
}, {
    start: 8182,
    length: 2,
    convRule: rule14
}, {
    start: 8184,
    length: 2,
    convRule: rule137
}, {
    start: 8186,
    length: 2,
    convRule: rule138
}, {
    start: 8188,
    length: 1,
    convRule: rule132
}, {
    start: 8189,
    length: 2,
    convRule: rule10
}, {
    start: 8192,
    length: 11,
    convRule: rule1
}, {
    start: 8203,
    length: 5,
    convRule: rule16
}, {
    start: 8208,
    length: 6,
    convRule: rule7
}, {
    start: 8214,
    length: 2,
    convRule: rule2
}, {
    start: 8216,
    length: 1,
    convRule: rule15
}, {
    start: 8217,
    length: 1,
    convRule: rule19
}, {
    start: 8218,
    length: 1,
    convRule: rule4
}, {
    start: 8219,
    length: 2,
    convRule: rule15
}, {
    start: 8221,
    length: 1,
    convRule: rule19
}, {
    start: 8222,
    length: 1,
    convRule: rule4
}, {
    start: 8223,
    length: 1,
    convRule: rule15
}, {
    start: 8224,
    length: 8,
    convRule: rule2
}, {
    start: 8232,
    length: 1,
    convRule: rule139
}, {
    start: 8233,
    length: 1,
    convRule: rule140
}, {
    start: 8234,
    length: 5,
    convRule: rule16
}, {
    start: 8239,
    length: 1,
    convRule: rule1
}, {
    start: 8240,
    length: 9,
    convRule: rule2
}, {
    start: 8249,
    length: 1,
    convRule: rule15
}, {
    start: 8250,
    length: 1,
    convRule: rule19
}, {
    start: 8251,
    length: 4,
    convRule: rule2
}, {
    start: 8255,
    length: 2,
    convRule: rule11
}, {
    start: 8257,
    length: 3,
    convRule: rule2
}, {
    start: 8260,
    length: 1,
    convRule: rule6
}, {
    start: 8261,
    length: 1,
    convRule: rule4
}, {
    start: 8262,
    length: 1,
    convRule: rule5
}, {
    start: 8263,
    length: 11,
    convRule: rule2
}, {
    start: 8274,
    length: 1,
    convRule: rule6
}, {
    start: 8275,
    length: 1,
    convRule: rule2
}, {
    start: 8276,
    length: 1,
    convRule: rule11
}, {
    start: 8277,
    length: 10,
    convRule: rule2
}, {
    start: 8287,
    length: 1,
    convRule: rule1
}, {
    start: 8288,
    length: 5,
    convRule: rule16
}, {
    start: 8298,
    length: 6,
    convRule: rule16
}, {
    start: 8304,
    length: 1,
    convRule: rule17
}, {
    start: 8305,
    length: 1,
    convRule: rule83
}, {
    start: 8308,
    length: 6,
    convRule: rule17
}, {
    start: 8314,
    length: 3,
    convRule: rule6
}, {
    start: 8317,
    length: 1,
    convRule: rule4
}, {
    start: 8318,
    length: 1,
    convRule: rule5
}, {
    start: 8319,
    length: 1,
    convRule: rule83
}, {
    start: 8320,
    length: 10,
    convRule: rule17
}, {
    start: 8330,
    length: 3,
    convRule: rule6
}, {
    start: 8333,
    length: 1,
    convRule: rule4
}, {
    start: 8334,
    length: 1,
    convRule: rule5
}, {
    start: 8336,
    length: 13,
    convRule: rule83
}, {
    start: 8352,
    length: 26,
    convRule: rule3
}, {
    start: 8400,
    length: 13,
    convRule: rule84
}, {
    start: 8413,
    length: 4,
    convRule: rule109
}, {
    start: 8417,
    length: 1,
    convRule: rule84
}, {
    start: 8418,
    length: 3,
    convRule: rule109
}, {
    start: 8421,
    length: 12,
    convRule: rule84
}, {
    start: 8448,
    length: 2,
    convRule: rule13
}, {
    start: 8450,
    length: 1,
    convRule: rule98
}, {
    start: 8451,
    length: 4,
    convRule: rule13
}, {
    start: 8455,
    length: 1,
    convRule: rule98
}, {
    start: 8456,
    length: 2,
    convRule: rule13
}, {
    start: 8458,
    length: 1,
    convRule: rule14
}, {
    start: 8459,
    length: 3,
    convRule: rule98
}, {
    start: 8462,
    length: 2,
    convRule: rule14
}, {
    start: 8464,
    length: 3,
    convRule: rule98
}, {
    start: 8467,
    length: 1,
    convRule: rule14
}, {
    start: 8468,
    length: 1,
    convRule: rule13
}, {
    start: 8469,
    length: 1,
    convRule: rule98
}, {
    start: 8470,
    length: 2,
    convRule: rule13
}, {
    start: 8472,
    length: 1,
    convRule: rule6
}, {
    start: 8473,
    length: 5,
    convRule: rule98
}, {
    start: 8478,
    length: 6,
    convRule: rule13
}, {
    start: 8484,
    length: 1,
    convRule: rule98
}, {
    start: 8485,
    length: 1,
    convRule: rule13
}, {
    start: 8486,
    length: 1,
    convRule: rule141
}, {
    start: 8487,
    length: 1,
    convRule: rule13
}, {
    start: 8488,
    length: 1,
    convRule: rule98
}, {
    start: 8489,
    length: 1,
    convRule: rule13
}, {
    start: 8490,
    length: 1,
    convRule: rule142
}, {
    start: 8491,
    length: 1,
    convRule: rule143
}, {
    start: 8492,
    length: 2,
    convRule: rule98
}, {
    start: 8494,
    length: 1,
    convRule: rule13
}, {
    start: 8495,
    length: 1,
    convRule: rule14
}, {
    start: 8496,
    length: 2,
    convRule: rule98
}, {
    start: 8498,
    length: 1,
    convRule: rule144
}, {
    start: 8499,
    length: 1,
    convRule: rule98
}, {
    start: 8500,
    length: 1,
    convRule: rule14
}, {
    start: 8501,
    length: 4,
    convRule: rule45
}, {
    start: 8505,
    length: 1,
    convRule: rule14
}, {
    start: 8506,
    length: 2,
    convRule: rule13
}, {
    start: 8508,
    length: 2,
    convRule: rule14
}, {
    start: 8510,
    length: 2,
    convRule: rule98
}, {
    start: 8512,
    length: 5,
    convRule: rule6
}, {
    start: 8517,
    length: 1,
    convRule: rule98
}, {
    start: 8518,
    length: 4,
    convRule: rule14
}, {
    start: 8522,
    length: 1,
    convRule: rule13
}, {
    start: 8523,
    length: 1,
    convRule: rule6
}, {
    start: 8524,
    length: 2,
    convRule: rule13
}, {
    start: 8526,
    length: 1,
    convRule: rule145
}, {
    start: 8527,
    length: 1,
    convRule: rule13
}, {
    start: 8528,
    length: 16,
    convRule: rule17
}, {
    start: 8544,
    length: 16,
    convRule: rule146
}, {
    start: 8560,
    length: 16,
    convRule: rule147
}, {
    start: 8576,
    length: 3,
    convRule: rule116
}, {
    start: 8579,
    length: 1,
    convRule: rule21
}, {
    start: 8580,
    length: 1,
    convRule: rule22
}, {
    start: 8581,
    length: 4,
    convRule: rule116
}, {
    start: 8585,
    length: 1,
    convRule: rule17
}, {
    start: 8592,
    length: 5,
    convRule: rule6
}, {
    start: 8597,
    length: 5,
    convRule: rule13
}, {
    start: 8602,
    length: 2,
    convRule: rule6
}, {
    start: 8604,
    length: 4,
    convRule: rule13
}, {
    start: 8608,
    length: 1,
    convRule: rule6
}, {
    start: 8609,
    length: 2,
    convRule: rule13
}, {
    start: 8611,
    length: 1,
    convRule: rule6
}, {
    start: 8612,
    length: 2,
    convRule: rule13
}, {
    start: 8614,
    length: 1,
    convRule: rule6
}, {
    start: 8615,
    length: 7,
    convRule: rule13
}, {
    start: 8622,
    length: 1,
    convRule: rule6
}, {
    start: 8623,
    length: 31,
    convRule: rule13
}, {
    start: 8654,
    length: 2,
    convRule: rule6
}, {
    start: 8656,
    length: 2,
    convRule: rule13
}, {
    start: 8658,
    length: 1,
    convRule: rule6
}, {
    start: 8659,
    length: 1,
    convRule: rule13
}, {
    start: 8660,
    length: 1,
    convRule: rule6
}, {
    start: 8661,
    length: 31,
    convRule: rule13
}, {
    start: 8692,
    length: 268,
    convRule: rule6
}, {
    start: 8960,
    length: 8,
    convRule: rule13
}, {
    start: 8968,
    length: 4,
    convRule: rule6
}, {
    start: 8972,
    length: 20,
    convRule: rule13
}, {
    start: 8992,
    length: 2,
    convRule: rule6
}, {
    start: 8994,
    length: 7,
    convRule: rule13
}, {
    start: 9001,
    length: 1,
    convRule: rule4
}, {
    start: 9002,
    length: 1,
    convRule: rule5
}, {
    start: 9003,
    length: 81,
    convRule: rule13
}, {
    start: 9084,
    length: 1,
    convRule: rule6
}, {
    start: 9085,
    length: 30,
    convRule: rule13
}, {
    start: 9115,
    length: 25,
    convRule: rule6
}, {
    start: 9140,
    length: 40,
    convRule: rule13
}, {
    start: 9180,
    length: 6,
    convRule: rule6
}, {
    start: 9186,
    length: 18,
    convRule: rule13
}, {
    start: 9216,
    length: 39,
    convRule: rule13
}, {
    start: 9280,
    length: 11,
    convRule: rule13
}, {
    start: 9312,
    length: 60,
    convRule: rule17
}, {
    start: 9372,
    length: 26,
    convRule: rule13
}, {
    start: 9398,
    length: 26,
    convRule: rule148
}, {
    start: 9424,
    length: 26,
    convRule: rule149
}, {
    start: 9450,
    length: 22,
    convRule: rule17
}, {
    start: 9472,
    length: 183,
    convRule: rule13
}, {
    start: 9655,
    length: 1,
    convRule: rule6
}, {
    start: 9656,
    length: 9,
    convRule: rule13
}, {
    start: 9665,
    length: 1,
    convRule: rule6
}, {
    start: 9666,
    length: 54,
    convRule: rule13
}, {
    start: 9720,
    length: 8,
    convRule: rule6
}, {
    start: 9728,
    length: 111,
    convRule: rule13
}, {
    start: 9839,
    length: 1,
    convRule: rule6
}, {
    start: 9840,
    length: 144,
    convRule: rule13
}, {
    start: 9985,
    length: 103,
    convRule: rule13
}, {
    start: 10088,
    length: 1,
    convRule: rule4
}, {
    start: 10089,
    length: 1,
    convRule: rule5
}, {
    start: 10090,
    length: 1,
    convRule: rule4
}, {
    start: 10091,
    length: 1,
    convRule: rule5
}, {
    start: 10092,
    length: 1,
    convRule: rule4
}, {
    start: 10093,
    length: 1,
    convRule: rule5
}, {
    start: 10094,
    length: 1,
    convRule: rule4
}, {
    start: 10095,
    length: 1,
    convRule: rule5
}, {
    start: 10096,
    length: 1,
    convRule: rule4
}, {
    start: 10097,
    length: 1,
    convRule: rule5
}, {
    start: 10098,
    length: 1,
    convRule: rule4
}, {
    start: 10099,
    length: 1,
    convRule: rule5
}, {
    start: 10100,
    length: 1,
    convRule: rule4
}, {
    start: 10101,
    length: 1,
    convRule: rule5
}, {
    start: 10102,
    length: 30,
    convRule: rule17
}, {
    start: 10132,
    length: 44,
    convRule: rule13
}, {
    start: 10176,
    length: 5,
    convRule: rule6
}, {
    start: 10181,
    length: 1,
    convRule: rule4
}, {
    start: 10182,
    length: 1,
    convRule: rule5
}, {
    start: 10183,
    length: 4,
    convRule: rule6
}, {
    start: 10188,
    length: 1,
    convRule: rule6
}, {
    start: 10190,
    length: 24,
    convRule: rule6
}, {
    start: 10214,
    length: 1,
    convRule: rule4
}, {
    start: 10215,
    length: 1,
    convRule: rule5
}, {
    start: 10216,
    length: 1,
    convRule: rule4
}, {
    start: 10217,
    length: 1,
    convRule: rule5
}, {
    start: 10218,
    length: 1,
    convRule: rule4
}, {
    start: 10219,
    length: 1,
    convRule: rule5
}, {
    start: 10220,
    length: 1,
    convRule: rule4
}, {
    start: 10221,
    length: 1,
    convRule: rule5
}, {
    start: 10222,
    length: 1,
    convRule: rule4
}, {
    start: 10223,
    length: 1,
    convRule: rule5
}, {
    start: 10224,
    length: 16,
    convRule: rule6
}, {
    start: 10240,
    length: 256,
    convRule: rule13
}, {
    start: 10496,
    length: 131,
    convRule: rule6
}, {
    start: 10627,
    length: 1,
    convRule: rule4
}, {
    start: 10628,
    length: 1,
    convRule: rule5
}, {
    start: 10629,
    length: 1,
    convRule: rule4
}, {
    start: 10630,
    length: 1,
    convRule: rule5
}, {
    start: 10631,
    length: 1,
    convRule: rule4
}, {
    start: 10632,
    length: 1,
    convRule: rule5
}, {
    start: 10633,
    length: 1,
    convRule: rule4
}, {
    start: 10634,
    length: 1,
    convRule: rule5
}, {
    start: 10635,
    length: 1,
    convRule: rule4
}, {
    start: 10636,
    length: 1,
    convRule: rule5
}, {
    start: 10637,
    length: 1,
    convRule: rule4
}, {
    start: 10638,
    length: 1,
    convRule: rule5
}, {
    start: 10639,
    length: 1,
    convRule: rule4
}, {
    start: 10640,
    length: 1,
    convRule: rule5
}, {
    start: 10641,
    length: 1,
    convRule: rule4
}, {
    start: 10642,
    length: 1,
    convRule: rule5
}, {
    start: 10643,
    length: 1,
    convRule: rule4
}, {
    start: 10644,
    length: 1,
    convRule: rule5
}, {
    start: 10645,
    length: 1,
    convRule: rule4
}, {
    start: 10646,
    length: 1,
    convRule: rule5
}, {
    start: 10647,
    length: 1,
    convRule: rule4
}, {
    start: 10648,
    length: 1,
    convRule: rule5
}, {
    start: 10649,
    length: 63,
    convRule: rule6
}, {
    start: 10712,
    length: 1,
    convRule: rule4
}, {
    start: 10713,
    length: 1,
    convRule: rule5
}, {
    start: 10714,
    length: 1,
    convRule: rule4
}, {
    start: 10715,
    length: 1,
    convRule: rule5
}, {
    start: 10716,
    length: 32,
    convRule: rule6
}, {
    start: 10748,
    length: 1,
    convRule: rule4
}, {
    start: 10749,
    length: 1,
    convRule: rule5
}, {
    start: 10750,
    length: 258,
    convRule: rule6
}, {
    start: 11008,
    length: 48,
    convRule: rule13
}, {
    start: 11056,
    length: 21,
    convRule: rule6
}, {
    start: 11077,
    length: 2,
    convRule: rule13
}, {
    start: 11079,
    length: 6,
    convRule: rule6
}, {
    start: 11088,
    length: 10,
    convRule: rule13
}, {
    start: 11264,
    length: 47,
    convRule: rule112
}, {
    start: 11312,
    length: 47,
    convRule: rule113
}, {
    start: 11360,
    length: 1,
    convRule: rule21
}, {
    start: 11361,
    length: 1,
    convRule: rule22
}, {
    start: 11362,
    length: 1,
    convRule: rule150
}, {
    start: 11363,
    length: 1,
    convRule: rule151
}, {
    start: 11364,
    length: 1,
    convRule: rule152
}, {
    start: 11365,
    length: 1,
    convRule: rule153
}, {
    start: 11366,
    length: 1,
    convRule: rule154
}, {
    start: 11367,
    length: 1,
    convRule: rule21
}, {
    start: 11368,
    length: 1,
    convRule: rule22
}, {
    start: 11369,
    length: 1,
    convRule: rule21
}, {
    start: 11370,
    length: 1,
    convRule: rule22
}, {
    start: 11371,
    length: 1,
    convRule: rule21
}, {
    start: 11372,
    length: 1,
    convRule: rule22
}, {
    start: 11373,
    length: 1,
    convRule: rule155
}, {
    start: 11374,
    length: 1,
    convRule: rule156
}, {
    start: 11375,
    length: 1,
    convRule: rule157
}, {
    start: 11376,
    length: 1,
    convRule: rule158
}, {
    start: 11377,
    length: 1,
    convRule: rule14
}, {
    start: 11378,
    length: 1,
    convRule: rule21
}, {
    start: 11379,
    length: 1,
    convRule: rule22
}, {
    start: 11380,
    length: 1,
    convRule: rule14
}, {
    start: 11381,
    length: 1,
    convRule: rule21
}, {
    start: 11382,
    length: 1,
    convRule: rule22
}, {
    start: 11383,
    length: 6,
    convRule: rule14
}, {
    start: 11389,
    length: 1,
    convRule: rule83
}, {
    start: 11390,
    length: 2,
    convRule: rule159
}, {
    start: 11392,
    length: 1,
    convRule: rule21
}, {
    start: 11393,
    length: 1,
    convRule: rule22
}, {
    start: 11394,
    length: 1,
    convRule: rule21
}, {
    start: 11395,
    length: 1,
    convRule: rule22
}, {
    start: 11396,
    length: 1,
    convRule: rule21
}, {
    start: 11397,
    length: 1,
    convRule: rule22
}, {
    start: 11398,
    length: 1,
    convRule: rule21
}, {
    start: 11399,
    length: 1,
    convRule: rule22
}, {
    start: 11400,
    length: 1,
    convRule: rule21
}, {
    start: 11401,
    length: 1,
    convRule: rule22
}, {
    start: 11402,
    length: 1,
    convRule: rule21
}, {
    start: 11403,
    length: 1,
    convRule: rule22
}, {
    start: 11404,
    length: 1,
    convRule: rule21
}, {
    start: 11405,
    length: 1,
    convRule: rule22
}, {
    start: 11406,
    length: 1,
    convRule: rule21
}, {
    start: 11407,
    length: 1,
    convRule: rule22
}, {
    start: 11408,
    length: 1,
    convRule: rule21
}, {
    start: 11409,
    length: 1,
    convRule: rule22
}, {
    start: 11410,
    length: 1,
    convRule: rule21
}, {
    start: 11411,
    length: 1,
    convRule: rule22
}, {
    start: 11412,
    length: 1,
    convRule: rule21
}, {
    start: 11413,
    length: 1,
    convRule: rule22
}, {
    start: 11414,
    length: 1,
    convRule: rule21
}, {
    start: 11415,
    length: 1,
    convRule: rule22
}, {
    start: 11416,
    length: 1,
    convRule: rule21
}, {
    start: 11417,
    length: 1,
    convRule: rule22
}, {
    start: 11418,
    length: 1,
    convRule: rule21
}, {
    start: 11419,
    length: 1,
    convRule: rule22
}, {
    start: 11420,
    length: 1,
    convRule: rule21
}, {
    start: 11421,
    length: 1,
    convRule: rule22
}, {
    start: 11422,
    length: 1,
    convRule: rule21
}, {
    start: 11423,
    length: 1,
    convRule: rule22
}, {
    start: 11424,
    length: 1,
    convRule: rule21
}, {
    start: 11425,
    length: 1,
    convRule: rule22
}, {
    start: 11426,
    length: 1,
    convRule: rule21
}, {
    start: 11427,
    length: 1,
    convRule: rule22
}, {
    start: 11428,
    length: 1,
    convRule: rule21
}, {
    start: 11429,
    length: 1,
    convRule: rule22
}, {
    start: 11430,
    length: 1,
    convRule: rule21
}, {
    start: 11431,
    length: 1,
    convRule: rule22
}, {
    start: 11432,
    length: 1,
    convRule: rule21
}, {
    start: 11433,
    length: 1,
    convRule: rule22
}, {
    start: 11434,
    length: 1,
    convRule: rule21
}, {
    start: 11435,
    length: 1,
    convRule: rule22
}, {
    start: 11436,
    length: 1,
    convRule: rule21
}, {
    start: 11437,
    length: 1,
    convRule: rule22
}, {
    start: 11438,
    length: 1,
    convRule: rule21
}, {
    start: 11439,
    length: 1,
    convRule: rule22
}, {
    start: 11440,
    length: 1,
    convRule: rule21
}, {
    start: 11441,
    length: 1,
    convRule: rule22
}, {
    start: 11442,
    length: 1,
    convRule: rule21
}, {
    start: 11443,
    length: 1,
    convRule: rule22
}, {
    start: 11444,
    length: 1,
    convRule: rule21
}, {
    start: 11445,
    length: 1,
    convRule: rule22
}, {
    start: 11446,
    length: 1,
    convRule: rule21
}, {
    start: 11447,
    length: 1,
    convRule: rule22
}, {
    start: 11448,
    length: 1,
    convRule: rule21
}, {
    start: 11449,
    length: 1,
    convRule: rule22
}, {
    start: 11450,
    length: 1,
    convRule: rule21
}, {
    start: 11451,
    length: 1,
    convRule: rule22
}, {
    start: 11452,
    length: 1,
    convRule: rule21
}, {
    start: 11453,
    length: 1,
    convRule: rule22
}, {
    start: 11454,
    length: 1,
    convRule: rule21
}, {
    start: 11455,
    length: 1,
    convRule: rule22
}, {
    start: 11456,
    length: 1,
    convRule: rule21
}, {
    start: 11457,
    length: 1,
    convRule: rule22
}, {
    start: 11458,
    length: 1,
    convRule: rule21
}, {
    start: 11459,
    length: 1,
    convRule: rule22
}, {
    start: 11460,
    length: 1,
    convRule: rule21
}, {
    start: 11461,
    length: 1,
    convRule: rule22
}, {
    start: 11462,
    length: 1,
    convRule: rule21
}, {
    start: 11463,
    length: 1,
    convRule: rule22
}, {
    start: 11464,
    length: 1,
    convRule: rule21
}, {
    start: 11465,
    length: 1,
    convRule: rule22
}, {
    start: 11466,
    length: 1,
    convRule: rule21
}, {
    start: 11467,
    length: 1,
    convRule: rule22
}, {
    start: 11468,
    length: 1,
    convRule: rule21
}, {
    start: 11469,
    length: 1,
    convRule: rule22
}, {
    start: 11470,
    length: 1,
    convRule: rule21
}, {
    start: 11471,
    length: 1,
    convRule: rule22
}, {
    start: 11472,
    length: 1,
    convRule: rule21
}, {
    start: 11473,
    length: 1,
    convRule: rule22
}, {
    start: 11474,
    length: 1,
    convRule: rule21
}, {
    start: 11475,
    length: 1,
    convRule: rule22
}, {
    start: 11476,
    length: 1,
    convRule: rule21
}, {
    start: 11477,
    length: 1,
    convRule: rule22
}, {
    start: 11478,
    length: 1,
    convRule: rule21
}, {
    start: 11479,
    length: 1,
    convRule: rule22
}, {
    start: 11480,
    length: 1,
    convRule: rule21
}, {
    start: 11481,
    length: 1,
    convRule: rule22
}, {
    start: 11482,
    length: 1,
    convRule: rule21
}, {
    start: 11483,
    length: 1,
    convRule: rule22
}, {
    start: 11484,
    length: 1,
    convRule: rule21
}, {
    start: 11485,
    length: 1,
    convRule: rule22
}, {
    start: 11486,
    length: 1,
    convRule: rule21
}, {
    start: 11487,
    length: 1,
    convRule: rule22
}, {
    start: 11488,
    length: 1,
    convRule: rule21
}, {
    start: 11489,
    length: 1,
    convRule: rule22
}, {
    start: 11490,
    length: 1,
    convRule: rule21
}, {
    start: 11491,
    length: 1,
    convRule: rule22
}, {
    start: 11492,
    length: 1,
    convRule: rule14
}, {
    start: 11493,
    length: 6,
    convRule: rule13
}, {
    start: 11499,
    length: 1,
    convRule: rule21
}, {
    start: 11500,
    length: 1,
    convRule: rule22
}, {
    start: 11501,
    length: 1,
    convRule: rule21
}, {
    start: 11502,
    length: 1,
    convRule: rule22
}, {
    start: 11503,
    length: 3,
    convRule: rule84
}, {
    start: 11513,
    length: 4,
    convRule: rule2
}, {
    start: 11517,
    length: 1,
    convRule: rule17
}, {
    start: 11518,
    length: 2,
    convRule: rule2
}, {
    start: 11520,
    length: 38,
    convRule: rule160
}, {
    start: 11568,
    length: 54,
    convRule: rule45
}, {
    start: 11631,
    length: 1,
    convRule: rule83
}, {
    start: 11632,
    length: 1,
    convRule: rule2
}, {
    start: 11647,
    length: 1,
    convRule: rule84
}, {
    start: 11648,
    length: 23,
    convRule: rule45
}, {
    start: 11680,
    length: 7,
    convRule: rule45
}, {
    start: 11688,
    length: 7,
    convRule: rule45
}, {
    start: 11696,
    length: 7,
    convRule: rule45
}, {
    start: 11704,
    length: 7,
    convRule: rule45
}, {
    start: 11712,
    length: 7,
    convRule: rule45
}, {
    start: 11720,
    length: 7,
    convRule: rule45
}, {
    start: 11728,
    length: 7,
    convRule: rule45
}, {
    start: 11736,
    length: 7,
    convRule: rule45
}, {
    start: 11744,
    length: 32,
    convRule: rule84
}, {
    start: 11776,
    length: 2,
    convRule: rule2
}, {
    start: 11778,
    length: 1,
    convRule: rule15
}, {
    start: 11779,
    length: 1,
    convRule: rule19
}, {
    start: 11780,
    length: 1,
    convRule: rule15
}, {
    start: 11781,
    length: 1,
    convRule: rule19
}, {
    start: 11782,
    length: 3,
    convRule: rule2
}, {
    start: 11785,
    length: 1,
    convRule: rule15
}, {
    start: 11786,
    length: 1,
    convRule: rule19
}, {
    start: 11787,
    length: 1,
    convRule: rule2
}, {
    start: 11788,
    length: 1,
    convRule: rule15
}, {
    start: 11789,
    length: 1,
    convRule: rule19
}, {
    start: 11790,
    length: 9,
    convRule: rule2
}, {
    start: 11799,
    length: 1,
    convRule: rule7
}, {
    start: 11800,
    length: 2,
    convRule: rule2
}, {
    start: 11802,
    length: 1,
    convRule: rule7
}, {
    start: 11803,
    length: 1,
    convRule: rule2
}, {
    start: 11804,
    length: 1,
    convRule: rule15
}, {
    start: 11805,
    length: 1,
    convRule: rule19
}, {
    start: 11806,
    length: 2,
    convRule: rule2
}, {
    start: 11808,
    length: 1,
    convRule: rule15
}, {
    start: 11809,
    length: 1,
    convRule: rule19
}, {
    start: 11810,
    length: 1,
    convRule: rule4
}, {
    start: 11811,
    length: 1,
    convRule: rule5
}, {
    start: 11812,
    length: 1,
    convRule: rule4
}, {
    start: 11813,
    length: 1,
    convRule: rule5
}, {
    start: 11814,
    length: 1,
    convRule: rule4
}, {
    start: 11815,
    length: 1,
    convRule: rule5
}, {
    start: 11816,
    length: 1,
    convRule: rule4
}, {
    start: 11817,
    length: 1,
    convRule: rule5
}, {
    start: 11818,
    length: 5,
    convRule: rule2
}, {
    start: 11823,
    length: 1,
    convRule: rule83
}, {
    start: 11824,
    length: 2,
    convRule: rule2
}, {
    start: 11904,
    length: 26,
    convRule: rule13
}, {
    start: 11931,
    length: 89,
    convRule: rule13
}, {
    start: 12032,
    length: 214,
    convRule: rule13
}, {
    start: 12272,
    length: 12,
    convRule: rule13
}, {
    start: 12288,
    length: 1,
    convRule: rule1
}, {
    start: 12289,
    length: 3,
    convRule: rule2
}, {
    start: 12292,
    length: 1,
    convRule: rule13
}, {
    start: 12293,
    length: 1,
    convRule: rule83
}, {
    start: 12294,
    length: 1,
    convRule: rule45
}, {
    start: 12295,
    length: 1,
    convRule: rule116
}, {
    start: 12296,
    length: 1,
    convRule: rule4
}, {
    start: 12297,
    length: 1,
    convRule: rule5
}, {
    start: 12298,
    length: 1,
    convRule: rule4
}, {
    start: 12299,
    length: 1,
    convRule: rule5
}, {
    start: 12300,
    length: 1,
    convRule: rule4
}, {
    start: 12301,
    length: 1,
    convRule: rule5
}, {
    start: 12302,
    length: 1,
    convRule: rule4
}, {
    start: 12303,
    length: 1,
    convRule: rule5
}, {
    start: 12304,
    length: 1,
    convRule: rule4
}, {
    start: 12305,
    length: 1,
    convRule: rule5
}, {
    start: 12306,
    length: 2,
    convRule: rule13
}, {
    start: 12308,
    length: 1,
    convRule: rule4
}, {
    start: 12309,
    length: 1,
    convRule: rule5
}, {
    start: 12310,
    length: 1,
    convRule: rule4
}, {
    start: 12311,
    length: 1,
    convRule: rule5
}, {
    start: 12312,
    length: 1,
    convRule: rule4
}, {
    start: 12313,
    length: 1,
    convRule: rule5
}, {
    start: 12314,
    length: 1,
    convRule: rule4
}, {
    start: 12315,
    length: 1,
    convRule: rule5
}, {
    start: 12316,
    length: 1,
    convRule: rule7
}, {
    start: 12317,
    length: 1,
    convRule: rule4
}, {
    start: 12318,
    length: 2,
    convRule: rule5
}, {
    start: 12320,
    length: 1,
    convRule: rule13
}, {
    start: 12321,
    length: 9,
    convRule: rule116
}, {
    start: 12330,
    length: 6,
    convRule: rule84
}, {
    start: 12336,
    length: 1,
    convRule: rule7
}, {
    start: 12337,
    length: 5,
    convRule: rule83
}, {
    start: 12342,
    length: 2,
    convRule: rule13
}, {
    start: 12344,
    length: 3,
    convRule: rule116
}, {
    start: 12347,
    length: 1,
    convRule: rule83
}, {
    start: 12348,
    length: 1,
    convRule: rule45
}, {
    start: 12349,
    length: 1,
    convRule: rule2
}, {
    start: 12350,
    length: 2,
    convRule: rule13
}, {
    start: 12353,
    length: 86,
    convRule: rule45
}, {
    start: 12441,
    length: 2,
    convRule: rule84
}, {
    start: 12443,
    length: 2,
    convRule: rule10
}, {
    start: 12445,
    length: 2,
    convRule: rule83
}, {
    start: 12447,
    length: 1,
    convRule: rule45
}, {
    start: 12448,
    length: 1,
    convRule: rule7
}, {
    start: 12449,
    length: 90,
    convRule: rule45
}, {
    start: 12539,
    length: 1,
    convRule: rule2
}, {
    start: 12540,
    length: 3,
    convRule: rule83
}, {
    start: 12543,
    length: 1,
    convRule: rule45
}, {
    start: 12549,
    length: 41,
    convRule: rule45
}, {
    start: 12593,
    length: 94,
    convRule: rule45
}, {
    start: 12688,
    length: 2,
    convRule: rule13
}, {
    start: 12690,
    length: 4,
    convRule: rule17
}, {
    start: 12694,
    length: 10,
    convRule: rule13
}, {
    start: 12704,
    length: 27,
    convRule: rule45
}, {
    start: 12736,
    length: 36,
    convRule: rule13
}, {
    start: 12784,
    length: 16,
    convRule: rule45
}, {
    start: 12800,
    length: 31,
    convRule: rule13
}, {
    start: 12832,
    length: 10,
    convRule: rule17
}, {
    start: 12842,
    length: 39,
    convRule: rule13
}, {
    start: 12881,
    length: 15,
    convRule: rule17
}, {
    start: 12896,
    length: 32,
    convRule: rule13
}, {
    start: 12928,
    length: 10,
    convRule: rule17
}, {
    start: 12938,
    length: 39,
    convRule: rule13
}, {
    start: 12977,
    length: 15,
    convRule: rule17
}, {
    start: 12992,
    length: 63,
    convRule: rule13
}, {
    start: 13056,
    length: 256,
    convRule: rule13
}, {
    start: 13312,
    length: 6582,
    convRule: rule45
}, {
    start: 19904,
    length: 64,
    convRule: rule13
}, {
    start: 19968,
    length: 20940,
    convRule: rule45
}, {
    start: 40960,
    length: 21,
    convRule: rule45
}, {
    start: 40981,
    length: 1,
    convRule: rule83
}, {
    start: 40982,
    length: 1143,
    convRule: rule45
}, {
    start: 42128,
    length: 55,
    convRule: rule13
}, {
    start: 42192,
    length: 40,
    convRule: rule45
}, {
    start: 42232,
    length: 6,
    convRule: rule83
}, {
    start: 42238,
    length: 2,
    convRule: rule2
}, {
    start: 42240,
    length: 268,
    convRule: rule45
}, {
    start: 42508,
    length: 1,
    convRule: rule83
}, {
    start: 42509,
    length: 3,
    convRule: rule2
}, {
    start: 42512,
    length: 16,
    convRule: rule45
}, {
    start: 42528,
    length: 10,
    convRule: rule8
}, {
    start: 42538,
    length: 2,
    convRule: rule45
}, {
    start: 42560,
    length: 1,
    convRule: rule21
}, {
    start: 42561,
    length: 1,
    convRule: rule22
}, {
    start: 42562,
    length: 1,
    convRule: rule21
}, {
    start: 42563,
    length: 1,
    convRule: rule22
}, {
    start: 42564,
    length: 1,
    convRule: rule21
}, {
    start: 42565,
    length: 1,
    convRule: rule22
}, {
    start: 42566,
    length: 1,
    convRule: rule21
}, {
    start: 42567,
    length: 1,
    convRule: rule22
}, {
    start: 42568,
    length: 1,
    convRule: rule21
}, {
    start: 42569,
    length: 1,
    convRule: rule22
}, {
    start: 42570,
    length: 1,
    convRule: rule21
}, {
    start: 42571,
    length: 1,
    convRule: rule22
}, {
    start: 42572,
    length: 1,
    convRule: rule21
}, {
    start: 42573,
    length: 1,
    convRule: rule22
}, {
    start: 42574,
    length: 1,
    convRule: rule21
}, {
    start: 42575,
    length: 1,
    convRule: rule22
}, {
    start: 42576,
    length: 1,
    convRule: rule21
}, {
    start: 42577,
    length: 1,
    convRule: rule22
}, {
    start: 42578,
    length: 1,
    convRule: rule21
}, {
    start: 42579,
    length: 1,
    convRule: rule22
}, {
    start: 42580,
    length: 1,
    convRule: rule21
}, {
    start: 42581,
    length: 1,
    convRule: rule22
}, {
    start: 42582,
    length: 1,
    convRule: rule21
}, {
    start: 42583,
    length: 1,
    convRule: rule22
}, {
    start: 42584,
    length: 1,
    convRule: rule21
}, {
    start: 42585,
    length: 1,
    convRule: rule22
}, {
    start: 42586,
    length: 1,
    convRule: rule21
}, {
    start: 42587,
    length: 1,
    convRule: rule22
}, {
    start: 42588,
    length: 1,
    convRule: rule21
}, {
    start: 42589,
    length: 1,
    convRule: rule22
}, {
    start: 42590,
    length: 1,
    convRule: rule21
}, {
    start: 42591,
    length: 1,
    convRule: rule22
}, {
    start: 42592,
    length: 1,
    convRule: rule21
}, {
    start: 42593,
    length: 1,
    convRule: rule22
}, {
    start: 42594,
    length: 1,
    convRule: rule21
}, {
    start: 42595,
    length: 1,
    convRule: rule22
}, {
    start: 42596,
    length: 1,
    convRule: rule21
}, {
    start: 42597,
    length: 1,
    convRule: rule22
}, {
    start: 42598,
    length: 1,
    convRule: rule21
}, {
    start: 42599,
    length: 1,
    convRule: rule22
}, {
    start: 42600,
    length: 1,
    convRule: rule21
}, {
    start: 42601,
    length: 1,
    convRule: rule22
}, {
    start: 42602,
    length: 1,
    convRule: rule21
}, {
    start: 42603,
    length: 1,
    convRule: rule22
}, {
    start: 42604,
    length: 1,
    convRule: rule21
}, {
    start: 42605,
    length: 1,
    convRule: rule22
}, {
    start: 42606,
    length: 1,
    convRule: rule45
}, {
    start: 42607,
    length: 1,
    convRule: rule84
}, {
    start: 42608,
    length: 3,
    convRule: rule109
}, {
    start: 42611,
    length: 1,
    convRule: rule2
}, {
    start: 42620,
    length: 2,
    convRule: rule84
}, {
    start: 42622,
    length: 1,
    convRule: rule2
}, {
    start: 42623,
    length: 1,
    convRule: rule83
}, {
    start: 42624,
    length: 1,
    convRule: rule21
}, {
    start: 42625,
    length: 1,
    convRule: rule22
}, {
    start: 42626,
    length: 1,
    convRule: rule21
}, {
    start: 42627,
    length: 1,
    convRule: rule22
}, {
    start: 42628,
    length: 1,
    convRule: rule21
}, {
    start: 42629,
    length: 1,
    convRule: rule22
}, {
    start: 42630,
    length: 1,
    convRule: rule21
}, {
    start: 42631,
    length: 1,
    convRule: rule22
}, {
    start: 42632,
    length: 1,
    convRule: rule21
}, {
    start: 42633,
    length: 1,
    convRule: rule22
}, {
    start: 42634,
    length: 1,
    convRule: rule21
}, {
    start: 42635,
    length: 1,
    convRule: rule22
}, {
    start: 42636,
    length: 1,
    convRule: rule21
}, {
    start: 42637,
    length: 1,
    convRule: rule22
}, {
    start: 42638,
    length: 1,
    convRule: rule21
}, {
    start: 42639,
    length: 1,
    convRule: rule22
}, {
    start: 42640,
    length: 1,
    convRule: rule21
}, {
    start: 42641,
    length: 1,
    convRule: rule22
}, {
    start: 42642,
    length: 1,
    convRule: rule21
}, {
    start: 42643,
    length: 1,
    convRule: rule22
}, {
    start: 42644,
    length: 1,
    convRule: rule21
}, {
    start: 42645,
    length: 1,
    convRule: rule22
}, {
    start: 42646,
    length: 1,
    convRule: rule21
}, {
    start: 42647,
    length: 1,
    convRule: rule22
}, {
    start: 42656,
    length: 70,
    convRule: rule45
}, {
    start: 42726,
    length: 10,
    convRule: rule116
}, {
    start: 42736,
    length: 2,
    convRule: rule84
}, {
    start: 42738,
    length: 6,
    convRule: rule2
}, {
    start: 42752,
    length: 23,
    convRule: rule10
}, {
    start: 42775,
    length: 9,
    convRule: rule83
}, {
    start: 42784,
    length: 2,
    convRule: rule10
}, {
    start: 42786,
    length: 1,
    convRule: rule21
}, {
    start: 42787,
    length: 1,
    convRule: rule22
}, {
    start: 42788,
    length: 1,
    convRule: rule21
}, {
    start: 42789,
    length: 1,
    convRule: rule22
}, {
    start: 42790,
    length: 1,
    convRule: rule21
}, {
    start: 42791,
    length: 1,
    convRule: rule22
}, {
    start: 42792,
    length: 1,
    convRule: rule21
}, {
    start: 42793,
    length: 1,
    convRule: rule22
}, {
    start: 42794,
    length: 1,
    convRule: rule21
}, {
    start: 42795,
    length: 1,
    convRule: rule22
}, {
    start: 42796,
    length: 1,
    convRule: rule21
}, {
    start: 42797,
    length: 1,
    convRule: rule22
}, {
    start: 42798,
    length: 1,
    convRule: rule21
}, {
    start: 42799,
    length: 1,
    convRule: rule22
}, {
    start: 42800,
    length: 2,
    convRule: rule14
}, {
    start: 42802,
    length: 1,
    convRule: rule21
}, {
    start: 42803,
    length: 1,
    convRule: rule22
}, {
    start: 42804,
    length: 1,
    convRule: rule21
}, {
    start: 42805,
    length: 1,
    convRule: rule22
}, {
    start: 42806,
    length: 1,
    convRule: rule21
}, {
    start: 42807,
    length: 1,
    convRule: rule22
}, {
    start: 42808,
    length: 1,
    convRule: rule21
}, {
    start: 42809,
    length: 1,
    convRule: rule22
}, {
    start: 42810,
    length: 1,
    convRule: rule21
}, {
    start: 42811,
    length: 1,
    convRule: rule22
}, {
    start: 42812,
    length: 1,
    convRule: rule21
}, {
    start: 42813,
    length: 1,
    convRule: rule22
}, {
    start: 42814,
    length: 1,
    convRule: rule21
}, {
    start: 42815,
    length: 1,
    convRule: rule22
}, {
    start: 42816,
    length: 1,
    convRule: rule21
}, {
    start: 42817,
    length: 1,
    convRule: rule22
}, {
    start: 42818,
    length: 1,
    convRule: rule21
}, {
    start: 42819,
    length: 1,
    convRule: rule22
}, {
    start: 42820,
    length: 1,
    convRule: rule21
}, {
    start: 42821,
    length: 1,
    convRule: rule22
}, {
    start: 42822,
    length: 1,
    convRule: rule21
}, {
    start: 42823,
    length: 1,
    convRule: rule22
}, {
    start: 42824,
    length: 1,
    convRule: rule21
}, {
    start: 42825,
    length: 1,
    convRule: rule22
}, {
    start: 42826,
    length: 1,
    convRule: rule21
}, {
    start: 42827,
    length: 1,
    convRule: rule22
}, {
    start: 42828,
    length: 1,
    convRule: rule21
}, {
    start: 42829,
    length: 1,
    convRule: rule22
}, {
    start: 42830,
    length: 1,
    convRule: rule21
}, {
    start: 42831,
    length: 1,
    convRule: rule22
}, {
    start: 42832,
    length: 1,
    convRule: rule21
}, {
    start: 42833,
    length: 1,
    convRule: rule22
}, {
    start: 42834,
    length: 1,
    convRule: rule21
}, {
    start: 42835,
    length: 1,
    convRule: rule22
}, {
    start: 42836,
    length: 1,
    convRule: rule21
}, {
    start: 42837,
    length: 1,
    convRule: rule22
}, {
    start: 42838,
    length: 1,
    convRule: rule21
}, {
    start: 42839,
    length: 1,
    convRule: rule22
}, {
    start: 42840,
    length: 1,
    convRule: rule21
}, {
    start: 42841,
    length: 1,
    convRule: rule22
}, {
    start: 42842,
    length: 1,
    convRule: rule21
}, {
    start: 42843,
    length: 1,
    convRule: rule22
}, {
    start: 42844,
    length: 1,
    convRule: rule21
}, {
    start: 42845,
    length: 1,
    convRule: rule22
}, {
    start: 42846,
    length: 1,
    convRule: rule21
}, {
    start: 42847,
    length: 1,
    convRule: rule22
}, {
    start: 42848,
    length: 1,
    convRule: rule21
}, {
    start: 42849,
    length: 1,
    convRule: rule22
}, {
    start: 42850,
    length: 1,
    convRule: rule21
}, {
    start: 42851,
    length: 1,
    convRule: rule22
}, {
    start: 42852,
    length: 1,
    convRule: rule21
}, {
    start: 42853,
    length: 1,
    convRule: rule22
}, {
    start: 42854,
    length: 1,
    convRule: rule21
}, {
    start: 42855,
    length: 1,
    convRule: rule22
}, {
    start: 42856,
    length: 1,
    convRule: rule21
}, {
    start: 42857,
    length: 1,
    convRule: rule22
}, {
    start: 42858,
    length: 1,
    convRule: rule21
}, {
    start: 42859,
    length: 1,
    convRule: rule22
}, {
    start: 42860,
    length: 1,
    convRule: rule21
}, {
    start: 42861,
    length: 1,
    convRule: rule22
}, {
    start: 42862,
    length: 1,
    convRule: rule21
}, {
    start: 42863,
    length: 1,
    convRule: rule22
}, {
    start: 42864,
    length: 1,
    convRule: rule83
}, {
    start: 42865,
    length: 8,
    convRule: rule14
}, {
    start: 42873,
    length: 1,
    convRule: rule21
}, {
    start: 42874,
    length: 1,
    convRule: rule22
}, {
    start: 42875,
    length: 1,
    convRule: rule21
}, {
    start: 42876,
    length: 1,
    convRule: rule22
}, {
    start: 42877,
    length: 1,
    convRule: rule161
}, {
    start: 42878,
    length: 1,
    convRule: rule21
}, {
    start: 42879,
    length: 1,
    convRule: rule22
}, {
    start: 42880,
    length: 1,
    convRule: rule21
}, {
    start: 42881,
    length: 1,
    convRule: rule22
}, {
    start: 42882,
    length: 1,
    convRule: rule21
}, {
    start: 42883,
    length: 1,
    convRule: rule22
}, {
    start: 42884,
    length: 1,
    convRule: rule21
}, {
    start: 42885,
    length: 1,
    convRule: rule22
}, {
    start: 42886,
    length: 1,
    convRule: rule21
}, {
    start: 42887,
    length: 1,
    convRule: rule22
}, {
    start: 42888,
    length: 1,
    convRule: rule83
}, {
    start: 42889,
    length: 2,
    convRule: rule10
}, {
    start: 42891,
    length: 1,
    convRule: rule21
}, {
    start: 42892,
    length: 1,
    convRule: rule22
}, {
    start: 42893,
    length: 1,
    convRule: rule162
}, {
    start: 42894,
    length: 1,
    convRule: rule14
}, {
    start: 42896,
    length: 1,
    convRule: rule21
}, {
    start: 42897,
    length: 1,
    convRule: rule22
}, {
    start: 42912,
    length: 1,
    convRule: rule21
}, {
    start: 42913,
    length: 1,
    convRule: rule22
}, {
    start: 42914,
    length: 1,
    convRule: rule21
}, {
    start: 42915,
    length: 1,
    convRule: rule22
}, {
    start: 42916,
    length: 1,
    convRule: rule21
}, {
    start: 42917,
    length: 1,
    convRule: rule22
}, {
    start: 42918,
    length: 1,
    convRule: rule21
}, {
    start: 42919,
    length: 1,
    convRule: rule22
}, {
    start: 42920,
    length: 1,
    convRule: rule21
}, {
    start: 42921,
    length: 1,
    convRule: rule22
}, {
    start: 43002,
    length: 1,
    convRule: rule14
}, {
    start: 43003,
    length: 7,
    convRule: rule45
}, {
    start: 43010,
    length: 1,
    convRule: rule84
}, {
    start: 43011,
    length: 3,
    convRule: rule45
}, {
    start: 43014,
    length: 1,
    convRule: rule84
}, {
    start: 43015,
    length: 4,
    convRule: rule45
}, {
    start: 43019,
    length: 1,
    convRule: rule84
}, {
    start: 43020,
    length: 23,
    convRule: rule45
}, {
    start: 43043,
    length: 2,
    convRule: rule114
}, {
    start: 43045,
    length: 2,
    convRule: rule84
}, {
    start: 43047,
    length: 1,
    convRule: rule114
}, {
    start: 43048,
    length: 4,
    convRule: rule13
}, {
    start: 43056,
    length: 6,
    convRule: rule17
}, {
    start: 43062,
    length: 2,
    convRule: rule13
}, {
    start: 43064,
    length: 1,
    convRule: rule3
}, {
    start: 43065,
    length: 1,
    convRule: rule13
}, {
    start: 43072,
    length: 52,
    convRule: rule45
}, {
    start: 43124,
    length: 4,
    convRule: rule2
}, {
    start: 43136,
    length: 2,
    convRule: rule114
}, {
    start: 43138,
    length: 50,
    convRule: rule45
}, {
    start: 43188,
    length: 16,
    convRule: rule114
}, {
    start: 43204,
    length: 1,
    convRule: rule84
}, {
    start: 43214,
    length: 2,
    convRule: rule2
}, {
    start: 43216,
    length: 10,
    convRule: rule8
}, {
    start: 43232,
    length: 18,
    convRule: rule84
}, {
    start: 43250,
    length: 6,
    convRule: rule45
}, {
    start: 43256,
    length: 3,
    convRule: rule2
}, {
    start: 43259,
    length: 1,
    convRule: rule45
}, {
    start: 43264,
    length: 10,
    convRule: rule8
}, {
    start: 43274,
    length: 28,
    convRule: rule45
}, {
    start: 43302,
    length: 8,
    convRule: rule84
}, {
    start: 43310,
    length: 2,
    convRule: rule2
}, {
    start: 43312,
    length: 23,
    convRule: rule45
}, {
    start: 43335,
    length: 11,
    convRule: rule84
}, {
    start: 43346,
    length: 2,
    convRule: rule114
}, {
    start: 43359,
    length: 1,
    convRule: rule2
}, {
    start: 43360,
    length: 29,
    convRule: rule45
}, {
    start: 43392,
    length: 3,
    convRule: rule84
}, {
    start: 43395,
    length: 1,
    convRule: rule114
}, {
    start: 43396,
    length: 47,
    convRule: rule45
}, {
    start: 43443,
    length: 1,
    convRule: rule84
}, {
    start: 43444,
    length: 2,
    convRule: rule114
}, {
    start: 43446,
    length: 4,
    convRule: rule84
}, {
    start: 43450,
    length: 2,
    convRule: rule114
}, {
    start: 43452,
    length: 1,
    convRule: rule84
}, {
    start: 43453,
    length: 4,
    convRule: rule114
}, {
    start: 43457,
    length: 13,
    convRule: rule2
}, {
    start: 43471,
    length: 1,
    convRule: rule83
}, {
    start: 43472,
    length: 10,
    convRule: rule8
}, {
    start: 43486,
    length: 2,
    convRule: rule2
}, {
    start: 43520,
    length: 41,
    convRule: rule45
}, {
    start: 43561,
    length: 6,
    convRule: rule84
}, {
    start: 43567,
    length: 2,
    convRule: rule114
}, {
    start: 43569,
    length: 2,
    convRule: rule84
}, {
    start: 43571,
    length: 2,
    convRule: rule114
}, {
    start: 43573,
    length: 2,
    convRule: rule84
}, {
    start: 43584,
    length: 3,
    convRule: rule45
}, {
    start: 43587,
    length: 1,
    convRule: rule84
}, {
    start: 43588,
    length: 8,
    convRule: rule45
}, {
    start: 43596,
    length: 1,
    convRule: rule84
}, {
    start: 43597,
    length: 1,
    convRule: rule114
}, {
    start: 43600,
    length: 10,
    convRule: rule8
}, {
    start: 43612,
    length: 4,
    convRule: rule2
}, {
    start: 43616,
    length: 16,
    convRule: rule45
}, {
    start: 43632,
    length: 1,
    convRule: rule83
}, {
    start: 43633,
    length: 6,
    convRule: rule45
}, {
    start: 43639,
    length: 3,
    convRule: rule13
}, {
    start: 43642,
    length: 1,
    convRule: rule45
}, {
    start: 43643,
    length: 1,
    convRule: rule114
}, {
    start: 43648,
    length: 48,
    convRule: rule45
}, {
    start: 43696,
    length: 1,
    convRule: rule84
}, {
    start: 43697,
    length: 1,
    convRule: rule45
}, {
    start: 43698,
    length: 3,
    convRule: rule84
}, {
    start: 43701,
    length: 2,
    convRule: rule45
}, {
    start: 43703,
    length: 2,
    convRule: rule84
}, {
    start: 43705,
    length: 5,
    convRule: rule45
}, {
    start: 43710,
    length: 2,
    convRule: rule84
}, {
    start: 43712,
    length: 1,
    convRule: rule45
}, {
    start: 43713,
    length: 1,
    convRule: rule84
}, {
    start: 43714,
    length: 1,
    convRule: rule45
}, {
    start: 43739,
    length: 2,
    convRule: rule45
}, {
    start: 43741,
    length: 1,
    convRule: rule83
}, {
    start: 43742,
    length: 2,
    convRule: rule2
}, {
    start: 43777,
    length: 6,
    convRule: rule45
}, {
    start: 43785,
    length: 6,
    convRule: rule45
}, {
    start: 43793,
    length: 6,
    convRule: rule45
}, {
    start: 43808,
    length: 7,
    convRule: rule45
}, {
    start: 43816,
    length: 7,
    convRule: rule45
}, {
    start: 43968,
    length: 35,
    convRule: rule45
}, {
    start: 44003,
    length: 2,
    convRule: rule114
}, {
    start: 44005,
    length: 1,
    convRule: rule84
}, {
    start: 44006,
    length: 2,
    convRule: rule114
}, {
    start: 44008,
    length: 1,
    convRule: rule84
}, {
    start: 44009,
    length: 2,
    convRule: rule114
}, {
    start: 44011,
    length: 1,
    convRule: rule2
}, {
    start: 44012,
    length: 1,
    convRule: rule114
}, {
    start: 44013,
    length: 1,
    convRule: rule84
}, {
    start: 44016,
    length: 10,
    convRule: rule8
}, {
    start: 44032,
    length: 11172,
    convRule: rule45
}, {
    start: 55216,
    length: 23,
    convRule: rule45
}, {
    start: 55243,
    length: 49,
    convRule: rule45
}, {
    start: 55296,
    length: 896,
    convRule: rule163
}, {
    start: 56192,
    length: 128,
    convRule: rule163
}, {
    start: 56320,
    length: 1024,
    convRule: rule163
}, {
    start: 57344,
    length: 6400,
    convRule: rule164
}, {
    start: 63744,
    length: 302,
    convRule: rule45
}, {
    start: 64048,
    length: 62,
    convRule: rule45
}, {
    start: 64112,
    length: 106,
    convRule: rule45
}, {
    start: 64256,
    length: 7,
    convRule: rule14
}, {
    start: 64275,
    length: 5,
    convRule: rule14
}, {
    start: 64285,
    length: 1,
    convRule: rule45
}, {
    start: 64286,
    length: 1,
    convRule: rule84
}, {
    start: 64287,
    length: 10,
    convRule: rule45
}, {
    start: 64297,
    length: 1,
    convRule: rule6
}, {
    start: 64298,
    length: 13,
    convRule: rule45
}, {
    start: 64312,
    length: 5,
    convRule: rule45
}, {
    start: 64318,
    length: 1,
    convRule: rule45
}, {
    start: 64320,
    length: 2,
    convRule: rule45
}, {
    start: 64323,
    length: 2,
    convRule: rule45
}, {
    start: 64326,
    length: 108,
    convRule: rule45
}, {
    start: 64434,
    length: 16,
    convRule: rule10
}, {
    start: 64467,
    length: 363,
    convRule: rule45
}, {
    start: 64830,
    length: 1,
    convRule: rule4
}, {
    start: 64831,
    length: 1,
    convRule: rule5
}, {
    start: 64848,
    length: 64,
    convRule: rule45
}, {
    start: 64914,
    length: 54,
    convRule: rule45
}, {
    start: 65008,
    length: 12,
    convRule: rule45
}, {
    start: 65020,
    length: 1,
    convRule: rule3
}, {
    start: 65021,
    length: 1,
    convRule: rule13
}, {
    start: 65024,
    length: 16,
    convRule: rule84
}, {
    start: 65040,
    length: 7,
    convRule: rule2
}, {
    start: 65047,
    length: 1,
    convRule: rule4
}, {
    start: 65048,
    length: 1,
    convRule: rule5
}, {
    start: 65049,
    length: 1,
    convRule: rule2
}, {
    start: 65056,
    length: 7,
    convRule: rule84
}, {
    start: 65072,
    length: 1,
    convRule: rule2
}, {
    start: 65073,
    length: 2,
    convRule: rule7
}, {
    start: 65075,
    length: 2,
    convRule: rule11
}, {
    start: 65077,
    length: 1,
    convRule: rule4
}, {
    start: 65078,
    length: 1,
    convRule: rule5
}, {
    start: 65079,
    length: 1,
    convRule: rule4
}, {
    start: 65080,
    length: 1,
    convRule: rule5
}, {
    start: 65081,
    length: 1,
    convRule: rule4
}, {
    start: 65082,
    length: 1,
    convRule: rule5
}, {
    start: 65083,
    length: 1,
    convRule: rule4
}, {
    start: 65084,
    length: 1,
    convRule: rule5
}, {
    start: 65085,
    length: 1,
    convRule: rule4
}, {
    start: 65086,
    length: 1,
    convRule: rule5
}, {
    start: 65087,
    length: 1,
    convRule: rule4
}, {
    start: 65088,
    length: 1,
    convRule: rule5
}, {
    start: 65089,
    length: 1,
    convRule: rule4
}, {
    start: 65090,
    length: 1,
    convRule: rule5
}, {
    start: 65091,
    length: 1,
    convRule: rule4
}, {
    start: 65092,
    length: 1,
    convRule: rule5
}, {
    start: 65093,
    length: 2,
    convRule: rule2
}, {
    start: 65095,
    length: 1,
    convRule: rule4
}, {
    start: 65096,
    length: 1,
    convRule: rule5
}, {
    start: 65097,
    length: 4,
    convRule: rule2
}, {
    start: 65101,
    length: 3,
    convRule: rule11
}, {
    start: 65104,
    length: 3,
    convRule: rule2
}, {
    start: 65108,
    length: 4,
    convRule: rule2
}, {
    start: 65112,
    length: 1,
    convRule: rule7
}, {
    start: 65113,
    length: 1,
    convRule: rule4
}, {
    start: 65114,
    length: 1,
    convRule: rule5
}, {
    start: 65115,
    length: 1,
    convRule: rule4
}, {
    start: 65116,
    length: 1,
    convRule: rule5
}, {
    start: 65117,
    length: 1,
    convRule: rule4
}, {
    start: 65118,
    length: 1,
    convRule: rule5
}, {
    start: 65119,
    length: 3,
    convRule: rule2
}, {
    start: 65122,
    length: 1,
    convRule: rule6
}, {
    start: 65123,
    length: 1,
    convRule: rule7
}, {
    start: 65124,
    length: 3,
    convRule: rule6
}, {
    start: 65128,
    length: 1,
    convRule: rule2
}, {
    start: 65129,
    length: 1,
    convRule: rule3
}, {
    start: 65130,
    length: 2,
    convRule: rule2
}, {
    start: 65136,
    length: 5,
    convRule: rule45
}, {
    start: 65142,
    length: 135,
    convRule: rule45
}, {
    start: 65279,
    length: 1,
    convRule: rule16
}, {
    start: 65281,
    length: 3,
    convRule: rule2
}, {
    start: 65284,
    length: 1,
    convRule: rule3
}, {
    start: 65285,
    length: 3,
    convRule: rule2
}, {
    start: 65288,
    length: 1,
    convRule: rule4
}, {
    start: 65289,
    length: 1,
    convRule: rule5
}, {
    start: 65290,
    length: 1,
    convRule: rule2
}, {
    start: 65291,
    length: 1,
    convRule: rule6
}, {
    start: 65292,
    length: 1,
    convRule: rule2
}, {
    start: 65293,
    length: 1,
    convRule: rule7
}, {
    start: 65294,
    length: 2,
    convRule: rule2
}, {
    start: 65296,
    length: 10,
    convRule: rule8
}, {
    start: 65306,
    length: 2,
    convRule: rule2
}, {
    start: 65308,
    length: 3,
    convRule: rule6
}, {
    start: 65311,
    length: 2,
    convRule: rule2
}, {
    start: 65313,
    length: 26,
    convRule: rule9
}, {
    start: 65339,
    length: 1,
    convRule: rule4
}, {
    start: 65340,
    length: 1,
    convRule: rule2
}, {
    start: 65341,
    length: 1,
    convRule: rule5
}, {
    start: 65342,
    length: 1,
    convRule: rule10
}, {
    start: 65343,
    length: 1,
    convRule: rule11
}, {
    start: 65344,
    length: 1,
    convRule: rule10
}, {
    start: 65345,
    length: 26,
    convRule: rule12
}, {
    start: 65371,
    length: 1,
    convRule: rule4
}, {
    start: 65372,
    length: 1,
    convRule: rule6
}, {
    start: 65373,
    length: 1,
    convRule: rule5
}, {
    start: 65374,
    length: 1,
    convRule: rule6
}, {
    start: 65375,
    length: 1,
    convRule: rule4
}, {
    start: 65376,
    length: 1,
    convRule: rule5
}, {
    start: 65377,
    length: 1,
    convRule: rule2
}, {
    start: 65378,
    length: 1,
    convRule: rule4
}, {
    start: 65379,
    length: 1,
    convRule: rule5
}, {
    start: 65380,
    length: 2,
    convRule: rule2
}, {
    start: 65382,
    length: 10,
    convRule: rule45
}, {
    start: 65392,
    length: 1,
    convRule: rule83
}, {
    start: 65393,
    length: 45,
    convRule: rule45
}, {
    start: 65438,
    length: 2,
    convRule: rule83
}, {
    start: 65440,
    length: 31,
    convRule: rule45
}, {
    start: 65474,
    length: 6,
    convRule: rule45
}, {
    start: 65482,
    length: 6,
    convRule: rule45
}, {
    start: 65490,
    length: 6,
    convRule: rule45
}, {
    start: 65498,
    length: 3,
    convRule: rule45
}, {
    start: 65504,
    length: 2,
    convRule: rule3
}, {
    start: 65506,
    length: 1,
    convRule: rule6
}, {
    start: 65507,
    length: 1,
    convRule: rule10
}, {
    start: 65508,
    length: 1,
    convRule: rule13
}, {
    start: 65509,
    length: 2,
    convRule: rule3
}, {
    start: 65512,
    length: 1,
    convRule: rule13
}, {
    start: 65513,
    length: 4,
    convRule: rule6
}, {
    start: 65517,
    length: 2,
    convRule: rule13
}, {
    start: 65529,
    length: 3,
    convRule: rule16
}, {
    start: 65532,
    length: 2,
    convRule: rule13
}, {
    start: 65536,
    length: 12,
    convRule: rule45
}, {
    start: 65549,
    length: 26,
    convRule: rule45
}, {
    start: 65576,
    length: 19,
    convRule: rule45
}, {
    start: 65596,
    length: 2,
    convRule: rule45
}, {
    start: 65599,
    length: 15,
    convRule: rule45
}, {
    start: 65616,
    length: 14,
    convRule: rule45
}, {
    start: 65664,
    length: 123,
    convRule: rule45
}, {
    start: 65792,
    length: 2,
    convRule: rule2
}, {
    start: 65794,
    length: 1,
    convRule: rule13
}, {
    start: 65799,
    length: 45,
    convRule: rule17
}, {
    start: 65847,
    length: 9,
    convRule: rule13
}, {
    start: 65856,
    length: 53,
    convRule: rule116
}, {
    start: 65909,
    length: 4,
    convRule: rule17
}, {
    start: 65913,
    length: 17,
    convRule: rule13
}, {
    start: 65930,
    length: 1,
    convRule: rule17
}, {
    start: 65936,
    length: 12,
    convRule: rule13
}, {
    start: 66000,
    length: 45,
    convRule: rule13
}, {
    start: 66045,
    length: 1,
    convRule: rule84
}, {
    start: 66176,
    length: 29,
    convRule: rule45
}, {
    start: 66208,
    length: 49,
    convRule: rule45
}, {
    start: 66304,
    length: 31,
    convRule: rule45
}, {
    start: 66336,
    length: 4,
    convRule: rule17
}, {
    start: 66352,
    length: 17,
    convRule: rule45
}, {
    start: 66369,
    length: 1,
    convRule: rule116
}, {
    start: 66370,
    length: 8,
    convRule: rule45
}, {
    start: 66378,
    length: 1,
    convRule: rule116
}, {
    start: 66432,
    length: 30,
    convRule: rule45
}, {
    start: 66463,
    length: 1,
    convRule: rule2
}, {
    start: 66464,
    length: 36,
    convRule: rule45
}, {
    start: 66504,
    length: 8,
    convRule: rule45
}, {
    start: 66512,
    length: 1,
    convRule: rule2
}, {
    start: 66513,
    length: 5,
    convRule: rule116
}, {
    start: 66560,
    length: 40,
    convRule: rule165
}, {
    start: 66600,
    length: 40,
    convRule: rule166
}, {
    start: 66640,
    length: 78,
    convRule: rule45
}, {
    start: 66720,
    length: 10,
    convRule: rule8
}, {
    start: 67584,
    length: 6,
    convRule: rule45
}, {
    start: 67592,
    length: 1,
    convRule: rule45
}, {
    start: 67594,
    length: 44,
    convRule: rule45
}, {
    start: 67639,
    length: 2,
    convRule: rule45
}, {
    start: 67644,
    length: 1,
    convRule: rule45
}, {
    start: 67647,
    length: 23,
    convRule: rule45
}, {
    start: 67671,
    length: 1,
    convRule: rule2
}, {
    start: 67672,
    length: 8,
    convRule: rule17
}, {
    start: 67840,
    length: 22,
    convRule: rule45
}, {
    start: 67862,
    length: 6,
    convRule: rule17
}, {
    start: 67871,
    length: 1,
    convRule: rule2
}, {
    start: 67872,
    length: 26,
    convRule: rule45
}, {
    start: 67903,
    length: 1,
    convRule: rule2
}, {
    start: 68096,
    length: 1,
    convRule: rule45
}, {
    start: 68097,
    length: 3,
    convRule: rule84
}, {
    start: 68101,
    length: 2,
    convRule: rule84
}, {
    start: 68108,
    length: 4,
    convRule: rule84
}, {
    start: 68112,
    length: 4,
    convRule: rule45
}, {
    start: 68117,
    length: 3,
    convRule: rule45
}, {
    start: 68121,
    length: 27,
    convRule: rule45
}, {
    start: 68152,
    length: 3,
    convRule: rule84
}, {
    start: 68159,
    length: 1,
    convRule: rule84
}, {
    start: 68160,
    length: 8,
    convRule: rule17
}, {
    start: 68176,
    length: 9,
    convRule: rule2
}, {
    start: 68192,
    length: 29,
    convRule: rule45
}, {
    start: 68221,
    length: 2,
    convRule: rule17
}, {
    start: 68223,
    length: 1,
    convRule: rule2
}, {
    start: 68352,
    length: 54,
    convRule: rule45
}, {
    start: 68409,
    length: 7,
    convRule: rule2
}, {
    start: 68416,
    length: 22,
    convRule: rule45
}, {
    start: 68440,
    length: 8,
    convRule: rule17
}, {
    start: 68448,
    length: 19,
    convRule: rule45
}, {
    start: 68472,
    length: 8,
    convRule: rule17
}, {
    start: 68608,
    length: 73,
    convRule: rule45
}, {
    start: 69216,
    length: 31,
    convRule: rule17
}, {
    start: 69632,
    length: 1,
    convRule: rule114
}, {
    start: 69633,
    length: 1,
    convRule: rule84
}, {
    start: 69634,
    length: 1,
    convRule: rule114
}, {
    start: 69635,
    length: 53,
    convRule: rule45
}, {
    start: 69688,
    length: 15,
    convRule: rule84
}, {
    start: 69703,
    length: 7,
    convRule: rule2
}, {
    start: 69714,
    length: 20,
    convRule: rule17
}, {
    start: 69734,
    length: 10,
    convRule: rule8
}, {
    start: 69760,
    length: 2,
    convRule: rule84
}, {
    start: 69762,
    length: 1,
    convRule: rule114
}, {
    start: 69763,
    length: 45,
    convRule: rule45
}, {
    start: 69808,
    length: 3,
    convRule: rule114
}, {
    start: 69811,
    length: 4,
    convRule: rule84
}, {
    start: 69815,
    length: 2,
    convRule: rule114
}, {
    start: 69817,
    length: 2,
    convRule: rule84
}, {
    start: 69819,
    length: 2,
    convRule: rule2
}, {
    start: 69821,
    length: 1,
    convRule: rule16
}, {
    start: 69822,
    length: 4,
    convRule: rule2
}, {
    start: 73728,
    length: 879,
    convRule: rule45
}, {
    start: 74752,
    length: 99,
    convRule: rule116
}, {
    start: 74864,
    length: 4,
    convRule: rule2
}, {
    start: 77824,
    length: 1071,
    convRule: rule45
}, {
    start: 92160,
    length: 569,
    convRule: rule45
}, {
    start: 110592,
    length: 2,
    convRule: rule45
}, {
    start: 118784,
    length: 246,
    convRule: rule13
}, {
    start: 119040,
    length: 39,
    convRule: rule13
}, {
    start: 119081,
    length: 60,
    convRule: rule13
}, {
    start: 119141,
    length: 2,
    convRule: rule114
}, {
    start: 119143,
    length: 3,
    convRule: rule84
}, {
    start: 119146,
    length: 3,
    convRule: rule13
}, {
    start: 119149,
    length: 6,
    convRule: rule114
}, {
    start: 119155,
    length: 8,
    convRule: rule16
}, {
    start: 119163,
    length: 8,
    convRule: rule84
}, {
    start: 119171,
    length: 2,
    convRule: rule13
}, {
    start: 119173,
    length: 7,
    convRule: rule84
}, {
    start: 119180,
    length: 30,
    convRule: rule13
}, {
    start: 119210,
    length: 4,
    convRule: rule84
}, {
    start: 119214,
    length: 48,
    convRule: rule13
}, {
    start: 119296,
    length: 66,
    convRule: rule13
}, {
    start: 119362,
    length: 3,
    convRule: rule84
}, {
    start: 119365,
    length: 1,
    convRule: rule13
}, {
    start: 119552,
    length: 87,
    convRule: rule13
}, {
    start: 119648,
    length: 18,
    convRule: rule17
}, {
    start: 119808,
    length: 26,
    convRule: rule98
}, {
    start: 119834,
    length: 26,
    convRule: rule14
}, {
    start: 119860,
    length: 26,
    convRule: rule98
}, {
    start: 119886,
    length: 7,
    convRule: rule14
}, {
    start: 119894,
    length: 18,
    convRule: rule14
}, {
    start: 119912,
    length: 26,
    convRule: rule98
}, {
    start: 119938,
    length: 26,
    convRule: rule14
}, {
    start: 119964,
    length: 1,
    convRule: rule98
}, {
    start: 119966,
    length: 2,
    convRule: rule98
}, {
    start: 119970,
    length: 1,
    convRule: rule98
}, {
    start: 119973,
    length: 2,
    convRule: rule98
}, {
    start: 119977,
    length: 4,
    convRule: rule98
}, {
    start: 119982,
    length: 8,
    convRule: rule98
}, {
    start: 119990,
    length: 4,
    convRule: rule14
}, {
    start: 119995,
    length: 1,
    convRule: rule14
}, {
    start: 119997,
    length: 7,
    convRule: rule14
}, {
    start: 120005,
    length: 11,
    convRule: rule14
}, {
    start: 120016,
    length: 26,
    convRule: rule98
}, {
    start: 120042,
    length: 26,
    convRule: rule14
}, {
    start: 120068,
    length: 2,
    convRule: rule98
}, {
    start: 120071,
    length: 4,
    convRule: rule98
}, {
    start: 120077,
    length: 8,
    convRule: rule98
}, {
    start: 120086,
    length: 7,
    convRule: rule98
}, {
    start: 120094,
    length: 26,
    convRule: rule14
}, {
    start: 120120,
    length: 2,
    convRule: rule98
}, {
    start: 120123,
    length: 4,
    convRule: rule98
}, {
    start: 120128,
    length: 5,
    convRule: rule98
}, {
    start: 120134,
    length: 1,
    convRule: rule98
}, {
    start: 120138,
    length: 7,
    convRule: rule98
}, {
    start: 120146,
    length: 26,
    convRule: rule14
}, {
    start: 120172,
    length: 26,
    convRule: rule98
}, {
    start: 120198,
    length: 26,
    convRule: rule14
}, {
    start: 120224,
    length: 26,
    convRule: rule98
}, {
    start: 120250,
    length: 26,
    convRule: rule14
}, {
    start: 120276,
    length: 26,
    convRule: rule98
}, {
    start: 120302,
    length: 26,
    convRule: rule14
}, {
    start: 120328,
    length: 26,
    convRule: rule98
}, {
    start: 120354,
    length: 26,
    convRule: rule14
}, {
    start: 120380,
    length: 26,
    convRule: rule98
}, {
    start: 120406,
    length: 26,
    convRule: rule14
}, {
    start: 120432,
    length: 26,
    convRule: rule98
}, {
    start: 120458,
    length: 28,
    convRule: rule14
}, {
    start: 120488,
    length: 25,
    convRule: rule98
}, {
    start: 120513,
    length: 1,
    convRule: rule6
}, {
    start: 120514,
    length: 25,
    convRule: rule14
}, {
    start: 120539,
    length: 1,
    convRule: rule6
}, {
    start: 120540,
    length: 6,
    convRule: rule14
}, {
    start: 120546,
    length: 25,
    convRule: rule98
}, {
    start: 120571,
    length: 1,
    convRule: rule6
}, {
    start: 120572,
    length: 25,
    convRule: rule14
}, {
    start: 120597,
    length: 1,
    convRule: rule6
}, {
    start: 120598,
    length: 6,
    convRule: rule14
}, {
    start: 120604,
    length: 25,
    convRule: rule98
}, {
    start: 120629,
    length: 1,
    convRule: rule6
}, {
    start: 120630,
    length: 25,
    convRule: rule14
}, {
    start: 120655,
    length: 1,
    convRule: rule6
}, {
    start: 120656,
    length: 6,
    convRule: rule14
}, {
    start: 120662,
    length: 25,
    convRule: rule98
}, {
    start: 120687,
    length: 1,
    convRule: rule6
}, {
    start: 120688,
    length: 25,
    convRule: rule14
}, {
    start: 120713,
    length: 1,
    convRule: rule6
}, {
    start: 120714,
    length: 6,
    convRule: rule14
}, {
    start: 120720,
    length: 25,
    convRule: rule98
}, {
    start: 120745,
    length: 1,
    convRule: rule6
}, {
    start: 120746,
    length: 25,
    convRule: rule14
}, {
    start: 120771,
    length: 1,
    convRule: rule6
}, {
    start: 120772,
    length: 6,
    convRule: rule14
}, {
    start: 120778,
    length: 1,
    convRule: rule98
}, {
    start: 120779,
    length: 1,
    convRule: rule14
}, {
    start: 120782,
    length: 50,
    convRule: rule8
}, {
    start: 126976,
    length: 44,
    convRule: rule13
}, {
    start: 127024,
    length: 100,
    convRule: rule13
}, {
    start: 127136,
    length: 15,
    convRule: rule13
}, {
    start: 127153,
    length: 14,
    convRule: rule13
}, {
    start: 127169,
    length: 15,
    convRule: rule13
}, {
    start: 127185,
    length: 15,
    convRule: rule13
}, {
    start: 127232,
    length: 11,
    convRule: rule17
}, {
    start: 127248,
    length: 31,
    convRule: rule13
}, {
    start: 127280,
    length: 58,
    convRule: rule13
}, {
    start: 127344,
    length: 43,
    convRule: rule13
}, {
    start: 127462,
    length: 29,
    convRule: rule13
}, {
    start: 127504,
    length: 43,
    convRule: rule13
}, {
    start: 127552,
    length: 9,
    convRule: rule13
}, {
    start: 127568,
    length: 2,
    convRule: rule13
}, {
    start: 127744,
    length: 33,
    convRule: rule13
}, {
    start: 127792,
    length: 6,
    convRule: rule13
}, {
    start: 127799,
    length: 70,
    convRule: rule13
}, {
    start: 127872,
    length: 20,
    convRule: rule13
}, {
    start: 127904,
    length: 37,
    convRule: rule13
}, {
    start: 127942,
    length: 5,
    convRule: rule13
}, {
    start: 127968,
    length: 17,
    convRule: rule13
}, {
    start: 128000,
    length: 63,
    convRule: rule13
}, {
    start: 128064,
    length: 1,
    convRule: rule13
}, {
    start: 128066,
    length: 182,
    convRule: rule13
}, {
    start: 128249,
    length: 4,
    convRule: rule13
}, {
    start: 128256,
    length: 62,
    convRule: rule13
}, {
    start: 128336,
    length: 24,
    convRule: rule13
}, {
    start: 128507,
    length: 5,
    convRule: rule13
}, {
    start: 128513,
    length: 16,
    convRule: rule13
}, {
    start: 128530,
    length: 3,
    convRule: rule13
}, {
    start: 128534,
    length: 1,
    convRule: rule13
}, {
    start: 128536,
    length: 1,
    convRule: rule13
}, {
    start: 128538,
    length: 1,
    convRule: rule13
}, {
    start: 128540,
    length: 3,
    convRule: rule13
}, {
    start: 128544,
    length: 6,
    convRule: rule13
}, {
    start: 128552,
    length: 4,
    convRule: rule13
}, {
    start: 128557,
    length: 1,
    convRule: rule13
}, {
    start: 128560,
    length: 4,
    convRule: rule13
}, {
    start: 128565,
    length: 12,
    convRule: rule13
}, {
    start: 128581,
    length: 11,
    convRule: rule13
}, {
    start: 128640,
    length: 70,
    convRule: rule13
}, {
    start: 128768,
    length: 116,
    convRule: rule13
}, {
    start: 131072,
    length: 42711,
    convRule: rule45
}, {
    start: 173824,
    length: 4149,
    convRule: rule45
}, {
    start: 177984,
    length: 222,
    convRule: rule45
}, {
    start: 194560,
    length: 542,
    convRule: rule45
}, {
    start: 917505,
    length: 1,
    convRule: rule16
}, {
    start: 917536,
    length: 96,
    convRule: rule16
}, {
    start: 917760,
    length: 240,
    convRule: rule84
}, {
    start: 983040,
    length: 65534,
    convRule: rule164
}, {
    start: 1048576,
    length: 65534,
    convRule: rule164
} ];
var checkAttr = function (categories) {
    return function ($$char) {
        var numOfBlocks = (function () {
            var $28 = $$char < 256;
            if ($28) {
                return numLat1Blocks;
            };
            return numBlocks;
        })();
        var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
            return false;
        };
        if (maybeConversionRule instanceof Data_Maybe.Just) {
            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
        };
        throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): " + [ maybeConversionRule.constructor.name ]);
    };
};
var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);
var uIswcntrl = checkAttr([ gencatCC ]);
var uIswdigit = checkAttr([ gencatND ]);
var uIswlower = checkAttr([ gencatLL ]);
var uIswprint = checkAttr([ gencatMC, gencatNO, gencatSK, gencatME, gencatND, gencatPO, gencatLT, gencatPC, gencatSM, gencatZS, gencatLU, gencatPD, gencatSO, gencatPE, gencatPF, gencatPS, gencatSC, gencatLL, gencatLM, gencatPI, gencatNL, gencatMN, gencatLO ]);
var uIswupper = checkAttr([ gencatLU, gencatLT ]);
var uGencat = function ($$char) {
    var conversionRule = getRule(allchars)($$char)(numBlocks);
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.unicodeCat;
    })(conversionRule);
};
module.exports = {
    NUMCAT_LU: NUMCAT_LU,
    NUMCAT_LL: NUMCAT_LL,
    NUMCAT_LT: NUMCAT_LT,
    NUMCAT_LM: NUMCAT_LM,
    NUMCAT_LO: NUMCAT_LO,
    NUMCAT_MN: NUMCAT_MN,
    NUMCAT_MC: NUMCAT_MC,
    NUMCAT_ME: NUMCAT_ME,
    NUMCAT_ND: NUMCAT_ND,
    NUMCAT_NL: NUMCAT_NL,
    NUMCAT_NO: NUMCAT_NO,
    NUMCAT_PC: NUMCAT_PC,
    NUMCAT_PD: NUMCAT_PD,
    NUMCAT_PS: NUMCAT_PS,
    NUMCAT_PE: NUMCAT_PE,
    NUMCAT_PI: NUMCAT_PI,
    NUMCAT_PF: NUMCAT_PF,
    NUMCAT_PO: NUMCAT_PO,
    NUMCAT_SM: NUMCAT_SM,
    NUMCAT_SC: NUMCAT_SC,
    NUMCAT_SK: NUMCAT_SK,
    NUMCAT_SO: NUMCAT_SO,
    NUMCAT_ZS: NUMCAT_ZS,
    NUMCAT_ZL: NUMCAT_ZL,
    NUMCAT_ZP: NUMCAT_ZP,
    NUMCAT_CC: NUMCAT_CC,
    NUMCAT_CF: NUMCAT_CF,
    NUMCAT_CS: NUMCAT_CS,
    NUMCAT_CO: NUMCAT_CO,
    NUMCAT_CN: NUMCAT_CN,
    ConversionRule: ConversionRule,
    CharBlock: CharBlock,
    gencatPF: gencatPF,
    gencatSM: gencatSM,
    gencatSO: gencatSO,
    gencatPI: gencatPI,
    gencatMC: gencatMC,
    gencatCO: gencatCO,
    gencatME: gencatME,
    gencatPO: gencatPO,
    gencatCS: gencatCS,
    gencatPS: gencatPS,
    gencatMN: gencatMN,
    gencatZL: gencatZL,
    gencatZP: gencatZP,
    gencatZS: gencatZS,
    gencatLL: gencatLL,
    gencatLM: gencatLM,
    gencatLO: gencatLO,
    gencatND: gencatND,
    gencatLT: gencatLT,
    gencatSC: gencatSC,
    gencatLU: gencatLU,
    gencatNL: gencatNL,
    gencatCC: gencatCC,
    gencatNO: gencatNO,
    gencatCF: gencatCF,
    gencatPC: gencatPC,
    gencatSK: gencatSK,
    gencatPD: gencatPD,
    gencatPE: gencatPE,
    maxUniChar: maxUniChar,
    numBlocks: numBlocks,
    numConvBlocks: numConvBlocks,
    numSpaceBlocks: numSpaceBlocks,
    numLat1Blocks: numLat1Blocks,
    numRules: numRules,
    rule165: rule165,
    rule63: rule63,
    rule126: rule126,
    rule162: rule162,
    rule71: rule71,
    rule21: rule21,
    rule128: rule128,
    rule44: rule44,
    rule161: rule161,
    rule105: rule105,
    rule101: rule101,
    rule43: rule43,
    rule77: rule77,
    rule143: rule143,
    rule39: rule39,
    rule41: rule41,
    rule72: rule72,
    rule28: rule28,
    rule31: rule31,
    rule36: rule36,
    rule102: rule102,
    rule80: rule80,
    rule5: rule5,
    rule113: rule113,
    rule142: rule142,
    rule145: rule145,
    rule104: rule104,
    rule61: rule61,
    rule93: rule93,
    rule62: rule62,
    rule103: rule103,
    rule60: rule60,
    rule96: rule96,
    rule51: rule51,
    rule87: rule87,
    rule86: rule86,
    rule123: rule123,
    rule164: rule164,
    rule166: rule166,
    rule27: rule27,
    rule158: rule158,
    rule157: rule157,
    rule9: rule9,
    rule159: rule159,
    rule138: rule138,
    rule4: rule4,
    rule133: rule133,
    rule155: rule155,
    rule132: rule132,
    rule153: rule153,
    rule24: rule24,
    rule26: rule26,
    rule16: rule16,
    rule74: rule74,
    rule122: rule122,
    rule25: rule25,
    rule127: rule127,
    rule40: rule40,
    rule30: rule30,
    rule29: rule29,
    rule69: rule69,
    rule3: rule3,
    rule135: rule135,
    rule23: rule23,
    rule32: rule32,
    rule33: rule33,
    rule50: rule50,
    rule154: rule154,
    rule58: rule58,
    rule67: rule67,
    rule76: rule76,
    rule119: rule119,
    rule57: rule57,
    rule97: rule97,
    rule108: rule108,
    rule100: rule100,
    rule70: rule70,
    rule141: rule141,
    rule139: rule139,
    rule45: rule45,
    rule91: rule91,
    rule121: rule121,
    rule117: rule117,
    rule12: rule12,
    rule85: rule85,
    rule163: rule163,
    rule17: rule17,
    rule134: rule134,
    rule147: rule147,
    rule64: rule64,
    rule2: rule2,
    rule84: rule84,
    rule38: rule38,
    rule42: rule42,
    rule53: rule53,
    rule83: rule83,
    rule98: rule98,
    rule136: rule136,
    rule120: rule120,
    rule20: rule20,
    rule115: rule115,
    rule109: rule109,
    rule13: rule13,
    rule19: rule19,
    rule125: rule125,
    rule49: rule49,
    rule79: rule79,
    rule14: rule14,
    rule148: rule148,
    rule66: rule66,
    rule99: rule99,
    rule140: rule140,
    rule116: rule116,
    rule8: rule8,
    rule94: rule94,
    rule114: rule114,
    rule6: rule6,
    rule7: rule7,
    rule55: rule55,
    rule54: rule54,
    rule124: rule124,
    rule65: rule65,
    rule78: rule78,
    rule56: rule56,
    rule137: rule137,
    rule131: rule131,
    rule130: rule130,
    rule110: rule110,
    rule48: rule48,
    rule52: rule52,
    rule156: rule156,
    rule75: rule75,
    rule11: rule11,
    rule129: rule129,
    rule37: rule37,
    rule18: rule18,
    rule152: rule152,
    rule35: rule35,
    rule46: rule46,
    rule82: rule82,
    rule10: rule10,
    rule34: rule34,
    rule150: rule150,
    rule107: rule107,
    rule47: rule47,
    rule160: rule160,
    rule73: rule73,
    rule59: rule59,
    rule106: rule106,
    rule151: rule151,
    rule15: rule15,
    rule112: rule112,
    rule90: rule90,
    rule146: rule146,
    rule89: rule89,
    rule81: rule81,
    rule88: rule88,
    rule149: rule149,
    rule111: rule111,
    rule144: rule144,
    rule92: rule92,
    rule118: rule118,
    rule22: rule22,
    rule68: rule68,
    rule95: rule95,
    rule0: rule0,
    rule1: rule1,
    allchars: allchars,
    convchars: convchars,
    spacechars: spacechars,
    nullrule: nullrule,
    blkCmp: blkCmp,
    getRule: getRule,
    bsearch: bsearch,
    checkAttr: checkAttr,
    checkAttrS: checkAttrS,
    uIswcntrl: uIswcntrl,
    uIswprint: uIswprint,
    uIswupper: uIswupper,
    uIswlower: uIswlower,
    uIswalpha: uIswalpha,
    uIswdigit: uIswdigit,
    uIswalnum: uIswalnum,
    uIswspace: uIswspace,
    caseConv: caseConv,
    uTowupper: uTowupper,
    uTowlower: uTowlower,
    uTowtitle: uTowtitle,
    uGencat: uGencat,
    showUnicodeCategory: showUnicodeCategory,
    showConversionRule: showConversionRule,
    showCharBlock: showCharBlock
};

},{"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],114:[function(require,module,exports){
exports.withCharCode = function(f) {
    return function (c) {
        return String.fromCharCode(f(c.charCodeAt()));
    }
}

},{}],115:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Char_Unicode_Internal = require("../Data.Char.Unicode.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var UppercaseLetter = (function () {
    function UppercaseLetter() {

    };
    UppercaseLetter.value = new UppercaseLetter();
    return UppercaseLetter;
})();
var LowercaseLetter = (function () {
    function LowercaseLetter() {

    };
    LowercaseLetter.value = new LowercaseLetter();
    return LowercaseLetter;
})();
var TitlecaseLetter = (function () {
    function TitlecaseLetter() {

    };
    TitlecaseLetter.value = new TitlecaseLetter();
    return TitlecaseLetter;
})();
var ModifierLetter = (function () {
    function ModifierLetter() {

    };
    ModifierLetter.value = new ModifierLetter();
    return ModifierLetter;
})();
var OtherLetter = (function () {
    function OtherLetter() {

    };
    OtherLetter.value = new OtherLetter();
    return OtherLetter;
})();
var NonSpacingMark = (function () {
    function NonSpacingMark() {

    };
    NonSpacingMark.value = new NonSpacingMark();
    return NonSpacingMark;
})();
var SpacingCombiningMark = (function () {
    function SpacingCombiningMark() {

    };
    SpacingCombiningMark.value = new SpacingCombiningMark();
    return SpacingCombiningMark;
})();
var EnclosingMark = (function () {
    function EnclosingMark() {

    };
    EnclosingMark.value = new EnclosingMark();
    return EnclosingMark;
})();
var DecimalNumber = (function () {
    function DecimalNumber() {

    };
    DecimalNumber.value = new DecimalNumber();
    return DecimalNumber;
})();
var LetterNumber = (function () {
    function LetterNumber() {

    };
    LetterNumber.value = new LetterNumber();
    return LetterNumber;
})();
var OtherNumber = (function () {
    function OtherNumber() {

    };
    OtherNumber.value = new OtherNumber();
    return OtherNumber;
})();
var ConnectorPunctuation = (function () {
    function ConnectorPunctuation() {

    };
    ConnectorPunctuation.value = new ConnectorPunctuation();
    return ConnectorPunctuation;
})();
var DashPunctuation = (function () {
    function DashPunctuation() {

    };
    DashPunctuation.value = new DashPunctuation();
    return DashPunctuation;
})();
var OpenPunctuation = (function () {
    function OpenPunctuation() {

    };
    OpenPunctuation.value = new OpenPunctuation();
    return OpenPunctuation;
})();
var ClosePunctuation = (function () {
    function ClosePunctuation() {

    };
    ClosePunctuation.value = new ClosePunctuation();
    return ClosePunctuation;
})();
var InitialQuote = (function () {
    function InitialQuote() {

    };
    InitialQuote.value = new InitialQuote();
    return InitialQuote;
})();
var FinalQuote = (function () {
    function FinalQuote() {

    };
    FinalQuote.value = new FinalQuote();
    return FinalQuote;
})();
var OtherPunctuation = (function () {
    function OtherPunctuation() {

    };
    OtherPunctuation.value = new OtherPunctuation();
    return OtherPunctuation;
})();
var MathSymbol = (function () {
    function MathSymbol() {

    };
    MathSymbol.value = new MathSymbol();
    return MathSymbol;
})();
var CurrencySymbol = (function () {
    function CurrencySymbol() {

    };
    CurrencySymbol.value = new CurrencySymbol();
    return CurrencySymbol;
})();
var ModifierSymbol = (function () {
    function ModifierSymbol() {

    };
    ModifierSymbol.value = new ModifierSymbol();
    return ModifierSymbol;
})();
var OtherSymbol = (function () {
    function OtherSymbol() {

    };
    OtherSymbol.value = new OtherSymbol();
    return OtherSymbol;
})();
var Space = (function () {
    function Space() {

    };
    Space.value = new Space();
    return Space;
})();
var LineSeparator = (function () {
    function LineSeparator() {

    };
    LineSeparator.value = new LineSeparator();
    return LineSeparator;
})();
var ParagraphSeparator = (function () {
    function ParagraphSeparator() {

    };
    ParagraphSeparator.value = new ParagraphSeparator();
    return ParagraphSeparator;
})();
var Control = (function () {
    function Control() {

    };
    Control.value = new Control();
    return Control;
})();
var Format = (function () {
    function Format() {

    };
    Format.value = new Format();
    return Format;
})();
var Surrogate = (function () {
    function Surrogate() {

    };
    Surrogate.value = new Surrogate();
    return Surrogate;
})();
var PrivateUse = (function () {
    function PrivateUse() {

    };
    PrivateUse.value = new PrivateUse();
    return PrivateUse;
})();
var NotAssigned = (function () {
    function NotAssigned() {

    };
    NotAssigned.value = new NotAssigned();
    return NotAssigned;
})();
var unicodeCatToGeneralCat = function (v) {
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LU) {
        return UppercaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LL) {
        return LowercaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LT) {
        return TitlecaseLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LM) {
        return ModifierLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_LO) {
        return OtherLetter.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MN) {
        return NonSpacingMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_MC) {
        return SpacingCombiningMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ME) {
        return EnclosingMark.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ND) {
        return DecimalNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NL) {
        return LetterNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_NO) {
        return OtherNumber.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PC) {
        return ConnectorPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PD) {
        return DashPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PS) {
        return OpenPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PE) {
        return ClosePunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PI) {
        return InitialQuote.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PF) {
        return FinalQuote.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_PO) {
        return OtherPunctuation.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SM) {
        return MathSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SC) {
        return CurrencySymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SK) {
        return ModifierSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_SO) {
        return OtherSymbol.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZS) {
        return Space.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZL) {
        return LineSeparator.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_ZP) {
        return ParagraphSeparator.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CC) {
        return Control.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CF) {
        return Format.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CS) {
        return Surrogate.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CO) {
        return PrivateUse.value;
    };
    if (v instanceof Data_Char_Unicode_Internal.NUMCAT_CN) {
        return NotAssigned.value;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 192, column 1 - line 192, column 61): " + [ v.constructor.name ]);
};
var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
var toTitle = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowtitle);
var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
var showGeneralCategory = new Data_Show.Show(function (v) {
    if (v instanceof UppercaseLetter) {
        return "UppercaseLetter";
    };
    if (v instanceof LowercaseLetter) {
        return "LowercaseLetter";
    };
    if (v instanceof TitlecaseLetter) {
        return "TitlecaseLetter";
    };
    if (v instanceof ModifierLetter) {
        return "ModifierLetter";
    };
    if (v instanceof OtherLetter) {
        return "OtherLetter";
    };
    if (v instanceof NonSpacingMark) {
        return "NonSpacingMark";
    };
    if (v instanceof SpacingCombiningMark) {
        return "SpacingCombiningMark";
    };
    if (v instanceof EnclosingMark) {
        return "EnclosingMark";
    };
    if (v instanceof DecimalNumber) {
        return "DecimalNumber";
    };
    if (v instanceof LetterNumber) {
        return "LetterNumber";
    };
    if (v instanceof OtherNumber) {
        return "OtherNumber";
    };
    if (v instanceof ConnectorPunctuation) {
        return "ConnectorPunctuation";
    };
    if (v instanceof DashPunctuation) {
        return "DashPunctuation";
    };
    if (v instanceof OpenPunctuation) {
        return "OpenPunctuation";
    };
    if (v instanceof ClosePunctuation) {
        return "ClosePunctuation";
    };
    if (v instanceof InitialQuote) {
        return "InitialQuote";
    };
    if (v instanceof FinalQuote) {
        return "FinalQuote";
    };
    if (v instanceof OtherPunctuation) {
        return "OtherPunctuation";
    };
    if (v instanceof MathSymbol) {
        return "MathSymbol";
    };
    if (v instanceof CurrencySymbol) {
        return "CurrencySymbol";
    };
    if (v instanceof ModifierSymbol) {
        return "ModifierSymbol";
    };
    if (v instanceof OtherSymbol) {
        return "OtherSymbol";
    };
    if (v instanceof Space) {
        return "Space";
    };
    if (v instanceof LineSeparator) {
        return "LineSeparator";
    };
    if (v instanceof ParagraphSeparator) {
        return "ParagraphSeparator";
    };
    if (v instanceof Control) {
        return "Control";
    };
    if (v instanceof Format) {
        return "Format";
    };
    if (v instanceof Surrogate) {
        return "Surrogate";
    };
    if (v instanceof PrivateUse) {
        return "PrivateUse";
    };
    if (v instanceof NotAssigned) {
        return "NotAssigned";
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 224, column 1 - line 224, column 53): " + [ v.constructor.name ]);
});
var isUpper = function ($50) {
    return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
};
var isSpace = function (c) {
    var uc = Data_Char.toCharCode(c);
    var $14 = uc <= 823;
    if ($14) {
        return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
    };
    return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
};
var isPrint = function ($51) {
    return Data_Char_Unicode_Internal.uIswprint(Data_Char.toCharCode($51));
};
var isOctDigit = function (c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 7 && diff >= 0;
};
var isLower = function ($52) {
    return Data_Char_Unicode_Internal.uIswlower(Data_Char.toCharCode($52));
};
var isLatin1 = function (c) {
    return c <= "\xff";
};
var isDigit = function (c) {
    var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    return diff <= 9 && diff >= 0;
};
var isHexDigit = function (c) {
    return isDigit(c) || ((function () {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
        return diff <= 5 && diff >= 0;
    })() || (function () {
        var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
        return diff <= 5 && diff >= 0;
    })());
};
var isControl = function ($53) {
    return Data_Char_Unicode_Internal.uIswcntrl(Data_Char.toCharCode($53));
};
var isAsciiUpper = function (c) {
    return c >= "A" && c <= "Z";
};
var isAsciiLower = function (c) {
    return c >= "a" && c <= "z";
};
var isAscii = function (c) {
    return c < "\x80";
};
var isAlphaNum = function ($54) {
    return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($54));
};
var isAlpha = function ($55) {
    return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
};
var generalCategory = function ($56) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(unicodeCatToGeneralCat)(Data_Char_Unicode_Internal.uGencat(Data_Char.toCharCode($56)));
};
var isLetter = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof UppercaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LowercaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof TitlecaseLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierLetter) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherLetter) {
        return true;
    };
    return false;
};
var isMark = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof NonSpacingMark) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof SpacingCombiningMark) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof EnclosingMark) {
        return true;
    };
    return false;
};
var isNumber = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DecimalNumber) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LetterNumber) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherNumber) {
        return true;
    };
    return false;
};
var isPunctuation = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ConnectorPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof DashPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OpenPunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ClosePunctuation) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof InitialQuote) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof FinalQuote) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherPunctuation) {
        return true;
    };
    return false;
};
var isSeparator = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof Space) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof LineSeparator) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ParagraphSeparator) {
        return true;
    };
    return false;
};
var isSymbol = function (c) {
    var v = generalCategory(c);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof MathSymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof CurrencySymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof ModifierSymbol) {
        return true;
    };
    if (v instanceof Data_Maybe.Just && v.value0 instanceof OtherSymbol) {
        return true;
    };
    return false;
};
var generalCatToUnicodeCat = function (v) {
    if (v instanceof UppercaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LU.value;
    };
    if (v instanceof LowercaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LL.value;
    };
    if (v instanceof TitlecaseLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LT.value;
    };
    if (v instanceof ModifierLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LM.value;
    };
    if (v instanceof OtherLetter) {
        return Data_Char_Unicode_Internal.NUMCAT_LO.value;
    };
    if (v instanceof NonSpacingMark) {
        return Data_Char_Unicode_Internal.NUMCAT_MN.value;
    };
    if (v instanceof SpacingCombiningMark) {
        return Data_Char_Unicode_Internal.NUMCAT_MC.value;
    };
    if (v instanceof EnclosingMark) {
        return Data_Char_Unicode_Internal.NUMCAT_ME.value;
    };
    if (v instanceof DecimalNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_ND.value;
    };
    if (v instanceof LetterNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_NL.value;
    };
    if (v instanceof OtherNumber) {
        return Data_Char_Unicode_Internal.NUMCAT_NO.value;
    };
    if (v instanceof ConnectorPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PC.value;
    };
    if (v instanceof DashPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PD.value;
    };
    if (v instanceof OpenPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PS.value;
    };
    if (v instanceof ClosePunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PE.value;
    };
    if (v instanceof InitialQuote) {
        return Data_Char_Unicode_Internal.NUMCAT_PI.value;
    };
    if (v instanceof FinalQuote) {
        return Data_Char_Unicode_Internal.NUMCAT_PF.value;
    };
    if (v instanceof OtherPunctuation) {
        return Data_Char_Unicode_Internal.NUMCAT_PO.value;
    };
    if (v instanceof MathSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SM.value;
    };
    if (v instanceof CurrencySymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SC.value;
    };
    if (v instanceof ModifierSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SK.value;
    };
    if (v instanceof OtherSymbol) {
        return Data_Char_Unicode_Internal.NUMCAT_SO.value;
    };
    if (v instanceof Space) {
        return Data_Char_Unicode_Internal.NUMCAT_ZS.value;
    };
    if (v instanceof LineSeparator) {
        return Data_Char_Unicode_Internal.NUMCAT_ZL.value;
    };
    if (v instanceof ParagraphSeparator) {
        return Data_Char_Unicode_Internal.NUMCAT_ZP.value;
    };
    if (v instanceof Control) {
        return Data_Char_Unicode_Internal.NUMCAT_CC.value;
    };
    if (v instanceof Format) {
        return Data_Char_Unicode_Internal.NUMCAT_CF.value;
    };
    if (v instanceof Surrogate) {
        return Data_Char_Unicode_Internal.NUMCAT_CS.value;
    };
    if (v instanceof PrivateUse) {
        return Data_Char_Unicode_Internal.NUMCAT_CO.value;
    };
    if (v instanceof NotAssigned) {
        return Data_Char_Unicode_Internal.NUMCAT_CN.value;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 160, column 1 - line 160, column 61): " + [ v.constructor.name ]);
};
var generalCatToInt = function (v) {
    if (v instanceof UppercaseLetter) {
        return 1;
    };
    if (v instanceof LowercaseLetter) {
        return 2;
    };
    if (v instanceof TitlecaseLetter) {
        return 3;
    };
    if (v instanceof ModifierLetter) {
        return 4;
    };
    if (v instanceof OtherLetter) {
        return 5;
    };
    if (v instanceof NonSpacingMark) {
        return 6;
    };
    if (v instanceof SpacingCombiningMark) {
        return 7;
    };
    if (v instanceof EnclosingMark) {
        return 8;
    };
    if (v instanceof DecimalNumber) {
        return 9;
    };
    if (v instanceof LetterNumber) {
        return 10;
    };
    if (v instanceof OtherNumber) {
        return 11;
    };
    if (v instanceof ConnectorPunctuation) {
        return 12;
    };
    if (v instanceof DashPunctuation) {
        return 13;
    };
    if (v instanceof OpenPunctuation) {
        return 14;
    };
    if (v instanceof ClosePunctuation) {
        return 15;
    };
    if (v instanceof InitialQuote) {
        return 16;
    };
    if (v instanceof FinalQuote) {
        return 17;
    };
    if (v instanceof OtherPunctuation) {
        return 18;
    };
    if (v instanceof MathSymbol) {
        return 19;
    };
    if (v instanceof CurrencySymbol) {
        return 20;
    };
    if (v instanceof ModifierSymbol) {
        return 21;
    };
    if (v instanceof OtherSymbol) {
        return 22;
    };
    if (v instanceof Space) {
        return 23;
    };
    if (v instanceof LineSeparator) {
        return 24;
    };
    if (v instanceof ParagraphSeparator) {
        return 25;
    };
    if (v instanceof Control) {
        return 26;
    };
    if (v instanceof Format) {
        return 27;
    };
    if (v instanceof Surrogate) {
        return 28;
    };
    if (v instanceof PrivateUse) {
        return 29;
    };
    if (v instanceof NotAssigned) {
        return 30;
    };
    throw new Error("Failed pattern match at Data.Char.Unicode (line 128, column 1 - line 128, column 42): " + [ v.constructor.name ]);
};
var eqGeneralCategory = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof UppercaseLetter && v1 instanceof UppercaseLetter) {
            return true;
        };
        if (v instanceof LowercaseLetter && v1 instanceof LowercaseLetter) {
            return true;
        };
        if (v instanceof TitlecaseLetter && v1 instanceof TitlecaseLetter) {
            return true;
        };
        if (v instanceof ModifierLetter && v1 instanceof ModifierLetter) {
            return true;
        };
        if (v instanceof OtherLetter && v1 instanceof OtherLetter) {
            return true;
        };
        if (v instanceof NonSpacingMark && v1 instanceof NonSpacingMark) {
            return true;
        };
        if (v instanceof SpacingCombiningMark && v1 instanceof SpacingCombiningMark) {
            return true;
        };
        if (v instanceof EnclosingMark && v1 instanceof EnclosingMark) {
            return true;
        };
        if (v instanceof DecimalNumber && v1 instanceof DecimalNumber) {
            return true;
        };
        if (v instanceof LetterNumber && v1 instanceof LetterNumber) {
            return true;
        };
        if (v instanceof OtherNumber && v1 instanceof OtherNumber) {
            return true;
        };
        if (v instanceof ConnectorPunctuation && v1 instanceof ConnectorPunctuation) {
            return true;
        };
        if (v instanceof DashPunctuation && v1 instanceof DashPunctuation) {
            return true;
        };
        if (v instanceof OpenPunctuation && v1 instanceof OpenPunctuation) {
            return true;
        };
        if (v instanceof ClosePunctuation && v1 instanceof ClosePunctuation) {
            return true;
        };
        if (v instanceof InitialQuote && v1 instanceof InitialQuote) {
            return true;
        };
        if (v instanceof FinalQuote && v1 instanceof FinalQuote) {
            return true;
        };
        if (v instanceof OtherPunctuation && v1 instanceof OtherPunctuation) {
            return true;
        };
        if (v instanceof MathSymbol && v1 instanceof MathSymbol) {
            return true;
        };
        if (v instanceof CurrencySymbol && v1 instanceof CurrencySymbol) {
            return true;
        };
        if (v instanceof ModifierSymbol && v1 instanceof ModifierSymbol) {
            return true;
        };
        if (v instanceof OtherSymbol && v1 instanceof OtherSymbol) {
            return true;
        };
        if (v instanceof Space && v1 instanceof Space) {
            return true;
        };
        if (v instanceof LineSeparator && v1 instanceof LineSeparator) {
            return true;
        };
        if (v instanceof ParagraphSeparator && v1 instanceof ParagraphSeparator) {
            return true;
        };
        if (v instanceof Control && v1 instanceof Control) {
            return true;
        };
        if (v instanceof Format && v1 instanceof Format) {
            return true;
        };
        if (v instanceof Surrogate && v1 instanceof Surrogate) {
            return true;
        };
        if (v instanceof PrivateUse && v1 instanceof PrivateUse) {
            return true;
        };
        if (v instanceof NotAssigned && v1 instanceof NotAssigned) {
            return true;
        };
        return false;
    };
});
var ordGeneralCategory = new Data_Ord.Ord(function () {
    return eqGeneralCategory;
}, function (catA) {
    return function (catB) {
        return Data_Ord.compare(Data_Ord.ordInt)(generalCatToInt(catA))(generalCatToInt(catB));
    };
});
var digitToInt = function (c) {
    var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
    var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
    var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
    var result = (function () {
        if (dec <= 9 && dec >= 0) {
            return new Data_Maybe.Just(dec);
        };
        if (hexLower <= 5 && hexLower >= 0) {
            return Data_Maybe.Just.create(hexLower + 10 | 0);
        };
        if (hexUpper <= 5 && hexUpper >= 0) {
            return Data_Maybe.Just.create(hexUpper + 10 | 0);
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): " + [  ]);
    })();
    return result;
};
var boundedGeneralCategory = new Data_Bounded.Bounded(function () {
    return ordGeneralCategory;
}, UppercaseLetter.value, NotAssigned.value);
module.exports = {
    isAscii: isAscii,
    isAsciiLower: isAsciiLower,
    isAsciiUpper: isAsciiUpper,
    isLatin1: isLatin1,
    isLower: isLower,
    isUpper: isUpper,
    isAlpha: isAlpha,
    isAlphaNum: isAlphaNum,
    isLetter: isLetter,
    isDigit: isDigit,
    isOctDigit: isOctDigit,
    isHexDigit: isHexDigit,
    isControl: isControl,
    isPrint: isPrint,
    isSpace: isSpace,
    isSymbol: isSymbol,
    isSeparator: isSeparator,
    isPunctuation: isPunctuation,
    isMark: isMark,
    isNumber: isNumber,
    digitToInt: digitToInt,
    toLower: toLower,
    toUpper: toUpper,
    toTitle: toTitle,
    UppercaseLetter: UppercaseLetter,
    LowercaseLetter: LowercaseLetter,
    TitlecaseLetter: TitlecaseLetter,
    ModifierLetter: ModifierLetter,
    OtherLetter: OtherLetter,
    NonSpacingMark: NonSpacingMark,
    SpacingCombiningMark: SpacingCombiningMark,
    EnclosingMark: EnclosingMark,
    DecimalNumber: DecimalNumber,
    LetterNumber: LetterNumber,
    OtherNumber: OtherNumber,
    ConnectorPunctuation: ConnectorPunctuation,
    DashPunctuation: DashPunctuation,
    OpenPunctuation: OpenPunctuation,
    ClosePunctuation: ClosePunctuation,
    InitialQuote: InitialQuote,
    FinalQuote: FinalQuote,
    OtherPunctuation: OtherPunctuation,
    MathSymbol: MathSymbol,
    CurrencySymbol: CurrencySymbol,
    ModifierSymbol: ModifierSymbol,
    OtherSymbol: OtherSymbol,
    Space: Space,
    LineSeparator: LineSeparator,
    ParagraphSeparator: ParagraphSeparator,
    Control: Control,
    Format: Format,
    Surrogate: Surrogate,
    PrivateUse: PrivateUse,
    NotAssigned: NotAssigned,
    unicodeCatToGeneralCat: unicodeCatToGeneralCat,
    generalCatToInt: generalCatToInt,
    generalCatToUnicodeCat: generalCatToUnicodeCat,
    generalCategory: generalCategory,
    showGeneralCategory: showGeneralCategory,
    eqGeneralCategory: eqGeneralCategory,
    ordGeneralCategory: ordGeneralCategory,
    boundedGeneralCategory: boundedGeneralCategory
};

},{"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Char.Unicode.Internal/index.js":113,"../Data.Char/index.js":116,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"./foreign.js":114}],116:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Enum = require("../Data.Enum/index.js");
var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
module.exports = {
    toCharCode: toCharCode,
    fromCharCode: fromCharCode
};

},{"../Data.Enum/index.js":131}],117:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var CommutativeRingRecord = function (RingRecord0) {
    this.RingRecord0 = RingRecord0;
};
var CommutativeRing = function (Ring0) {
    this.Ring0 = Ring0;
};
var commutativeRingUnit = new CommutativeRing(function () {
    return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
    return Data_Ring.ringRecordNil;
});
var commutativeRingRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCommutativeRingRecord) {
            return function (dictCommutativeRing) {
                return new CommutativeRingRecord(function () {
                    return Data_Ring.ringRecordCons(dictIsSymbol)(dictCons)(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                });
            };
        };
    };
};
var commutativeRingRecord = function (dictRowToList) {
    return function (dictCommutativeRingRecord) {
        return new CommutativeRing(function () {
            return Data_Ring.ringRecord(dictRowToList)(dictCommutativeRingRecord.RingRecord0());
        });
    };
};
var commutativeRingNumber = new CommutativeRing(function () {
    return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
    return Data_Ring.ringInt;
});
var commutativeRingFn = function (dictCommutativeRing) {
    return new CommutativeRing(function () {
        return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    });
};
module.exports = {
    CommutativeRing: CommutativeRing,
    CommutativeRingRecord: CommutativeRingRecord,
    commutativeRingInt: commutativeRingInt,
    commutativeRingNumber: commutativeRingNumber,
    commutativeRingUnit: commutativeRingUnit,
    commutativeRingFn: commutativeRingFn,
    commutativeRingRecord: commutativeRingRecord,
    commutativeRingRecordNil: commutativeRingRecordNil,
    commutativeRingRecordCons: commutativeRingRecordCons
};

},{"../Data.Ring/index.js":224}],118:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Const = function (x) {
    return x;
};
var showConst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Const " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConst = function (dictSemiring) {
    return dictSemiring;
};
var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return v1;
    };
});
var semigroupConst = function (dictSemigroup) {
    return dictSemigroup;
};
var ringConst = function (dictRing) {
    return dictRing;
};
var ordConst = function (dictOrd) {
    return dictOrd;
};
var newtypeConst = new Data_Newtype.Newtype(function (n) {
    return n;
}, Const);
var monoidConst = function (dictMonoid) {
    return dictMonoid;
};
var heytingAlgebraConst = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorConst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return m;
    };
});
var functorWithIndexConst = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorConst;
}, function (v) {
    return function (v1) {
        return v1;
    };
});
var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var foldableWithIndexConst = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableConst;
}, function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (dictApplicative) {
    return function (v) {
        return Control_Applicative.pure(dictApplicative)(v);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var traversableWithIndexConst = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexConst;
}, function () {
    return functorWithIndexConst;
}, function () {
    return traversableConst;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var euclideanRingConst = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqConst = function (dictEq) {
    return dictEq;
};
var eq1Const = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqConst(dictEq));
    });
};
var ord1Const = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Const(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordConst(dictOrd));
    });
};
var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
    return function (v1) {
        return v1;
    };
});
var commutativeRingConst = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedConst = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraConst = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var bifunctorConst = new Data_Bifunctor.Bifunctor(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var bifoldableConst = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return f(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(z)(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(v1)(z);
            };
        };
    };
});
var bitraversableConst = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableConst;
}, function () {
    return bifunctorConst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(f(v1));
            };
        };
    };
});
var applyConst = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorConst;
    }, function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v)(v1);
        };
    });
};
var applicativeConst = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyConst(dictMonoid.Semigroup0());
    }, function (v) {
        return Data_Monoid.mempty(dictMonoid);
    });
};
module.exports = {
    Const: Const,
    newtypeConst: newtypeConst,
    eqConst: eqConst,
    eq1Const: eq1Const,
    ordConst: ordConst,
    ord1Const: ord1Const,
    boundedConst: boundedConst,
    showConst: showConst,
    semigroupoidConst: semigroupoidConst,
    semigroupConst: semigroupConst,
    monoidConst: monoidConst,
    semiringConst: semiringConst,
    ringConst: ringConst,
    euclideanRingConst: euclideanRingConst,
    commutativeRingConst: commutativeRingConst,
    heytingAlgebraConst: heytingAlgebraConst,
    booleanAlgebraConst: booleanAlgebraConst,
    functorConst: functorConst,
    bifunctorConst: bifunctorConst,
    functorWithIndexConst: functorWithIndexConst,
    invariantConst: invariantConst,
    contravariantConst: contravariantConst,
    applyConst: applyConst,
    applicativeConst: applicativeConst,
    foldableConst: foldableConst,
    foldableWithIndexConst: foldableWithIndexConst,
    bifoldableConst: bifoldableConst,
    traversableConst: traversableConst,
    traversableWithIndexConst: traversableWithIndexConst,
    bitraversableConst: bitraversableConst
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Semigroupoid/index.js":71,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor/index.js":105,"../Data.Bitraversable/index.js":106,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Functor.Contravariant/index.js":152,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258}],119:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var CoyonedaF = (function () {
    function CoyonedaF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoyonedaF.create = function (value0) {
        return function (value1) {
            return new CoyonedaF(value0, value1);
        };
    };
    return CoyonedaF;
})();
var Coyoneda = function (x) {
    return x;
};
var unCoyoneda = function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return f(v1.value0)(v1.value1);
        })(v);
    };
};
var lowerCoyoneda = function (dictFunctor) {
    return unCoyoneda(Data_Functor.map(dictFunctor));
};
var foldableCoyoneda = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(function ($80) {
                    return f(k($80));
                });
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldl(dictFoldable)(function (x) {
                    return function ($81) {
                        return f(x)(k($81));
                    };
                })(z);
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldr(dictFoldable)(function ($82) {
                    return f(k($82));
                })(z);
            });
        };
    });
};
var foldable1Coyoneda = function (dictFoldable1) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableCoyoneda(dictFoldable1.Foldable0());
    }, function (dictSemigroup) {
        return unCoyoneda(function (k) {
            return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(k);
        });
    }, function (dictSemigroup) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(function ($83) {
                    return f(k($83));
                });
            });
        };
    });
};
var eqCoyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    return Data_Eq.eq1(dictEq1)(dictEq)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var ordCoyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCoyoneda(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    return Data_Ord.compare1(dictOrd1)(dictOrd)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var eq1Coyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCoyoneda(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Coyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return new Data_Ord.Ord1(function () {
            return eq1Coyoneda(dictFunctor)(dictOrd1.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCoyoneda(dictFunctor)(dictOrd1)(dictOrd));
        });
    };
};
var coyoneda = function (k) {
    return function (fi) {
        return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
    };
};
var functorCoyoneda = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(function ($84) {
                return f(v1.value0($84));
            })(v1.value1);
        })(v);
    };
});
var invatiantCoyoneda = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCoyoneda));
var hoistCoyoneda = function (nat) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(v1.value0)(nat(v1.value1));
        })(v);
    };
};
var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
var distributiveCoyoneda = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorCoyoneda;
    }, function (dictFunctor) {
        return function (f) {
            return function ($85) {
                return liftCoyoneda(Data_Distributive.collect(dictDistributive)(dictFunctor)(function ($86) {
                    return lowerCoyoneda(dictDistributive.Functor0())(f($86));
                })($85));
            };
        };
    }, function (dictFunctor) {
        return function ($87) {
            return liftCoyoneda(Data_Distributive.collect(dictDistributive)(dictFunctor)(lowerCoyoneda(dictDistributive.Functor0()))($87));
        };
    });
};
var extendCoyoneda = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (v) {
            return Data_Exists.runExists(function (v1) {
                return liftCoyoneda(Control_Extend.extend(dictExtend)(function ($88) {
                    return f(coyoneda(v1.value0)($88));
                })(v1.value1));
            })(v);
        };
    });
};
var monadTransCoyoneda = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftCoyoneda;
});
var traversableCoyoneda = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableCoyoneda(dictTraversable.Foldable1());
    }, function () {
        return functorCoyoneda;
    }, function (dictApplicative) {
        return unCoyoneda(function (k) {
            return function ($89) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(k)($89));
            };
        });
    }, function (dictApplicative) {
        return function (f) {
            return unCoyoneda(function (k) {
                return function ($90) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(function ($91) {
                        return f(k($91));
                    })($90));
                };
            });
        };
    });
};
var traversable1Coyoneda = function (dictTraversable1) {
    return new Data_Semigroup_Traversable.Traversable1(function () {
        return foldable1Coyoneda(dictTraversable1.Foldable10());
    }, function () {
        return traversableCoyoneda(dictTraversable1.Traversable1());
    }, function (dictApply) {
        return unCoyoneda(function (k) {
            return function ($92) {
                return Data_Functor.map(dictApply.Functor0())(liftCoyoneda)(Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(k)($92)));
            };
        });
    }, function (dictApply) {
        return function (f) {
            return unCoyoneda(function (k) {
                return function ($93) {
                    return Data_Functor.map(dictApply.Functor0())(liftCoyoneda)(Data_Semigroup_Traversable.traverse1(dictTraversable1)(dictApply)(function ($94) {
                        return f(k($94));
                    })($93));
                };
            });
        };
    });
};
var comonadCoyoneda = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendCoyoneda(dictComonad.Extend0());
    }, function (v) {
        return Data_Exists.runExists(function (v1) {
            return v1.value0(Control_Comonad.extract(dictComonad)(v1.value1));
        })(v);
    });
};
var applyCoyoneda = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (g) {
            return liftCoyoneda(Control_Apply.apply(dictApply)(lowerCoyoneda(dictApply.Functor0())(f))(lowerCoyoneda(dictApply.Functor0())(g)));
        };
    });
};
var bindCoyoneda = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyCoyoneda(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return liftCoyoneda(Data_Exists.runExists(function (v1) {
                return Control_Bind.bindFlipped(dictBind)(function ($95) {
                    return lowerCoyoneda((dictBind.Apply0()).Functor0())(f(v1.value0($95)));
                })(v1.value1);
            })(v));
        };
    });
};
var applicativeCoyoneda = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyCoyoneda(dictApplicative.Apply0());
    }, function ($96) {
        return liftCoyoneda(Control_Applicative.pure(dictApplicative)($96));
    });
};
var monadCoyoneda = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeCoyoneda(dictMonad.Applicative0());
    }, function () {
        return bindCoyoneda(dictMonad.Bind1());
    });
};
var altCoyoneda = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorCoyoneda;
    }, function (x) {
        return function (y) {
            return liftCoyoneda(Control_Alt.alt(dictAlt)(lowerCoyoneda(dictAlt.Functor0())(x))(lowerCoyoneda(dictAlt.Functor0())(y)));
        };
    });
};
var plusCoyoneda = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altCoyoneda(dictPlus.Alt0());
    }, liftCoyoneda(Control_Plus.empty(dictPlus)));
};
var alternativeCoyoneda = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeCoyoneda(dictAlternative.Applicative0());
    }, function () {
        return plusCoyoneda(dictAlternative.Plus1());
    });
};
var monadZeroCoyoneda = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeCoyoneda(dictMonadZero.Alternative1());
    }, function () {
        return monadCoyoneda(dictMonadZero.Monad0());
    });
};
var monadPlusCoyoneda = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroCoyoneda(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    Coyoneda: Coyoneda,
    coyoneda: coyoneda,
    unCoyoneda: unCoyoneda,
    liftCoyoneda: liftCoyoneda,
    lowerCoyoneda: lowerCoyoneda,
    hoistCoyoneda: hoistCoyoneda,
    eqCoyoneda: eqCoyoneda,
    eq1Coyoneda: eq1Coyoneda,
    ordCoyoneda: ordCoyoneda,
    ord1Coyoneda: ord1Coyoneda,
    functorCoyoneda: functorCoyoneda,
    invatiantCoyoneda: invatiantCoyoneda,
    applyCoyoneda: applyCoyoneda,
    applicativeCoyoneda: applicativeCoyoneda,
    altCoyoneda: altCoyoneda,
    plusCoyoneda: plusCoyoneda,
    alternativeCoyoneda: alternativeCoyoneda,
    bindCoyoneda: bindCoyoneda,
    monadCoyoneda: monadCoyoneda,
    monadTransCoyoneda: monadTransCoyoneda,
    monadZeroCoyoneda: monadZeroCoyoneda,
    monadPlusCoyoneda: monadPlusCoyoneda,
    extendCoyoneda: extendCoyoneda,
    comonadCoyoneda: comonadCoyoneda,
    foldableCoyoneda: foldableCoyoneda,
    traversableCoyoneda: traversableCoyoneda,
    foldable1Coyoneda: foldable1Coyoneda,
    traversable1Coyoneda: traversable1Coyoneda,
    distributiveCoyoneda: distributiveCoyoneda
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Distributive/index.js":127,"../Data.Eq/index.js":133,"../Data.Exists/index.js":136,"../Data.Foldable/index.js":138,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.Ord/index.js":214,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup.Traversable/index.js":228,"../Data.Traversable/index.js":257}],120:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Year = function (x) {
    return x;
};
var Monday = (function () {
    function Monday() {

    };
    Monday.value = new Monday();
    return Monday;
})();
var Tuesday = (function () {
    function Tuesday() {

    };
    Tuesday.value = new Tuesday();
    return Tuesday;
})();
var Wednesday = (function () {
    function Wednesday() {

    };
    Wednesday.value = new Wednesday();
    return Wednesday;
})();
var Thursday = (function () {
    function Thursday() {

    };
    Thursday.value = new Thursday();
    return Thursday;
})();
var Friday = (function () {
    function Friday() {

    };
    Friday.value = new Friday();
    return Friday;
})();
var Saturday = (function () {
    function Saturday() {

    };
    Saturday.value = new Saturday();
    return Saturday;
})();
var Sunday = (function () {
    function Sunday() {

    };
    Sunday.value = new Sunday();
    return Sunday;
})();
var January = (function () {
    function January() {

    };
    January.value = new January();
    return January;
})();
var February = (function () {
    function February() {

    };
    February.value = new February();
    return February;
})();
var March = (function () {
    function March() {

    };
    March.value = new March();
    return March;
})();
var April = (function () {
    function April() {

    };
    April.value = new April();
    return April;
})();
var May = (function () {
    function May() {

    };
    May.value = new May();
    return May;
})();
var June = (function () {
    function June() {

    };
    June.value = new June();
    return June;
})();
var July = (function () {
    function July() {

    };
    July.value = new July();
    return July;
})();
var August = (function () {
    function August() {

    };
    August.value = new August();
    return August;
})();
var September = (function () {
    function September() {

    };
    September.value = new September();
    return September;
})();
var October = (function () {
    function October() {

    };
    October.value = new October();
    return October;
})();
var November = (function () {
    function November() {

    };
    November.value = new November();
    return November;
})();
var December = (function () {
    function December() {

    };
    December.value = new December();
    return December;
})();
var Day = function (x) {
    return x;
};
var showYear = new Data_Show.Show(function (v) {
    return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showWeekday = new Data_Show.Show(function (v) {
    if (v instanceof Monday) {
        return "Monday";
    };
    if (v instanceof Tuesday) {
        return "Tuesday";
    };
    if (v instanceof Wednesday) {
        return "Wednesday";
    };
    if (v instanceof Thursday) {
        return "Thursday";
    };
    if (v instanceof Friday) {
        return "Friday";
    };
    if (v instanceof Saturday) {
        return "Saturday";
    };
    if (v instanceof Sunday) {
        return "Sunday";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 184, column 37): " + [ v.constructor.name ]);
});
var showMonth = new Data_Show.Show(function (v) {
    if (v instanceof January) {
        return "January";
    };
    if (v instanceof February) {
        return "February";
    };
    if (v instanceof March) {
        return "March";
    };
    if (v instanceof April) {
        return "April";
    };
    if (v instanceof May) {
        return "May";
    };
    if (v instanceof June) {
        return "June";
    };
    if (v instanceof July) {
        return "July";
    };
    if (v instanceof August) {
        return "August";
    };
    if (v instanceof September) {
        return "September";
    };
    if (v instanceof October) {
        return "October";
    };
    if (v instanceof November) {
        return "November";
    };
    if (v instanceof December) {
        return "December";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 101, column 33): " + [ v.constructor.name ]);
});
var showDay = new Data_Show.Show(function (v) {
    return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordYear = Data_Ord.ordInt;
var ordDay = Data_Ord.ordInt;
var eqYear = Data_Eq.eqInt;
var eqWeekday = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return true;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return true;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return true;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return true;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return true;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return true;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return true;
        };
        return false;
    };
});
var ordWeekday = new Data_Ord.Ord(function () {
    return eqWeekday;
}, function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Monday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Monday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Tuesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Tuesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Wednesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Wednesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Thursday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Thursday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Friday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Friday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Saturday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Saturday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 154, column 8 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqMonth = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return true;
        };
        if (x instanceof February && y instanceof February) {
            return true;
        };
        if (x instanceof March && y instanceof March) {
            return true;
        };
        if (x instanceof April && y instanceof April) {
            return true;
        };
        if (x instanceof May && y instanceof May) {
            return true;
        };
        if (x instanceof June && y instanceof June) {
            return true;
        };
        if (x instanceof July && y instanceof July) {
            return true;
        };
        if (x instanceof August && y instanceof August) {
            return true;
        };
        if (x instanceof September && y instanceof September) {
            return true;
        };
        if (x instanceof October && y instanceof October) {
            return true;
        };
        if (x instanceof November && y instanceof November) {
            return true;
        };
        if (x instanceof December && y instanceof December) {
            return true;
        };
        return false;
    };
});
var ordMonth = new Data_Ord.Ord(function () {
    return eqMonth;
}, function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof January) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof January) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof February && y instanceof February) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof February) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof February) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof March && y instanceof March) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof March) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof March) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof April && y instanceof April) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof April) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof April) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof May && y instanceof May) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof May) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof May) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof June && y instanceof June) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof June) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof June) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof July && y instanceof July) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof July) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof July) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof August && y instanceof August) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof August) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof August) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof September && y instanceof September) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof September) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof September) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof October && y instanceof October) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof October) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof October) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof November && y instanceof November) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof November) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof November) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof December && y instanceof December) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 61, column 8 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqDay = Data_Eq.eqInt;
var boundedYear = new Data_Bounded.Bounded(function () {
    return ordYear;
}, -271820 | 0, 275759);
var boundedWeekday = new Data_Bounded.Bounded(function () {
    return ordWeekday;
}, Monday.value, Sunday.value);
var boundedMonth = new Data_Bounded.Bounded(function () {
    return ordMonth;
}, January.value, December.value);
var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
    return boundedYear;
}, function () {
    return enumYear;
}, 547580, function (v) {
    return v;
}, function (n) {
    if (n >= (-271820 | 0) && n <= 275759) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 35, column 45): " + [ n.constructor.name ]);
});
var enumYear = new Data_Enum.Enum(function () {
    return ordYear;
}, function ($46) {
    return Data_Enum.toEnum(boundedEnumYear)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumYear)($46)));
}, function ($47) {
    return Data_Enum.toEnum(boundedEnumYear)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumYear)($47)));
});
var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
    return boundedWeekday;
}, function () {
    return enumWeekday;
}, 7, function (v) {
    if (v instanceof Monday) {
        return 1;
    };
    if (v instanceof Tuesday) {
        return 2;
    };
    if (v instanceof Wednesday) {
        return 3;
    };
    if (v instanceof Thursday) {
        return 4;
    };
    if (v instanceof Friday) {
        return 5;
    };
    if (v instanceof Saturday) {
        return 6;
    };
    if (v instanceof Sunday) {
        return 7;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 184, column 1): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(Monday.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Tuesday.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Wednesday.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(Thursday.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(Friday.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(Saturday.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(Sunday.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumWeekday = new Data_Enum.Enum(function () {
    return ordWeekday;
}, function ($48) {
    return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumWeekday)($48)));
}, function ($49) {
    return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumWeekday)($49)));
});
var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
    return boundedMonth;
}, function () {
    return enumMonth;
}, 12, function (v) {
    if (v instanceof January) {
        return 1;
    };
    if (v instanceof February) {
        return 2;
    };
    if (v instanceof March) {
        return 3;
    };
    if (v instanceof April) {
        return 4;
    };
    if (v instanceof May) {
        return 5;
    };
    if (v instanceof June) {
        return 6;
    };
    if (v instanceof July) {
        return 7;
    };
    if (v instanceof August) {
        return 8;
    };
    if (v instanceof September) {
        return 9;
    };
    if (v instanceof October) {
        return 10;
    };
    if (v instanceof November) {
        return 11;
    };
    if (v instanceof December) {
        return 12;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 101, column 1): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(January.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(February.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(March.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(April.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(May.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(June.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(July.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(August.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(September.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(October.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(November.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(December.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumMonth = new Data_Enum.Enum(function () {
    return ordMonth;
}, function ($50) {
    return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMonth)($50)));
}, function ($51) {
    return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMonth)($51)));
});
var boundedDay = new Data_Bounded.Bounded(function () {
    return ordDay;
}, 1, 31);
var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
    return boundedDay;
}, function () {
    return enumDay;
}, 31, function (v) {
    return v;
}, function (n) {
    if (n >= 1 && n <= 31) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 133, column 43): " + [ n.constructor.name ]);
});
var enumDay = new Data_Enum.Enum(function () {
    return ordDay;
}, function ($52) {
    return Data_Enum.toEnum(boundedEnumDay)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumDay)($52)));
}, function ($53) {
    return Data_Enum.toEnum(boundedEnumDay)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumDay)($53)));
});
module.exports = {
    January: January,
    February: February,
    March: March,
    April: April,
    May: May,
    June: June,
    July: July,
    August: August,
    September: September,
    October: October,
    November: November,
    December: December,
    Monday: Monday,
    Tuesday: Tuesday,
    Wednesday: Wednesday,
    Thursday: Thursday,
    Friday: Friday,
    Saturday: Saturday,
    Sunday: Sunday,
    eqYear: eqYear,
    ordYear: ordYear,
    boundedYear: boundedYear,
    enumYear: enumYear,
    boundedEnumYear: boundedEnumYear,
    showYear: showYear,
    eqMonth: eqMonth,
    ordMonth: ordMonth,
    boundedMonth: boundedMonth,
    enumMonth: enumMonth,
    boundedEnumMonth: boundedEnumMonth,
    showMonth: showMonth,
    eqDay: eqDay,
    ordDay: ordDay,
    boundedDay: boundedDay,
    enumDay: enumDay,
    boundedEnumDay: boundedEnumDay,
    showDay: showDay,
    eqWeekday: eqWeekday,
    ordWeekday: ordWeekday,
    boundedWeekday: boundedWeekday,
    enumWeekday: enumWeekday,
    boundedEnumWeekday: boundedEnumWeekday,
    showWeekday: showWeekday
};

},{"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],121:[function(require,module,exports){
"use strict";

var createDate = function (y, m, d) {
  var date = new Date(Date.UTC(y, m, d));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date;
};

exports.canonicalDateImpl = function (ctor, y, m, d) {
  var date = createDate(y, m - 1, d);
  return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
};

exports.calcWeekday = function (y, m, d) {
  return createDate(y, m - 1, d).getUTCDay();
};

exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
  var dt1 = createDate(y1, m1 - 1, d1);
  var dt2 = createDate(y2, m2 - 1, d2);
  return dt1.getTime() - dt2.getTime();
};

},{}],122:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var $$Date = (function () {
    function $$Date(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    $$Date.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new $$Date(value0, value1, value2);
            };
        };
    };
    return $$Date;
})();
var year = function (v) {
    return v.value0;
};
var weekday = function (v) {
    var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
    var $41 = n === 0;
    if ($41) {
        return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
    };
    return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
};
var showDate = new Data_Show.Show(function (v) {
    return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
});
var month = function (v) {
    return v.value1;
};
var isLeapYear = function (y) {
    var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
    return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
};
var lastDayOfMonth = function (y) {
    return function (m) {
        var unsafeDay = function ($108) {
            return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)($108));
        };
        if (m instanceof Data_Date_Component.January) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.February) {
            if (isLeapYear(y)) {
                return unsafeDay(29);
            };
            if (Data_Boolean.otherwise) {
                return unsafeDay(28);
            };
        };
        if (m instanceof Data_Date_Component.March) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.April) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.May) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.June) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.July) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.August) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.September) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.October) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.November) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.December) {
            return unsafeDay(31);
        };
        throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 142, column 3): " + [ m.constructor.name ]);
    };
};
var eqDate = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
    };
});
var ordDate = new Data_Ord.Ord(function () {
    return eqDate;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
    };
});
var enumDate = new Data_Enum.Enum(function () {
    return ordDate;
}, function (v) {
    var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
    var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
    var y$prime = (function () {
        var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
        if ($73) {
            return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var m$prime = (function () {
        var $74 = Data_Maybe.isNothing(pd);
        if ($74) {
            return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
        };
        return v.value1;
    })();
    var l = lastDayOfMonth(v.value0)(m$prime);
    var d$prime = (function () {
        var $75 = Data_Maybe.isNothing(pd);
        if ($75) {
            return new Data_Maybe.Just(l);
        };
        return pd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
}, function (v) {
    var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
    var l = lastDayOfMonth(v.value0)(v.value1);
    var sd = (function () {
        var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
        var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
        if ($80) {
            return Data_Maybe.Nothing.value;
        };
        return v1;
    })();
    var m$prime = (function () {
        var $81 = Data_Maybe.isNothing(sd);
        if ($81) {
            return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
        };
        return v.value1;
    })();
    var y$prime = (function () {
        var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
        if ($82) {
            return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var d$prime = (function () {
        var $83 = Data_Maybe.isNothing(sd);
        if ($83) {
            return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
        };
        return sd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
});
var diff = function (dictDuration) {
    return function (v) {
        return function (v1) {
            return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
        };
    };
};
var day = function (v) {
    return v.value2;
};
var canonicalDate = function (y) {
    return function (m) {
        return function (d) {
            var mkDate = function (y$prime) {
                return function (m$prime) {
                    return function (d$prime) {
                        return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                    };
                };
            };
            return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
        };
    };
};
var exactDate = function (y) {
    return function (m) {
        return function (d) {
            var dt = new $$Date(y, m, d);
            var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
            if ($99) {
                return new Data_Maybe.Just(dt);
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var boundedDate = new Data_Bounded.Bounded(function () {
    return ordDate;
}, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
var adjust = function (v) {
    return function (date) {
        var adj = function (v1) {
            return function (v2) {
                if (v1 === 0) {
                    return new Data_Maybe.Just(v2);
                };
                var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
                var low = j < 1;
                var l = lastDayOfMonth(v2.value0)((function () {
                    if (low) {
                        return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
                    };
                    return v2.value1;
                })());
                var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
                var i$prime = (function () {
                    if (low) {
                        return j;
                    };
                    if (hi) {
                        return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
                    };
                    if (Data_Boolean.otherwise) {
                        return 0;
                    };
                    throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 104, column 9): " + [  ]);
                })();
                var dt$prime = (function () {
                    if (low) {
                        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
                    };
                    if (hi) {
                        return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
                    };
                    if (Data_Boolean.otherwise) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
                    };
                    throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + [  ]);
                })();
                return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
            };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
    };
};
module.exports = {
    canonicalDate: canonicalDate,
    exactDate: exactDate,
    year: year,
    month: month,
    day: day,
    weekday: weekday,
    diff: diff,
    isLeapYear: isLeapYear,
    lastDayOfMonth: lastDayOfMonth,
    adjust: adjust,
    eqDate: eqDate,
    ordDate: ordDate,
    boundedDate: boundedDate,
    showDate: showDate,
    enumDate: enumDate
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Date.Component/index.js":120,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Time.Duration/index.js":253,"./foreign.js":121}],123:[function(require,module,exports){
"use strict";

var createDateTime = function (y, m, d, h, mi, s, ms) {
  var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));
  if (y >= 0 && y < 100) {
    dateTime.setUTCFullYear(y);
  }
  return dateTime;
};

exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
  return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
};

exports.toDateTimeImpl = function (ctor) {
  return function (instant) {
    var dt = new Date(instant);
    return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
  };
};

},{}],124:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Instant = function (x) {
    return x;
};
var unInstant = function (v) {
    return v;
};
var toDateTime = (function () {
    var mkDateTime = function (y) {
        return function (mo) {
            return function (d) {
                return function (h) {
                    return function (mi) {
                        return function (s) {
                            return function (ms) {
                                return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                            };
                        };
                    };
                };
            };
        };
    };
    return $foreign.toDateTimeImpl(mkDateTime);
})();
var showInstant = new Data_Show.Show(function (v) {
    return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
});
var ordDateTime = Data_Time_Duration.ordMilliseconds;
var instant = function (v) {
    if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
        return new Data_Maybe.Just(v);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [ v.constructor.name ]);
};
var fromDateTime = function (v) {
    return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
};
var fromDate = function (d) {
    return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
};
var eqDateTime = Data_Time_Duration.eqMilliseconds;
var boundedInstant = new Data_Bounded.Bounded(function () {
    return ordDateTime;
}, -8.6399778816e15, 8.639977881599999e15);
module.exports = {
    instant: instant,
    unInstant: unInstant,
    fromDateTime: fromDateTime,
    fromDate: fromDate,
    toDateTime: toDateTime,
    eqDateTime: eqDateTime,
    ordDateTime: ordDateTime,
    boundedInstant: boundedInstant,
    showInstant: showInstant
};

},{"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Date.Component/index.js":120,"../Data.Date/index.js":122,"../Data.DateTime/index.js":126,"../Data.Enum/index.js":131,"../Data.Maybe/index.js":197,"../Data.Show/index.js":235,"../Data.Time.Component/index.js":252,"../Data.Time.Duration/index.js":253,"../Data.Time/index.js":254,"./foreign.js":123}],125:[function(require,module,exports){
"use strict";

var createUTC = function (y, mo, d, h, m, s, ms) {
  var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date.getTime();
};

exports.calcDiff = function (rec1, rec2) {
  var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
  var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
  return msUTC1 - msUTC2;
};

exports.adjustImpl = function (just) {
  return function (nothing) {
    return function (offset) {
      return function (rec) {
        var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
        var dt = new Date(msUTC + offset);
        return isNaN(dt.getTime()) ? nothing : just({
          year: dt.getUTCFullYear(),
          month: dt.getUTCMonth() + 1,
          day: dt.getUTCDate(),
          hour: dt.getUTCHours(),
          minute: dt.getUTCMinutes(),
          second: dt.getUTCSeconds(),
          millisecond: dt.getUTCMilliseconds()
        });
      };
    };
  };
};

},{}],126:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var DateTime = (function () {
    function DateTime(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DateTime.create = function (value0) {
        return function (value1) {
            return new DateTime(value0, value1);
        };
    };
    return DateTime;
})();
var toRecord = function (v) {
    return {
        year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
        month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
        day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
        hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
        minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
        second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
        millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
    };
};
var time = function (v) {
    return v.value1;
};
var showDateTime = new Data_Show.Show(function (v) {
    return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
});
var modifyTimeF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
        };
    };
};
var modifyTime = function (f) {
    return function (v) {
        return new DateTime(v.value0, f(v.value1));
    };
};
var modifyDateF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
        };
    };
};
var modifyDate = function (f) {
    return function (v) {
        return new DateTime(f(v.value0), v.value1);
    };
};
var eqDateTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
    };
});
var ordDateTime = new Data_Ord.Ord(function () {
    return eqDateTime;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
    };
});
var diff = function (dictDuration) {
    return function (dt1) {
        return function (dt2) {
            return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
        };
    };
};
var date = function (v) {
    return v.value0;
};
var boundedDateTime = new Data_Bounded.Bounded(function () {
    return ordDateTime;
}, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
var adjust = function (dictDuration) {
    return function (d) {
        return function (dt) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
            });
        };
    };
};
module.exports = {
    DateTime: DateTime,
    date: date,
    modifyDate: modifyDate,
    modifyDateF: modifyDateF,
    time: time,
    modifyTime: modifyTime,
    modifyTimeF: modifyTimeF,
    adjust: adjust,
    diff: diff,
    eqDateTime: eqDateTime,
    ordDateTime: ordDateTime,
    boundedDateTime: boundedDateTime,
    showDateTime: showDateTime
};

},{"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Bounded/index.js":110,"../Data.Date.Component/index.js":120,"../Data.Date/index.js":122,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Time.Component/index.js":252,"../Data.Time.Duration/index.js":253,"../Data.Time/index.js":254,"./foreign.js":125}],127:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Distributive = function (Functor0, collect, distribute) {
    this.Functor0 = Functor0;
    this.collect = collect;
    this.distribute = distribute;
};
var distributiveIdentity = new Distributive(function () {
    return Data_Identity.functorIdentity;
}, function (dictFunctor) {
    return function (f) {
        return function ($11) {
            return Data_Identity.Identity(Data_Functor.map(dictFunctor)(function ($12) {
                return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(f($12));
            })($11));
        };
    };
}, function (dictFunctor) {
    return function ($13) {
        return Data_Identity.Identity(Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))($13));
    };
});
var distribute = function (dict) {
    return dict.distribute;
};
var distributiveFunction = new Distributive(function () {
    return Data_Functor.functorFn;
}, function (dictFunctor) {
    return function (f) {
        return function ($14) {
            return distribute(distributiveFunction)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($14));
        };
    };
}, function (dictFunctor) {
    return function (a) {
        return function (e) {
            return Data_Functor.map(dictFunctor)(function (v) {
                return v(e);
            })(a);
        };
    };
});
var cotraverse = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            return function ($15) {
                return Data_Functor.map(dictDistributive.Functor0())(f)(distribute(dictDistributive)(dictFunctor)($15));
            };
        };
    };
};
var collectDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            return function ($16) {
                return distribute(dictDistributive)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($16));
            };
        };
    };
};
var collect = function (dict) {
    return dict.collect;
};
var distributeDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    collect: collect,
    distribute: distribute,
    Distributive: Distributive,
    distributeDefault: distributeDefault,
    collectDefault: collectDefault,
    cotraverse: cotraverse,
    distributiveIdentity: distributiveIdentity,
    distributiveFunction: distributiveFunction
};

},{"../Control.Category/index.js":36,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Newtype/index.js":207}],128:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var DivisionRing = function (Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
};
var recip = function (dict) {
    return dict.recip;
};
var rightDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
        };
    };
};
var leftDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
        };
    };
};
var divisionringNumber = new DivisionRing(function () {
    return Data_Ring.ringNumber;
}, function (x) {
    return 1.0 / x;
});
module.exports = {
    DivisionRing: DivisionRing,
    recip: recip,
    leftDiv: leftDiv,
    rightDiv: rightDiv,
    divisionringNumber: divisionringNumber
};

},{"../Data.Ring/index.js":224,"../Data.Semiring/index.js":233}],129:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Left) {
                return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 163, column 61): " + [ v.constructor.name ]);
        });
    };
};
var note$prime = function (f) {
    return Data_Maybe["maybe'"](function ($198) {
        return Left.create(f($198));
    })(Right.create);
};
var note = function (a) {
    return Data_Maybe.maybe(new Left(a))(Right.create);
};
var functorEither = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Left) {
            return new Left(m.value0);
        };
        if (m instanceof Right) {
            return new Right(f(m.value0));
        };
        throw new Error("Failed pattern match at Data.Either (line 38, column 8 - line 38, column 52): " + [ m.constructor.name ]);
    };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorEither;
}, function (f) {
    return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
var fromRight = function (dictPartial) {
    return function (v) {
        if (v instanceof Right) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
    };
};
var fromLeft = function (dictPartial) {
    return function (v) {
        if (v instanceof Left) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [ v.constructor.name ]);
    };
};
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 187, column 47): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 187, column 47): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 187, column 47): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableEither;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(Data_Unit.unit)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 195, column 70): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 195, column 70): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 195, column 70): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 211, column 53): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 211, column 53): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexEither;
}, function () {
    return functorWithIndexEither;
}, function () {
    return traversableEither;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 217, column 76): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof Left) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof Left) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 179, column 8 - line 179, column 64): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var eq1Either = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqEither(dictEq)(dictEq1));
    });
};
var ord1Either = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Either(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
    });
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
var choose = function (dictAlt) {
    return function (a) {
        return function (b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
    };
};
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 46, column 45): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 203, column 47): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 203, column 47): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 203, column 47): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 221, column 53): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 221, column 53): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Control_Apply.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map(functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 82, column 41): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Control_Bind.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
        };
    });
};
var applicativeEither = new Control_Applicative.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left,
    Right: Right,
    either: either,
    choose: choose,
    isLeft: isLeft,
    isRight: isRight,
    fromLeft: fromLeft,
    fromRight: fromRight,
    note: note,
    "note'": note$prime,
    hush: hush,
    functorEither: functorEither,
    functorWithIndexEither: functorWithIndexEither,
    invariantEither: invariantEither,
    bifunctorEither: bifunctorEither,
    applyEither: applyEither,
    applicativeEither: applicativeEither,
    altEither: altEither,
    bindEither: bindEither,
    monadEither: monadEither,
    extendEither: extendEither,
    showEither: showEither,
    eqEither: eqEither,
    eq1Either: eq1Either,
    ordEither: ordEither,
    ord1Either: ord1Either,
    boundedEither: boundedEither,
    foldableEither: foldableEither,
    foldableWithIndexEither: foldableWithIndexEither,
    bifoldableEither: bifoldableEither,
    traversableEither: traversableEither,
    traversableWithIndexEither: traversableWithIndexEither,
    bitraversableEither: bitraversableEither,
    semigroupEither: semigroupEither
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Extend/index.js":40,"../Control.Monad/index.js":65,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor/index.js":105,"../Data.Bitraversable/index.js":106,"../Data.Bounded/index.js":110,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Unit/index.js":266}],130:[function(require,module,exports){
"use strict";

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};

},{}],131:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cardinality = function (x) {
    return x;
};
var Enum = function (Ord0, pred, succ) {
    this.Ord0 = Ord0;
    this.pred = pred;
    this.succ = succ;
};
var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
    this.Bounded0 = Bounded0;
    this.Enum1 = Enum1;
    this.cardinality = cardinality;
    this.fromEnum = fromEnum;
    this.toEnum = toEnum;
};
var toEnum = function (dict) {
    return dict.toEnum;
};
var succ = function (dict) {
    return dict.succ;
};
var upFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
    };
};
var showCardinality = new Data_Show.Show(function (v) {
    return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var pred = function (dict) {
    return dict.pred;
};
var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
    return n;
}, Cardinality);
var fromEnum = function (dict) {
    return dict.fromEnum;
};
var toEnumWithDefaults = function (dictBoundedEnum) {
    return function (low) {
        return function (high) {
            return function (x) {
                var v = toEnum(dictBoundedEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    return v.value0;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                    if ($54) {
                        return low;
                    };
                    return high;
                };
                throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
            };
        };
    };
};
var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function () {
    return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
var enumTuple = function (dictEnum) {
    return function (dictBoundedEnum) {
        return new Enum(function () {
            return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function ($96) {
                return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($96));
            })(pred(dictBoundedEnum.Enum1())(v.value1));
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function ($97) {
                return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($97));
            })(succ(dictBoundedEnum.Enum1())(v.value1));
        });
    };
};
var enumOrdering = new Enum(function () {
    return Data_Ord.ordOrdering;
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 72, column 39): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 72, column 39): " + [ v.constructor.name ]);
});
var enumMaybe = function (dictBoundedEnum) {
    return new Enum(function () {
        return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 80, column 54): " + [ v.constructor.name ]);
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 80, column 54): " + [ v.constructor.name ]);
    });
};
var enumInt = new Enum(function () {
    return Data_Ord.ordInt;
}, function (n) {
    var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
    if ($67) {
        return new Data_Maybe.Just(n - 1 | 0);
    };
    return Data_Maybe.Nothing.value;
}, function (n) {
    var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
    if ($68) {
        return new Data_Maybe.Just(n + 1 | 0);
    };
    return Data_Maybe.Nothing.value;
});
var enumFromTo = function (dictEnum) {
    return function (dictUnfoldable1) {
        var go = function (step) {
            return function (op) {
                return function (to) {
                    return function (a) {
                        return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
                            return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
                        }));
                    };
                };
            };
        };
        return function (v) {
            return function (v1) {
                if (Data_Eq.eq((dictEnum.Ord0()).Eq0())(v)(v1)) {
                    return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                };
                if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                if (Data_Boolean.otherwise) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var enumFromThenTo = function (dictUnfoldable) {
    return function (dictFunctor) {
        return function (dictBoundedEnum) {
            var go = function (step) {
                return function (to) {
                    return function (e) {
                        if (e <= to) {
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                        };
                        if (Data_Boolean.otherwise) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [ step.constructor.name, to.constructor.name, e.constructor.name ]);
                    };
                };
            };
            return function (a) {
                return function (b) {
                    return function (c) {
                        var c$prime = fromEnum(dictBoundedEnum)(c);
                        var b$prime = fromEnum(dictBoundedEnum)(b);
                        var a$prime = fromEnum(dictBoundedEnum)(a);
                        return Data_Functor.map(dictFunctor)(function ($98) {
                            return Data_Maybe.fromJust()(toEnum(dictBoundedEnum)($98));
                        })(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                    };
                };
            };
        };
    };
};
var enumEither = function (dictBoundedEnum) {
    return function (dictBoundedEnum1) {
        return new Enum(function () {
            return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($99) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($99));
                })(pred(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($100) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($100));
                })(pred(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 86, column 75): " + [ v.constructor.name ]);
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($101) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($101));
                })(succ(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($102) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($102));
                })(succ(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 86, column 75): " + [ v.constructor.name ]);
        });
    };
};
var enumBoolean = new Enum(function () {
    return Data_Ord.ordBoolean;
}, function (v) {
    if (v) {
        return new Data_Maybe.Just(false);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    if (!v) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
var downFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
    };
};
var diag = function (a) {
    return new Data_Tuple.Tuple(a, a);
};
var downFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($103) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(pred(dictEnum)($103));
        });
    };
};
var upFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($104) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(succ(dictEnum)($104));
        });
    };
};
var defaultToEnum = function (dictBounded) {
    return function (dictEnum) {
        return function (i$prime) {
            var go = function ($copy_i) {
                return function ($copy_x) {
                    var $tco_var_i = $copy_i;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(i, x) {
                        var $82 = i === 0;
                        if ($82) {
                            $tco_done = true;
                            return new Data_Maybe.Just(x);
                        };
                        var v = succ(dictEnum)(x);
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_i = i - 1 | 0;
                            $copy_x = v.value0;
                            return;
                        };
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_i, $copy_x);
                    };
                    return $tco_result;
                };
            };
            var $85 = i$prime < 0;
            if ($85) {
                return Data_Maybe.Nothing.value;
            };
            return go(i$prime)(Data_Bounded.bottom(dictBounded));
        };
    };
};
var defaultSucc = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
    };
};
var defaultPred = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
    };
};
var defaultFromEnum = function (dictEnum) {
    var go = function ($copy_i) {
        return function ($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
                var v = pred(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_i = i + 1 | 0;
                    $copy_x = v.value0;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return i;
                };
                throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_x);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var defaultCardinality = function (dictBounded) {
    return function (dictEnum) {
        var go = function ($copy_i) {
            return function ($copy_x) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, x) {
                    var v = succ(dictEnum)(x);
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_i = i + 1 | 0;
                        $copy_x = v.value0;
                        return;
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return i;
                    };
                    throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_i, $copy_x);
                };
                return $tco_result;
            };
        };
        return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
    };
};
var charToEnum = function (v) {
    if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
        return new Data_Maybe.Just($foreign.fromCharCode(v));
    };
    return Data_Maybe.Nothing.value;
};
var enumChar = new Enum(function () {
    return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
var cardinality = function (dict) {
    return dict.cardinality;
};
var boundedEnumUnit = new BoundedEnum(function () {
    return Data_Bounded.boundedUnit;
}, function () {
    return enumUnit;
}, 1, Data_Function["const"](0), function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Unit.unit);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function () {
    return Data_Bounded.boundedOrdering;
}, function () {
    return enumOrdering;
}, 3, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return 0;
    };
    if (v instanceof Data_Ordering.EQ) {
        return 1;
    };
    if (v instanceof Data_Ordering.GT) {
        return 2;
    };
    throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 137, column 53): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function () {
    return Data_Bounded.boundedChar;
}, function () {
    return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function () {
    return Data_Bounded.boundedBoolean;
}, function () {
    return enumBoolean;
}, 2, function (v) {
    if (!v) {
        return 0;
    };
    if (v) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 118, column 51): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(false);
    };
    if (v === 1) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
module.exports = {
    Enum: Enum,
    succ: succ,
    pred: pred,
    BoundedEnum: BoundedEnum,
    cardinality: cardinality,
    toEnum: toEnum,
    fromEnum: fromEnum,
    toEnumWithDefaults: toEnumWithDefaults,
    Cardinality: Cardinality,
    enumFromTo: enumFromTo,
    enumFromThenTo: enumFromThenTo,
    upFrom: upFrom,
    upFromIncluding: upFromIncluding,
    downFrom: downFrom,
    downFromIncluding: downFromIncluding,
    defaultSucc: defaultSucc,
    defaultPred: defaultPred,
    defaultCardinality: defaultCardinality,
    defaultToEnum: defaultToEnum,
    defaultFromEnum: defaultFromEnum,
    enumBoolean: enumBoolean,
    enumInt: enumInt,
    enumChar: enumChar,
    enumUnit: enumUnit,
    enumOrdering: enumOrdering,
    enumMaybe: enumMaybe,
    enumEither: enumEither,
    enumTuple: enumTuple,
    boundedEnumBoolean: boundedEnumBoolean,
    boundedEnumChar: boundedEnumChar,
    boundedEnumUnit: boundedEnumUnit,
    boundedEnumOrdering: boundedEnumOrdering,
    newtypeCardinality: newtypeCardinality,
    eqCardinality: eqCardinality,
    ordCardinality: ordCardinality,
    showCardinality: showCardinality
};

},{"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.MonadZero/index.js":67,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264,"../Data.Unit/index.js":266,"./foreign.js":130}],132:[function(require,module,exports){
"use strict";

var refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs === ys) return true;
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

},{}],133:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var EqRecord = function (eqRecord) {
    this.eqRecord = eqRecord;
};
var Eq1 = function (eq1) {
    this.eq1 = eq1;
};
var Eq = function (eq) {
    this.eq = eq;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var eqRecord = function (dict) {
    return dict.eqRecord;
};
var eqRec = function (dictRowToList) {
    return function (dictEqRecord) {
        return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);
var eq1 = function (dict) {
    return dict.eq1;
};
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function (dictEq) {
    return eq(eqArray(dictEq));
});
var eqRowCons = function (dictEqRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictEq) {
                return new EqRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var get = Record_Unsafe.unsafeGet(key);
                            return eq(dictEq)(get(ra))(get(rb)) && tail;
                        };
                    };
                });
            };
        };
    };
};
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function (dictEq1) {
    return function (dictEq) {
        return function (x) {
            return function (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
module.exports = {
    Eq: Eq,
    eq: eq,
    notEq: notEq,
    Eq1: Eq1,
    eq1: eq1,
    notEq1: notEq1,
    EqRecord: EqRecord,
    eqRecord: eqRecord,
    eqBoolean: eqBoolean,
    eqInt: eqInt,
    eqNumber: eqNumber,
    eqChar: eqChar,
    eqString: eqString,
    eqUnit: eqUnit,
    eqVoid: eqVoid,
    eqArray: eqArray,
    eqRec: eqRec,
    eq1Array: eq1Array,
    eqRowNil: eqRowNil,
    eqRowCons: eqRowCons
};

},{"../Data.Symbol/index.js":250,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"./foreign.js":132}],134:[function(require,module,exports){
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
};

// See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.
exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return ((x % yy) + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

},{}],135:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var mod = function (dict) {
    return dict.mod;
};
var gcd = function ($copy_dictEq) {
    return function ($copy_dictEuclideanRing) {
        return function ($copy_a) {
            return function ($copy_b) {
                var $tco_var_dictEq = $copy_dictEq;
                var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                var $tco_var_a = $copy_a;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                    if ($7) {
                        $tco_done = true;
                        return a;
                    };
                    $tco_var_dictEq = dictEq;
                    $tco_var_dictEuclideanRing = dictEuclideanRing;
                    $tco_var_a = b;
                    $copy_b = mod(dictEuclideanRing)(a)(b);
                    return;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                };
                return $tco_result;
            };
        };
    };
};
var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
    return 1;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var euclideanRingInt = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function (dict) {
    return dict.div;
};
var lcm = function (dictEq) {
    return function (dictEuclideanRing) {
        return function (a) {
            return function (b) {
                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                if ($8) {
                    return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                };
                return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
        };
    };
};
var degree = function (dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing,
    degree: degree,
    div: div,
    mod: mod,
    gcd: gcd,
    lcm: lcm,
    euclideanRingInt: euclideanRingInt,
    euclideanRingNumber: euclideanRingNumber
};

},{"../Data.CommutativeRing/index.js":117,"../Data.Eq/index.js":133,"../Data.Semiring/index.js":233,"./foreign.js":134}],136:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var runExists = Unsafe_Coerce.unsafeCoerce;
var mkExists = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    mkExists: mkExists,
    runExists: runExists
};

},{"../Unsafe.Coerce/index.js":405}],137:[function(require,module,exports){
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],138:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var indexr = function (dictFoldable) {
    return function (idx) {
        var go = function (a) {
            return function (cursor) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $106 = cursor.pos === idx;
                if ($106) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        return function ($193) {
            return (function (v) {
                return v.elem;
            })(foldr(dictFoldable)(go)({
                elem: Data_Maybe.Nothing.value,
                pos: 0
            })($193));
        };
    };
};
var $$null = function (dictFoldable) {
    return foldr(dictFoldable)(function (v) {
        return function (v1) {
            return false;
        };
    })(true);
};
var oneOf = function (dictFoldable) {
    return function (dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
    };
};
var oneOfMap = function (dictFoldable) {
    return function (dictPlus) {
        return function (f) {
            return foldr(dictFoldable)(function ($194) {
                return Control_Alt.alt(dictPlus.Alt0())(f($194));
            })(Control_Plus.empty(dictPlus));
        };
    };
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)(function ($195) {
                return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var indexl = function (dictFoldable) {
    return function (idx) {
        var go = function (cursor) {
            return function (a) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $109 = cursor.pos === idx;
                if ($109) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        return function ($196) {
            return (function (v) {
                return v.elem;
            })(foldl(dictFoldable)(go)({
                elem: Data_Maybe.Nothing.value,
                pos: 0
            })($196));
        };
    };
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false,
                                acc: x
                            };
                        };
                        return {
                            init: false,
                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true,
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var length = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(function (c) {
            return function (v) {
                return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
        })(Data_Semiring.zero(dictSemiring));
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                        if ($116) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                        if ($120) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 129, column 41): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 129, column 41): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 129, column 41): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldr(dictFoldable)(function (x) {
                return function (acc) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldl(dictFoldable)(function (acc) {
                return function (x) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function ($197) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($197)));
                })(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($198) {
                    return Data_Monoid_Endo.Endo(c($198));
                })(xs))(u);
            };
        };
    };
};
var surroundMap = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (a) {
                        return function (m) {
                            return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var surround = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var foldM = function (dictFoldable) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldl(dictFoldable)(function (ma) {
                    return function (b) {
                        return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var findMap = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return p(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var find = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing && p(v1)) {
                    return new Data_Maybe.Just(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        return function ($199) {
            return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            return function ($200) {
                return !elem(dictFoldable)(dictEq)(x)($200);
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
    };
};
var and = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable,
    foldr: foldr,
    foldl: foldl,
    foldMap: foldMap,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefaultL: foldMapDefaultL,
    foldMapDefaultR: foldMapDefaultR,
    fold: fold,
    foldM: foldM,
    traverse_: traverse_,
    for_: for_,
    sequence_: sequence_,
    oneOf: oneOf,
    oneOfMap: oneOfMap,
    intercalate: intercalate,
    surroundMap: surroundMap,
    surround: surround,
    and: and,
    or: or,
    all: all,
    any: any,
    sum: sum,
    product: product,
    elem: elem,
    notElem: notElem,
    indexl: indexl,
    indexr: indexr,
    find: find,
    findMap: findMap,
    maximum: maximum,
    maximumBy: maximumBy,
    minimum: minimum,
    minimumBy: minimumBy,
    "null": $$null,
    length: length,
    foldableArray: foldableArray,
    foldableMaybe: foldableMaybe,
    foldableFirst: foldableFirst,
    foldableLast: foldableLast,
    foldableAdditive: foldableAdditive,
    foldableDual: foldableDual,
    foldableDisj: foldableDisj,
    foldableConj: foldableConj,
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe/index.js":197,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Endo/index.js":204,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Unit/index.js":266,"./foreign.js":137}],139:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
    this.Foldable0 = Foldable0;
    this.foldMapWithIndex = foldMapWithIndex;
    this.foldlWithIndex = foldlWithIndex;
    this.foldrWithIndex = foldrWithIndex;
};
var foldrWithIndex = function (dict) {
    return dict.foldrWithIndex;
};
var traverseWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                return function ($46) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(f(i)($46));
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var forWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
    };
};
var foldrDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldlWithIndex = function (dict) {
    return dict.foldlWithIndex;
};
var foldlDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMaybe;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function () {
    return Data_Foldable.foldableLast;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function () {
    return Data_Foldable.foldableFirst;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDual;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDisj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableConj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function () {
    return Data_Foldable.foldableAdditive;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});
var foldWithIndexM = function (dictFoldableWithIndex) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                    return function (ma) {
                        return function (b) {
                            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                        };
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                return function (x) {
                    return function (acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableWithIndexArray = new FoldableWithIndex(function () {
    return Data_Foldable.foldableArray;
}, function (dictMonoid) {
    return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function (f) {
    return function (z) {
        return function ($47) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                return function (v) {
                    return f(v.value0)(y)(v.value1);
                };
            })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($47));
        };
    };
}, function (f) {
    return function (z) {
        return function ($48) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                return function (y) {
                    return f(v.value0)(v.value1)(y);
                };
            })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($48));
        };
    };
});
var foldMapWithIndexDefaultL = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                return function (acc) {
                    return function (x) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMapWithIndex = function (dict) {
    return dict.foldMapWithIndex;
};
var foldlWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
                    return function ($49) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c(i))($49)));
                    };
                })(xs)))(u);
            };
        };
    };
};
var foldrWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
                    return function ($50) {
                        return Data_Monoid_Endo.Endo(c(i)($50));
                    };
                })(xs))(u);
            };
        };
    };
};
var surroundMapWithIndex = function (dictFoldableWithIndex) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (i) {
                        return function (a) {
                            return function (m) {
                                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                            };
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var foldMapDefault = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
        };
    };
};
var findWithIndex = function (dictFoldableWithIndex) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                return function (v2) {
                    if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                        return new Data_Maybe.Just({
                            index: v,
                            value: v2
                        });
                    };
                    return v1;
                };
            };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
    };
};
var anyWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            return function ($51) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
                    return function ($52) {
                        return Data_Monoid_Disj.Disj(t(i)($52));
                    };
                })($51));
            };
        };
    };
};
var allWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            return function ($53) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                    return function ($54) {
                        return Data_Monoid_Conj.Conj(t(i)($54));
                    };
                })($53));
            };
        };
    };
};
module.exports = {
    FoldableWithIndex: FoldableWithIndex,
    foldrWithIndex: foldrWithIndex,
    foldlWithIndex: foldlWithIndex,
    foldMapWithIndex: foldMapWithIndex,
    foldrWithIndexDefault: foldrWithIndexDefault,
    foldlWithIndexDefault: foldlWithIndexDefault,
    foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
    foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
    foldWithIndexM: foldWithIndexM,
    traverseWithIndex_: traverseWithIndex_,
    forWithIndex_: forWithIndex_,
    surroundMapWithIndex: surroundMapWithIndex,
    allWithIndex: allWithIndex,
    anyWithIndex: anyWithIndex,
    findWithIndex: findWithIndex,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefault: foldMapDefault,
    foldableWithIndexArray: foldableWithIndexArray,
    foldableWithIndexMaybe: foldableWithIndexMaybe,
    foldableWithIndexFirst: foldableWithIndexFirst,
    foldableWithIndexLast: foldableWithIndexLast,
    foldableWithIndexAdditive: foldableWithIndexAdditive,
    foldableWithIndexDual: foldableWithIndexDual,
    foldableWithIndexDisj: foldableWithIndexDisj,
    foldableWithIndexConj: foldableWithIndexConj,
    foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.FunctorWithIndex/index.js":158,"../Data.Maybe/index.js":197,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Endo/index.js":204,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266}],140:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Global = require("../Global/index.js");
var FormURLEncoded = function (x) {
    return x;
};
var toArray = function (v) {
    return v;
};
var showFormUrlEncoded = new Data_Show.Show(function (v) {
    return "(FormURLEncoded " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(Data_Maybe.showMaybe(Data_Show.showString))))(v) + ")");
});
var semigroupFormUrlEncoded = Data_Semigroup.semigroupArray;
var ordFormUrlEncoded = Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Maybe.ordMaybe(Data_Ord.ordString)));
var newtypeFormUrlEncoded = new Data_Newtype.Newtype(function (n) {
    return n;
}, FormURLEncoded);
var monoidFormUrlEncoded = Data_Monoid.monoidArray;
var fromArray = FormURLEncoded;
var eqFormUrlEncoded = Data_Eq.eqArray(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Maybe.eqMaybe(Data_Eq.eqString)));
var encode = (function () {
    var encodePart = function (v) {
        if (v.value1 instanceof Data_Maybe.Nothing) {
            return Global["encodeURIComponent"](v.value0);
        };
        if (v.value1 instanceof Data_Maybe.Just) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                return function (val) {
                    return key + ("=" + val);
                };
            })(Global["encodeURIComponent"](v.value0)))(Global["encodeURIComponent"](v.value1.value0));
        };
        throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 108): " + [ v.constructor.name ]);
    };
    return function ($19) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart)(toArray($19)));
    };
})();
var decode = (function () {
    var decodePart = function ($20) {
        return (function (v) {
            if (v.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                    return function (val) {
                        return Data_Tuple.Tuple.create(key)(new Data_Maybe.Just(val));
                    };
                })(Global["decodeURIComponent"](v[0])))(Global["decodeURIComponent"](v[1]));
            };
            if (v.length === 1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Global["decodeURIComponent"](v[0])))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value));
            };
            return Data_Maybe.Nothing.value;
        })(Data_String_Common.split("=")($20));
    };
    return function ($21) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(FormURLEncoded)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(decodePart)(Data_String_Common.split("&")($21)));
    };
})();
module.exports = {
    FormURLEncoded: FormURLEncoded,
    fromArray: fromArray,
    toArray: toArray,
    encode: encode,
    decode: decode,
    newtypeFormUrlEncoded: newtypeFormUrlEncoded,
    eqFormUrlEncoded: eqFormUrlEncoded,
    ordFormUrlEncoded: ordFormUrlEncoded,
    semigroupFormUrlEncoded: semigroupFormUrlEncoded,
    monoidFormUrlEncoded: monoidFormUrlEncoded,
    showFormUrlEncoded: showFormUrlEncoded
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.Common/index.js":241,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Global/index.js":330}],141:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Internal = require("../Data.Formatter.Internal/index.js");
var Data_Formatter_Parser_Number = require("../Data.Formatter.Parser.Number/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var AM = (function () {
    function AM() {

    };
    AM.value = new AM();
    return AM;
})();
var PM = (function () {
    function PM() {

    };
    PM.value = new PM();
    return PM;
})();
var YearFull = (function () {
    function YearFull() {

    };
    YearFull.value = new YearFull();
    return YearFull;
})();
var YearTwoDigits = (function () {
    function YearTwoDigits() {

    };
    YearTwoDigits.value = new YearTwoDigits();
    return YearTwoDigits;
})();
var YearAbsolute = (function () {
    function YearAbsolute() {

    };
    YearAbsolute.value = new YearAbsolute();
    return YearAbsolute;
})();
var MonthFull = (function () {
    function MonthFull() {

    };
    MonthFull.value = new MonthFull();
    return MonthFull;
})();
var MonthShort = (function () {
    function MonthShort() {

    };
    MonthShort.value = new MonthShort();
    return MonthShort;
})();
var MonthTwoDigits = (function () {
    function MonthTwoDigits() {

    };
    MonthTwoDigits.value = new MonthTwoDigits();
    return MonthTwoDigits;
})();
var DayOfMonthTwoDigits = (function () {
    function DayOfMonthTwoDigits() {

    };
    DayOfMonthTwoDigits.value = new DayOfMonthTwoDigits();
    return DayOfMonthTwoDigits;
})();
var DayOfMonth = (function () {
    function DayOfMonth() {

    };
    DayOfMonth.value = new DayOfMonth();
    return DayOfMonth;
})();
var UnixTimestamp = (function () {
    function UnixTimestamp() {

    };
    UnixTimestamp.value = new UnixTimestamp();
    return UnixTimestamp;
})();
var DayOfWeek = (function () {
    function DayOfWeek() {

    };
    DayOfWeek.value = new DayOfWeek();
    return DayOfWeek;
})();
var DayOfWeekName = (function () {
    function DayOfWeekName() {

    };
    DayOfWeekName.value = new DayOfWeekName();
    return DayOfWeekName;
})();
var DayOfWeekNameShort = (function () {
    function DayOfWeekNameShort() {

    };
    DayOfWeekNameShort.value = new DayOfWeekNameShort();
    return DayOfWeekNameShort;
})();
var Hours24 = (function () {
    function Hours24() {

    };
    Hours24.value = new Hours24();
    return Hours24;
})();
var Hours12 = (function () {
    function Hours12() {

    };
    Hours12.value = new Hours12();
    return Hours12;
})();
var Meridiem = (function () {
    function Meridiem() {

    };
    Meridiem.value = new Meridiem();
    return Meridiem;
})();
var Minutes = (function () {
    function Minutes() {

    };
    Minutes.value = new Minutes();
    return Minutes;
})();
var MinutesTwoDigits = (function () {
    function MinutesTwoDigits() {

    };
    MinutesTwoDigits.value = new MinutesTwoDigits();
    return MinutesTwoDigits;
})();
var Seconds = (function () {
    function Seconds() {

    };
    Seconds.value = new Seconds();
    return Seconds;
})();
var SecondsTwoDigits = (function () {
    function SecondsTwoDigits() {

    };
    SecondsTwoDigits.value = new SecondsTwoDigits();
    return SecondsTwoDigits;
})();
var Milliseconds = (function () {
    function Milliseconds() {

    };
    Milliseconds.value = new Milliseconds();
    return Milliseconds;
})();
var MillisecondsShort = (function () {
    function MillisecondsShort() {

    };
    MillisecondsShort.value = new MillisecondsShort();
    return MillisecondsShort;
})();
var MillisecondsTwoDigits = (function () {
    function MillisecondsTwoDigits() {

    };
    MillisecondsTwoDigits.value = new MillisecondsTwoDigits();
    return MillisecondsTwoDigits;
})();
var Placeholder = (function () {
    function Placeholder(value0) {
        this.value0 = value0;
    };
    Placeholder.create = function (value0) {
        return new Placeholder(value0);
    };
    return Placeholder;
})();
var validateRange = function (min) {
    return function (max) {
        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Data_Either.bindEither))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Either.monadEither)))(function (v) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Data_Either.monadEither)((function () {
                var $97 = v.num < min || v.num > max;
                if ($97) {
                    return Data_Either.Left.create("Number is out of range [ " + (Data_Show.show(Data_Show.showInt)(min) + (", " + (Data_Show.show(Data_Show.showInt)(max) + " ]"))));
                };
                return new Data_Either.Right(Data_Unit.unit);
            })());
        });
    };
};
var validAccum = function (v) {
    if (v.hour instanceof Data_Maybe.Just && v.hour.value0 === 24) {
        return Data_Foldable.for_(Data_Either.applicativeEither)(Data_Foldable.foldableArray)([ v.minute, v.second, v.millisecond ])(function (val) {
            return Control_Applicative.when(Data_Either.applicativeEither)(Data_Maybe.fromMaybe(0)(val) > 0)(new Data_Either.Left("When hour is 24, other time components must be 0"));
        });
    };
    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
};
var takeSome = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return function (v1) {
                if (v === 0) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value);
                };
                return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v1))(Control_Lazy.defer(dictLazy)(function (v3) {
                    return takeMany(dictAlternative)(dictLazy)(v - 1 | 0)(v1);
                }));
            };
        };
    };
};
var takeMany = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return function (v1) {
                if (v === 0) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value);
                };
                return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(takeSome(dictAlternative)(dictLazy)(v)(v1))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
            };
        };
    };
};
var printShortMonth = function (v) {
    if (v instanceof Data_Date_Component.January) {
        return "Jan";
    };
    if (v instanceof Data_Date_Component.February) {
        return "Feb";
    };
    if (v instanceof Data_Date_Component.March) {
        return "Mar";
    };
    if (v instanceof Data_Date_Component.April) {
        return "Apr";
    };
    if (v instanceof Data_Date_Component.May) {
        return "May";
    };
    if (v instanceof Data_Date_Component.June) {
        return "Jun";
    };
    if (v instanceof Data_Date_Component.July) {
        return "Jul";
    };
    if (v instanceof Data_Date_Component.August) {
        return "Aug";
    };
    if (v instanceof Data_Date_Component.September) {
        return "Sep";
    };
    if (v instanceof Data_Date_Component.October) {
        return "Oct";
    };
    if (v instanceof Data_Date_Component.November) {
        return "Nov";
    };
    if (v instanceof Data_Date_Component.December) {
        return "Dec";
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 482, column 19 - line 494, column 16): " + [ v.constructor.name ]);
};
var printFormatterCommand = function (v) {
    if (v instanceof YearFull) {
        return "YYYY";
    };
    if (v instanceof YearTwoDigits) {
        return "YY";
    };
    if (v instanceof YearAbsolute) {
        return "Y";
    };
    if (v instanceof MonthFull) {
        return "MMMM";
    };
    if (v instanceof MonthShort) {
        return "MMM";
    };
    if (v instanceof MonthTwoDigits) {
        return "MM";
    };
    if (v instanceof DayOfMonthTwoDigits) {
        return "DD";
    };
    if (v instanceof DayOfMonth) {
        return "D";
    };
    if (v instanceof UnixTimestamp) {
        return "X";
    };
    if (v instanceof DayOfWeek) {
        return "E";
    };
    if (v instanceof DayOfWeekName) {
        return "dddd";
    };
    if (v instanceof DayOfWeekNameShort) {
        return "ddd";
    };
    if (v instanceof Hours24) {
        return "HH";
    };
    if (v instanceof Hours12) {
        return "hh";
    };
    if (v instanceof Meridiem) {
        return "a";
    };
    if (v instanceof Minutes) {
        return "m";
    };
    if (v instanceof MinutesTwoDigits) {
        return "mm";
    };
    if (v instanceof Seconds) {
        return "s";
    };
    if (v instanceof SecondsTwoDigits) {
        return "ss";
    };
    if (v instanceof MillisecondsShort) {
        return "S";
    };
    if (v instanceof MillisecondsTwoDigits) {
        return "SS";
    };
    if (v instanceof Milliseconds) {
        return "SSS";
    };
    if (v instanceof Placeholder) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 84, column 25 - line 107, column 20): " + [ v.constructor.name ]);
};
var printFormatter = Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(printFormatterCommand);
var placeholderContent = Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_String_CodeUnits.toCharArray("YMDEHhamsS"))))(Data_String_CodeUnits.fromCharArray);
var parseShortMonth = function (dictMonad) {
    return Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(function ($445) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)($445));
    })([ new Data_Tuple.Tuple("Jan", Data_Date_Component.January.value), new Data_Tuple.Tuple("Feb", Data_Date_Component.February.value), new Data_Tuple.Tuple("Mar", Data_Date_Component.March.value), new Data_Tuple.Tuple("Apr", Data_Date_Component.April.value), new Data_Tuple.Tuple("May", Data_Date_Component.May.value), new Data_Tuple.Tuple("Jun", Data_Date_Component.June.value), new Data_Tuple.Tuple("Jul", Data_Date_Component.July.value), new Data_Tuple.Tuple("Aug", Data_Date_Component.August.value), new Data_Tuple.Tuple("Sep", Data_Date_Component.September.value), new Data_Tuple.Tuple("Oct", Data_Date_Component.October.value), new Data_Tuple.Tuple("Nov", Data_Date_Component.November.value), new Data_Tuple.Tuple("Dec", Data_Date_Component.December.value) ]);
};
var parseMonth = function (dictMonad) {
    return Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(function ($446) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)($446));
    })([ new Data_Tuple.Tuple("January", Data_Date_Component.January.value), new Data_Tuple.Tuple("February", Data_Date_Component.February.value), new Data_Tuple.Tuple("March", Data_Date_Component.March.value), new Data_Tuple.Tuple("April", Data_Date_Component.April.value), new Data_Tuple.Tuple("May", Data_Date_Component.May.value), new Data_Tuple.Tuple("June", Data_Date_Component.June.value), new Data_Tuple.Tuple("July", Data_Date_Component.July.value), new Data_Tuple.Tuple("August", Data_Date_Component.August.value), new Data_Tuple.Tuple("September", Data_Date_Component.September.value), new Data_Tuple.Tuple("October", Data_Date_Component.October.value), new Data_Tuple.Tuple("November", Data_Date_Component.November.value), new Data_Tuple.Tuple("December", Data_Date_Component.December.value) ]);
};
var parseMeridiem = function (dictMonad) {
    return Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(function ($447) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)($447));
    })([ new Data_Tuple.Tuple("am", AM.value), new Data_Tuple.Tuple("AM", AM.value), new Data_Tuple.Tuple("pm", PM.value), new Data_Tuple.Tuple("PM", PM.value) ]);
};
var $$parseInt = function (dictMonad) {
    return function (maxLength) {
        return function (validators) {
            return function (errMsg) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(takeSome(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(maxLength)(Data_Formatter_Parser_Number.parseDigit(dictMonad)(Text_Parsing_Parser_String.stringLikeString)))(function (v) {
                    var num = Data_Formatter_Internal.foldDigits(Data_List_Types.foldableList)(v);
                    var length = Data_List.length(v);
                    var v1 = Control_Monad_Reader_Trans.runReaderT(validators)({
                        length: length,
                        num: num,
                        maxLength: maxLength
                    });
                    if (v1 instanceof Data_Either.Left) {
                        return Text_Parsing_Parser.fail(dictMonad)(errMsg + ("(" + (v1.value0 + ")")));
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(num);
                    };
                    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 336, column 3 - line 338, column 23): " + [ v1.constructor.name ]);
                });
            };
        };
    };
};
var parseSignedInt = function (dictMonad) {
    return function (maxLength) {
        return function (validators) {
            return function (errMsg) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.isJust)(Text_Parsing_Parser_Combinators.optionMaybe(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))))(function (v) {
                    return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))((function () {
                        if (v) {
                            return Data_Ring.negate(Data_Ring.ringInt);
                        };
                        return Control_Category.identity(Control_Category.categoryFn);
                    })())($$parseInt(dictMonad)(maxLength)(validators)(errMsg));
                });
            };
        };
    };
};
var parseDayOfWeekNameShort = function (dictMonad) {
    return Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(function ($448) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)($448));
    })([ new Data_Tuple.Tuple("Mon", Data_Date_Component.Monday.value), new Data_Tuple.Tuple("Tue", Data_Date_Component.Tuesday.value), new Data_Tuple.Tuple("Wed", Data_Date_Component.Wednesday.value), new Data_Tuple.Tuple("Thu", Data_Date_Component.Thursday.value), new Data_Tuple.Tuple("Fri", Data_Date_Component.Friday.value), new Data_Tuple.Tuple("Sat", Data_Date_Component.Saturday.value), new Data_Tuple.Tuple("Sun", Data_Date_Component.Sunday.value) ]);
};
var parseDayOfWeekName = function (dictMonad) {
    return Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(function ($449) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)($449));
    })([ new Data_Tuple.Tuple("Monday", Data_Date_Component.Monday.value), new Data_Tuple.Tuple("Tuesday", Data_Date_Component.Tuesday.value), new Data_Tuple.Tuple("Wednesday", Data_Date_Component.Wednesday.value), new Data_Tuple.Tuple("Thursday", Data_Date_Component.Thursday.value), new Data_Tuple.Tuple("Friday", Data_Date_Component.Friday.value), new Data_Tuple.Tuple("Saturday", Data_Date_Component.Saturday.value), new Data_Tuple.Tuple("Sunday", Data_Date_Component.Sunday.value) ]);
};
var padSingleDigit = function (i) {
    if (i < 0) {
        return "-" + padSingleDigit(-i | 0);
    };
    if (i < 10) {
        return "0" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Show.show(Data_Show.showInt)(i);
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 192, column 1 - line 192, column 30): " + [ i.constructor.name ]);
};
var padQuadrupleDigit = function (i) {
    if (i < 0) {
        return "-" + padQuadrupleDigit(-i | 0);
    };
    if (i < 10) {
        return "000" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (i < 100) {
        return "00" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (i < 1000) {
        return "0" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Show.show(Data_Show.showInt)(i);
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 205, column 1 - line 205, column 33): " + [ i.constructor.name ]);
};
var padDoubleDigit = function (i) {
    if (i < 0) {
        return "-" + padDoubleDigit(-i | 0);
    };
    if (i < 10) {
        return "00" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (i < 100) {
        return "0" + Data_Show.show(Data_Show.showInt)(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Show.show(Data_Show.showInt)(i);
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 198, column 1 - line 198, column 30): " + [ i.constructor.name ]);
};
var initialAccum = {
    year: Data_Maybe.Nothing.value,
    month: Data_Maybe.Nothing.value,
    day: Data_Maybe.Nothing.value,
    hour: Data_Maybe.Nothing.value,
    minute: Data_Maybe.Nothing.value,
    second: Data_Maybe.Nothing.value,
    millisecond: Data_Maybe.Nothing.value,
    meridiem: Data_Maybe.Nothing.value
};
var genericFormatter = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof YearFull) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof YearTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof YearAbsolute) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof MonthFull) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof MonthShort) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof MonthTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
    };
    if (x instanceof DayOfMonthTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
    };
    if (x instanceof DayOfMonth) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
    };
    if (x instanceof UnixTimestamp) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
    };
    if (x instanceof DayOfWeek) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
    };
    if (x instanceof DayOfWeekName) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
    };
    if (x instanceof DayOfWeekNameShort) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))));
    };
    if (x instanceof Hours24) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))));
    };
    if (x instanceof Hours12) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))));
    };
    if (x instanceof Meridiem) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))));
    };
    if (x instanceof Minutes) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))));
    };
    if (x instanceof MinutesTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))));
    };
    if (x instanceof Seconds) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))));
    };
    if (x instanceof SecondsTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))));
    };
    if (x instanceof Milliseconds) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))));
    };
    if (x instanceof MillisecondsShort) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))));
    };
    if (x instanceof MillisecondsTwoDigits) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))))));
    };
    if (x instanceof Placeholder) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))))))))))))))))))));
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 77, column 8 - line 77, column 62): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return YearFull.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return YearTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return YearAbsolute.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return MonthFull.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return MonthShort.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
        return MonthTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
        return DayOfMonthTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
        return DayOfMonth.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
        return UnixTimestamp.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
        return DayOfWeek.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
        return DayOfWeekName.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))) {
        return DayOfWeekNameShort.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))) {
        return Hours24.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))) {
        return Hours12.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))) {
        return Meridiem.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))) {
        return Minutes.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))) {
        return MinutesTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))) {
        return Seconds.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))) {
        return SecondsTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))) {
        return Milliseconds.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))) {
        return MillisecondsShort.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))) {
        return MillisecondsTwoDigits.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))))))))))))))) {
        return new Placeholder(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
    };
    throw new Error("Failed pattern match at Data.Formatter.DateTime (line 77, column 8 - line 77, column 62): " + [ x.constructor.name ]);
});
var showFormatter = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFormatter)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "YearFull";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "YearTwoDigits";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "YearAbsolute";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MonthFull";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MonthShort";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MonthTwoDigits";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "DayOfMonthTwoDigits";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "DayOfMonth";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "UnixTimestamp";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "DayOfWeek";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "DayOfWeekName";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "DayOfWeekNameShort";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Hours24";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Hours12";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Meridiem";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Minutes";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MinutesTwoDigits";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Seconds";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SecondsTwoDigits";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Milliseconds";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MillisecondsShort";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MillisecondsTwoDigits";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "Placeholder";
}))))))))))))))))))))))))));
var formatterCommandParser = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(function ($450) {
    return Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)($450));
})([ new Data_Tuple.Tuple("YYYY", YearFull.value), new Data_Tuple.Tuple("YY", YearTwoDigits.value), new Data_Tuple.Tuple("Y", YearAbsolute.value), new Data_Tuple.Tuple("MMMM", MonthFull.value), new Data_Tuple.Tuple("MMM", MonthShort.value), new Data_Tuple.Tuple("MM", MonthTwoDigits.value), new Data_Tuple.Tuple("DD", DayOfMonthTwoDigits.value), new Data_Tuple.Tuple("D", DayOfMonth.value), new Data_Tuple.Tuple("E", DayOfWeek.value), new Data_Tuple.Tuple("X", UnixTimestamp.value), new Data_Tuple.Tuple("dddd", DayOfWeekName.value), new Data_Tuple.Tuple("ddd", DayOfWeekNameShort.value), new Data_Tuple.Tuple("HH", Hours24.value), new Data_Tuple.Tuple("hh", Hours12.value), new Data_Tuple.Tuple("a", Meridiem.value), new Data_Tuple.Tuple("mm", MinutesTwoDigits.value), new Data_Tuple.Tuple("m", Minutes.value), new Data_Tuple.Tuple("ss", SecondsTwoDigits.value), new Data_Tuple.Tuple("s", Seconds.value), new Data_Tuple.Tuple("SSS", Milliseconds.value), new Data_Tuple.Tuple("SS", MillisecondsTwoDigits.value), new Data_Tuple.Tuple("S", MillisecondsShort.value) ]))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Placeholder.create)(placeholderContent));
var formatYearTwoDigits = function (i) {
    var dateString = Data_Show.show(Data_Show.showInt)(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(i));
    var dateLength = Data_String_CodePoints.length(dateString);
    if (dateLength === 1) {
        return "0" + dateString;
    };
    if (dateLength === 2) {
        return dateString;
    };
    return Data_String_CodePoints.drop(dateLength - 2 | 0)(dateString);
};
var formatParser = Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(formatterCommandParser);
var parseFormatString = Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(formatParser);
var fix12 = function (h) {
    var $401 = h === 0;
    if ($401) {
        return 12;
    };
    return h;
};
var formatCommand = function (v) {
    return function (v1) {
        if (v1 instanceof YearFull) {
            return padQuadrupleDigit(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)));
        };
        if (v1 instanceof YearTwoDigits) {
            return formatYearTwoDigits(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)));
        };
        if (v1 instanceof YearAbsolute) {
            return Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)));
        };
        if (v1 instanceof MonthFull) {
            return Data_Show.show(Data_Date_Component.showMonth)(Data_Date.month(v.value0));
        };
        if (v1 instanceof MonthShort) {
            return printShortMonth(Data_Date.month(v.value0));
        };
        if (v1 instanceof MonthTwoDigits) {
            return padSingleDigit(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)));
        };
        if (v1 instanceof DayOfMonthTwoDigits) {
            return padSingleDigit(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)));
        };
        if (v1 instanceof DayOfMonth) {
            return Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)));
        };
        if (v1 instanceof UnixTimestamp) {
            return Data_Show.show(Data_Show.showInt)(Data_Int.floor((function (v2) {
                return v2 / 1000.0;
            })(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(v))))));
        };
        if (v1 instanceof DayOfWeek) {
            return Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Date_Component.boundedEnumWeekday)(Data_Date.weekday(v.value0)));
        };
        if (v1 instanceof DayOfWeekName) {
            return Data_Show.show(Data_Date_Component.showWeekday)(Data_Date.weekday(v.value0));
        };
        if (v1 instanceof DayOfWeekNameShort) {
            return Data_String_CodePoints.take(3)(Data_Show.show(Data_Date_Component.showWeekday)(Data_Date.weekday(v.value0)));
        };
        if (v1 instanceof Hours24) {
            return padSingleDigit(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)));
        };
        if (v1 instanceof Hours12) {
            return padSingleDigit(fix12(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)))(12)));
        };
        if (v1 instanceof Meridiem) {
            var $404 = Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)) >= 12;
            if ($404) {
                return "PM";
            };
            return "AM";
        };
        if (v1 instanceof Minutes) {
            return Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)));
        };
        if (v1 instanceof MinutesTwoDigits) {
            return padSingleDigit(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)));
        };
        if (v1 instanceof Seconds) {
            return Data_Show.show(Data_Show.showInt)(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)));
        };
        if (v1 instanceof SecondsTwoDigits) {
            return padSingleDigit(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)));
        };
        if (v1 instanceof Milliseconds) {
            return padDoubleDigit(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)));
        };
        if (v1 instanceof MillisecondsShort) {
            return Data_Show.show(Data_Show.showInt)((function (v2) {
                return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v2)(100);
            })(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))));
        };
        if (v1 instanceof MillisecondsTwoDigits) {
            return padSingleDigit((function (v2) {
                return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v2)(10);
            })(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))));
        };
        if (v1 instanceof Placeholder) {
            return v1.value0;
        };
        throw new Error("Failed pattern match at Data.Formatter.DateTime (line 167, column 38 - line 190, column 20): " + [ v1.constructor.name ]);
    };
};
var format = function (f) {
    return function (d) {
        return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(formatCommand(d))(f);
    };
};
var formatDateTime = function (pattern) {
    return function (datetime) {
        return Data_Functor.mapFlipped(Data_Either.functorEither)(parseFormatString(pattern))(function (v) {
            return format(v)(datetime);
        });
    };
};
var exactLength = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Data_Either.bindEither))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Either.monadEither)))(function (v) {
    return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Data_Either.monadEither)((function () {
        var $409 = v.maxLength !== v.length;
        if ($409) {
            return Data_Either.Left.create("Expected " + (Data_Show.show(Data_Show.showInt)(v.maxLength) + (" digits but got " + Data_Show.show(Data_Show.showInt)(v.length))));
        };
        return new Data_Either.Right(Data_Unit.unit);
    })());
});
var unformatCommandParser = (function () {
    var modifyWithParser = function (f) {
        return function (p) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(p)(function (v) {
                return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Function.flip(f)(new Data_Maybe.Just(v))));
            });
        };
    };
    return function (v) {
        if (v instanceof YearFull) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        year: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second
                    };
                };
            })(parseSignedInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(4)(exactLength)("Incorrect full year"));
        };
        if (v instanceof YearTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        year: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second
                    };
                };
            })(parseSignedInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(exactLength)("Incorrect 2-digit year"));
        };
        if (v instanceof YearAbsolute) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        year: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second
                    };
                };
            })(Control_Apply.lift2(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Semiring.mul(Data_Semiring.semiringInt))(Text_Parsing_Parser_Combinators.option(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(1)(Text_Parsing_Parser_Combinators["try"](Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))("-"))(Data_Function["const"](-1 | 0)))))(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.stringLikeString)))(Data_Formatter_Internal.foldDigits(Data_List_Types.foldableList))));
        };
        if (v instanceof MonthFull) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        month: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth))(parseMonth(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
        };
        if (v instanceof MonthShort) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        month: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth))(parseShortMonth(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
        };
        if (v instanceof MonthTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        month: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(1)(12))(exactLength))("Incorrect 2-digit month"));
        };
        if (v instanceof DayOfMonthTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        day: v2,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(1)(31))(exactLength))("Incorrect day of month"));
        };
        if (v instanceof DayOfMonth) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        day: v2,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(validateRange(1)(31))("Incorrect day of month"));
        };
        if (v instanceof UnixTimestamp) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_Formatter_Internal.foldDigits(Data_List_Types.foldableList))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.stringLikeString))))(function (v1) {
                var v2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime)(Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds(1000.0 * Data_Int.toNumber(v1))));
                if (v2 instanceof Data_Maybe.Nothing) {
                    return Text_Parsing_Parser.fail(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))("Incorrect timestamp");
                };
                if (v2 instanceof Data_Maybe.Just) {
                    return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))({
                        year: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v2.value0.value0))),
                        month: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v2.value0.value0))),
                        day: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v2.value0.value0))),
                        hour: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v2.value0.value1))),
                        minute: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v2.value0.value1))),
                        second: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v2.value0.value1))),
                        millisecond: Data_Maybe.Just.create(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v2.value0.value1))),
                        meridiem: Data_Maybe.Nothing.value
                    }));
                };
                throw new Error("Failed pattern match at Data.Formatter.DateTime (line 362, column 5 - line 373, column 10): " + [ v2.constructor.name ]);
            });
        };
        if (v instanceof DayOfWeek) {
            return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(1)(validateRange(1)(7))("Incorrect day of week"));
        };
        if (v instanceof DayOfWeekName) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        day: v2,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_Enum.fromEnum(Data_Date_Component.boundedEnumWeekday))(parseDayOfWeekName(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
        };
        if (v instanceof DayOfWeekNameShort) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        day: v2,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.map(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Data_Enum.fromEnum(Data_Date_Component.boundedEnumWeekday))(parseDayOfWeekNameShort(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))));
        };
        if (v instanceof Hours24) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        hour: v2,
                        day: v1.day,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(0)(24))(exactLength))("Incorrect 24 hour"));
        };
        if (v instanceof Hours12) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        hour: v2,
                        day: v1.day,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(0)(12))(exactLength))("Incorrect 12 hour"));
        };
        if (v instanceof Meridiem) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        meridiem: v2,
                        day: v1.day,
                        hour: v1.hour,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(parseMeridiem(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)));
        };
        if (v instanceof MinutesTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        minute: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(0)(59))(exactLength))("Incorrect 2-digit minute"));
        };
        if (v instanceof Minutes) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        minute: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(validateRange(0)(59))("Incorrect minute"));
        };
        if (v instanceof SecondsTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        second: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(Data_Semigroup.append(Control_Monad_Reader_Trans.semigroupReaderT(Data_Either.applyEither)(Data_Semigroup.semigroupUnit))(validateRange(0)(59))(exactLength))("Incorrect 2-digit second"));
        };
        if (v instanceof Seconds) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        second: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        millisecond: v1.millisecond,
                        minute: v1.minute,
                        month: v1.month,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(validateRange(0)(59))("Incorrect second"));
        };
        if (v instanceof Milliseconds) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        millisecond: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(3)(exactLength)("Incorrect millisecond"));
        };
        if (v instanceof Placeholder) {
            return Data_Functor["void"](Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(v.value0));
        };
        if (v instanceof MillisecondsShort) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        millisecond: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(1)(exactLength)("Incorrect 1-digit millisecond"))(function (v1) {
                return v1 * 100 | 0;
            }));
        };
        if (v instanceof MillisecondsTwoDigits) {
            return modifyWithParser(function (v1) {
                return function (v2) {
                    return {
                        millisecond: v2,
                        day: v1.day,
                        hour: v1.hour,
                        meridiem: v1.meridiem,
                        minute: v1.minute,
                        month: v1.month,
                        second: v1.second,
                        year: v1.year
                    };
                };
            })(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))($$parseInt(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(2)(exactLength)("Incorrect 2-digit millisecond"))(function (v1) {
                return v1 * 10 | 0;
            }));
        };
        throw new Error("Failed pattern match at Data.Formatter.DateTime (line 341, column 25 - line 399, column 74): " + [ v.constructor.name ]);
    };
})();
var eqMeridiem = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof AM && y instanceof AM) {
            return true;
        };
        if (x instanceof PM && y instanceof PM) {
            return true;
        };
        return false;
    };
});
var eqFormatterCommand = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof YearFull && y instanceof YearFull) {
            return true;
        };
        if (x instanceof YearTwoDigits && y instanceof YearTwoDigits) {
            return true;
        };
        if (x instanceof YearAbsolute && y instanceof YearAbsolute) {
            return true;
        };
        if (x instanceof MonthFull && y instanceof MonthFull) {
            return true;
        };
        if (x instanceof MonthShort && y instanceof MonthShort) {
            return true;
        };
        if (x instanceof MonthTwoDigits && y instanceof MonthTwoDigits) {
            return true;
        };
        if (x instanceof DayOfMonthTwoDigits && y instanceof DayOfMonthTwoDigits) {
            return true;
        };
        if (x instanceof DayOfMonth && y instanceof DayOfMonth) {
            return true;
        };
        if (x instanceof UnixTimestamp && y instanceof UnixTimestamp) {
            return true;
        };
        if (x instanceof DayOfWeek && y instanceof DayOfWeek) {
            return true;
        };
        if (x instanceof DayOfWeekName && y instanceof DayOfWeekName) {
            return true;
        };
        if (x instanceof DayOfWeekNameShort && y instanceof DayOfWeekNameShort) {
            return true;
        };
        if (x instanceof Hours24 && y instanceof Hours24) {
            return true;
        };
        if (x instanceof Hours12 && y instanceof Hours12) {
            return true;
        };
        if (x instanceof Meridiem && y instanceof Meridiem) {
            return true;
        };
        if (x instanceof Minutes && y instanceof Minutes) {
            return true;
        };
        if (x instanceof MinutesTwoDigits && y instanceof MinutesTwoDigits) {
            return true;
        };
        if (x instanceof Seconds && y instanceof Seconds) {
            return true;
        };
        if (x instanceof SecondsTwoDigits && y instanceof SecondsTwoDigits) {
            return true;
        };
        if (x instanceof Milliseconds && y instanceof Milliseconds) {
            return true;
        };
        if (x instanceof MillisecondsShort && y instanceof MillisecondsShort) {
            return true;
        };
        if (x instanceof MillisecondsTwoDigits && y instanceof MillisecondsTwoDigits) {
            return true;
        };
        if (x instanceof Placeholder && y instanceof Placeholder) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var ordFormatterCommand = new Data_Ord.Ord(function () {
    return eqFormatterCommand;
}, function (x) {
    return function (y) {
        if (x instanceof YearFull && y instanceof YearFull) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof YearFull) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof YearFull) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof YearTwoDigits && y instanceof YearTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof YearTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof YearTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof YearAbsolute && y instanceof YearAbsolute) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof YearAbsolute) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof YearAbsolute) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MonthFull && y instanceof MonthFull) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MonthFull) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MonthFull) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MonthShort && y instanceof MonthShort) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MonthShort) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MonthShort) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MonthTwoDigits && y instanceof MonthTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MonthTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MonthTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DayOfMonthTwoDigits && y instanceof DayOfMonthTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DayOfMonthTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DayOfMonthTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DayOfMonth && y instanceof DayOfMonth) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DayOfMonth) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DayOfMonth) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof UnixTimestamp && y instanceof UnixTimestamp) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof UnixTimestamp) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof UnixTimestamp) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DayOfWeek && y instanceof DayOfWeek) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DayOfWeek) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DayOfWeek) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DayOfWeekName && y instanceof DayOfWeekName) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DayOfWeekName) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DayOfWeekName) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DayOfWeekNameShort && y instanceof DayOfWeekNameShort) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DayOfWeekNameShort) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DayOfWeekNameShort) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Hours24 && y instanceof Hours24) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Hours24) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Hours24) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Hours12 && y instanceof Hours12) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Hours12) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Hours12) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Meridiem && y instanceof Meridiem) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Meridiem) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Meridiem) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Minutes && y instanceof Minutes) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Minutes) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Minutes) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MinutesTwoDigits && y instanceof MinutesTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MinutesTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MinutesTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Seconds && y instanceof Seconds) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Seconds) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Seconds) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof SecondsTwoDigits && y instanceof SecondsTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof SecondsTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof SecondsTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Milliseconds && y instanceof Milliseconds) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Milliseconds) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Milliseconds) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MillisecondsShort && y instanceof MillisecondsShort) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MillisecondsShort) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MillisecondsShort) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MillisecondsTwoDigits && y instanceof MillisecondsTwoDigits) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MillisecondsTwoDigits) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MillisecondsTwoDigits) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Placeholder && y instanceof Placeholder) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at Data.Formatter.DateTime (line 76, column 8 - line 76, column 59): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var adjustMeridiem = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just && (v.value0 instanceof AM && v1 === 12)) {
            return 0;
        };
        if (v instanceof Data_Maybe.Just && (v.value0 instanceof PM && v1 === 12)) {
            return 12;
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof PM) {
            return v1 + 12 | 0;
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof AM) {
            return v1;
        };
        if (v instanceof Data_Maybe.Nothing && v1 === 24) {
            return 0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            return v1;
        };
        throw new Error("Failed pattern match at Data.Formatter.DateTime (line 279, column 1 - line 279, column 44): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var adjustDay = function (v) {
    return function (n) {
        if (v instanceof Data_Maybe.Just && v.value0 === 24) {
            return n + 1 | 0;
        };
        return n;
    };
};
var unformatAccumToDateTime = function (a) {
    return Control_Apply.applySecond(Data_Either.applyEither)(validAccum(a))(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_DateTime.DateTime.create)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Date.canonicalDate)(Data_Maybe.maybe(new Data_Either.Left("Incorrect year"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(Data_Maybe.fromMaybe(0)(a.year)))))(Data_Maybe.maybe(new Data_Either.Left("Incorrect month"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(Data_Maybe.fromMaybe(1)(a.month)))))(Data_Maybe.maybe(new Data_Either.Left("Incorrect day"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(adjustDay(a.hour)(Data_Maybe.fromMaybe(1)(a.day)))))))(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Time.Time.create)(Data_Maybe.maybe(new Data_Either.Left("Incorrect hour"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Maybe.fromMaybe(0)(Data_Functor.map(Data_Maybe.functorMaybe)(adjustMeridiem(a.meridiem))(a.hour))))))(Data_Maybe.maybe(new Data_Either.Left("Incorrect minute"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Maybe.fromMaybe(0)(a.minute)))))(Data_Maybe.maybe(new Data_Either.Left("Incorrect second"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Maybe.fromMaybe(0)(a.second)))))(Data_Maybe.maybe(new Data_Either.Left("Incorrect millisecond"))(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Maybe.fromMaybe(0)(a.millisecond))))));
};
var unformatParser = function (dictMonad) {
    return function (f) {
        var unState = function (dictMonad1) {
            return function (s) {
                var v = Control_Monad_State.runState(s)(initialAccum);
                return Control_Applicative.pure(dictMonad1.Applicative0())(new Data_Tuple.Tuple(Data_Functor.voidLeft(Data_Either.functorEither)(v.value0.value0)(v.value1), v.value0.value1));
            };
        };
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser.mapParserT(unState(dictMonad))(Data_Foldable.foldMap(Data_List_Types.foldableList)(Text_Parsing_Parser.monoidParserT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(Data_Monoid.monoidUnit))(unformatCommandParser)(f)))(function (v) {
            return Data_Either.either(Text_Parsing_Parser.fail(dictMonad))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(unformatAccumToDateTime(v));
        });
    };
};
var unformat = function ($451) {
    return Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(unformatParser(Data_Identity.monadIdentity)($451));
};
var unformatDateTime = function (pattern) {
    return function (str) {
        return Control_Bind.bind(Data_Either.bindEither)(parseFormatString(pattern))(function (v) {
            return unformat(v)(str);
        });
    };
};
module.exports = {
    YearFull: YearFull,
    YearTwoDigits: YearTwoDigits,
    YearAbsolute: YearAbsolute,
    MonthFull: MonthFull,
    MonthShort: MonthShort,
    MonthTwoDigits: MonthTwoDigits,
    DayOfMonthTwoDigits: DayOfMonthTwoDigits,
    DayOfMonth: DayOfMonth,
    UnixTimestamp: UnixTimestamp,
    DayOfWeek: DayOfWeek,
    DayOfWeekName: DayOfWeekName,
    DayOfWeekNameShort: DayOfWeekNameShort,
    Hours24: Hours24,
    Hours12: Hours12,
    Meridiem: Meridiem,
    Minutes: Minutes,
    MinutesTwoDigits: MinutesTwoDigits,
    Seconds: Seconds,
    SecondsTwoDigits: SecondsTwoDigits,
    Milliseconds: Milliseconds,
    MillisecondsShort: MillisecondsShort,
    MillisecondsTwoDigits: MillisecondsTwoDigits,
    Placeholder: Placeholder,
    printFormatter: printFormatter,
    printFormatterCommand: printFormatterCommand,
    parseFormatString: parseFormatString,
    format: format,
    formatDateTime: formatDateTime,
    unformat: unformat,
    unformatDateTime: unformatDateTime,
    unformatParser: unformatParser,
    eqFormatterCommand: eqFormatterCommand,
    ordFormatterCommand: ordFormatterCommand,
    genericFormatter: genericFormatter,
    showFormatter: showFormatter,
    eqMeridiem: eqMeridiem
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Lazy/index.js":41,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Reader.Trans/index.js":54,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.State.Trans/index.js":59,"../Control.Monad.State/index.js":60,"../Control.Monad.Trans.Class/index.js":61,"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Date.Component/index.js":120,"../Data.Date/index.js":122,"../Data.DateTime.Instant/index.js":124,"../Data.DateTime/index.js":126,"../Data.Either/index.js":129,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Foldable/index.js":138,"../Data.Formatter.Internal/index.js":142,"../Data.Formatter.Parser.Number/index.js":145,"../Data.Formatter.Parser.Utils/index.js":146,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Identity/index.js":166,"../Data.Int/index.js":168,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.CodeUnits/index.js":239,"../Data.Symbol/index.js":250,"../Data.Time.Component/index.js":252,"../Data.Time.Duration/index.js":253,"../Data.Time/index.js":254,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],142:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var repeat = function (dictMonoid) {
    var repeat$prime = function ($copy_accum) {
        return function ($copy_part) {
            return function ($copy_count) {
                var $tco_var_accum = $copy_accum;
                var $tco_var_part = $copy_part;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(accum, part, count) {
                    if (count < 1) {
                        $tco_done = true;
                        return accum;
                    };
                    $tco_var_accum = Data_Semigroup.append(dictMonoid.Semigroup0())(accum)(part);
                    $tco_var_part = part;
                    $copy_count = count - 1 | 0;
                    return;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_accum, $tco_var_part, $copy_count);
                };
                return $tco_result;
            };
        };
    };
    return repeat$prime(Data_Monoid.mempty(dictMonoid));
};
var foldDigits = function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(function (acc) {
        return function (d) {
            return (acc * 10 | 0) + d | 0;
        };
    })(0);
};
module.exports = {
    foldDigits: foldDigits,
    repeat: repeat
};

},{"../Data.Foldable/index.js":138,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230}],143:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Internal = require("../Data.Formatter.Internal/index.js");
var Data_Formatter_Parser_Number = require("../Data.Formatter.Parser.Number/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var $$Math = require("../Math/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var Formatter = function (x) {
    return x;
};
var unformatParser = function (v) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-"))))(function (v1) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
            if (v1 instanceof Data_Maybe.Nothing && v.sign) {
                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("+"))(1.0);
            };
            if (v1 instanceof Data_Maybe.Nothing && Data_Boolean.otherwise) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(1.0);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(-1.0);
            };
            throw new Error("Failed pattern match at Data.Formatter.Number (line 151, column 10 - line 157, column 18): " + [ v1.constructor.name ]);
        })())(function (v2) {
            var digitsWithCommas$prime = function (accum) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString)))(function (v3) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Array["null"](accum) && Data_Array.length(v3) > 3)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Wrong number of digits between thousand separators")))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Array.length(v3) !== 3)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Wrong number of digits between thousand separators")))(function () {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ ",", "." ]))(function (v4) {
                                if (v4 === ".") {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(accum)(v3));
                                };
                                if (v4 === ",") {
                                    return digitsWithCommas$prime(Data_Semigroup.append(Data_Semigroup.semigroupArray)(accum)(v3));
                                };
                                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Incorrect symbol, expected ',' or '.'");
                            });
                        });
                    });
                });
            };
            var digitsWithCommas = (function () {
                var $39 = !v.comma;
                if ($39) {
                    return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString)))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."));
                };
                return digitsWithCommas$prime([  ]);
            })();
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digitsWithCommas)(function (v3) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                    var $41 = Data_Array.length(v3) < v.before;
                    if ($41) {
                        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Error: too few digits before dot");
                    };
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Int.toNumber(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray)(v3)));
                })())(function (v4) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString)))(function (v5) {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                            var $44 = Data_Array.length(v5) < v.after;
                            if ($44) {
                                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Error: too few digits after dot");
                            };
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Int.toNumber(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray)(v5)));
                        })())(function (v6) {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))((function () {
                                if (v.abbreviations) {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "K", "M", "G", "T", "P", "E", "Z", "Y" ]))))(function (v7) {
                                        if (v7 instanceof Data_Maybe.Nothing) {
                                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("10e+")))(function (v8) {
                                                if (v8 instanceof Data_Maybe.Nothing) {
                                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                                                };
                                                if (v8 instanceof Data_Maybe.Just) {
                                                    return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Formatter_Parser_Number.parseDigit(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString)));
                                                };
                                                throw new Error("Failed pattern match at Data.Formatter.Number (line 202, column 11 - line 206, column 47): " + [ v8.constructor.name ]);
                                            });
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "K") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(3);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "M") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(6);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "G") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(9);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "T") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(12);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "P") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(15);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "E") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(18);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "Z") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(21);
                                        };
                                        if (v7 instanceof Data_Maybe.Just && v7.value0 === "Y") {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(24);
                                        };
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                                    });
                                };
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(0);
                            })())(function (v7) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))($$Math.pow(10.0)(Data_Int.toNumber(v7)) * v2 * (v4 + v6 / $$Math.pow(10.0)(Data_Int.toNumber(v.after))));
                            });
                        });
                    });
                });
            });
        });
    });
};
var unformat = function ($92) {
    return Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(unformatParser($92));
};
var printFormatter = function (v) {
    return (function () {
        if (v.sign) {
            return "+";
        };
        return "";
    })() + (Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.before - 1 | 0) + ((function () {
        if (v.comma) {
            return "0,0";
        };
        return "0";
    })() + ((function () {
        var $64 = v.after > 0;
        if ($64) {
            return ".";
        };
        return "";
    })() + (Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after) + (function () {
        if (v.abbreviations) {
            return "a";
        };
        return "";
    })()))));
};
var newtypeFormatter = new Data_Newtype.Newtype(function (n) {
    return n;
}, Formatter);
var genericFormatter = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showFormatter = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFormatter)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "abbreviations";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "after";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "before";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "comma";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "sign";
}))(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showBoolean))))(new Data_Symbol.IsSymbol(function () {
    return "Formatter";
}))));
var formatParser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("+"))))(function (v) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0")))(function (v1) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(",0"))))(function (v2) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))))(function (v3) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Traversable["for"](Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Traversable.traversableMaybe)(v3)(function (v4) {
                    return Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("0")));
                }))(function (v4) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("a"))))(function (v5) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                            sign: Data_Maybe.isJust(v),
                            before: Data_Array.length(v1),
                            comma: Data_Maybe.isJust(v2),
                            after: Data_Maybe.fromMaybe(0)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.length)(v4)),
                            abbreviations: Data_Maybe.isJust(v5)
                        });
                    });
                });
            });
        });
    });
});
var parseFormatString = Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(formatParser);
var unformatNumber = function (pattern) {
    return function (str) {
        return Control_Bind.bind(Data_Either.bindEither)(parseFormatString(pattern))(Data_Function.flip(unformat)(str));
    };
};
var format = function (v) {
    return function (num) {
        var absed = $$Math.abs(num);
        var tens = (function () {
            var $77 = absed > 0.0;
            if ($77) {
                return Data_Ord.max(Data_Ord.ordInt)(Data_Int.floor($$Math.log(absed) / $$Math.ln10))(0);
            };
            return 0;
        })();
        if (v.abbreviations) {
            var thousands = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(tens)(3);
            var newNum = (function () {
                var $79 = thousands < 1;
                if ($79) {
                    return num;
                };
                return num / $$Math.pow(1000.0)(Data_Int.toNumber(thousands));
            })();
            var abbr = (function () {
                if (thousands === 0) {
                    return "";
                };
                if (thousands === 1) {
                    return "K";
                };
                if (thousands === 2) {
                    return "M";
                };
                if (thousands === 3) {
                    return "G";
                };
                if (thousands === 4) {
                    return "T";
                };
                if (thousands === 5) {
                    return "P";
                };
                if (thousands === 6) {
                    return "E";
                };
                if (thousands === 7) {
                    return "Z";
                };
                if (thousands === 8) {
                    return "Y";
                };
                if (Data_Boolean.otherwise) {
                    return "10e+" + Data_Show.show(Data_Show.showInt)(thousands * 3 | 0);
                };
                throw new Error("Failed pattern match at Data.Formatter.Number (line 98, column 10 - line 107, column 59): " + [  ]);
            })();
            return format({
                comma: v.comma,
                before: v.before,
                after: v.after,
                abbreviations: false,
                sign: v.sign
            })(newNum) + abbr;
        };
        var zeros = (v.before - tens | 0) - 1 | 0;
        var integer = Data_Int.floor(absed);
        var leftover = absed - Data_Int.toNumber(integer);
        var rounded = Data_Int.round(leftover * $$Math.pow(10.0)(Data_Int.toNumber(v.after)));
        var roundedWithZeros = (function () {
            var roundedString = Data_Show.show(Data_Show.showInt)(rounded);
            var roundedLength = Data_String_CodePoints.length(roundedString);
            var zeros$prime = Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after - roundedLength | 0);
            return zeros$prime + roundedString;
        })();
        var addCommas = function ($copy_acc) {
            return function ($copy_counter) {
                return function ($copy_input) {
                    var $tco_var_acc = $copy_acc;
                    var $tco_var_counter = $copy_counter;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(acc, counter, input) {
                        var v1 = Data_Array.uncons(input);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_String_CodeUnits.fromCharArray(acc);
                        };
                        if (v1 instanceof Data_Maybe.Just && counter < 3) {
                            $tco_var_acc = Data_Array.cons(v1.value0.head)(acc);
                            $tco_var_counter = counter + 1 | 0;
                            $copy_input = v1.value0.tail;
                            return;
                        };
                        $tco_var_acc = Data_Array.cons(",")(acc);
                        $tco_var_counter = 0;
                        $copy_input = input;
                        return;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_acc, $tco_var_counter, $copy_input);
                    };
                    return $tco_result;
                };
            };
        };
        var shownNumber = (function () {
            if (v.comma) {
                return addCommas([  ])(0)(Data_Array.reverse(Data_String_CodeUnits.toCharArray(Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(zeros) + Data_Show.show(Data_Show.showInt)(integer))));
            };
            return Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(zeros) + Data_Show.show(Data_Show.showInt)(integer);
        })();
        return (function () {
            var $85 = num < 0;
            if ($85) {
                return "-";
            };
            var $86 = num > 0 && v.sign;
            if ($86) {
                return "+";
            };
            return "";
        })() + (shownNumber + (function () {
            var $87 = v.after < 1;
            if ($87) {
                return "";
            };
            return "." + ((function () {
                var $88 = rounded === 0;
                if ($88) {
                    return Data_Formatter_Internal.repeat(Data_Monoid.monoidString)("0")(v.after);
                };
                return "";
            })() + (function () {
                var $89 = rounded > 0;
                if ($89) {
                    return roundedWithZeros;
                };
                return "";
            })());
        })());
    };
};
var formatNumber = function (pattern) {
    return function (number) {
        return Data_Functor.mapFlipped(Data_Either.functorEither)(parseFormatString(pattern))(Data_Function.flip(format)(number));
    };
};
var formatOrShowNumber = function (patter) {
    return function (number) {
        return Data_Either.either(Data_Function["const"](Data_Show.show(Data_Show.showNumber)(number)))(Control_Category.identity(Control_Category.categoryFn))(formatNumber(patter)(number));
    };
};
var eqFormatter = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.abbreviations === y.abbreviations && x.after === y.after && x.before === y.before && x.comma === y.comma && x.sign === y.sign;
    };
});
module.exports = {
    Formatter: Formatter,
    printFormatter: printFormatter,
    parseFormatString: parseFormatString,
    format: format,
    unformat: unformat,
    formatNumber: formatNumber,
    formatOrShowNumber: formatOrShowNumber,
    unformatNumber: unformatNumber,
    genericFormatter: genericFormatter,
    newtypeFormatter: newtypeFormatter,
    showFormatter: showFormatter,
    eqFormatter: eqFormatter
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Foldable/index.js":138,"../Data.Formatter.Internal/index.js":142,"../Data.Formatter.Parser.Number/index.js":145,"../Data.Formatter.Parser.Utils/index.js":146,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Identity/index.js":166,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.CodeUnits/index.js":239,"../Data.Symbol/index.js":250,"../Data.Traversable/index.js":257,"../Math/index.js":369,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],144:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_DateTime = require("../Data.Formatter.DateTime/index.js");
var Data_Formatter_Parser_Number = require("../Data.Formatter.Parser.Number/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Interval = require("../Data.Interval/index.js");
var Data_Interval_Duration = require("../Data.Interval.Duration/index.js");
var Data_Interval_Duration_Iso = require("../Data.Interval.Duration.Iso/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var parseInterval = function (duration) {
    return function (date) {
        var startEnd = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Interval.StartEnd.create)(date))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/")))(date);
        var startDuration = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Interval.StartDuration.create)(date))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/")))(duration);
        var durationOnly = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Interval.DurationOnly.create)(duration);
        var durationEnd = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Interval.DurationEnd.create)(duration))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/")))(date);
        return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.mapFlipped(Data_Functor.functorArray)([ startEnd, durationEnd, startDuration, durationOnly ])(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)));
    };
};
var parseRecurringInterval = function (duration) {
    return function (date) {
        return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Interval.RecurringInterval.create)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("R"))(Data_Formatter_Parser_Number.parseMaybeInteger(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(parseInterval(duration)(date)));
    };
};
var failIfEmpty = function (dictMonoid) {
    return function (dictEq) {
        return function (p) {
            return function (str) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(p)(function (x) {
                    var $9 = Data_Eq.eq(dictEq)(x)(Data_Monoid.mempty(dictMonoid));
                    if ($9) {
                        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(str);
                    };
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
                });
            };
        };
    };
};
var mkComponentsParser = function (arr) {
    var foldFoldableMaybe = function (dictFoldable) {
        return function (dictMonoid) {
            return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.fold(Data_Foldable.foldableMaybe)(dictMonoid));
        };
    };
    var component = function (designator) {
        return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Formatter_Parser_Number.parseNumber(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.stringLikeString))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(designator));
    };
    var applyDurations = function (v) {
        return Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(v.value0)(component(v.value1))));
    };
    var p = Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Functor.mapFlipped(Data_Functor.functorArray)(arr)(applyDurations)))(foldFoldableMaybe(Data_Foldable.foldableArray)(Data_Interval_Duration.monoidDuration));
    return failIfEmpty(Data_Interval_Duration.monoidDuration)(Data_Interval_Duration.eqDuration)(p)("None of valid duration components (" + (Data_Show.show(Data_Show.showArray(Data_Show.showString))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(arr)) + ") were present"));
};
var parseDuration = (function () {
    var weekDuration = mkComponentsParser([ new Data_Tuple.Tuple(Data_Interval_Duration.week, "W") ]);
    var durationTimePart = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_Monoid.mempty(Data_Interval_Duration.monoidDuration))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("T")))(mkComponentsParser([ new Data_Tuple.Tuple(Data_Interval_Duration.hour, "H"), new Data_Tuple.Tuple(Data_Interval_Duration.minute, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.second, "S") ])));
    var durationDatePart = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_Monoid.mempty(Data_Interval_Duration.monoidDuration))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(mkComponentsParser([ new Data_Tuple.Tuple(Data_Interval_Duration.year, "Y"), new Data_Tuple.Tuple(Data_Interval_Duration.month, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.day, "D") ])));
    var fullDuration = failIfEmpty(Data_Interval_Duration.monoidDuration)(Data_Interval_Duration.eqDuration)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Interval_Duration.semigroupDuration))(durationDatePart))(durationTimePart))("Must contain valid duration components");
    return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("P"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(weekDuration)(fullDuration));
})();
var parseIsoDuration = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseDuration)(function (v) {
    var v1 = Data_Interval_Duration_Iso.mkIsoDuration(v);
    if (v1 instanceof Data_Either.Left) {
        var errorStr = Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Interval_Duration_Iso.prettyError)(v1.value0));
        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Extracted Duration is not valid ISO duration (" + (errorStr + ")"));
    };
    if (v1 instanceof Data_Either.Right) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1.value0);
    };
    throw new Error("Failed pattern match at Data.Formatter.Parser.Interval (line 42, column 3 - line 46, column 21): " + [ v1.constructor.name ]);
});
var extendedDateTimeFormatInUTC = Data_Either.fromRight()(Data_Formatter_DateTime.parseFormatString("YYYY-MM-DDTHH:mm:ssZ"));
var parseDateTime = function (dictMonad) {
    return Data_Formatter_DateTime.unformatParser(dictMonad)(extendedDateTimeFormatInUTC);
};
module.exports = {
    parseRecurringInterval: parseRecurringInterval,
    parseInterval: parseInterval,
    parseIsoDuration: parseIsoDuration,
    parseDateTime: parseDateTime,
    extendedDateTimeFormatInUTC: extendedDateTimeFormatInUTC
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Formatter.DateTime/index.js":141,"../Data.Formatter.Parser.Number/index.js":145,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Interval.Duration.Iso/index.js":169,"../Data.Interval.Duration/index.js":170,"../Data.Interval/index.js":171,"../Data.List.Types/index.js":192,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],145:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Internal = require("../Data.Formatter.Internal/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Global = require("../Global/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var parseDigit = function (dictMonad) {
    return function (dictStringLike) {
        return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Formatter_Parser_Utils.oneOfAs(Data_Functor.functorArray)(Data_Foldable.foldableArray)(dictMonad)(Text_Parsing_Parser_String["char"](dictStringLike)(dictMonad))([ new Data_Tuple.Tuple("0", 0), new Data_Tuple.Tuple("1", 1), new Data_Tuple.Tuple("2", 2), new Data_Tuple.Tuple("3", 3), new Data_Tuple.Tuple("4", 4), new Data_Tuple.Tuple("5", 5), new Data_Tuple.Tuple("6", 6), new Data_Tuple.Tuple("7", 7), new Data_Tuple.Tuple("8", 8), new Data_Tuple.Tuple("9", 9) ]));
    };
};
var parseFractional = function (dictMonad) {
    return function (dictStringLike) {
        return Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(parseDigit(dictMonad)(dictStringLike)))(function ($11) {
            return Global.readFloat((function (v) {
                return "0." + v;
            })(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Show.show(Data_Show.showInt))($11)));
        });
    };
};
var parseInteger = function (dictMonad) {
    return function (dictStringLike) {
        return Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(parseDigit(dictMonad)(dictStringLike)))(Data_Formatter_Internal.foldDigits(Data_Foldable.foldableArray));
    };
};
var parseMaybeInteger = function (dictMonad) {
    return function (dictStringLike) {
        return Text_Parsing_Parser_Combinators.optionMaybe(dictMonad)(parseInteger(dictMonad)(dictStringLike));
    };
};
var parseNumber = function (dictMonad) {
    return function (dictStringLike) {
        return Control_Apply.apply(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Semiring.add(Data_Semiring.semiringNumber))(Data_Functor.mapFlipped(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(parseInteger(dictMonad)(dictStringLike))(Data_Int.toNumber)))(Text_Parsing_Parser_Combinators.option(dictMonad)(0.0)(Text_Parsing_Parser_Combinators["try"](dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(dictStringLike)(dictMonad)([ ".", "," ]))(parseFractional(dictMonad)(dictStringLike)))));
    };
};
module.exports = {
    parseInteger: parseInteger,
    parseMaybeInteger: parseMaybeInteger,
    parseNumber: parseNumber,
    parseDigit: parseDigit
};

},{"../Control.Apply/index.js":31,"../Data.Array/index.js":98,"../Data.Foldable/index.js":138,"../Data.Formatter.Internal/index.js":142,"../Data.Formatter.Parser.Utils/index.js":146,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Monoid/index.js":206,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Tuple/index.js":260,"../Global/index.js":330,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],146:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Show = require("../Data.Show/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var printPosition = function (v) {
    return "(line " + (Data_Show.show(Data_Show.showInt)(v.line) + (", col " + (Data_Show.show(Data_Show.showInt)(v.column) + ")")));
};
var printError = function (err) {
    return Text_Parsing_Parser.parseErrorMessage(err) + (" " + printPosition(Text_Parsing_Parser.parseErrorPosition(err)));
};
var runP = function (dictStringLike) {
    return function (p) {
        return function (s) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(printError)(Text_Parsing_Parser.runParser(s)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(p)(Text_Parsing_Parser_String.eof(dictStringLike)(Data_Identity.monadIdentity))));
        };
    };
};
var oneOfAs = function (dictFunctor) {
    return function (dictFoldable) {
        return function (dictMonad) {
            return function (p) {
                return function (xs) {
                    return Text_Parsing_Parser_Combinators.choice(dictFoldable)(dictMonad)(Data_Functor.map(dictFunctor)(function (v) {
                        return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(p(v.value0))(v.value1);
                    })(xs));
                };
            };
        };
    };
};
module.exports = {
    oneOfAs: oneOfAs,
    runP: runP
};

},{"../Control.Apply/index.js":31,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Show/index.js":235,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],147:[function(require,module,exports){
"use strict";

// module Data.Function.Uncurried

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],148:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var runFn1 = function (f) {
    return f;
};
var mkFn1 = function (f) {
    return f;
};
module.exports = {
    mkFn1: mkFn1,
    runFn1: runFn1,
    mkFn0: $foreign.mkFn0,
    mkFn2: $foreign.mkFn2,
    mkFn3: $foreign.mkFn3,
    mkFn4: $foreign.mkFn4,
    mkFn5: $foreign.mkFn5,
    mkFn6: $foreign.mkFn6,
    mkFn7: $foreign.mkFn7,
    mkFn8: $foreign.mkFn8,
    mkFn9: $foreign.mkFn9,
    mkFn10: $foreign.mkFn10,
    runFn0: $foreign.runFn0,
    runFn2: $foreign.runFn2,
    runFn3: $foreign.runFn3,
    runFn4: $foreign.runFn4,
    runFn5: $foreign.runFn5,
    runFn6: $foreign.runFn6,
    runFn7: $foreign.runFn7,
    runFn8: $foreign.runFn8,
    runFn9: $foreign.runFn9,
    runFn10: $foreign.runFn10
};

},{"./foreign.js":147}],149:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var applyN = function (f) {
    var go = function ($copy_n) {
        return function ($copy_acc) {
            var $tco_var_n = $copy_n;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, acc) {
                if (n <= 0) {
                    $tco_done = true;
                    return acc;
                };
                if (Data_Boolean.otherwise) {
                    $tco_var_n = n - 1 | 0;
                    $copy_acc = f(acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [ n.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_n, $copy_acc);
            };
            return $tco_result;
        };
    };
    return go;
};
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};
var apply = function (f) {
    return function (x) {
        return f(x);
    };
};
module.exports = {
    flip: flip,
    "const": $$const,
    apply: apply,
    applyFlipped: applyFlipped,
    applyN: applyN,
    on: on
};

},{"../Data.Boolean/index.js":107}],150:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var App = function (x) {
    return x;
};
var traversableWithIndexApp = function (dictTraversableWithIndex) {
    return dictTraversableWithIndex;
};
var traversableApp = function (dictTraversable) {
    return dictTraversable;
};
var showApp = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(App " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupApp = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
            };
        });
    };
};
var plusApp = function (dictPlus) {
    return dictPlus;
};
var newtypeApp = new Data_Newtype.Newtype(function (n) {
    return n;
}, App);
var monoidApp = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
    };
};
var monadZeroApp = function (dictMonadZero) {
    return dictMonadZero;
};
var monadPlusApp = function (dictMonadPlus) {
    return dictMonadPlus;
};
var monadApp = function (dictMonad) {
    return dictMonad;
};
var lazyApp = function (dictLazy) {
    return dictLazy;
};
var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
var hoistApp = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWithIndexApp = function (dictFunctorWithIndex) {
    return dictFunctorWithIndex;
};
var functorApp = function (dictFunctor) {
    return dictFunctor;
};
var foldableWithIndexApp = function (dictFoldableWithIndex) {
    return dictFoldableWithIndex;
};
var foldableApp = function (dictFoldable) {
    return dictFoldable;
};
var extendApp = function (dictExtend) {
    return dictExtend;
};
var eqApp = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
            };
        });
    };
};
var ordApp = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
            };
        });
    };
};
var eq1App = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqApp(dictEq1)(dictEq));
    });
};
var ord1App = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1App(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
    });
};
var comonadApp = function (dictComonad) {
    return dictComonad;
};
var bindApp = function (dictBind) {
    return dictBind;
};
var applyApp = function (dictApply) {
    return dictApply;
};
var applicativeApp = function (dictApplicative) {
    return dictApplicative;
};
var alternativeApp = function (dictAlternative) {
    return dictAlternative;
};
var altApp = function (dictAlt) {
    return dictAlt;
};
module.exports = {
    App: App,
    hoistApp: hoistApp,
    hoistLiftApp: hoistLiftApp,
    hoistLowerApp: hoistLowerApp,
    newtypeApp: newtypeApp,
    eqApp: eqApp,
    eq1App: eq1App,
    ordApp: ordApp,
    ord1App: ord1App,
    showApp: showApp,
    semigroupApp: semigroupApp,
    monoidApp: monoidApp,
    functorApp: functorApp,
    functorWithIndexApp: functorWithIndexApp,
    applyApp: applyApp,
    applicativeApp: applicativeApp,
    bindApp: bindApp,
    monadApp: monadApp,
    altApp: altApp,
    plusApp: plusApp,
    alternativeApp: alternativeApp,
    monadZeroApp: monadZeroApp,
    monadPlusApp: monadPlusApp,
    lazyApp: lazyApp,
    foldableApp: foldableApp,
    traversableApp: traversableApp,
    foldableWithIndexApp: foldableWithIndexApp,
    traversableWithIndexApp: traversableWithIndexApp,
    extendApp: extendApp,
    comonadApp: comonadApp
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Data.Eq/index.js":133,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Unsafe.Coerce/index.js":405}],151:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Compose = function (x) {
    return x;
};
var showCompose = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var newtypeCompose = new Data_Newtype.Newtype(function (n) {
    return n;
}, Compose);
var functorCompose = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
            };
        });
    };
};
var functorWithIndexCompose = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return new Data_FunctorWithIndex.FunctorWithIndex(function () {
            return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
        }, function (f) {
            return function (v) {
                return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($100) {
                    return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(Data_Tuple.curry(f)($100));
                })(v));
            };
        });
    };
};
var foldableCompose = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
                };
            };
        });
    };
};
var foldableWithIndexCompose = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($101) {
                        return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(Data_Tuple.curry(f)($101));
                    })(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($102) {
                        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)($102));
                    })(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
                        return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                    })(i)(v);
                };
            };
        });
    };
};
var traversableCompose = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
        }, function () {
            return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
        }, function (dictApplicative) {
            return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
                };
            };
        });
    };
};
var traversableWithIndexCompose = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return new Data_TraversableWithIndex.TraversableWithIndex(function () {
            return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
        }, function () {
            return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
        }, function () {
            return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($103) {
                        return Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(Data_Tuple.curry(f)($103));
                    })(v));
                };
            };
        });
    };
};
var eqCompose = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (v) {
                return function (v1) {
                    return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var ordCompose = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, function (v) {
                return function (v1) {
                    return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var eq1Compose = function (dictEq1) {
    return function (dictEq11) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
        });
    };
};
var ord1Compose = function (dictOrd1) {
    return function (dictOrd11) {
        return new Data_Ord.Ord1(function () {
            return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
        });
    };
};
var bihoistCompose = function (dictFunctor) {
    return function (natF) {
        return function (natG) {
            return function (v) {
                return natF(Data_Functor.map(dictFunctor)(natG)(v));
            };
        };
    };
};
var applyCompose = function (dictApply) {
    return function (dictApply1) {
        return new Control_Apply.Apply(function () {
            return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
        }, function (v) {
            return function (v1) {
                return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
            };
        });
    };
};
var applicativeCompose = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Control_Applicative.Applicative(function () {
            return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
        }, function ($104) {
            return Compose(Control_Applicative.pure(dictApplicative)(Control_Applicative.pure(dictApplicative1)($104)));
        });
    };
};
var altCompose = function (dictAlt) {
    return function (dictFunctor) {
        return new Control_Alt.Alt(function () {
            return functorCompose(dictAlt.Functor0())(dictFunctor);
        }, function (v) {
            return function (v1) {
                return Compose(Control_Alt.alt(dictAlt)(v)(v1));
            };
        });
    };
};
var plusCompose = function (dictPlus) {
    return function (dictFunctor) {
        return new Control_Plus.Plus(function () {
            return altCompose(dictPlus.Alt0())(dictFunctor);
        }, Control_Plus.empty(dictPlus));
    };
};
var alternativeCompose = function (dictAlternative) {
    return function (dictApplicative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
        }, function () {
            return plusCompose(dictAlternative.Plus1())((dictApplicative.Apply0()).Functor0());
        });
    };
};
module.exports = {
    Compose: Compose,
    bihoistCompose: bihoistCompose,
    newtypeCompose: newtypeCompose,
    eqCompose: eqCompose,
    eq1Compose: eq1Compose,
    ordCompose: ordCompose,
    ord1Compose: ord1Compose,
    showCompose: showCompose,
    functorCompose: functorCompose,
    functorWithIndexCompose: functorWithIndexCompose,
    applyCompose: applyCompose,
    applicativeCompose: applicativeCompose,
    foldableCompose: foldableCompose,
    foldableWithIndexCompose: foldableWithIndexCompose,
    traversableCompose: traversableCompose,
    traversableWithIndexCompose: traversableWithIndexCompose,
    altCompose: altCompose,
    plusCompose: plusCompose,
    alternativeCompose: alternativeCompose
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor.App/index.js":150,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260}],152:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Void = require("../Data.Void/index.js");
var Contravariant = function (cmap) {
    this.cmap = cmap;
};
var cmap = function (dict) {
    return dict.cmap;
};
var cmapFlipped = function (dictContravariant) {
    return function (x) {
        return function (f) {
            return cmap(dictContravariant)(f)(x);
        };
    };
};
var coerce = function (dictContravariant) {
    return function (dictFunctor) {
        return function (a) {
            return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
    };
};
var imapC = function (dictContravariant) {
    return function (v) {
        return function (f) {
            return cmap(dictContravariant)(f);
        };
    };
};
module.exports = {
    cmap: cmap,
    Contravariant: Contravariant,
    cmapFlipped: cmapFlipped,
    coerce: coerce,
    imapC: imapC
};

},{"../Data.Functor/index.js":156,"../Data.Void/index.js":270}],153:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Invariant = function (imap) {
    this.imap = imap;
};
var invariantMultiplicative = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantEndo = new Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($31) {
                return ab(v(ba($31)));
            };
        };
    };
});
var invariantDual = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantDisj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantConj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantAdditive = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var imapF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    imap: imap,
    Invariant: Invariant,
    imapF: imapF,
    invariantFn: invariantFn,
    invariantArray: invariantArray,
    invariantAdditive: invariantAdditive,
    invariantConj: invariantConj,
    invariantDisj: invariantDisj,
    invariantDual: invariantDual,
    invariantEndo: invariantEndo,
    invariantMultiplicative: invariantMultiplicative
};

},{"../Data.Functor/index.js":156}],154:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var VariantFRep = function (x) {
    return x;
};
var UnvariantF = function (x) {
    return x;
};
var VariantFShows = function (variantFShows) {
    this.variantFShows = variantFShows;
};
var FoldableVFRL = function (foldMapVFRL, foldlVFRL, foldrVFRL) {
    this.foldMapVFRL = foldMapVFRL;
    this.foldlVFRL = foldlVFRL;
    this.foldrVFRL = foldrVFRL;
};
var TraversableVFRL = function (FoldableVFRL0, traverseVFRL) {
    this.FoldableVFRL0 = FoldableVFRL0;
    this.traverseVFRL = traverseVFRL;
};
var variantFShows = function (dict) {
    return dict.variantFShows;
};
var unvariantF = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictFunctor) {
                    return f(dictIsSymbol)(dictCons)(dictFunctor);
                };
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})({
            map: v.map
        })(Data_Symbol.SProxy.value)(v.value);
    };
};
var traverseVFRL = function (dict) {
    return dict.traverseVFRL;
};
var showVariantFNil = new VariantFShows(function (v) {
    return function (v1) {
        return Data_List_Types.Nil.value;
    };
});
var showVariantFCons = function (dictVariantFShows) {
    return function (dictTypeEquals) {
        return function (dictShow) {
            return function (dictShow1) {
                return new VariantFShows(function (v) {
                    return function (p) {
                        return new Data_List_Types.Cons(Data_Show.show(dictShow), variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(p));
                    };
                });
            };
        };
    };
};
var showVariantF = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantFShows) {
            return function (dictShow) {
                return new Data_Show.Show(function (v1) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var shows = variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(Type_Proxy["Proxy"].value);
                    var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                    return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
                });
            };
        };
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictAlternative) {
        return function (dictIsSymbol) {
            return function (p) {
                return on(dictCons)(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (p) {
                return function (value) {
                    return {
                        type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                        value: value,
                        map: Data_Functor.map(dictFunctor)
                    };
                };
            };
        };
    };
};
var revariantF = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return function (dictFunctor) {
                return inj(dictCons)(dictIsSymbol)(dictFunctor);
            };
        };
    });
};
var functorVariantF = new Data_Functor.Functor(function (f) {
    return function (a) {
        return {
            type: a.type,
            value: a.map(f)(a.value),
            map: a.map
        };
    };
});
var foldrVFRL = function (dict) {
    return dict.foldrVFRL;
};
var foldlVFRL = function (dict) {
    return dict.foldlVFRL;
};
var foldMapVFRL = function (dict) {
    return dict.foldMapVFRL;
};
var foldableCons = function (dictIsSymbol) {
    return function (dictFoldable) {
        return function (dictFoldableVFRL) {
            return function (dictCons) {
                return new FoldableVFRL(function (dictMonoid) {
                    return function (v) {
                        return function (f) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value)(f));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldl(dictFoldable)(f)(b))(foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldr(dictFoldable)(f)(b))(foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                });
            };
        };
    };
};
var foldableVariantF = function (dictRowToList) {
    return function (dictFoldableVFRL) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value);
        }, foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value), foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value));
    };
};
var traversableVariantF = function (dictRowToList) {
    return function (dictTraversableVFRL) {
        return new Data_Traversable.Traversable(function () {
            return foldableVariantF(dictRowToList)(dictTraversableVFRL.FoldableVFRL0());
        }, function () {
            return functorVariantF;
        }, function (dictApplicative) {
            return Data_Traversable.sequenceDefault(traversableVariantF(dictRowToList)(dictTraversableVFRL))(dictApplicative);
        }, function (dictApplicative) {
            return traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value);
        });
    };
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var traversableCons = function (dictIsSymbol) {
    return function (dictTraversable) {
        return function (dictTraversableVFRL) {
            return function (dictCons) {
                return function (dictUnion) {
                    return new TraversableVFRL(function () {
                        return foldableCons(dictIsSymbol)(dictTraversable.Foldable1())(dictTraversableVFRL.FoldableVFRL0())(dictCons);
                    }, function (dictApplicative) {
                        return function (v) {
                            return function (f) {
                                return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function ($86) {
                                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(inj(dictCons)(dictIsSymbol)(dictTraversable.Functor0())(Data_Symbol.SProxy.value))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)($86));
                                })(function ($87) {
                                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(expand(dictUnion))(traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value)(f)($87));
                                });
                            };
                        };
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
};
var foldableNil = new FoldableVFRL(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
});
var match = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch(dictRowToList)(dictVariantFMatchCases)(dictUnion)(r)(case_);
            };
        };
    };
};
var traversableNil = new TraversableVFRL(function () {
    return foldableNil;
}, function (dictApplicative) {
    return function (v) {
        return function (f) {
            return case_;
        };
    };
});
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    expand: expand,
    contract: contract,
    UnvariantF: UnvariantF,
    unvariantF: unvariantF,
    revariantF: revariantF,
    VariantFShows: VariantFShows,
    variantFShows: variantFShows,
    TraversableVFRL: TraversableVFRL,
    FoldableVFRL: FoldableVFRL,
    traverseVFRL: traverseVFRL,
    foldrVFRL: foldrVFRL,
    foldlVFRL: foldlVFRL,
    foldMapVFRL: foldMapVFRL,
    functorVariantF: functorVariantF,
    foldableNil: foldableNil,
    foldableCons: foldableCons,
    traversableNil: traversableNil,
    traversableCons: traversableCons,
    foldableVariantF: foldableVariantF,
    traversableVariantF: traversableVariantF,
    showVariantFNil: showVariantFNil,
    showVariantFCons: showVariantFCons,
    showVariantF: showVariantF
};

},{"../Control.Applicative/index.js":29,"../Control.Plus/index.js":70,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Data.Traversable/index.js":257,"../Data.Variant.Internal/index.js":268,"../Partial.Unsafe/index.js":378,"../Record.Unsafe/index.js":386,"../Type.Data.Row/index.js":400,"../Type.Data.RowList/index.js":401,"../Type.Proxy/index.js":403,"../Unsafe.Coerce/index.js":405}],155:[function(require,module,exports){
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

},{}],156:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var mapFlipped = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function (dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function (dictFunctor) {
    return function (f) {
        return function (x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function (dictFunctor) {
    return function (x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);
var flap = function (dictFunctor) {
    return function (ff) {
        return function (x) {
            return map(dictFunctor)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
module.exports = {
    Functor: Functor,
    map: map,
    mapFlipped: mapFlipped,
    "void": $$void,
    voidRight: voidRight,
    voidLeft: voidLeft,
    flap: flap,
    functorFn: functorFn,
    functorArray: functorArray
};

},{"../Control.Semigroupoid/index.js":71,"../Data.Function/index.js":149,"../Data.Unit/index.js":266,"./foreign.js":155}],157:[function(require,module,exports){
"use strict";

exports.mapWithIndexArray = function (f) {
  return function (xs) {
    var l = xs.length;
    var result = Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }
    return result;
  };
};

},{}],158:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var FunctorWithIndex = function (Functor0, mapWithIndex) {
    this.Functor0 = Functor0;
    this.mapWithIndex = mapWithIndex;
};
var mapWithIndex = function (dict) {
    return dict.mapWithIndex;
};
var mapDefault = function (dictFunctorWithIndex) {
    return function (f) {
        return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
    };
};
var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function () {
    return Data_Maybe.functorMaybe;
}, function (f) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function () {
    return Data_Maybe_Last.functorLast;
}, function (f) {
    return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function () {
    return Data_Maybe_First.functorFirst;
}, function (f) {
    return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function () {
    return Data_Monoid_Dual.functorDual;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function () {
    return Data_Monoid_Disj.functorDisj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function () {
    return Data_Monoid_Conj.functorConj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function () {
    return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
    FunctorWithIndex: FunctorWithIndex,
    mapWithIndex: mapWithIndex,
    mapDefault: mapDefault,
    functorWithIndexArray: functorWithIndexArray,
    functorWithIndexMaybe: functorWithIndexMaybe,
    functorWithIndexFirst: functorWithIndexFirst,
    functorWithIndexLast: functorWithIndexLast,
    functorWithIndexAdditive: functorWithIndexAdditive,
    functorWithIndexDual: functorWithIndexDual,
    functorWithIndexConj: functorWithIndexConj,
    functorWithIndexDisj: functorWithIndexDisj,
    functorWithIndexMultiplicative: functorWithIndexMultiplicative
};

},{"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe.First/index.js":195,"../Data.Maybe.Last/index.js":196,"../Data.Maybe/index.js":197,"../Data.Monoid.Additive/index.js":200,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Multiplicative/index.js":205,"../Data.Unit/index.js":266,"./foreign.js":157}],159:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var GenericTop = function (genericTop$prime) {
    this["genericTop'"] = genericTop$prime;
};
var GenericBottom = function (genericBottom$prime) {
    this["genericBottom'"] = genericBottom$prime;
};
var genericTopNoArguments = new GenericTop(Data_Generic_Rep.NoArguments.value);
var genericTopArgument = function (dictBounded) {
    return new GenericTop(Data_Bounded.top(dictBounded));
};
var genericTop$prime = function (dict) {
    return dict["genericTop'"];
};
var genericTopConstructor = function (dictGenericTop) {
    return new GenericTop(genericTop$prime(dictGenericTop));
};
var genericTopProduct = function (dictGenericTop) {
    return function (dictGenericTop1) {
        return new GenericTop(new Data_Generic_Rep.Product(genericTop$prime(dictGenericTop), genericTop$prime(dictGenericTop1)));
    };
};
var genericTopSum = function (dictGenericTop) {
    return new GenericTop(new Data_Generic_Rep.Inr(genericTop$prime(dictGenericTop)));
};
var genericTop = function (dictGeneric) {
    return function (dictGenericTop) {
        return Data_Generic_Rep.to(dictGeneric)(genericTop$prime(dictGenericTop));
    };
};
var genericBottomNoArguments = new GenericBottom(Data_Generic_Rep.NoArguments.value);
var genericBottomArgument = function (dictBounded) {
    return new GenericBottom(Data_Bounded.bottom(dictBounded));
};
var genericBottom$prime = function (dict) {
    return dict["genericBottom'"];
};
var genericBottomConstructor = function (dictGenericBottom) {
    return new GenericBottom(genericBottom$prime(dictGenericBottom));
};
var genericBottomProduct = function (dictGenericBottom) {
    return function (dictGenericBottom1) {
        return new GenericBottom(new Data_Generic_Rep.Product(genericBottom$prime(dictGenericBottom), genericBottom$prime(dictGenericBottom1)));
    };
};
var genericBottomSum = function (dictGenericBottom) {
    return new GenericBottom(new Data_Generic_Rep.Inl(genericBottom$prime(dictGenericBottom)));
};
var genericBottom = function (dictGeneric) {
    return function (dictGenericBottom) {
        return Data_Generic_Rep.to(dictGeneric)(genericBottom$prime(dictGenericBottom));
    };
};
module.exports = {
    GenericBottom: GenericBottom,
    "genericBottom'": genericBottom$prime,
    genericBottom: genericBottom,
    GenericTop: GenericTop,
    "genericTop'": genericTop$prime,
    genericTop: genericTop,
    genericBottomNoArguments: genericBottomNoArguments,
    genericBottomArgument: genericBottomArgument,
    genericBottomSum: genericBottomSum,
    genericBottomProduct: genericBottomProduct,
    genericBottomConstructor: genericBottomConstructor,
    genericTopNoArguments: genericTopNoArguments,
    genericTopArgument: genericTopArgument,
    genericTopSum: genericTopSum,
    genericTopProduct: genericTopProduct,
    genericTopConstructor: genericTopConstructor
};

},{"../Data.Bounded/index.js":110,"../Data.Generic.Rep/index.js":162}],160:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Bounded = require("../Data.Generic.Rep.Bounded/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var GenericEnum = function (genericPred$prime, genericSucc$prime) {
    this["genericPred'"] = genericPred$prime;
    this["genericSucc'"] = genericSucc$prime;
};
var GenericBoundedEnum = function (genericCardinality$prime, genericFromEnum$prime, genericToEnum$prime) {
    this["genericCardinality'"] = genericCardinality$prime;
    this["genericFromEnum'"] = genericFromEnum$prime;
    this["genericToEnum'"] = genericToEnum$prime;
};
var genericToEnum$prime = function (dict) {
    return dict["genericToEnum'"];
};
var genericToEnum = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return function ($90) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericToEnum$prime(dictGenericBoundedEnum)($90));
        };
    };
};
var genericSucc$prime = function (dict) {
    return dict["genericSucc'"];
};
var genericSucc = function (dictGeneric) {
    return function (dictGenericEnum) {
        return function ($91) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericSucc$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($91)));
        };
    };
};
var genericPred$prime = function (dict) {
    return dict["genericPred'"];
};
var genericPred = function (dictGeneric) {
    return function (dictGenericEnum) {
        return function ($92) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericPred$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($92)));
        };
    };
};
var genericFromEnum$prime = function (dict) {
    return dict["genericFromEnum'"];
};
var genericFromEnum = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return function ($93) {
            return genericFromEnum$prime(dictGenericBoundedEnum)(Data_Generic_Rep.from(dictGeneric)($93));
        };
    };
};
var genericEnumSum = function (dictGenericEnum) {
    return function (dictGenericTop) {
        return function (dictGenericEnum1) {
            return function (dictGenericBottom) {
                return new GenericEnum(function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericPred$prime(dictGenericEnum)(v.value0));
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        var v1 = genericPred$prime(dictGenericEnum1)(v.value0);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inl(Data_Generic_Rep_Bounded["genericTop'"](dictGenericTop)));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inr(v1.value0));
                        };
                        throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 30, column 14 - line 32, column 31): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 28, column 18 - line 32, column 31): " + [ v.constructor.name ]);
                }, function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        var v1 = genericSucc$prime(dictGenericEnum)(v.value0);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inr(Data_Generic_Rep_Bounded["genericBottom'"](dictGenericBottom)));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(new Data_Generic_Rep.Inl(v1.value0));
                        };
                        throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 34, column 14 - line 36, column 31): " + [ v1.constructor.name ]);
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericSucc$prime(dictGenericEnum1)(v.value0));
                    };
                    throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 33, column 18 - line 37, column 36): " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var genericEnumProduct = function (dictGenericEnum) {
    return function (dictGenericTop) {
        return function (dictGenericBottom) {
            return function (dictGenericEnum1) {
                return function (dictGenericTop1) {
                    return function (dictGenericBottom1) {
                        return new GenericEnum(function (v) {
                            var v1 = genericPred$prime(dictGenericEnum1)(v.value1);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Data_Maybe.Just.create(new Data_Generic_Rep.Product(v.value0, v1.value0));
                            };
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Generic_Rep.Product.create)(Data_Generic_Rep_Bounded["genericTop'"](dictGenericTop1)))(genericPred$prime(dictGenericEnum)(v.value0));
                            };
                            throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 40, column 32 - line 42, column 59): " + [ v1.constructor.name ]);
                        }, function (v) {
                            var v1 = genericSucc$prime(dictGenericEnum1)(v.value1);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Data_Maybe.Just.create(new Data_Generic_Rep.Product(v.value0, v1.value0));
                            };
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Generic_Rep.Product.create)(Data_Generic_Rep_Bounded["genericBottom'"](dictGenericBottom1)))(genericSucc$prime(dictGenericEnum)(v.value0));
                            };
                            throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 43, column 32 - line 45, column 62): " + [ v1.constructor.name ]);
                        });
                    };
                };
            };
        };
    };
};
var genericEnumNoArguments = new GenericEnum(function (v) {
    return Data_Maybe.Nothing.value;
}, function (v) {
    return Data_Maybe.Nothing.value;
});
var genericEnumConstructor = function (dictGenericEnum) {
    return new GenericEnum(function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericPred$prime(dictGenericEnum)(v));
    }, function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericSucc$prime(dictGenericEnum)(v));
    });
};
var genericEnumArgument = function (dictEnum) {
    return new GenericEnum(function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.pred(dictEnum)(v));
    }, function (v) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.succ(dictEnum)(v));
    });
};
var genericCardinality$prime = function (dict) {
    return dict["genericCardinality'"];
};
var genericCardinality = function (dictGeneric) {
    return function (dictGenericBoundedEnum) {
        return Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum));
    };
};
var genericBoundedEnumSum = function (dictGenericBoundedEnum) {
    return function (dictGenericBoundedEnum1) {
        return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)) + Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), function (v) {
            if (v instanceof Data_Generic_Rep.Inl) {
                return genericFromEnum$prime(dictGenericBoundedEnum)(v.value0);
            };
            if (v instanceof Data_Generic_Rep.Inr) {
                return genericFromEnum$prime(dictGenericBoundedEnum1)(v.value0) + Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)) | 0;
            };
            throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 87, column 22 - line 89, column 80): " + [ v.constructor.name ]);
        }, function (n) {
            var to = function (v) {
                if (n >= 0 && n < v) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericToEnum$prime(dictGenericBoundedEnum)(n));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericToEnum$prime(dictGenericBoundedEnum1)(n - v | 0));
                };
                throw new Error("Failed pattern match at Data.Generic.Rep.Enum (line 83, column 5 - line 83, column 43): " + [ v.constructor.name ]);
            };
            return to(genericCardinality$prime(dictGenericBoundedEnum));
        });
    };
};
var genericBoundedEnumProduct = function (dictGenericBoundedEnum) {
    return function (dictGenericBoundedEnum1) {
        return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)) * Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), (function () {
            var from = function (v) {
                return function (v1) {
                    return (genericFromEnum$prime(dictGenericBoundedEnum)(v1.value0) * v | 0) + genericFromEnum$prime(dictGenericBoundedEnum1)(v1.value1) | 0;
                };
            };
            return from(genericCardinality$prime(dictGenericBoundedEnum1));
        })(), function (n) {
            var to = function (v) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Product.create)(genericToEnum$prime(dictGenericBoundedEnum)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(n)(v))))(genericToEnum$prime(dictGenericBoundedEnum1)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(n)(v)));
            };
            return to(genericCardinality$prime(dictGenericBoundedEnum1));
        });
    };
};
var genericBoundedEnumNoArguments = new GenericBoundedEnum(1, function (v) {
    return 0;
}, function (i) {
    var $87 = i === 0;
    if ($87) {
        return new Data_Maybe.Just(Data_Generic_Rep.NoArguments.value);
    };
    return Data_Maybe.Nothing.value;
});
var genericBoundedEnumConstructor = function (dictGenericBoundedEnum) {
    return new GenericBoundedEnum(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(genericCardinality$prime(dictGenericBoundedEnum)), function (v) {
        return genericFromEnum$prime(dictGenericBoundedEnum)(v);
    }, function (i) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericToEnum$prime(dictGenericBoundedEnum)(i));
    });
};
var genericBoundedEnumArgument = function (dictBoundedEnum) {
    return new GenericBoundedEnum(Data_Newtype.unwrap(Data_Enum.newtypeCardinality)(Data_Enum.cardinality(dictBoundedEnum)), function (v) {
        return Data_Enum.fromEnum(dictBoundedEnum)(v);
    }, function (i) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Argument)(Data_Enum.toEnum(dictBoundedEnum)(i));
    });
};
module.exports = {
    "genericCardinality'": genericCardinality$prime,
    "genericFromEnum'": genericFromEnum$prime,
    "genericPred'": genericPred$prime,
    "genericSucc'": genericSucc$prime,
    "genericToEnum'": genericToEnum$prime,
    GenericEnum: GenericEnum,
    genericPred: genericPred,
    genericSucc: genericSucc,
    GenericBoundedEnum: GenericBoundedEnum,
    genericCardinality: genericCardinality,
    genericToEnum: genericToEnum,
    genericFromEnum: genericFromEnum,
    genericEnumNoArguments: genericEnumNoArguments,
    genericEnumArgument: genericEnumArgument,
    genericEnumConstructor: genericEnumConstructor,
    genericEnumSum: genericEnumSum,
    genericEnumProduct: genericEnumProduct,
    genericBoundedEnumNoArguments: genericBoundedEnumNoArguments,
    genericBoundedEnumArgument: genericBoundedEnumArgument,
    genericBoundedEnumConstructor: genericBoundedEnumConstructor,
    genericBoundedEnumSum: genericBoundedEnumSum,
    genericBoundedEnumProduct: genericBoundedEnumProduct
};

},{"../Control.Apply/index.js":31,"../Data.Boolean/index.js":107,"../Data.Enum/index.js":131,"../Data.EuclideanRing/index.js":135,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Bounded/index.js":159,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207}],161:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var GenericShowArgs = function (genericShowArgs) {
    this.genericShowArgs = genericShowArgs;
};
var GenericShow = function (genericShow$prime) {
    this["genericShow'"] = genericShow$prime;
};
var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
    return [  ];
});
var genericShowArgsArgument = function (dictShow) {
    return new GenericShowArgs(function (v) {
        return [ Data_Show.show(dictShow)(v) ];
    });
};
var genericShowArgs = function (dict) {
    return dict.genericShowArgs;
};
var genericShowArgsProduct = function (dictGenericShowArgs) {
    return function (dictGenericShowArgs1) {
        return new GenericShowArgs(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
        });
    };
};
var genericShowConstructor = function (dictGenericShowArgs) {
    return function (dictIsSymbol) {
        return new GenericShow(function (v) {
            var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var v1 = genericShowArgs(dictGenericShowArgs)(v);
            if (v1.length === 0) {
                return ctor;
            };
            return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
        });
    };
};
var genericShow$prime = function (dict) {
    return dict["genericShow'"];
};
var genericShowNoConstructors = new GenericShow(function (a) {
    return genericShow$prime(genericShowNoConstructors)(a);
});
var genericShowSum = function (dictGenericShow) {
    return function (dictGenericShow1) {
        return new GenericShow(function (v) {
            if (v instanceof Data_Generic_Rep.Inl) {
                return genericShow$prime(dictGenericShow)(v.value0);
            };
            if (v instanceof Data_Generic_Rep.Inr) {
                return genericShow$prime(dictGenericShow1)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 26, column 83): " + [ v.constructor.name ]);
        });
    };
};
var genericShow = function (dictGeneric) {
    return function (dictGenericShow) {
        return function (x) {
            return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
        };
    };
};
module.exports = {
    GenericShow: GenericShow,
    "genericShow'": genericShow$prime,
    genericShow: genericShow,
    GenericShowArgs: GenericShowArgs,
    genericShowArgs: genericShowArgs,
    genericShowNoConstructors: genericShowNoConstructors,
    genericShowArgsNoArguments: genericShowArgsNoArguments,
    genericShowSum: genericShowSum,
    genericShowArgsProduct: genericShowArgsProduct,
    genericShowConstructor: genericShowConstructor,
    genericShowArgsArgument: genericShowArgsArgument
};

},{"../Data.Foldable/index.js":138,"../Data.Generic.Rep/index.js":162,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250}],162:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Inl = (function () {
    function Inl(value0) {
        this.value0 = value0;
    };
    Inl.create = function (value0) {
        return new Inl(value0);
    };
    return Inl;
})();
var Inr = (function () {
    function Inr(value0) {
        this.value0 = value0;
    };
    Inr.create = function (value0) {
        return new Inr(value0);
    };
    return Inr;
})();
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var NoArguments = (function () {
    function NoArguments() {

    };
    NoArguments.value = new NoArguments();
    return NoArguments;
})();
var Constructor = function (x) {
    return x;
};
var Argument = function (x) {
    return x;
};
var Generic = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var genericMaybe = new Generic(function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return new Inl(NoArguments.value);
    };
    if (v instanceof Data_Maybe.Just) {
        return new Inr(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 42, column 63): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Inl) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Inr) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 42, column 63): " + [ v.constructor.name ]);
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    Generic: Generic,
    to: to,
    from: from,
    NoArguments: NoArguments,
    Inl: Inl,
    Inr: Inr,
    Product: Product,
    Constructor: Constructor,
    Argument: Argument,
    genericMaybe: genericMaybe
};

},{"../Data.Maybe/index.js":197}],163:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var OPTIONS = (function () {
    function OPTIONS() {

    };
    OPTIONS.value = new OPTIONS();
    return OPTIONS;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var HEAD = (function () {
    function HEAD() {

    };
    HEAD.value = new HEAD();
    return HEAD;
})();
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var PUT = (function () {
    function PUT() {

    };
    PUT.value = new PUT();
    return PUT;
})();
var DELETE = (function () {
    function DELETE() {

    };
    DELETE.value = new DELETE();
    return DELETE;
})();
var TRACE = (function () {
    function TRACE() {

    };
    TRACE.value = new TRACE();
    return TRACE;
})();
var CONNECT = (function () {
    function CONNECT() {

    };
    CONNECT.value = new CONNECT();
    return CONNECT;
})();
var PROPFIND = (function () {
    function PROPFIND() {

    };
    PROPFIND.value = new PROPFIND();
    return PROPFIND;
})();
var PROPPATCH = (function () {
    function PROPPATCH() {

    };
    PROPPATCH.value = new PROPPATCH();
    return PROPPATCH;
})();
var MKCOL = (function () {
    function MKCOL() {

    };
    MKCOL.value = new MKCOL();
    return MKCOL;
})();
var COPY = (function () {
    function COPY() {

    };
    COPY.value = new COPY();
    return COPY;
})();
var MOVE = (function () {
    function MOVE() {

    };
    MOVE.value = new MOVE();
    return MOVE;
})();
var LOCK = (function () {
    function LOCK() {

    };
    LOCK.value = new LOCK();
    return LOCK;
})();
var UNLOCK = (function () {
    function UNLOCK() {

    };
    UNLOCK.value = new UNLOCK();
    return UNLOCK;
})();
var PATCH = (function () {
    function PATCH() {

    };
    PATCH.value = new PATCH();
    return PATCH;
})();
var CustomMethod = function (x) {
    return x;
};
var unCustomMethod = function (v) {
    return v;
};
var showMethod = new Data_Show.Show(function (v) {
    if (v instanceof OPTIONS) {
        return "OPTIONS";
    };
    if (v instanceof GET) {
        return "GET";
    };
    if (v instanceof HEAD) {
        return "HEAD";
    };
    if (v instanceof POST) {
        return "POST";
    };
    if (v instanceof PUT) {
        return "PUT";
    };
    if (v instanceof DELETE) {
        return "DELETE";
    };
    if (v instanceof TRACE) {
        return "TRACE";
    };
    if (v instanceof CONNECT) {
        return "CONNECT";
    };
    if (v instanceof PROPFIND) {
        return "PROPFIND";
    };
    if (v instanceof PROPPATCH) {
        return "PROPPATCH";
    };
    if (v instanceof MKCOL) {
        return "MKCOL";
    };
    if (v instanceof COPY) {
        return "COPY";
    };
    if (v instanceof MOVE) {
        return "MOVE";
    };
    if (v instanceof LOCK) {
        return "LOCK";
    };
    if (v instanceof UNLOCK) {
        return "UNLOCK";
    };
    if (v instanceof PATCH) {
        return "PATCH";
    };
    throw new Error("Failed pattern match at Data.HTTP.Method (line 40, column 1 - line 40, column 35): " + [ v.constructor.name ]);
});
var showCustomMethod = new Data_Show.Show(function (v) {
    return "(CustomMethod " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
var fromString = function (s) {
    var v = Data_String_Common.toUpper(s);
    if (v === "OPTIONS") {
        return new Data_Either.Left(OPTIONS.value);
    };
    if (v === "GET") {
        return new Data_Either.Left(GET.value);
    };
    if (v === "HEAD") {
        return new Data_Either.Left(HEAD.value);
    };
    if (v === "POST") {
        return new Data_Either.Left(POST.value);
    };
    if (v === "PUT") {
        return new Data_Either.Left(PUT.value);
    };
    if (v === "DELETE") {
        return new Data_Either.Left(DELETE.value);
    };
    if (v === "TRACE") {
        return new Data_Either.Left(TRACE.value);
    };
    if (v === "CONNECT") {
        return new Data_Either.Left(CONNECT.value);
    };
    if (v === "PROPFIND") {
        return new Data_Either.Left(PROPFIND.value);
    };
    if (v === "PROPPATCH") {
        return new Data_Either.Left(PROPPATCH.value);
    };
    if (v === "MKCOL") {
        return new Data_Either.Left(MKCOL.value);
    };
    if (v === "COPY") {
        return new Data_Either.Left(COPY.value);
    };
    if (v === "MOVE") {
        return new Data_Either.Left(MOVE.value);
    };
    if (v === "LOCK") {
        return new Data_Either.Left(LOCK.value);
    };
    if (v === "UNLOCK") {
        return new Data_Either.Left(UNLOCK.value);
    };
    if (v === "PATCH") {
        return new Data_Either.Left(PATCH.value);
    };
    return new Data_Either.Right(v);
};
var eqMethod = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof OPTIONS && y instanceof OPTIONS) {
            return true;
        };
        if (x instanceof GET && y instanceof GET) {
            return true;
        };
        if (x instanceof HEAD && y instanceof HEAD) {
            return true;
        };
        if (x instanceof POST && y instanceof POST) {
            return true;
        };
        if (x instanceof PUT && y instanceof PUT) {
            return true;
        };
        if (x instanceof DELETE && y instanceof DELETE) {
            return true;
        };
        if (x instanceof TRACE && y instanceof TRACE) {
            return true;
        };
        if (x instanceof CONNECT && y instanceof CONNECT) {
            return true;
        };
        if (x instanceof PROPFIND && y instanceof PROPFIND) {
            return true;
        };
        if (x instanceof PROPPATCH && y instanceof PROPPATCH) {
            return true;
        };
        if (x instanceof MKCOL && y instanceof MKCOL) {
            return true;
        };
        if (x instanceof COPY && y instanceof COPY) {
            return true;
        };
        if (x instanceof MOVE && y instanceof MOVE) {
            return true;
        };
        if (x instanceof LOCK && y instanceof LOCK) {
            return true;
        };
        if (x instanceof UNLOCK && y instanceof UNLOCK) {
            return true;
        };
        if (x instanceof PATCH && y instanceof PATCH) {
            return true;
        };
        return false;
    };
});
var ordMethod = new Data_Ord.Ord(function () {
    return eqMethod;
}, function (x) {
    return function (y) {
        if (x instanceof OPTIONS && y instanceof OPTIONS) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof OPTIONS) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof OPTIONS) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof GET && y instanceof GET) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof GET) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof GET) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof HEAD && y instanceof HEAD) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof HEAD) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof HEAD) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof POST && y instanceof POST) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof POST) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof POST) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PUT && y instanceof PUT) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof PUT) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof PUT) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof DELETE && y instanceof DELETE) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof DELETE) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof DELETE) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof TRACE && y instanceof TRACE) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof TRACE) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TRACE) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof CONNECT && y instanceof CONNECT) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof CONNECT) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof CONNECT) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PROPFIND && y instanceof PROPFIND) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof PROPFIND) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof PROPFIND) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PROPPATCH && y instanceof PROPPATCH) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof PROPPATCH) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof PROPPATCH) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MKCOL && y instanceof MKCOL) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MKCOL) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MKCOL) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof COPY && y instanceof COPY) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof COPY) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof COPY) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MOVE && y instanceof MOVE) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MOVE) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MOVE) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof LOCK && y instanceof LOCK) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof LOCK) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof LOCK) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof UNLOCK && y instanceof UNLOCK) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof UNLOCK) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof UNLOCK) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PATCH && y instanceof PATCH) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.HTTP.Method (line 38, column 8 - line 38, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqCustomMethod = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordCustomMethod = new Data_Ord.Ord(function () {
    return eqCustomMethod;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    OPTIONS: OPTIONS,
    GET: GET,
    HEAD: HEAD,
    POST: POST,
    PUT: PUT,
    DELETE: DELETE,
    TRACE: TRACE,
    CONNECT: CONNECT,
    PROPFIND: PROPFIND,
    PROPPATCH: PROPPATCH,
    MKCOL: MKCOL,
    COPY: COPY,
    MOVE: MOVE,
    LOCK: LOCK,
    UNLOCK: UNLOCK,
    PATCH: PATCH,
    unCustomMethod: unCustomMethod,
    fromString: fromString,
    print: print,
    eqMethod: eqMethod,
    ordMethod: ordMethod,
    showMethod: showMethod,
    eqCustomMethod: eqCustomMethod,
    ordCustomMethod: ordCustomMethod,
    showCustomMethod: showCustomMethod
};

},{"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.String.Common/index.js":241}],164:[function(require,module,exports){
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

},{}],165:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
    this.conjRecord = conjRecord;
    this.disjRecord = disjRecord;
    this.ffRecord = ffRecord;
    this.impliesRecord = impliesRecord;
    this.notRecord = notRecord;
    this.ttRecord = ttRecord;
};
var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};
var ttRecord = function (dict) {
    return dict.ttRecord;
};
var tt = function (dict) {
    return dict.tt;
};
var notRecord = function (dict) {
    return dict.notRecord;
};
var not = function (dict) {
    return dict.not;
};
var impliesRecord = function (dict) {
    return dict.impliesRecord;
};
var implies = function (dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var ffRecord = function (dict) {
    return dict.ffRecord;
};
var ff = function (dict) {
    return dict.ff;
};
var disjRecord = function (dict) {
    return dict.disjRecord;
};
var disj = function (dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
var conjRecord = function (dict) {
    return dict.conjRecord;
};
var heytingAlgebraRecord = function (dictRowToList) {
    return function (dictHeytingAlgebraRecord) {
        return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var conj = function (dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function (dictHeytingAlgebra) {
    return new HeytingAlgebra(function (f) {
        return function (g) {
            return function (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (g) {
            return function (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (v) {
        return ff(dictHeytingAlgebra);
    }, function (f) {
        return function (g) {
            return function (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function (v) {
        return tt(dictHeytingAlgebra);
    });
};
var heytingAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictHeytingAlgebraRecord) {
            return function (dictHeytingAlgebra) {
                return new HeytingAlgebraRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(ff(dictHeytingAlgebra))(tail);
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        var get = Record_Unsafe.unsafeGet(key);
                        return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(tt(dictHeytingAlgebra))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra,
    tt: tt,
    ff: ff,
    implies: implies,
    conj: conj,
    disj: disj,
    not: not,
    HeytingAlgebraRecord: HeytingAlgebraRecord,
    ffRecord: ffRecord,
    ttRecord: ttRecord,
    impliesRecord: impliesRecord,
    conjRecord: conjRecord,
    disjRecord: disjRecord,
    notRecord: notRecord,
    heytingAlgebraBoolean: heytingAlgebraBoolean,
    heytingAlgebraUnit: heytingAlgebraUnit,
    heytingAlgebraFunction: heytingAlgebraFunction,
    heytingAlgebraRecord: heytingAlgebraRecord,
    heytingAlgebraRecordNil: heytingAlgebraRecordNil,
    heytingAlgebraRecordCons: heytingAlgebraRecordCons
};

},{"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Record.Unsafe/index.js":386,"../Type.Data.Row/index.js":400,"../Type.Data.RowList/index.js":401,"./foreign.js":164}],166:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Identity = function (x) {
    return x;
};
var showIdentity = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringIdentity = function (dictSemiring) {
    return dictSemiring;
};
var semigroupIdenity = function (dictSemigroup) {
    return dictSemigroup;
};
var ringIdentity = function (dictRing) {
    return dictRing;
};
var ordIdentity = function (dictOrd) {
    return dictOrd;
};
var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
    return n;
}, Identity);
var monoidIdentity = function (dictMonoid) {
    return dictMonoid;
};
var lazyIdentity = function (dictLazy) {
    return dictLazy;
};
var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorIdentity = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorIdentity;
}, function (f) {
    return function (v) {
        return f(Data_Unit.unit)(v);
    };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableIdentity;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
        };
    };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexIdentity;
}, function () {
    return functorWithIndexIdentity;
}, function () {
    return traversableIdentity;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(Data_Unit.unit)(v));
        };
    };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableIdentity;
}, function (dictSemigroup) {
    return function (v) {
        return v;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Identity;
}, function () {
    return traversableIdentity;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Identity)(v);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function () {
    return functorIdentity;
}, function (f) {
    return function (m) {
        return f(m);
    };
});
var euclideanRingIdentity = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqIdentity = function (dictEq) {
    return dictEq;
};
var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
    return eq1Identity;
}, function (dictOrd) {
    return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (v) {
    return v;
});
var commutativeRingIdentity = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedIdentity = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var applyIdentity = new Control_Apply.Apply(function () {
    return functorIdentity;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindIdentity = new Control_Bind.Bind(function () {
    return applyIdentity;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
    return functorIdentity;
}, function (x) {
    return function (v) {
        return x;
    };
});
module.exports = {
    Identity: Identity,
    newtypeIdentity: newtypeIdentity,
    eqIdentity: eqIdentity,
    ordIdentity: ordIdentity,
    boundedIdentity: boundedIdentity,
    heytingAlgebraIdentity: heytingAlgebraIdentity,
    booleanAlgebraIdentity: booleanAlgebraIdentity,
    semigroupIdenity: semigroupIdenity,
    monoidIdentity: monoidIdentity,
    semiringIdentity: semiringIdentity,
    euclideanRingIdentity: euclideanRingIdentity,
    ringIdentity: ringIdentity,
    commutativeRingIdentity: commutativeRingIdentity,
    lazyIdentity: lazyIdentity,
    showIdentity: showIdentity,
    eq1Identity: eq1Identity,
    ord1Identity: ord1Identity,
    functorIdentity: functorIdentity,
    functorWithIndexIdentity: functorWithIndexIdentity,
    invariantIdentity: invariantIdentity,
    altIdentity: altIdentity,
    applyIdentity: applyIdentity,
    applicativeIdentity: applicativeIdentity,
    bindIdentity: bindIdentity,
    monadIdentity: monadIdentity,
    extendIdentity: extendIdentity,
    comonadIdentity: comonadIdentity,
    foldableIdentity: foldableIdentity,
    foldable1Identity: foldable1Identity,
    foldableWithIndexIdentity: foldableWithIndexIdentity,
    traversableIdentity: traversableIdentity,
    traversable1Identity: traversable1Identity,
    traversableWithIndexIdentity: traversableWithIndexIdentity
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup.Traversable/index.js":228,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Unit/index.js":266}],167:[function(require,module,exports){
"use strict";

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};


exports.quot = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.rem = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x,y) | 0;
  };
};

},{}],168:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Global = require("../Global/index.js");
var $$Math = require("../Math/index.js");
var Radix = function (x) {
    return x;
};
var Even = (function () {
    function Even() {

    };
    Even.value = new Even();
    return Even;
})();
var Odd = (function () {
    function Odd() {

    };
    Odd.value = new Odd();
    return Odd;
})();
var showParity = new Data_Show.Show(function (v) {
    if (v instanceof Even) {
        return "Even";
    };
    if (v instanceof Odd) {
        return "Odd";
    };
    throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 112, column 35): " + [ v.constructor.name ]);
});
var radix = function (n) {
    if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [ n.constructor.name ]);
};
var odd = function (x) {
    return (x & 1) !== 0;
};
var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x === Global.infinity) {
        return 0;
    };
    if (x === -Global.infinity) {
        return 0;
    };
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
    };
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.fromMaybe(0)(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
};
var round = function ($23) {
    return unsafeClamp($$Math.round($23));
};
var floor = function ($24) {
    return unsafeClamp($$Math.floor($24));
};
var even = function (x) {
    return (x & 1) === 0;
};
var parity = function (n) {
    var $14 = even(n);
    if ($14) {
        return Even.value;
    };
    return Odd.value;
};
var eqParity = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return true;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return true;
        };
        return false;
    };
});
var ordParity = new Data_Ord.Ord(function () {
    return eqParity;
}, function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Even) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Even) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Int (line 110, column 8 - line 110, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var semiringParity = new Data_Semiring.Semiring(function (x) {
    return function (y) {
        var $19 = Data_Eq.eq(eqParity)(x)(y);
        if ($19) {
            return Even.value;
        };
        return Odd.value;
    };
}, function (v) {
    return function (v1) {
        if (v instanceof Odd && v1 instanceof Odd) {
            return Odd.value;
        };
        return Even.value;
    };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function () {
    return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
    return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
    return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingParity;
}, function (v) {
    if (v instanceof Even) {
        return 0;
    };
    if (v instanceof Odd) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 132, column 53): " + [ v.constructor.name ]);
}, function (x) {
    return function (v) {
        return x;
    };
}, function (v) {
    return function (v1) {
        return Even.value;
    };
});
var ceil = function ($25) {
    return unsafeClamp($$Math.ceil($25));
};
var boundedParity = new Data_Bounded.Bounded(function () {
    return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
    fromNumber: fromNumber,
    ceil: ceil,
    floor: floor,
    round: round,
    fromString: fromString,
    radix: radix,
    binary: binary,
    octal: octal,
    decimal: decimal,
    hexadecimal: hexadecimal,
    base36: base36,
    fromStringAs: fromStringAs,
    Even: Even,
    Odd: Odd,
    parity: parity,
    even: even,
    odd: odd,
    eqParity: eqParity,
    ordParity: ordParity,
    showParity: showParity,
    boundedParity: boundedParity,
    semiringParity: semiringParity,
    ringParity: ringParity,
    commutativeRingParity: commutativeRingParity,
    euclideanRingParity: euclideanRingParity,
    divisionRingParity: divisionRingParity,
    toNumber: $foreign.toNumber,
    toStringAs: $foreign.toStringAs,
    quot: $foreign.quot,
    rem: $foreign.rem,
    pow: $foreign.pow
};

},{"../Control.Category/index.js":36,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.CommutativeRing/index.js":117,"../Data.DivisionRing/index.js":128,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Global/index.js":330,"../Math/index.js":369,"./foreign.js":167}],169:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Interval_Duration = require("../Data.Interval.Duration/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var $$Math = require("../Math/index.js");
var IsoDuration = function (x) {
    return x;
};
var IsEmpty = (function () {
    function IsEmpty() {

    };
    IsEmpty.value = new IsEmpty();
    return IsEmpty;
})();
var InvalidWeekComponentUsage = (function () {
    function InvalidWeekComponentUsage() {

    };
    InvalidWeekComponentUsage.value = new InvalidWeekComponentUsage();
    return InvalidWeekComponentUsage;
})();
var ContainsNegativeValue = (function () {
    function ContainsNegativeValue(value0) {
        this.value0 = value0;
    };
    ContainsNegativeValue.create = function (value0) {
        return new ContainsNegativeValue(value0);
    };
    return ContainsNegativeValue;
})();
var InvalidFractionalUse = (function () {
    function InvalidFractionalUse(value0) {
        this.value0 = value0;
    };
    InvalidFractionalUse.create = function (value0) {
        return new InvalidFractionalUse(value0);
    };
    return InvalidFractionalUse;
})();
var unIsoDuration = function (v) {
    return v;
};
var showIsoDuration = new Data_Show.Show(function (v) {
    return "(IsoDuration " + (Data_Show.show(Data_Interval_Duration.showDuration)(v) + ")");
});
var showError = new Data_Show.Show(function (v) {
    if (v instanceof IsEmpty) {
        return "(IsEmpty)";
    };
    if (v instanceof InvalidWeekComponentUsage) {
        return "(InvalidWeekComponentUsage)";
    };
    if (v instanceof ContainsNegativeValue) {
        return "(ContainsNegativeValue " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
    };
    if (v instanceof InvalidFractionalUse) {
        return "(InvalidFractionalUse " + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + ")");
    };
    throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 43, column 1 - line 43, column 33): " + [ v.constructor.name ]);
});
var prettyError = function (v) {
    if (v instanceof IsEmpty) {
        return "Duration is empty (has no components)";
    };
    if (v instanceof InvalidWeekComponentUsage) {
        return "Week component of Duration is used with other components";
    };
    if (v instanceof ContainsNegativeValue) {
        return "Component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "` contains negative value");
    };
    if (v instanceof InvalidFractionalUse) {
        return "Invalid usage of Fractional value at component `" + (Data_Show.show(Data_Interval_Duration.showDurationComponent)(v.value0) + "`");
    };
    throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 49, column 1 - line 49, column 31): " + [ v.constructor.name ]);
};
var eqIsoDuration = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Interval_Duration.eqDuration)(x)(y);
    };
});
var ordIsoDuration = new Data_Ord.Ord(function () {
    return eqIsoDuration;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Interval_Duration.ordDuration)(x)(y);
    };
});
var eqError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof IsEmpty && y instanceof IsEmpty) {
            return true;
        };
        if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
            return true;
        };
        if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
            return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
        };
        if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
            return Data_Eq.eq(Data_Interval_Duration.eqDurationComponent)(x.value0)(y.value0);
        };
        return false;
    };
});
var ordError = new Data_Ord.Ord(function () {
    return eqError;
}, function (x) {
    return function (y) {
        if (x instanceof IsEmpty && y instanceof IsEmpty) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof IsEmpty) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof IsEmpty) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof InvalidWeekComponentUsage && y instanceof InvalidWeekComponentUsage) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof InvalidWeekComponentUsage) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof InvalidWeekComponentUsage) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ContainsNegativeValue && y instanceof ContainsNegativeValue) {
            return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
        };
        if (x instanceof ContainsNegativeValue) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ContainsNegativeValue) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof InvalidFractionalUse && y instanceof InvalidFractionalUse) {
            return Data_Ord.compare(Data_Interval_Duration.ordDurationComponent)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 42, column 8 - line 42, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var checkWeekUsage = function (v) {
    var $60 = Data_Maybe.isJust(Data_Map_Internal.lookup(Data_Interval_Duration.ordDurationComponent)(Data_Interval_Duration.Week.value)(v.asMap)) && Data_Map_Internal.size(v.asMap) > 1;
    if ($60) {
        return Control_Applicative.pure(Data_List_Types.applicativeList)(InvalidWeekComponentUsage.value);
    };
    return Control_Plus.empty(Data_List_Types.plusList);
};
var checkNegativeValues = function (v) {
    return Data_Function.flip(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList))(v.asList)(function (v1) {
        var $64 = v1.value1 >= 0.0;
        if ($64) {
            return Control_Plus.empty(Data_List_Types.plusList);
        };
        return Control_Applicative.pure(Data_List_Types.applicativeList)(new ContainsNegativeValue(v1.value0));
    });
};
var checkFractionalUse = function (v) {
    var isFractional = function (a) {
        return $$Math.floor(a) !== a;
    };
    var checkRest = function (rest) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(function ($81) {
            return Data_Monoid_Additive.Additive($$Math.abs(Data_Tuple.snd($81)));
        })(rest)) > 0.0;
    };
    var v1 = (function (v2) {
        return v2.rest;
    })(Data_List.span(function ($82) {
        return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isFractional)(Data_Tuple.snd($82));
    })(v.asList));
    if (v1 instanceof Data_List_Types.Cons && checkRest(v1.value1)) {
        return Control_Applicative.pure(Data_List_Types.applicativeList)(new InvalidFractionalUse(v1.value0.value0));
    };
    return Control_Plus.empty(Data_List_Types.plusList);
};
var checkEmptiness = function (v) {
    var $76 = Data_List["null"](v.asList);
    if ($76) {
        return Control_Applicative.pure(Data_List_Types.applicativeList)(IsEmpty.value);
    };
    return Control_Plus.empty(Data_List_Types.plusList);
};
var checkValidIsoDuration = function (v) {
    var check = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidFn(Data_List_Types.monoidList))([ checkWeekUsage, checkEmptiness, checkFractionalUse, checkNegativeValues ]);
    var asList = Data_List.reverse(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v));
    return check({
        asList: asList,
        asMap: v
    });
};
var mkIsoDuration = function (d) {
    var v = Data_List_NonEmpty.fromList(checkValidIsoDuration(d));
    if (v instanceof Data_Maybe.Just) {
        return new Data_Either.Left(v.value0);
    };
    if (v instanceof Data_Maybe.Nothing) {
        return new Data_Either.Right(d);
    };
    throw new Error("Failed pattern match at Data.Interval.Duration.Iso (line 60, column 19 - line 62, column 35): " + [ v.constructor.name ]);
};
module.exports = {
    unIsoDuration: unIsoDuration,
    mkIsoDuration: mkIsoDuration,
    IsEmpty: IsEmpty,
    InvalidWeekComponentUsage: InvalidWeekComponentUsage,
    ContainsNegativeValue: ContainsNegativeValue,
    InvalidFractionalUse: InvalidFractionalUse,
    prettyError: prettyError,
    eqIsoDuration: eqIsoDuration,
    ordIsoDuration: ordIsoDuration,
    showIsoDuration: showIsoDuration,
    eqError: eqError,
    ordError: ordError,
    showError: showError
};

},{"../Control.Applicative/index.js":29,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.HeytingAlgebra/index.js":165,"../Data.Interval.Duration/index.js":170,"../Data.List.NonEmpty/index.js":191,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Monoid.Additive/index.js":200,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Tuple/index.js":260,"../Math/index.js":369}],170:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Second = (function () {
    function Second() {

    };
    Second.value = new Second();
    return Second;
})();
var Minute = (function () {
    function Minute() {

    };
    Minute.value = new Minute();
    return Minute;
})();
var Hour = (function () {
    function Hour() {

    };
    Hour.value = new Hour();
    return Hour;
})();
var Day = (function () {
    function Day() {

    };
    Day.value = new Day();
    return Day;
})();
var Week = (function () {
    function Week() {

    };
    Week.value = new Week();
    return Week;
})();
var Month = (function () {
    function Month() {

    };
    Month.value = new Month();
    return Month;
})();
var Year = (function () {
    function Year() {

    };
    Year.value = new Year();
    return Year;
})();
var Duration = function (x) {
    return x;
};
var showDurationComponent = new Data_Show.Show(function (v) {
    if (v instanceof Minute) {
        return "Minute";
    };
    if (v instanceof Second) {
        return "Second";
    };
    if (v instanceof Hour) {
        return "Hour";
    };
    if (v instanceof Day) {
        return "Day";
    };
    if (v instanceof Week) {
        return "Week";
    };
    if (v instanceof Month) {
        return "Month";
    };
    if (v instanceof Year) {
        return "Year";
    };
    throw new Error("Failed pattern match at Data.Interval.Duration (line 38, column 1 - line 38, column 57): " + [ v.constructor.name ]);
});
var showDuration = new Data_Show.Show(function (v) {
    return "(Duration " + (Data_Show.show(Data_Map_Internal.showMap(showDurationComponent)(Data_Show.showNumber))(v) + ")");
});
var newtypeDuration = new Data_Newtype.Newtype(function (n) {
    return n;
}, Duration);
var eqDurationComponent = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Second && y instanceof Second) {
            return true;
        };
        if (x instanceof Minute && y instanceof Minute) {
            return true;
        };
        if (x instanceof Hour && y instanceof Hour) {
            return true;
        };
        if (x instanceof Day && y instanceof Day) {
            return true;
        };
        if (x instanceof Week && y instanceof Week) {
            return true;
        };
        if (x instanceof Month && y instanceof Month) {
            return true;
        };
        if (x instanceof Year && y instanceof Year) {
            return true;
        };
        return false;
    };
});
var ordDurationComponent = new Data_Ord.Ord(function () {
    return eqDurationComponent;
}, function (x) {
    return function (y) {
        if (x instanceof Second && y instanceof Second) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Second) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Second) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Minute && y instanceof Minute) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Minute) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Minute) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Hour && y instanceof Hour) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Hour) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Hour) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Day && y instanceof Day) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Day) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Day) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Week && y instanceof Week) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Week) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Week) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Month && y instanceof Month) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Month) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Month) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Year && y instanceof Year) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Interval.Duration (line 36, column 8 - line 36, column 62): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var semigroupDuration = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Map_Internal.unionWith(ordDurationComponent)(Data_Semiring.add(Data_Semiring.semiringNumber))(v)(v1);
    };
});
var monoidDuration = new Data_Monoid.Monoid(function () {
    return semigroupDuration;
}, Data_Monoid.mempty(Data_Map_Internal.monoidMap(ordDurationComponent)));
var eqDuration = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Map_Internal.eqMap(eqDurationComponent)(Data_Eq.eqNumber))(x)(y);
    };
});
var ordDuration = new Data_Ord.Ord(function () {
    return eqDuration;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Map_Internal.ordMap(ordDurationComponent)(Data_Ord.ordNumber))(x)(y);
    };
});
var durationFromComponent = function (k) {
    return function (v) {
        return Data_Map_Internal.singleton(k)(v);
    };
};
var hour = durationFromComponent(Hour.value);
var millisecond = function ($32) {
    return durationFromComponent(Second.value)((function (v) {
        return v / 1000.0;
    })($32));
};
var minute = durationFromComponent(Minute.value);
var month = durationFromComponent(Month.value);
var second = durationFromComponent(Second.value);
var week = durationFromComponent(Week.value);
var year = durationFromComponent(Year.value);
var day = durationFromComponent(Day.value);
module.exports = {
    Duration: Duration,
    Second: Second,
    Minute: Minute,
    Hour: Hour,
    Day: Day,
    Week: Week,
    Month: Month,
    Year: Year,
    year: year,
    month: month,
    week: week,
    day: day,
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond,
    eqDuration: eqDuration,
    ordDuration: ordDuration,
    newtypeDuration: newtypeDuration,
    showDuration: showDuration,
    semigroupDuration: semigroupDuration,
    monoidDuration: monoidDuration,
    eqDurationComponent: eqDurationComponent,
    ordDurationComponent: ordDurationComponent,
    showDurationComponent: showDurationComponent
};

},{"../Data.Eq/index.js":133,"../Data.Map.Internal/index.js":194,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],171:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var StartEnd = (function () {
    function StartEnd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StartEnd.create = function (value0) {
        return function (value1) {
            return new StartEnd(value0, value1);
        };
    };
    return StartEnd;
})();
var DurationEnd = (function () {
    function DurationEnd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DurationEnd.create = function (value0) {
        return function (value1) {
            return new DurationEnd(value0, value1);
        };
    };
    return DurationEnd;
})();
var StartDuration = (function () {
    function StartDuration(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StartDuration.create = function (value0) {
        return function (value1) {
            return new StartDuration(value0, value1);
        };
    };
    return StartDuration;
})();
var DurationOnly = (function () {
    function DurationOnly(value0) {
        this.value0 = value0;
    };
    DurationOnly.create = function (value0) {
        return new DurationOnly(value0);
    };
    return DurationOnly;
})();
var RecurringInterval = (function () {
    function RecurringInterval(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RecurringInterval.create = function (value0) {
        return function (value1) {
            return new RecurringInterval(value0, value1);
        };
    };
    return RecurringInterval;
})();
var showInterval = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof StartEnd) {
                return "(StartEnd " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            };
            if (v instanceof DurationEnd) {
                return "(DurationEnd " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            };
            if (v instanceof StartDuration) {
                return "(StartDuration " + (Data_Show.show(dictShow1)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + ")")));
            };
            if (v instanceof DurationOnly) {
                return "(DurationOnly " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Interval (line 66, column 1 - line 66, column 65): " + [ v.constructor.name ]);
        });
    };
};
var showRecurringInterval = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(RecurringInterval " + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(v.value0) + (" " + (Data_Show.show(showInterval(dictShow)(dictShow1))(v.value1) + ")")));
        });
    };
};
var over = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(RecurringInterval.create(v.value0))(f(v.value1));
        };
    };
};
var interval = function (v) {
    return v.value1;
};
var foldableInterval = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableInterval)(dictMonoid);
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof StartEnd) {
                return v(v(z)(v1.value0))(v1.value1);
            };
            if (v1 instanceof DurationEnd) {
                return v(z)(v1.value1);
            };
            if (v1 instanceof StartDuration) {
                return v(z)(v1.value0);
            };
            return z;
        };
    };
}, function (x) {
    return Data_Foldable.foldrDefault(foldableInterval)(x);
});
var foldableRecurringInterval = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableRecurringInterval)(dictMonoid);
}, function (f) {
    return function (i) {
        return function ($248) {
            return Data_Foldable.foldl(foldableInterval)(f)(i)(interval($248));
        };
    };
}, function (f) {
    return function (i) {
        return function ($249) {
            return Data_Foldable.foldr(foldableInterval)(f)(i)(interval($249));
        };
    };
});
var eqInterval = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof StartEnd && y instanceof StartEnd) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                };
                if (x instanceof DurationEnd && y instanceof DurationEnd) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                };
                if (x instanceof StartDuration && y instanceof StartDuration) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
                };
                if (x instanceof DurationOnly && y instanceof DurationOnly) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var eqRecurringInterval = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0)(y.value0) && Data_Eq.eq(eqInterval(dictEq)(dictEq1))(x.value1)(y.value1);
            };
        });
    };
};
var ordInterval = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqInterval(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof StartEnd && y instanceof StartEnd) {
                    var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                };
                if (x instanceof StartEnd) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof StartEnd) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof DurationEnd && y instanceof DurationEnd) {
                    var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                };
                if (x instanceof DurationEnd) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof DurationEnd) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof StartDuration && y instanceof StartDuration) {
                    var v = Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                };
                if (x instanceof StartDuration) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof StartDuration) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof DurationOnly && y instanceof DurationOnly) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                throw new Error("Failed pattern match at Data.Interval (line 65, column 8 - line 65, column 68): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var ordRecurringInterval = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqRecurringInterval(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordInt))(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(ordInterval(dictOrd)(dictOrd1))(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorInterval = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof StartEnd) {
                return new StartEnd(v1(v2.value0), v1(v2.value1));
            };
            if (v2 instanceof DurationEnd) {
                return new DurationEnd(v(v2.value0), v1(v2.value1));
            };
            if (v2 instanceof StartDuration) {
                return new StartDuration(v1(v2.value0), v(v2.value1));
            };
            if (v2 instanceof DurationOnly) {
                return new DurationOnly(v(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Interval (line 75, column 1 - line 75, column 49): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifunctorRecurringInterval = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new RecurringInterval(v.value0, Data_Bifunctor.bimap(bifunctorInterval)(f)(g)(v.value1));
        };
    };
});
var functorInterval = new Data_Functor.Functor(Data_Bifunctor.bimap(bifunctorInterval)(Control_Category.identity(Control_Category.categoryFn)));
var extendInterval = new Control_Extend.Extend(function () {
    return functorInterval;
}, function (f) {
    return function (v) {
        if (v instanceof StartEnd) {
            return new StartEnd(f(v), f(v));
        };
        if (v instanceof DurationEnd) {
            return new DurationEnd(v.value0, f(v));
        };
        if (v instanceof StartDuration) {
            return new StartDuration(f(v), v.value1);
        };
        if (v instanceof DurationOnly) {
            return new DurationOnly(v.value0);
        };
        throw new Error("Failed pattern match at Data.Interval (line 111, column 1 - line 111, column 47): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var functorRecurringInterval = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new RecurringInterval(v.value0, Data_Functor.map(functorInterval)(f)(v.value1));
    };
});
var extendRecurringInterval = new Control_Extend.Extend(function () {
    return functorRecurringInterval;
}, function (f) {
    return function (v) {
        return new RecurringInterval(v.value0, Control_Extend.extend(extendInterval)(Data_Function["const"](f(v)))(v.value1));
    };
});
var traversableInterval = new Data_Traversable.Traversable(function () {
    return foldableInterval;
}, function () {
    return functorInterval;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableInterval)(dictApplicative);
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof StartEnd) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v(v1.value0)))(v(v1.value1));
            };
            if (v1 instanceof DurationEnd) {
                return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value1))(DurationEnd.create(v1.value0));
            };
            if (v1 instanceof StartDuration) {
                return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v(v1.value0))(function (v2) {
                    return new StartDuration(v2, v1.value1);
                });
            };
            if (v1 instanceof DurationOnly) {
                return Control_Applicative.pure(dictApplicative)(new DurationOnly(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Interval (line 97, column 1 - line 97, column 57): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableRecurringInterval = new Data_Traversable.Traversable(function () {
    return foldableRecurringInterval;
}, function () {
    return functorRecurringInterval;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableRecurringInterval)(dictApplicative);
}, function (dictApplicative) {
    return function (f) {
        return function (i) {
            return over((dictApplicative.Apply0()).Functor0())(Data_Traversable.traverse(traversableInterval)(dictApplicative)(f))(i);
        };
    };
});
var bifoldableInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return Data_Bifoldable.bifoldMapDefaultL(bifoldableInterval)(dictMonoid);
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof StartEnd) {
                    return v1(v1(z)(v2.value0))(v2.value1);
                };
                if (v2 instanceof DurationEnd) {
                    return v1(v(z)(v2.value0))(v2.value1);
                };
                if (v2 instanceof StartDuration) {
                    return v1(v(z)(v2.value1))(v2.value0);
                };
                if (v2 instanceof DurationOnly) {
                    return v(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Interval (line 89, column 1 - line 89, column 51): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (x) {
    return Data_Bifoldable.bifoldrDefault(bifoldableInterval)(x);
});
var bifoldableRecurringInterval = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return Data_Bifoldable.bifoldMapDefaultL(bifoldableRecurringInterval)(dictMonoid);
}, function (f) {
    return function (g) {
        return function (i) {
            return function ($250) {
                return Data_Bifoldable.bifoldl(bifoldableInterval)(f)(g)(i)(interval($250));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (i) {
            return function ($251) {
                return Data_Bifoldable.bifoldr(bifoldableInterval)(f)(g)(i)(interval($251));
            };
        };
    };
});
var bitraversableInterval = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableInterval;
}, function () {
    return bifunctorInterval;
}, function (dictApplicative) {
    return Data_Bitraversable.bisequenceDefault(bitraversableInterval)(dictApplicative);
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof StartEnd) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartEnd.create)(v1(v2.value0)))(v1(v2.value1));
                };
                if (v2 instanceof DurationEnd) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationEnd.create)(v(v2.value0)))(v1(v2.value1));
                };
                if (v2 instanceof StartDuration) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(StartDuration.create)(v1(v2.value0)))(v(v2.value1));
                };
                if (v2 instanceof DurationOnly) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(DurationOnly.create)(v(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Interval (line 104, column 1 - line 104, column 57): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableRecurringInterval = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableRecurringInterval;
}, function () {
    return bifunctorRecurringInterval;
}, function (dictApplicative) {
    return Data_Bitraversable.bisequenceDefault(bitraversableRecurringInterval)(dictApplicative);
}, function (dictApplicative) {
    return function (l) {
        return function (r) {
            return function (i) {
                return over((dictApplicative.Apply0()).Functor0())(Data_Bitraversable.bitraverse(bitraversableInterval)(dictApplicative)(l)(r))(i);
            };
        };
    };
});
module.exports = {
    StartEnd: StartEnd,
    DurationEnd: DurationEnd,
    StartDuration: StartDuration,
    DurationOnly: DurationOnly,
    RecurringInterval: RecurringInterval,
    eqRecurringInterval: eqRecurringInterval,
    ordRecurringInterval: ordRecurringInterval,
    showRecurringInterval: showRecurringInterval,
    functorRecurringInterval: functorRecurringInterval,
    bifunctorRecurringInterval: bifunctorRecurringInterval,
    foldableRecurringInterval: foldableRecurringInterval,
    bifoldableRecurringInterval: bifoldableRecurringInterval,
    traversableRecurringInterval: traversableRecurringInterval,
    bitraversableRecurringInterval: bitraversableRecurringInterval,
    extendRecurringInterval: extendRecurringInterval,
    eqInterval: eqInterval,
    ordInterval: ordInterval,
    showInterval: showInterval,
    functorInterval: functorInterval,
    bifunctorInterval: bifunctorInterval,
    foldableInterval: foldableInterval,
    bifoldableInterval: bifoldableInterval,
    traversableInterval: traversableInterval,
    bitraversableInterval: bitraversableInterval,
    extendInterval: extendInterval
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Control.Extend/index.js":40,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor/index.js":105,"../Data.Bitraversable/index.js":106,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257}],172:[function(require,module,exports){
"use strict";

exports.defer = function (thunk) {
  var v = null;
  return function() {
    if (thunk === undefined) return v;

    v = thunk();
    thunk = undefined; // eslint-disable-line no-param-reassign
    return v;
  };
};

exports.force = function (l) {
  return l();
};

},{}],173:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var showLazy = function (dictShow) {
    return new Data_Show.Show(function (x) {
        return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
    });
};
var semiringLazy = function (dictSemiring) {
    return new Data_Semiring.Semiring(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function (v) {
        return Data_Semiring.one(dictSemiring);
    }), $foreign.defer(function (v) {
        return Data_Semiring.zero(dictSemiring);
    }));
};
var semigroupLazy = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function (dictRing) {
    return new Data_Ring.Ring(function () {
        return semiringLazy(dictRing.Semiring0());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupLazy(dictMonoid.Semigroup0());
    }, $foreign.defer(function (v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var lazyLazy = new Control_Lazy.Lazy(function (f) {
    return $foreign.defer(function (v) {
        return $foreign.force(f(Data_Unit.unit));
    });
});
var functorLazy = new Data_Functor.Functor(function (f) {
    return function (l) {
        return $foreign.defer(function (v) {
            return f($foreign.force(l));
        });
    };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorLazy;
}, function (f) {
    return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f(z)($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f($foreign.force(l))(z);
        };
    };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableLazy;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function () {
    return foldableLazy;
}, function () {
    return functorLazy;
}, function (dictApplicative) {
    return function (l) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($42) {
            return $foreign.defer(Data_Function["const"]($42));
        })($foreign.force(l));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (l) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($43) {
                return $foreign.defer(Data_Function["const"]($43));
            })(f($foreign.force(l)));
        };
    };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexLazy;
}, function () {
    return functorWithIndexLazy;
}, function () {
    return traversableLazy;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
    };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableLazy;
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Lazy;
}, function () {
    return traversableLazy;
}, function (dictApply) {
    return function (l) {
        return Data_Functor.map(dictApply.Functor0())(function ($44) {
            return $foreign.defer(Data_Function["const"]($44));
        })($foreign.force(l));
    };
}, function (dictApply) {
    return function (f) {
        return function (l) {
            return Data_Functor.map(dictApply.Functor0())(function ($45) {
                return $foreign.defer(Data_Function["const"]($45));
            })(f($foreign.force(l)));
        };
    };
});
var extendLazy = new Control_Extend.Extend(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return f(x);
        });
    };
});
var eqLazy = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqLazy(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function () {
    return eq1Lazy;
}, function (dictOrd) {
    return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, $foreign.force);
var commutativeRingLazy = function (dictCommutativeRing) {
    return new Data_CommutativeRing.CommutativeRing(function () {
        return ringLazy(dictCommutativeRing.Ring0());
    });
};
var euclideanRingLazy = function (dictEuclideanRing) {
    return new Data_EuclideanRing.EuclideanRing(function () {
        return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
    }, function ($46) {
        return Data_EuclideanRing.degree(dictEuclideanRing)($foreign.force($46));
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var boundedLazy = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordLazy(dictBounded.Ord0());
    }, $foreign.defer(function (v) {
        return Data_Bounded.bottom(dictBounded);
    }), $foreign.defer(function (v) {
        return Data_Bounded.top(dictBounded);
    }));
};
var applyLazy = new Control_Apply.Apply(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Control_Bind.Bind(function () {
    return applyLazy;
}, function (l) {
    return function (f) {
        return $foreign.defer(function (v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var heytingAlgebraLazy = function (dictHeytingAlgebra) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
        };
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
    }), function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
    }));
};
var booleanAlgebraLazy = function (dictBooleanAlgebra) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function () {
        return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var applicativeLazy = new Control_Applicative.Applicative(function () {
    return applyLazy;
}, function (a) {
    return $foreign.defer(function (v) {
        return a;
    });
});
var monadLazy = new Control_Monad.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy,
    ringLazy: ringLazy,
    commutativeRingLazy: commutativeRingLazy,
    euclideanRingLazy: euclideanRingLazy,
    eqLazy: eqLazy,
    eq1Lazy: eq1Lazy,
    ordLazy: ordLazy,
    ord1Lazy: ord1Lazy,
    boundedLazy: boundedLazy,
    semigroupLazy: semigroupLazy,
    monoidLazy: monoidLazy,
    heytingAlgebraLazy: heytingAlgebraLazy,
    booleanAlgebraLazy: booleanAlgebraLazy,
    functorLazy: functorLazy,
    functorWithIndexLazy: functorWithIndexLazy,
    foldableLazy: foldableLazy,
    foldableWithIndexLazy: foldableWithIndexLazy,
    foldable1Lazy: foldable1Lazy,
    traversableLazy: traversableLazy,
    traversableWithIndexLazy: traversableWithIndexLazy,
    traversable1Lazy: traversable1Lazy,
    invariantLazy: invariantLazy,
    applyLazy: applyLazy,
    applicativeLazy: applicativeLazy,
    bindLazy: bindLazy,
    monadLazy: monadLazy,
    extendLazy: extendLazy,
    comonadLazy: comonadLazy,
    showLazy: showLazy,
    lazyLazy: lazyLazy,
    defer: $foreign.defer,
    force: $foreign.force
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Lazy/index.js":41,"../Control.Monad/index.js":65,"../Data.BooleanAlgebra/index.js":108,"../Data.Bounded/index.js":110,"../Data.CommutativeRing/index.js":117,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.HeytingAlgebra/index.js":165,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ring/index.js":224,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup.Traversable/index.js":228,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Unit/index.js":266,"./foreign.js":172}],174:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var unfolded = function (dictMonoid) {
    return function (f) {
        return function (p) {
            var go = function ($43) {
                return Data_Maybe.maybe(Data_Monoid.mempty(dictMonoid))(function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p)(v.value0))(go(v.value1));
                })(f($43));
            };
            return go;
        };
    };
};
var replicated = function (dictMonoid) {
    return function (i) {
        return function (v) {
            var go = function (v1) {
                return function (x) {
                    if (v1 === 0) {
                        return Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
                    };
                    return Data_Semigroup.append(Data_Semigroup.semigroupFn(dictMonoid.Semigroup0()))(x)(go(v1 - 1 | 0)(x));
                };
            };
            return go(i)(v);
        };
    };
};
var ifoldMapOf = function (p) {
    return function (f) {
        return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f))));
    };
};
var ifoldlOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($44) {
                return Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(ifoldMapOf(p)(function (i) {
                    return function ($45) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f(i))($45)));
                    };
                })($44)));
            };
        };
    };
};
var ifoldrOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($46) {
                return Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r)(ifoldMapOf(p)(function (i) {
                    return function ($47) {
                        return Data_Monoid_Endo.Endo(f(i)($47));
                    };
                })($46));
            };
        };
    };
};
var itoListOf = function (p) {
    return ifoldrOf(p)(function (i) {
        return function (x) {
            return function (xs) {
                return new Data_List_Types.Cons(new Data_Tuple.Tuple(i, x), xs);
            };
        };
    })(Data_List_Types.Nil.value);
};
var itraverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return ifoldrOf(p)(function (i) {
                return function (a) {
                    return function (fu) {
                        return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(i)(a)))(fu);
                    };
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var iforOf_ = function (dictApplicative) {
    return function ($48) {
        return Data_Function.flip(itraverseOf_(dictApplicative)($48));
    };
};
var ifindOf = function (p) {
    return function (f) {
        return ifoldrOf(p)(function (i) {
            return function (a) {
                return Data_Maybe.maybe((function () {
                    var $37 = f(i)(a);
                    if ($37) {
                        return new Data_Maybe.Just(a);
                    };
                    return Data_Maybe.Nothing.value;
                })())(Data_Maybe.Just.create);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var ianyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($49) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(ifoldMapOf(p)(function (i) {
                    return function ($50) {
                        return Data_Monoid_Disj.Disj(f(i)($50));
                    };
                })($49));
            };
        };
    };
};
var iallOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($51) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(ifoldMapOf(p)(function (i) {
                    return function ($52) {
                        return Data_Monoid_Conj.Conj(f(i)($52));
                    };
                })($51));
            };
        };
    };
};
var folded = function (dictMonoid) {
    return function (dictFoldable) {
        return function (v) {
            return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(v);
        };
    };
};
var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
var foldOf = function (p) {
    return foldMapOf(p)(Control_Category.identity(Control_Category.categoryFn));
};
var foldlOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($53) {
                return Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapOf(p)(function ($54) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($54)));
                })($53)));
            };
        };
    };
};
var foldrOf = function (p) {
    return function (f) {
        return function (r) {
            return function ($55) {
                return Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r)(foldMapOf(p)(function ($56) {
                    return Data_Monoid_Endo.Endo(f($56));
                })($55));
            };
        };
    };
};
var maximumOf = function (dictOrd) {
    return function (p) {
        var max = function (a) {
            return function (b) {
                var $39 = Data_Ord.greaterThan(dictOrd)(a)(b);
                if ($39) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            return function ($57) {
                return Data_Maybe.Just.create(Data_Maybe.maybe(a)(max(a))($57));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var minimumOf = function (dictOrd) {
    return function (p) {
        var min = function (a) {
            return function (b) {
                var $40 = Data_Ord.lessThan(dictOrd)(a)(b);
                if ($40) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            return function ($58) {
                return Data_Maybe.Just.create(Data_Maybe.maybe(a)(min(a))($58));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var toListOf = function (p) {
    return foldrOf(p)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var toListOfOn = function (s) {
    return function (p) {
        return toListOf(p)(s);
    };
};
var traverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return foldrOf(p)(function (a) {
                return function (fu) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(a)))(fu);
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var has = function (dictHeytingAlgebra) {
    return function (p) {
        return function ($59) {
            return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)))($59));
        };
    };
};
var hasn$primet = function (dictHeytingAlgebra) {
    return function (p) {
        return function ($60) {
            return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))($60));
        };
    };
};
var lastOf = function (p) {
    return function ($61) {
        return Data_Newtype.unwrap(Data_Maybe_Last.newtypeLast)(foldMapOf(p)(function ($62) {
            return Data_Maybe_Last.Last(Data_Maybe.Just.create($62));
        })($61));
    };
};
var lengthOf = function (p) {
    return function ($63) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(foldMapOf(p)(Data_Function["const"](1))($63));
    };
};
var preview = function (p) {
    return function ($64) {
        return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(foldMapOf(p)(function ($65) {
            return Data_Maybe_First.First(Data_Maybe.Just.create($65));
        })($64));
    };
};
var previewOn = function (s) {
    return function (p) {
        return preview(p)(s);
    };
};
var productOf = function (dictSemiring) {
    return function (p) {
        return function ($66) {
            return Data_Newtype.unwrap(Data_Newtype.newtypeMultiplicative)(foldMapOf(p)(Data_Monoid_Multiplicative.Multiplicative)($66));
        };
    };
};
var sequenceOf_ = function (dictApplicative) {
    return function (p) {
        return function ($67) {
            return Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(Control_Applicative.pure(dictApplicative)(Data_Unit.unit))(foldMapOf(p)(function (f) {
                return function (v) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(f)(v);
                };
            })($67));
        };
    };
};
var sumOf = function (dictSemiring) {
    return function (p) {
        return function ($68) {
            return Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(foldMapOf(p)(Data_Monoid_Additive.Additive)($68));
        };
    };
};
var firstOf = function (p) {
    return function ($69) {
        return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(foldMapOf(p)(function ($70) {
            return Data_Maybe_First.First(Data_Maybe.Just.create($70));
        })($69));
    };
};
var findOf = function (p) {
    return function (f) {
        return foldrOf(p)(function (a) {
            return Data_Maybe.maybe((function () {
                var $41 = f(a);
                if ($41) {
                    return new Data_Maybe.Just(a);
                };
                return Data_Maybe.Nothing.value;
            })())(Data_Maybe.Just.create);
        })(Data_Maybe.Nothing.value);
    };
};
var filtered = function (dictChoice) {
    return function (f) {
        return function ($71) {
            return Data_Profunctor.dimap(dictChoice.Profunctor0())(function (x) {
                var $42 = f(x);
                if ($42) {
                    return new Data_Either.Right(x);
                };
                return new Data_Either.Left(x);
            })(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)($71));
        };
    };
};
var anyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($72) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeDisj)(foldMapOf(p)(function ($73) {
                    return Data_Monoid_Disj.Disj(f($73));
                })($72));
            };
        };
    };
};
var elemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return anyOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.eq(dictEq)(v)(a);
            });
        };
    };
};
var orOf = function (dictHeytingAlgebra) {
    return function (p) {
        return anyOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var allOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            return function ($74) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeConj)(foldMapOf(p)(function ($75) {
                    return Data_Monoid_Conj.Conj(f($75));
                })($74));
            };
        };
    };
};
var andOf = function (dictHeytingAlgebra) {
    return function (p) {
        return allOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var notElemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return allOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.notEq(dictEq)(v)(a);
            });
        };
    };
};
module.exports = {
    previewOn: previewOn,
    toListOfOn: toListOfOn,
    preview: preview,
    foldOf: foldOf,
    foldMapOf: foldMapOf,
    foldrOf: foldrOf,
    foldlOf: foldlOf,
    toListOf: toListOf,
    firstOf: firstOf,
    lastOf: lastOf,
    maximumOf: maximumOf,
    minimumOf: minimumOf,
    allOf: allOf,
    anyOf: anyOf,
    andOf: andOf,
    orOf: orOf,
    elemOf: elemOf,
    notElemOf: notElemOf,
    sumOf: sumOf,
    productOf: productOf,
    lengthOf: lengthOf,
    findOf: findOf,
    sequenceOf_: sequenceOf_,
    traverseOf_: traverseOf_,
    has: has,
    "hasn't": hasn$primet,
    replicated: replicated,
    filtered: filtered,
    folded: folded,
    unfolded: unfolded,
    ifoldMapOf: ifoldMapOf,
    ifoldrOf: ifoldrOf,
    ifoldlOf: ifoldlOf,
    iallOf: iallOf,
    ianyOf: ianyOf,
    itoListOf: itoListOf,
    itraverseOf_: itraverseOf_
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Lens.Internal.Forget/index.js":177,"../Data.Lens.Internal.Indexed/index.js":178,"../Data.List.Types/index.js":192,"../Data.Maybe.First/index.js":195,"../Data.Maybe.Last/index.js":196,"../Data.Maybe/index.js":197,"../Data.Monoid.Additive/index.js":200,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Endo/index.js":204,"../Data.Monoid.Multiplicative/index.js":205,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor/index.js":222,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266}],175:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var view = function (l) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
};
var viewOn = function (s) {
    return function (l) {
        return view(l)(s);
    };
};
var use = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
            return viewOn(v)(p);
        });
    };
};
var to = function (f) {
    return function (p) {
        return function ($3) {
            return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p)(f($3));
        };
    };
};
var takeBoth = function (l) {
    return function (r) {
        return to(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(view(l))(view(r)));
    };
};
var iview = function (l) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Data_Lens_Internal_Indexed.Indexed(Control_Category.identity(Control_Category.categoryFn))));
};
var iuse = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(iview(p));
    };
};
var cloneGetter = function (g) {
    return to(view(g));
};
module.exports = {
    viewOn: viewOn,
    view: view,
    to: to,
    takeBoth: takeBoth,
    use: use,
    iview: iview,
    iuse: iuse,
    cloneGetter: cloneGetter
};

},{"../Control.Category/index.js":36,"../Control.Monad.State.Class/index.js":58,"../Data.Lens.Internal.Forget/index.js":177,"../Data.Lens.Internal.Indexed/index.js":178,"../Data.Newtype/index.js":207,"../Data.Profunctor.Strong/index.js":221}],176:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Exchange = (function () {
    function Exchange(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Exchange.create = function (value0) {
        return function (value1) {
            return new Exchange(value0, value1);
        };
    };
    return Exchange;
})();
var profunctorExchange = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Exchange(function ($11) {
                return v.value0(f($11));
            }, function ($12) {
                return g(v.value1($12));
            });
        };
    };
});
var functorExchange = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Exchange(v.value0, function ($13) {
            return f(v.value1($13));
        });
    };
});
module.exports = {
    Exchange: Exchange,
    functorExchange: functorExchange,
    profunctorExchange: profunctorExchange
};

},{"../Data.Functor/index.js":156,"../Data.Profunctor/index.js":222}],177:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Cochoice = require("../Data.Profunctor.Cochoice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Forget = function (x) {
    return x;
};
var semigroupForget = function (dictSemigroup) {
    return Data_Semigroup.semigroupFn(dictSemigroup);
};
var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
    return function (v) {
        return function (v1) {
            return function ($27) {
                return v1(f($27));
            };
        };
    };
});
var strongForget = new Data_Profunctor_Strong.Strong(function () {
    return profunctorForget;
}, function (v) {
    return function ($28) {
        return v(Data_Tuple.fst($28));
    };
}, function (v) {
    return function ($29) {
        return v(Data_Tuple.snd($29));
    };
});
var newtypeForget = new Data_Newtype.Newtype(function (n) {
    return n;
}, Forget);
var monoidForget = function (dictMonoid) {
    return Data_Monoid.monoidFn(dictMonoid);
};
var cochoiceForget = new Data_Profunctor_Cochoice.Cochoice(function () {
    return profunctorForget;
}, function (v) {
    return function ($30) {
        return v(Data_Either.Left.create($30));
    };
}, function (v) {
    return function ($31) {
        return v(Data_Either.Right.create($31));
    };
});
var choiceForget = function (dictMonoid) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorForget;
    }, function (v) {
        return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
    }, function (v) {
        return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
    });
};
var wanderForget = function (dictMonoid) {
    return new Data_Lens_Internal_Wander.Wander(function () {
        return choiceForget(dictMonoid);
    }, function () {
        return strongForget;
    }, function (f) {
        return function (v) {
            return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
        };
    });
};
module.exports = {
    Forget: Forget,
    newtypeForget: newtypeForget,
    semigroupForget: semigroupForget,
    monoidForget: monoidForget,
    profunctorForget: profunctorForget,
    choiceForget: choiceForget,
    strongForget: strongForget,
    cochoiceForget: cochoiceForget,
    wanderForget: wanderForget
};

},{"../Data.Const/index.js":118,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Lens.Internal.Wander/index.js":183,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Cochoice/index.js":218,"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260}],178:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Indexed = function (x) {
    return x;
};
var profunctorIndexed = function (dictProfunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Profunctor.dimap(dictProfunctor)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(f))(g)(v);
            };
        };
    });
};
var strongIndexed = function (dictStrong) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorIndexed(dictStrong.Profunctor0());
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1.value0), v1.value1.value1);
        })(Data_Profunctor_Strong.first(dictStrong)(v)));
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
            return new Data_Tuple.Tuple(v1.value1.value0, new Data_Tuple.Tuple(v1.value0, v1.value1.value1));
        })(Data_Profunctor_Strong.second(dictStrong)(v)));
    });
};
var newtypeIndexed = new Data_Newtype.Newtype(function (n) {
    return n;
}, Indexed);
var choiceIndexed = function (dictChoice) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorIndexed(dictChoice.Profunctor0());
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
            return Data_Either.either(function ($47) {
                return Data_Either.Left.create(Data_Tuple.Tuple.create(v1.value0)($47));
            })(Data_Either.Right.create)(v1.value1);
        })(Data_Profunctor_Choice.left(dictChoice)(v)));
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
            return Data_Either.either(Data_Either.Left.create)(function ($48) {
                return Data_Either.Right.create(Data_Tuple.Tuple.create(v1.value0)($48));
            })(v1.value1);
        })(Data_Profunctor_Choice.right(dictChoice)(v)));
    });
};
var wanderIndexed = function (dictWander) {
    return new Data_Lens_Internal_Wander.Wander(function () {
        return choiceIndexed(dictWander.Choice1());
    }, function () {
        return strongIndexed(dictWander.Strong0());
    }, function (trav) {
        return function (v) {
            return Indexed(Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (ia2fb) {
                    return function (v1) {
                        return trav(dictApplicative)(function ($49) {
                            return ia2fb(Data_Tuple.Tuple.create(v1.value0)($49));
                        })(v1.value1);
                    };
                };
            })(v));
        };
    });
};
module.exports = {
    Indexed: Indexed,
    newtypeIndexed: newtypeIndexed,
    profunctorIndexed: profunctorIndexed,
    strongIndexed: strongIndexed,
    choiceIndexed: choiceIndexed,
    wanderIndexed: wanderIndexed
};

},{"../Data.Either/index.js":129,"../Data.Lens.Internal.Wander/index.js":183,"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],179:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Market = (function () {
    function Market(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Market.create = function (value0) {
        return function (value1) {
            return new Market(value0, value1);
        };
    };
    return Market;
})();
var profunctorMarket = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Market(function ($19) {
                return g(v.value0($19));
            }, function ($20) {
                return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(g)(v.value1(f($20)));
            });
        };
    };
});
var functorMarket = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Market(function ($21) {
            return f(v.value0($21));
        }, function ($22) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f)(v.value1($22));
        });
    };
});
var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
    return profunctorMarket;
}, function (v) {
    return new Market(function ($23) {
        return Data_Either.Left.create(v.value0($23));
    }, Data_Either.either(function ($24) {
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Left.create)(v.value1($24));
    })(function ($25) {
        return Data_Either.Left.create(Data_Either.Right.create($25));
    }));
}, function (v) {
    return new Market(function ($26) {
        return Data_Either.Right.create(v.value0($26));
    }, Data_Either.either(function ($27) {
        return Data_Either.Left.create(Data_Either.Left.create($27));
    })(function ($28) {
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Right.create)(v.value1($28));
    }));
});
module.exports = {
    Market: Market,
    functorMarket: functorMarket,
    profunctorMarket: profunctorMarket,
    choiceMarket: choiceMarket
};

},{"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor/index.js":222}],180:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Cochoice = require("../Data.Profunctor.Cochoice/index.js");
var Data_Profunctor_Costrong = require("../Data.Profunctor.Costrong/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Re = function (x) {
    return x;
};
var profunctorRe = function (dictProfunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                return function ($28) {
                    return v(Data_Profunctor.dimap(dictProfunctor)(g)(f)($28));
                };
            };
        };
    });
};
var strongRe = function (dictStrong) {
    return new Data_Profunctor_Costrong.Costrong(function () {
        return profunctorRe(dictStrong.Profunctor0());
    }, function (v) {
        return function ($29) {
            return v(Data_Profunctor_Strong.first(dictStrong)($29));
        };
    }, function (v) {
        return function ($30) {
            return v(Data_Profunctor_Strong.second(dictStrong)($30));
        };
    });
};
var newtypeRe = new Data_Newtype.Newtype(function (n) {
    return n;
}, Re);
var costrongRe = function (dictCostrong) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorRe(dictCostrong.Profunctor0());
    }, function (v) {
        return function ($31) {
            return v(Data_Profunctor_Costrong.unfirst(dictCostrong)($31));
        };
    }, function (v) {
        return function ($32) {
            return v(Data_Profunctor_Costrong.unsecond(dictCostrong)($32));
        };
    });
};
var cochoiceRe = function (dictCochoice) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorRe(dictCochoice.Profunctor0());
    }, function (v) {
        return function ($33) {
            return v(Data_Profunctor_Cochoice.unleft(dictCochoice)($33));
        };
    }, function (v) {
        return function ($34) {
            return v(Data_Profunctor_Cochoice.unright(dictCochoice)($34));
        };
    });
};
var choiceRe = function (dictChoice) {
    return new Data_Profunctor_Cochoice.Cochoice(function () {
        return profunctorRe(dictChoice.Profunctor0());
    }, function (v) {
        return function ($35) {
            return v(Data_Profunctor_Choice.left(dictChoice)($35));
        };
    }, function (v) {
        return function ($36) {
            return v(Data_Profunctor_Choice.right(dictChoice)($36));
        };
    });
};
module.exports = {
    Re: Re,
    newtypeRe: newtypeRe,
    profunctorRe: profunctorRe,
    choiceRe: choiceRe,
    cochoiceRe: cochoiceRe,
    strongRe: strongRe,
    costrongRe: costrongRe
};

},{"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Cochoice/index.js":218,"../Data.Profunctor.Costrong/index.js":219,"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222}],181:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Shop = (function () {
    function Shop(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Shop.create = function (value0) {
        return function (value1) {
            return new Shop(value0, value1);
        };
    };
    return Shop;
})();
var profunctorShop = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Shop(function ($30) {
                return v.value0(f($30));
            }, function (s) {
                return function ($31) {
                    return g(v.value1(f(s))($31));
                };
            });
        };
    };
});
var strongShop = new Data_Profunctor_Strong.Strong(function () {
    return profunctorShop;
}, function (v) {
    return new Shop(function (v1) {
        return v.value0(v1.value0);
    }, function (v1) {
        return function (b) {
            return new Data_Tuple.Tuple(v.value1(v1.value0)(b), v1.value1);
        };
    });
}, function (v) {
    return new Shop(function (v1) {
        return v.value0(v1.value1);
    }, function (v1) {
        return function (b) {
            return new Data_Tuple.Tuple(v1.value0, v.value1(v1.value1)(b));
        };
    });
});
module.exports = {
    Shop: Shop,
    profunctorShop: profunctorShop,
    strongShop: strongShop
};

},{"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],182:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Closed = require("../Data.Profunctor.Closed/index.js");
var Data_Profunctor_Costrong = require("../Data.Profunctor.Costrong/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Tagged = function (x) {
    return x;
};
var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
    return function (g) {
        return function (v1) {
            return g(v1);
        };
    };
});
var taggedCostrong = new Data_Profunctor_Costrong.Costrong(function () {
    return taggedProfunctor;
}, function (v) {
    return v.value0;
}, function (v) {
    return v.value1;
});
var taggedClosed = new Data_Profunctor_Closed.Closed(function () {
    return taggedProfunctor;
}, function (v) {
    return Data_Function["const"](v);
});
var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
    return taggedProfunctor;
}, function (v) {
    return new Data_Either.Left(v);
}, function (v) {
    return new Data_Either.Right(v);
});
var newtypeTagged = new Data_Newtype.Newtype(function (n) {
    return n;
}, Tagged);
var functorTagged = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var foldableTagged = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v)(b);
        };
    };
});
var traversableTagged = new Data_Traversable.Traversable(function () {
    return foldableTagged;
}, function () {
    return functorTagged;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(f(v));
        };
    };
});
var eqTagged = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x)(y);
        };
    });
};
var ordTagged = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTagged(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)(x)(y);
        };
    });
};
var eq1Tagged = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTagged(dictEq));
});
var ord1Tagged = new Data_Ord.Ord1(function () {
    return eq1Tagged;
}, function (dictOrd) {
    return Data_Ord.compare(ordTagged(dictOrd));
});
module.exports = {
    Tagged: Tagged,
    newtypeTagged: newtypeTagged,
    eqTagged: eqTagged,
    eq1Tagged: eq1Tagged,
    ordTagged: ordTagged,
    ord1Tagged: ord1Tagged,
    functorTagged: functorTagged,
    taggedProfunctor: taggedProfunctor,
    taggedChoice: taggedChoice,
    taggedCostrong: taggedCostrong,
    taggedClosed: taggedClosed,
    foldableTagged: foldableTagged,
    traversableTagged: traversableTagged
};

},{"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Closed/index.js":217,"../Data.Profunctor.Costrong/index.js":219,"../Data.Profunctor/index.js":222,"../Data.Traversable/index.js":257}],183:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Wander = function (Choice1, Strong0, wander) {
    this.Choice1 = Choice1;
    this.Strong0 = Strong0;
    this.wander = wander;
};
var wanderStar = function (dictApplicative) {
    return new Wander(function () {
        return Data_Profunctor_Star.choiceStar(dictApplicative);
    }, function () {
        return Data_Profunctor_Star.strongStar((dictApplicative.Apply0()).Functor0());
    }, function (t) {
        return function (v) {
            return t(dictApplicative)(v);
        };
    });
};
var wanderFunction = new Wander(function () {
    return Data_Profunctor_Choice.choiceFn;
}, function () {
    return Data_Profunctor_Strong.strongFn;
}, function (t) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
});
var wander = function (dict) {
    return dict.wander;
};
module.exports = {
    wander: wander,
    Wander: Wander,
    wanderFunction: wanderFunction,
    wanderStar: wanderStar
};

},{"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Star/index.js":220,"../Data.Profunctor.Strong/index.js":221}],184:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var _Newtype = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (dictProfunctor) {
            return Data_Lens_Iso.iso(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype1))(dictProfunctor);
        };
    };
};
module.exports = {
    "_Newtype": _Newtype
};

},{"../Data.Lens.Iso/index.js":185,"../Data.Newtype/index.js":207}],185:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Exchange = require("../Data.Lens.Internal.Exchange/index.js");
var Data_Lens_Internal_Re = require("../Data.Lens.Internal.Re/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var withIso = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Exchange.Exchange(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn)));
        return f(v.value0)(v.value1);
    };
};
var under = function (l) {
    return withIso(l)(function (sa) {
        return function (bt) {
            return function (ts) {
                return function ($19) {
                    return sa(ts(bt($19)));
                };
            };
        };
    });
};
var re = function (t) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Re.newtypeRe)(t(Control_Category.identity(Control_Category.categoryFn)));
};
var iso = function (f) {
    return function (g) {
        return function (dictProfunctor) {
            return function (pab) {
                return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
            };
        };
    };
};
var mapping = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (l) {
            return function (dictProfunctor) {
                return withIso(l)(function (sa) {
                    return function (bt) {
                        return iso(Data_Functor.map(dictFunctor)(sa))(Data_Functor.map(dictFunctor1)(bt))(dictProfunctor);
                    };
                });
            };
        };
    };
};
var non = function (dictEq) {
    return function (def) {
        return function (dictProfunctor) {
            var g = function (a) {
                if (Data_Eq.eq(dictEq)(a)(def)) {
                    return Data_Maybe.Nothing.value;
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Maybe.Just(a);
                };
                throw new Error("Failed pattern match at Data.Lens.Iso (line 45, column 9 - line 46, column 33): " + [ a.constructor.name ]);
            };
            return iso(Data_Maybe.fromMaybe(def))(g)(dictProfunctor);
        };
    };
};
var uncurried = function (dictProfunctor) {
    return iso(Data_Tuple.uncurry)(Data_Tuple.curry)(dictProfunctor);
};
var flipped = function (dictProfunctor) {
    return iso(Data_Function.flip)(Data_Function.flip)(dictProfunctor);
};
var dimapping = function (dictProfunctor) {
    return function (dictProfunctor1) {
        return function (f) {
            return function (g) {
                return function (dictProfunctor2) {
                    return withIso(f)(function (sa) {
                        return function (bt) {
                            return withIso(g)(function (ssaa) {
                                return function (bbtt) {
                                    return iso(Data_Profunctor.dimap(dictProfunctor)(sa)(ssaa))(Data_Profunctor.dimap(dictProfunctor1)(bt)(bbtt))(dictProfunctor2);
                                };
                            });
                        };
                    });
                };
            };
        };
    };
};
var curried = function (dictProfunctor) {
    return iso(Data_Tuple.curry)(Data_Tuple.uncurry)(dictProfunctor);
};
var cloneIso = function (l) {
    return function (dictProfunctor) {
        return withIso(l)(function (x) {
            return function (y) {
                return function (p) {
                    return iso(x)(y)(dictProfunctor)(p);
                };
            };
        });
    };
};
var auf = function (dictProfunctor) {
    return function (l) {
        return withIso(l)(function (sa) {
            return function (bt) {
                return function (f) {
                    return function (g) {
                        return function (e) {
                            return bt(f(Data_Profunctor.rmap(dictProfunctor)(sa)(g))(e));
                        };
                    };
                };
            };
        });
    };
};
var au = function (l) {
    return withIso(l)(function (sa) {
        return function (bt) {
            return function (f) {
                return function (e) {
                    return sa(f(bt)(e));
                };
            };
        };
    });
};
module.exports = {
    iso: iso,
    withIso: withIso,
    cloneIso: cloneIso,
    re: re,
    au: au,
    auf: auf,
    under: under,
    non: non,
    curried: curried,
    uncurried: uncurried,
    flipped: flipped,
    mapping: mapping,
    dimapping: dimapping
};

},{"../Control.Category/index.js":36,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Lens.Internal.Exchange/index.js":176,"../Data.Lens.Internal.Re/index.js":180,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],186:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Lens_Internal_Shop = require("../Data.Lens.Internal.Shop/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var withLens = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
            return function (b) {
                return b;
            };
        }));
        return f(v.value0)(v.value1);
    };
};
var withIndexedLens = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
            return function (b) {
                return b;
            };
        }));
        return f(v.value0)(v.value1);
    };
};
var lens$prime = function (to) {
    return function (dictStrong) {
        return function (pab) {
            return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                return v.value1(v.value0);
            })(Data_Profunctor_Strong.first(dictStrong)(pab));
        };
    };
};
var lens = function (get) {
    return function (set) {
        return function (dictStrong) {
            return lens$prime(function (s) {
                return new Data_Tuple.Tuple(get(s), function (b) {
                    return set(s)(b);
                });
            })(dictStrong);
        };
    };
};
var ilens$prime = function (to) {
    return function (dictStrong) {
        return function (pab) {
            return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                return v.value1(v.value0);
            })(Data_Profunctor_Strong.first(dictStrong)(Data_Newtype.un(Data_Lens_Internal_Indexed.newtypeIndexed)(Data_Lens_Internal_Indexed.Indexed)(pab)));
        };
    };
};
var ilens = function (get) {
    return function (set) {
        return function (dictStrong) {
            return ilens$prime(function (s) {
                return new Data_Tuple.Tuple(get(s), function (b) {
                    return set(s)(b);
                });
            })(dictStrong);
        };
    };
};
var cloneLens = function (l) {
    return function (dictStrong) {
        return withLens(l)(function (x) {
            return function (y) {
                return function (p) {
                    return lens(x)(y)(dictStrong)(p);
                };
            };
        });
    };
};
var cloneIndexedLens = function (l) {
    return function (dictStrong) {
        return withIndexedLens(l)(function (x) {
            return function (y) {
                return function (p) {
                    return ilens(x)(y)(dictStrong)(p);
                };
            };
        });
    };
};
module.exports = {
    lens: lens,
    "lens'": lens$prime,
    withLens: withLens,
    cloneLens: cloneLens,
    ilens: ilens,
    "ilens'": ilens$prime,
    withIndexedLens: withIndexedLens,
    cloneIndexedLens: cloneIndexedLens
};

},{"../Control.Category/index.js":36,"../Data.Lens.Internal.Indexed/index.js":178,"../Data.Lens.Internal.Shop/index.js":181,"../Data.Newtype/index.js":207,"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],187:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Internal_Tagged = require("../Data.Lens.Internal.Tagged/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var withPrism = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Market.Market(Control_Category.identity(Control_Category.categoryFn), Data_Either.Right.create));
        return f(v.value0)(v.value1);
    };
};
var review = Data_Newtype.under(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.Tagged);
var prism = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return function (pab) {
                return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
            };
        };
    };
};
var prism$prime = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return prism(to)(function (s) {
                return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
            })(dictChoice);
        };
    };
};
var nearly = function (x) {
    return function (f) {
        return function (dictChoice) {
            return prism$prime(Data_Function["const"](x))(function ($14) {
                return Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(f($14));
            })(dictChoice);
        };
    };
};
var only = function (dictEq) {
    return function (x) {
        return function (dictChoice) {
            return nearly(x)(function (v) {
                return Data_Eq.eq(dictEq)(v)(x);
            })(dictChoice);
        };
    };
};
var matching = function (l) {
    return withPrism(l)(function (v) {
        return function (f) {
            return f;
        };
    });
};
var is = function (dictHeytingAlgebra) {
    return function (l) {
        return function ($15) {
            return Data_Either.either(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)))(matching(l)($15));
        };
    };
};
var isn$primet = function (dictHeytingAlgebra) {
    return function (l) {
        return function ($16) {
            return Data_HeytingAlgebra.not(dictHeytingAlgebra)(is(dictHeytingAlgebra)(l)($16));
        };
    };
};
var clonePrism = function (l) {
    return function (dictChoice) {
        return withPrism(l)(function (x) {
            return function (y) {
                return function (p) {
                    return prism(x)(y)(dictChoice)(p);
                };
            };
        });
    };
};
module.exports = {
    "prism'": prism$prime,
    prism: prism,
    only: only,
    nearly: nearly,
    review: review,
    is: is,
    "isn't": isn$primet,
    matching: matching,
    clonePrism: clonePrism,
    withPrism: withPrism
};

},{"../Control.Category/index.js":36,"../Control.MonadZero/index.js":67,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.HeytingAlgebra/index.js":165,"../Data.Lens.Internal.Market/index.js":179,"../Data.Lens.Internal.Tagged/index.js":182,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor/index.js":222}],188:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Function = require("../Data.Function/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Record = require("../Record/index.js");
var prop = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (dictStrong) {
                    return Data_Lens_Lens.lens(Record.get(dictIsSymbol)(dictCons)(l))(Data_Function.flip(Record.set(dictIsSymbol)(dictCons)(dictCons1)(l)))(dictStrong);
                };
            };
        };
    };
};
module.exports = {
    prop: prop
};

},{"../Data.Function/index.js":149,"../Data.Lens.Lens/index.js":186,"../Record/index.js":387}],189:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var nil = List(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function (n) {
    return n;
}, List);
var step = function ($215) {
    return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($215));
};
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 65, column 5): " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
    });
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function ($216) {
        return step(f($216));
    }));
});
var functorList = new Data_Functor.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var functorNonEmptyList = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                            $tco_var_v = step(v.value1);
                            $copy_v1 = step(v1.value1);
                            return;
                        };
                        $tco_done = true;
                        return false;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = step(v.value1);
                                $copy_v1 = step(v1.value1);
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (b) {
            return function (a) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (op) {
    var go = function ($copy_b) {
        return function ($copy_xs) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, xs) {
                var v = step(xs);
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = op(b)(v.value0);
                    $copy_xs = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_xs);
            };
            return $tco_result;
        };
    };
    return go;
}, function (op) {
    return function (z) {
        return function (xs) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
        };
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (l) {
        var go = function (a) {
            return function (v) {
                var acc$prime = cons(a)(v.acc);
                return {
                    val: cons(f(acc$prime))(v.val),
                    acc: acc$prime
                };
            };
        };
        var v = step(l);
        if (v instanceof Nil) {
            return nil;
        };
        if (v instanceof Cons) {
            return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [ v.constructor.name ]);
    };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: cons(f(Data_Lazy.defer(function (v2) {
                        return new Data_NonEmpty.NonEmpty(a, v1.acc);
                    })))(v1.val),
                    acc: cons(a)(v1.acc)
                };
            };
        };
        var v1 = Data_Lazy.force(v);
        return NonEmptyList(Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v1.value1)).val);
        }));
    };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                return function ($217) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)($217));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        return function ($218) {
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v) {
                return function (a) {
                    return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
                };
            })(new Data_Tuple.Tuple(0, acc))($218));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, nil))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function ($219) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($219));
            })(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($220) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($220));
            })(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($221) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($221));
            })(b)(Data_Lazy.force(v));
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return cons(f(i)(x))(acc);
            };
        };
    })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
            return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function ($222) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($222));
            })(Data_Lazy.force(v));
        }));
    };
});
var toList = function (v) {
    return Control_Lazy.defer(lazyList)(function (v1) {
        var v2 = Data_Lazy.force(v);
        return cons(v2.value0)(v2.value1);
    });
};
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        var v1 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
        });
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return Data_Foldable.foldr(foldableList)(function (a) {
            return function (b) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
    return foldableNonEmptyList;
}, function () {
    return functorNonEmptyList;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
            return NonEmptyList(Data_Lazy.defer(function (v1) {
                return xxs;
            }));
        })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
        };
    };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
            return function (a) {
                return function (b) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(i)(a)))(b);
                };
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function ($223) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($223));
            })(Data_Lazy.force(v)));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1.value1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0)(go(f)(v1.value1.value0));
                };
                if (v1.value1 instanceof Data_Maybe.Nothing) {
                    return cons(v1.value0)(nil);
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, (function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return nil;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        return NonEmptyList(Data_Lazy.defer(function (v) {
            return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
        }));
    };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (xs) {
    return function (f) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        var v2 = Data_Lazy.force(v1);
        var v3 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v4) {
            return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
        });
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = Data_Lazy.force(v);
        var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
        return Data_Lazy.defer(function (v3) {
            return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($224) {
                return toList(f($224));
            })));
        });
    };
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, function (a) {
    return Data_Lazy.defer(function (v) {
        return Data_NonEmpty.singleton(plusList)(a);
    });
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
module.exports = {
    List: List,
    Nil: Nil,
    Cons: Cons,
    step: step,
    nil: nil,
    cons: cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    newtypeList: newtypeList,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    lazyList: lazyList,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Lazy/index.js":41,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Lazy/index.js":173,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264}],190:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Pattern = function (x) {
    return x;
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(x, v1.value1);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
var uncons = function (xs) {
    var v = Data_List_Lazy_Types.step(xs);
    if (v instanceof Data_List_Lazy_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Lazy_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var takeWhile = function (p) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
            return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
        };
        return Data_List_Lazy_Types.Nil.value;
    };
    return function ($249) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($249)));
    };
};
var take = function (n) {
    var go = function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var $124 = n <= 0;
    if ($124) {
        return Data_Function["const"](Data_List_Lazy_Types.nil);
    };
    return function ($250) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($250)));
    };
};
var tail = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    var v1 = Data_List_Lazy_Types.step(prefix);
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = Data_List_Lazy_Types.step(input);
                        if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                                a: v1.value1,
                                b: v2.value1
                            }));
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (p) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
            var v1 = span(p)(v.value0.tail);
            return {
                init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                rest: v1.rest
            };
        };
        return {
            init: Data_List_Lazy_Types.nil,
            rest: xs
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
    };
};
var singleton = function (a) {
    return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
    });
};
var scanrLazy = function (f) {
    return function (acc) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var acc$prime = f(v.value0)(acc);
                    return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var reverse = function (xs) {
    return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
        return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
    });
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (v1) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(v)(v1));
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
        return Data_List_Lazy_Types.cons(x)(xs);
    });
};
var replicate = function (i) {
    return function (xs) {
        return take(i)(repeat(xs));
    };
};
var range = function (start) {
    return function (end) {
        if (start > end) {
            var g = function (x) {
                if (x >= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
        };
        if (Data_Boolean.otherwise) {
            var f = function (x) {
                if (x <= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (f) {
    var go = function (x) {
        return function (v) {
            var $154 = f(x);
            if ($154) {
                return {
                    yes: Data_List_Lazy_Types.cons(x)(v.yes),
                    no: v.no
                };
            };
            return {
                yes: v.yes,
                no: Data_List_Lazy_Types.cons(x)(v.no)
            };
        };
    };
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
        yes: Data_List_Lazy_Types.nil,
        no: Data_List_Lazy_Types.nil
    });
};
var $$null = function ($251) {
    return Data_Maybe.isNothing(uncons($251));
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapMaybe = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                var v1 = f(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($252) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($252)));
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
    return function (v) {
        return l + 1 | 0;
    };
})(0);
var last = (function () {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if ($$null(v.value1)) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($253) {
        return go(Data_List_Lazy_Types.step($253));
    };
})();
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
            return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
        });
    };
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return Data_List_Lazy_Types.cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var init = (function () {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return function ($254) {
        return go(Data_List_Lazy_Types.step($254));
    };
})();
var index = function (xs) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                    $copy_v1 = v1 - 1 | 0;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Lazy_Types.step(xs));
};
var head = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var transpose = function (xs) {
    var v = uncons(xs);
    if (v instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if (v instanceof Data_Maybe.Just) {
        var v1 = uncons(v.value0.head);
        if (v1 instanceof Data_Maybe.Nothing) {
            return transpose(v.value0.tail);
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [ v.constructor.name ]);
};
var groupBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            var v1 = span(eq(v.value0))(v.value1);
            return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
            }), groupBy(eq)(v1.rest));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [ v.constructor.name ]);
    };
    return function ($255) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($255)));
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var fromStep = function ($256) {
    return Data_List_Lazy_Types.List(Control_Applicative.pure(Data_Lazy.applicativeLazy)($256));
};
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var v1 = cmp(x)(v.value0);
                    if (v1 instanceof Data_Ordering.GT) {
                        return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};
var foldrLazy = function (dictLazy) {
    return function (op) {
        return function (z) {
            var go = function (xs) {
                var v = Data_List_Lazy_Types.step(xs);
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    return Control_Lazy.defer(dictLazy)(function (v1) {
                        return op(v.value0)(go(v.value1));
                    });
                };
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return z;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [ v.constructor.name ]);
            };
            return go;
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (xs) {
                var v = uncons(xs);
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                    });
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [ v.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (n) {
        return function (list) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                var $207 = fn(v.head);
                if ($207) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                };
                return go(n + 1 | 0)(v.tail);
            });
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (p) {
        return function (list) {
            var v = uncons(list);
            if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (v instanceof Data_Maybe.Just) {
                return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (v1) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (v2) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (v1) {
                                return Data_List_Lazy_Types.cons(v.value0.head)(v2);
                            };
                            return v2;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [ v.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if (p(v.value0)) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($257) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($257)));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
                return !eq(v.value0)(y);
            })(v.value1)));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [ v.constructor.name ]);
    };
    return function ($258) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($258)));
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                $copy_v = Data_List_Lazy_Types.step(v.value1);
                return;
            };
            $tco_done = true;
            return fromStep(v);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($259) {
        return go(Data_List_Lazy_Types.step($259));
    };
};
var drop = function (n) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v === 0) {
                    $tco_done = true;
                    return v1;
                };
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = v - 1 | 0;
                    $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return function ($260) {
        return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($260)));
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    if (eq(x)(v.value0)) {
                        return Data_List_Lazy_Types.step(v.value1);
                    };
                    if (Data_Boolean.otherwise) {
                        return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                    return Data_List_Lazy_Types.step(v1.value1);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
        return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
    });
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = f(v1.value0);
                        if (v2 instanceof Data_Maybe.Nothing) {
                            return Data_List_Lazy_Types.step(v1.value1);
                        };
                        if (v2 instanceof Data_Maybe.Just) {
                            return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [ v2.constructor.name ]);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($261) {
            return Data_Maybe.Just.create(f($261));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    replicate: replicate,
    replicateM: replicateM,
    some: some,
    many: many,
    repeat: repeat,
    iterate: iterate,
    cycle: cycle,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    foldrLazy: foldrLazy,
    scanrLazy: scanrLazy,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Lazy/index.js":41,"../Control.Monad.Rec.Class/index.js":55,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Lazy/index.js":173,"../Data.List.Lazy.Types/index.js":189,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262}],191:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var zipWith = function (f) {
    return function (v) {
        return function (v1) {
            return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var wrappedOperation2 = function (name) {
    return function (f) {
        return function (v) {
            return function (v1) {
                var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
                if (v2 instanceof Data_List_Types.Cons) {
                    return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
                };
                if (v2 instanceof Data_List_Types.Nil) {
                    return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
                };
                throw new Error("Failed pattern match at Data.List.NonEmpty (line 104, column 3 - line 106, column 81): " + [ v2.constructor.name ]);
            };
        };
    };
};
var wrappedOperation = function (name) {
    return function (f) {
        return function (v) {
            var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
            if (v1 instanceof Data_List_Types.Cons) {
                return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [ v1.constructor.name ]);
        };
    };
};
var updateAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($161) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($161));
                })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 197, column 1 - line 197, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var unzip = function (ts) {
    return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
};
var unsnoc = function (v) {
    var v1 = Data_List.unsnoc(v.value1);
    if (v1 instanceof Data_Maybe.Nothing) {
        return {
            init: Data_List_Types.Nil.value,
            last: v.value0
        };
    };
    if (v1 instanceof Data_Maybe.Just) {
        return {
            init: new Data_List_Types.Cons(v.value0, v1.value0.init),
            last: v1.value0.last
        };
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 159, column 35 - line 161, column 50): " + [ v1.constructor.name ]);
};
var unionBy = function ($162) {
    return wrappedOperation2("unionBy")(Data_List.unionBy($162));
};
var union = function (dictEq) {
    return wrappedOperation2("union")(Data_List.union(dictEq));
};
var uncons = function (v) {
    return {
        head: v.value0,
        tail: v.value1
    };
};
var toList = function (v) {
    return new Data_List_Types.Cons(v.value0, v.value1);
};
var toUnfoldable = function (dictUnfoldable) {
    return function ($163) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                return new Data_Tuple.Tuple(rec.head, rec.tail);
            })(Data_List.uncons(xs));
        })(toList($163));
    };
};
var tail = function (v) {
    return v.value1;
};
var sortBy = function ($164) {
    return wrappedOperation("sortBy")(Data_List.sortBy($164));
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var snoc = function (v) {
    return function (y) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
    };
};
var singleton = function ($165) {
    return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($165));
};
var snoc$prime = function (v) {
    return function (y) {
        if (v instanceof Data_List_Types.Cons) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
        };
        if (v instanceof Data_List_Types.Nil) {
            return singleton(y);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 139, column 1 - line 139, column 51): " + [ v.constructor.name, y.constructor.name ]);
    };
};
var reverse = wrappedOperation("reverse")(Data_List.reverse);
var nubBy = function ($166) {
    return wrappedOperation("nubBy")(Data_List.nubBy($166));
};
var nub = function (dictEq) {
    return wrappedOperation("nub")(Data_List.nub(dictEq));
};
var modifyAt = function (i) {
    return function (f) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($167) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($167));
                })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 202, column 1 - line 202, column 82): " + [ i.constructor.name, f.constructor.name, v.constructor.name ]);
        };
    };
};
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
var lift = function (f) {
    return function (v) {
        return f(new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var mapMaybe = function ($168) {
    return lift(Data_List.mapMaybe($168));
};
var partition = function ($169) {
    return lift(Data_List.partition($169));
};
var span = function ($170) {
    return lift(Data_List.span($170));
};
var take = function ($171) {
    return lift(Data_List.take($171));
};
var takeWhile = function ($172) {
    return lift(Data_List.takeWhile($172));
};
var length = function (v) {
    return 1 + Data_List.length(v.value1) | 0;
};
var last = function (v) {
    return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
};
var intersectBy = function ($173) {
    return wrappedOperation2("intersectBy")(Data_List.intersectBy($173));
};
var intersect = function (dictEq) {
    return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
};
var insertAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($174) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($174));
                })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 1 - line 192, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var init = function (v) {
    return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
        return new Data_List_Types.Cons(v.value0, v1);
    })(Data_List.init(v.value1));
};
var index = function (v) {
    return function (i) {
        if (i === 0) {
            return new Data_Maybe.Just(v.value0);
        };
        if (Data_Boolean.otherwise) {
            return Data_List.index(v.value1)(i - 1 | 0);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 166, column 1 - line 166, column 52): " + [ v.constructor.name, i.constructor.name ]);
    };
};
var head = function (v) {
    return v.value0;
};
var groupBy = function ($175) {
    return wrappedOperation("groupBy")(Data_List.groupBy($175));
};
var group$prime = function (dictOrd) {
    return wrappedOperation("group'")(Data_List["group'"](dictOrd));
};
var group = function (dictEq) {
    return wrappedOperation("group")(Data_List.group(dictEq));
};
var fromList = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 120, column 1 - line 120, column 57): " + [ v.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    return function ($176) {
        return fromList(Data_List.fromFoldable(dictFoldable)($176));
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0))(function (a$prime) {
                    return Data_List.foldM(dictMonad)(f)(a$prime)(v.value1);
                });
            };
        };
    };
};
var findLastIndex = function (f) {
    return function (v) {
        var v1 = Data_List.findLastIndex(f)(v.value1);
        if (v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v1.value0 + 1 | 0);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            if (f(v.value0)) {
                return new Data_Maybe.Just(0);
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 186, column 3 - line 190, column 29): " + [ v1.constructor.name ]);
    };
};
var findIndex = function (f) {
    return function (v) {
        if (f(v.value0)) {
            return new Data_Maybe.Just(0);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                return v1 + 1 | 0;
            })(Data_List.findIndex(f)(v.value1));
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 179, column 1 - line 179, column 69): " + [ f.constructor.name, v.constructor.name ]);
    };
};
var filterM = function (dictMonad) {
    return function ($177) {
        return lift(Data_List.filterM(dictMonad)($177));
    };
};
var filter = function ($178) {
    return lift(Data_List.filter($178));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function ($179) {
    return lift(Data_List.dropWhile($179));
};
var drop = function ($180) {
    return lift(Data_List.drop($180));
};
var cons$prime = function (x) {
    return function (xs) {
        return new Data_NonEmpty.NonEmpty(x, xs);
    };
};
var cons = function (y) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = lift(Data_List.catMaybes);
var appendFoldable = function (dictFoldable) {
    return function (v) {
        return function (ys) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
        };
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    fromList: fromList,
    toList: toList,
    singleton: singleton,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    appendFoldable: appendFoldable,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM
};

},{"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Semigroup.Traversable/index.js":228,"../Data.Semigroup/index.js":230,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Partial.Unsafe/index.js":378}],192:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var toList = function (v) {
    return new Cons(v.value0, v.value1);
};
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var nelCons = function (a) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
    };
};
var listMap = function (f) {
    var chunkedRevMap = function ($copy_chunksAcc) {
        return function ($copy_v) {
            var $tco_var_chunksAcc = $copy_chunksAcc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(chunksAcc, v) {
                if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                    $tco_var_chunksAcc = new Cons(v, chunksAcc);
                    $copy_v = v.value1.value1.value1;
                    return;
                };
                var unrolledMap = function (v1) {
                    if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                        return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                    };
                    if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                        return new Cons(f(v1.value0), Nil.value);
                    };
                    return Nil.value;
                };
                var reverseUnrolledMap = function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v1, acc) {
                            if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                return;
                            };
                            $tco_done = true;
                            return acc;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
                $tco_done = true;
                return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
            };
            return $tco_result;
        };
    };
    return chunkedRevMap(Nil.value);
};
var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            return function ($202) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($202));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    var go = function ($copy_b) {
        return function ($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = f(b)(v.value0);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_v);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (b) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        return function ($203) {
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($203));
        };
    };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                return function ($204) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)($204));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        return function ($205) {
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v) {
                return function (a) {
                    return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
                };
            })(new Data_Tuple.Tuple(0, acc))($205));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function ($206) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($206));
            })(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($207) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($207));
            })(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function ($208) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($208));
            })(b)(v);
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return new Cons(f(i)(x), acc);
            };
        };
    })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (fn) {
    return function (v) {
        return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function ($209) {
            return fn(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($209));
        })(v));
    };
});
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Nil) {
            return "Nil";
        };
        return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
    });
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function ($210) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                return function ($211) {
                    return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($211));
                };
            })(Control_Applicative.pure(dictApplicative)(Nil.value))($210));
        };
    };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        return function ($212) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev)(Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
                return function (acc) {
                    return function ($213) {
                        return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f(i)($213));
                    };
                };
            })(Control_Applicative.pure(dictApplicative)(Nil.value))($212));
        };
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function ($214) {
                return f(Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1))($214));
            })(v));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = new Cons(v.value0, memo);
                        return;
                    };
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = new Cons(v.value0.value0, memo);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                    acc: new Cons(a, v1.acc)
                };
            };
        };
        return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value,
            acc: Nil.value
        })(v.value1)).val);
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (v) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            var go = function (a$prime) {
                return function (v1) {
                    var acc$prime = new Cons(a$prime, v1.acc);
                    return {
                        val: new Cons(f(acc$prime), v1.val),
                        acc: acc$prime
                    };
                };
            };
            return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value,
                acc: Nil.value
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 180, column 35): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, v2) {
                            if (!v2) {
                                $tco_done = true;
                                return false;
                            };
                            if (v instanceof Nil && v1 instanceof Nil) {
                                $tco_done = true;
                                return v2;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                return;
                            };
                            $tco_done = true;
                            return false;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                        };
                        return $tco_result;
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = v.value1;
                                $copy_v1 = v1.value1;
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(xs)(ys);
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 155, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 162, column 31): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = f(v.value0);
        return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($215) {
            return toList(f($215));
        })));
    };
});
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, function ($216) {
    return NonEmptyList(Data_NonEmpty.singleton(plusList)($216));
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApply) {
    return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                return function ($217) {
                    return Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc)(f($217));
                };
            })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
            });
        };
    };
});
module.exports = {
    Nil: Nil,
    Cons: Cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    nelCons: nelCons,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    foldable1NonEmptyList: foldable1NonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
    traversable1NonEmptyList: traversable1NonEmptyList
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup.Traversable/index.js":228,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264}],193:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Pattern = function (x) {
    return x;
};
var updateAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(updateAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
var uncons = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value1);
    };
    throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                            a: prefix.value1,
                            b: input.value1
                        }));
                    };
                    if (prefix instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    return Data_Maybe.Nothing.value;
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
                init: new Data_List_Types.Cons(v1.value0, v2.init),
                rest: v2.rest
            };
        };
        return {
            init: Data_List_Types.Nil.value,
            rest: v1
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
    };
};
var singleton = function (a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                    return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return v;
            };
            throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var mergePairs = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        };
        return v;
    };
    var mergeAll = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return v.value0;
            };
            $copy_v = mergePairs(v);
            return;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var sequences = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            };
            if (Data_Boolean.otherwise) {
                return ascending(v.value1.value0)(function (v1) {
                    return new Data_List_Types.Cons(v.value0, v1);
                })(v.value1.value1);
            };
        };
        return singleton(v);
    };
    var descending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = new Data_List_Types.Cons(a, as);
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    var ascending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = function (ys) {
                            return as(new Data_List_Types.Cons(a, ys));
                        };
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    return function ($337) {
        return mergeAll(sequences($337));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var tails = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return singleton(Data_List_Types.Nil.value);
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(v, tails(v.value1));
    };
    throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [ v.constructor.name ]);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
    });
};
var reverse = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var take = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v, v1) {
                    if (v < 1) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $tco_var_v = v - 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var takeWhile = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                $tco_done = true;
                return reverse(acc);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var unsnoc = function (lst) {
    var go = function ($copy_v) {
        return function ($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, acc) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return new Data_Maybe.Just({
                        revInit: acc,
                        last: v.value0
                    });
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_v = v.value1;
                    $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [ v.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_acc);
            };
            return $tco_result;
        };
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
        return {
            init: reverse(h.revInit),
            last: h.last
        };
    })(go(lst)(Data_List_Types.Nil.value));
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, acc) {
                            if (v instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                return;
                            };
                            throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Data_Boolean.otherwise) {
            var go = function ($copy_s) {
                return function ($copy_e) {
                    return function ($copy_step) {
                        return function ($copy_rest) {
                            var $tco_var_s = $copy_s;
                            var $tco_var_e = $copy_e;
                            var $tco_var_step = $copy_step;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(s, e, step, rest) {
                                if (s === e) {
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(s, rest);
                                };
                                if (Data_Boolean.otherwise) {
                                    $tco_var_s = s + step | 0;
                                    $tco_var_e = e;
                                    $tco_var_step = step;
                                    $copy_rest = new Data_List_Types.Cons(s, rest);
                                    return;
                                };
                                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $223 = start > end;
                if ($223) {
                    return 1;
                };
                return -1 | 0;
            })())(Data_List_Types.Nil.value);
        };
        throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (p) {
    return function (xs) {
        var select = function (x) {
            return function (v) {
                var $226 = p(x);
                if ($226) {
                    return {
                        no: v.no,
                        yes: new Data_List_Types.Cons(x, v.yes)
                    };
                };
                return {
                    no: new Data_List_Types.Cons(x, v.no),
                    yes: v.yes
                };
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
        })(xs);
    };
};
var $$null = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
var mapMaybe = function (f) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var manyRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (p) {
            var go = function (acc) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                        return new Data_List_Types.Cons(v1, acc);
                    })(function (v1) {
                        return reverse(acc);
                    })(v));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
    };
};
var someRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var last = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Data_List_Types.Cons) {
            $copy_v = v.value1;
            return;
        };
        $tco_done = true;
        return Data_Maybe.Nothing.value;
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var insertBy = function (v) {
    return function (x) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return singleton(x);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                var v2 = v(x)(v1.value0);
                if (v2 instanceof Data_Ordering.GT) {
                    return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                };
                return new Data_List_Types.Cons(x, v1);
            };
            throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
        };
    };
};
var insertAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(insertAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var init = function (lst) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.init;
    })(unsnoc(lst));
};
var index = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $copy_v1 = v1 - 1 | 0;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var head = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
};
var transpose = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
        return transpose(v.value1);
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
    };
    throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [ v.constructor.name ]);
};
var groupBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        };
        throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var group$prime = function (dictOrd) {
    return function ($338) {
        return group(dictOrd.Eq0())(sort(dictOrd)($338));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var foldM = function (dictMonad) {
    return function (v) {
        return function (a) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                        return foldM(dictMonad)(v)(a$prime)(v1.value1);
                    });
                };
                throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Data_List_Types.Cons) {
                    if (fn(v1.value0)) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v);
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_v = v + 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                };
                if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (v2) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (v2) {
                                return new Data_List_Types.Cons(v1.value0, v3);
                            };
                            return v3;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (p(v.value0)) {
                        $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                };
                throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var intersectBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                return !v(v1.value0)(y);
            })(v1.value1)));
        };
        throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                $copy_v = v.value1;
                return;
            };
            $tco_done = true;
            return v;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var dropEnd = function (n) {
    return function (xs) {
        return take(length(xs) - n | 0)(xs);
    };
};
var drop = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v < 1) {
                $tco_done = true;
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v - 1 | 0;
                $copy_v1 = v1.value1;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return drop(length(xs) - n | 0)(xs);
    };
};
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                return v2.value1;
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            };
            throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (v) {
    return function (v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(v1.value1);
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                return new Data_List_Types.Cons(v1.value0, v2);
            })(deleteAt(v - 1 | 0)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return Data_Maybe.Just.create((function () {
                    var v3 = v1(v2.value0);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return v2.value1;
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v3.value0, v2.value1);
                    };
                    throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [ v3.constructor.name ]);
                })());
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(alterAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($339) {
            return Data_Maybe.Just.create(f($339));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    some: some,
    someRec: someRec,
    many: many,
    manyRec: manyRec,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Lazy/index.js":41,"../Control.Monad.Rec.Class/index.js":55,"../Data.Bifunctor/index.js":105,"../Data.Boolean/index.js":107,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.HeytingAlgebra/index.js":165,"../Data.List.Types/index.js":192,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.NonEmpty/index.js":208,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unit/index.js":266}],194:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();
var values = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
};
var size = function (v) {
    if (v instanceof Leaf) {
        return 0;
    };
    if (v instanceof Two) {
        return (1 + size(v.value0) | 0) + size(v.value3) | 0;
    };
    if (v instanceof Three) {
        return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [ v.constructor.name ]);
};
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var toUnfoldable = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                    };
                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                    };
                    if (v.value0 instanceof Two) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                        return;
                    };
                    if (v.value0 instanceof Three) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
var toUnfoldableUnordered = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                    };
                    if (v.value0 instanceof Three) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var showTree = function (dictShow) {
    return function (dictShow1) {
        return function (v) {
            if (v instanceof Leaf) {
                return "Leaf";
            };
            if (v instanceof Two) {
                return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
            };
            if (v instanceof Three) {
                return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [ v.constructor.name ]);
        };
    };
};
var showMap = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (m) {
            return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
        });
    };
};
var lookupLE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value4,
                        value: v.value5
                    });
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookupGE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookup = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Leaf) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Two) {
                    var v2 = comp(k)(v.value1);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    if (v2 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                if (v instanceof Three) {
                    var v3 = comp(k)(v.value1);
                    if (v3 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    var v4 = comp(k)(v.value4);
                    if (v4 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value5);
                    };
                    if (v3 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    if (v4 instanceof Data_Ordering.GT) {
                        $copy_v = v.value6;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return go;
    };
};
var member = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
    };
};
var keys = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [ v.constructor.name ]);
};
var isSubmap = function (dictOrd) {
    return function (dictEq) {
        return function (m1) {
            return function (m2) {
                var f = function (v) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                };
                return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
            };
        };
    };
};
var isEmpty = function (v) {
    if (v instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 96, column 39): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorMap;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 101, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var fromZipper = function ($copy_dictOrd) {
    return function ($copy_v) {
        return function ($copy_tree) {
            var $tco_var_dictOrd = $copy_dictOrd;
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(dictOrd, v, tree) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return tree;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof TwoLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                        return;
                    };
                    if (v.value0 instanceof TwoRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                        return;
                    };
                    if (v.value0 instanceof ThreeLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeMiddle) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
            };
            return $tco_result;
        };
    };
};
var insert = function (dictOrd) {
    return function (k) {
        return function (v) {
            var up = function ($copy_v1) {
                return function ($copy_v2) {
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1, v2) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            if (v1.value0 instanceof TwoLeft) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                            };
                            if (v1.value0 instanceof TwoRight) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                            };
                            if (v1.value0 instanceof ThreeLeft) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeMiddle) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeRight) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                return;
                            };
                            throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                    };
                    return $tco_result;
                };
            };
            var comp = Data_Ord.compare(dictOrd);
            var down = function ($copy_ctx) {
                return function ($copy_v1) {
                    var $tco_var_ctx = $copy_ctx;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(ctx, v1) {
                        if (v1 instanceof Leaf) {
                            $tco_done = true;
                            return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                        };
                        if (v1 instanceof Two) {
                            var v2 = comp(k)(v1.value1);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                            };
                            if (v2 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                            $copy_v1 = v1.value3;
                            return;
                        };
                        if (v1 instanceof Three) {
                            var v3 = comp(k)(v1.value1);
                            if (v3 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                            };
                            var v4 = comp(k)(v1.value4);
                            if (v4 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                            };
                            if (v3 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value3;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                            $copy_v1 = v1.value6;
                            return;
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return down(Data_List_Types.Nil.value);
        };
    };
};
var pop = function (dictOrd) {
    return function (k) {
        var up = function ($copy_ctxs) {
            return function ($copy_tree) {
                var $tco_var_ctxs = $copy_ctxs;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctxs, tree) {
                    if (ctxs instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return tree;
                    };
                    if (ctxs instanceof Data_List_Types.Cons) {
                        if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                };
                return $tco_result;
            };
        };
        var removeMaxNode = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return up(ctx)(Leaf.value);
                    };
                    if (m instanceof Two) {
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                        $tco_done = true;
                        return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                    };
                    if (m instanceof Three) {
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        var maxNode = function ($copy_m) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(m) {
                if (m instanceof Two && m.value3 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value1,
                        value: m.value2
                    };
                };
                if (m instanceof Two) {
                    $copy_m = m.value3;
                    return;
                };
                if (m instanceof Three && m.value6 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value4,
                        value: m.value5
                    };
                };
                if (m instanceof Three) {
                    $copy_m = m.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_m);
            };
            return $tco_result;
        };
        var comp = Data_Ord.compare(dictOrd);
        var down = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    if (m instanceof Two) {
                        var v = comp(k)(m.value1);
                        if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three) {
                        var leaves = (function () {
                            if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                return true;
                            };
                            return false;
                        })();
                        var v = comp(k)(m.value4);
                        var v3 = comp(k)(m.value1);
                        if (leaves && v3 instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                        };
                        if (leaves && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                        };
                        if (v3 instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value3);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                        };
                        if (v3 instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value3;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        return down(Data_List_Types.Nil.value);
    };
};
var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
});
var traversableMap = new Data_Traversable.Traversable(function () {
    return foldableMap;
}, function () {
    return functorMap;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 119, column 47): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldSubmap = function (dictOrd) {
    return function (dictMonoid) {
        return function (kmin) {
            return function (kmax) {
                return function (f) {
                    var tooSmall = (function () {
                        if (kmin instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [ kmin.constructor.name ]);
                    })();
                    var tooLarge = (function () {
                        if (kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [ kmax.constructor.name ]);
                    })();
                    var inBounds = (function () {
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](true);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [ kmin.constructor.name, kmax.constructor.name ]);
                    })();
                    var go = function (v) {
                        if (v instanceof Leaf) {
                            return Data_Monoid.mempty(dictMonoid);
                        };
                        if (v instanceof Two) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $633 = tooSmall(v.value1);
                                if ($633) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $634 = inBounds(v.value1);
                                if ($634) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $635 = tooLarge(v.value1);
                                if ($635) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })()));
                        };
                        if (v instanceof Three) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $640 = tooSmall(v.value1);
                                if ($640) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $641 = inBounds(v.value1);
                                if ($641) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $642 = tooSmall(v.value4) || tooLarge(v.value1);
                                if ($642) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $643 = inBounds(v.value4);
                                if ($643) {
                                    return f(v.value4)(v.value5);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $644 = tooLarge(v.value4);
                                if ($644) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value6);
                            })()))));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [ v.constructor.name ]);
                    };
                    return go;
                };
            };
        };
    };
};
var findMin = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupGT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMin(v.value3);
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var findMax = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value3;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value4,
                        value: v1.value5
                    });
                    $copy_v1 = v1.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupLT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMax(v.value0);
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var eqMap = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (m1) {
            return function (m2) {
                return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var ordMap = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (m1) {
            return function (m2) {
                return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var eq1Map = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqMap(dictEq)(dictEq1));
    });
};
var ord1Map = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Map(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
    });
};
var empty = Leaf.value;
var fromFoldable = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (v) {
                return insert(dictOrd)(v.value0)(v.value1)(m);
            };
        })(empty);
    };
};
var filterWithKey = function (dictOrd) {
    return function (predicate) {
        return function ($758) {
            return fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList)(Data_List_Lazy.filter(Data_Tuple.uncurry(predicate))(toUnfoldable(Data_List_Lazy_Types.unfoldableList)($758)));
        };
    };
};
var filter = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(Data_Function["const"](predicate));
    };
};
var filterKeys = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(function ($759) {
            return Data_Function["const"](predicate($759));
        });
    };
};
var fromFoldableWithIndex = function (dictOrd) {
    return function (dictFoldableWithIndex) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
            return function (m) {
                return function (v) {
                    return insert(dictOrd)(k)(v)(m);
                };
            };
        })(empty);
    };
};
var intersectionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function ($copy_v) {
                    return function ($copy_v1) {
                        return function ($copy_m) {
                            var $tco_var_v = $copy_v;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v, v1, m) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                    var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1;
                                        $copy_m = m;
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.GT) {
                                        $tco_var_v = v;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = m;
                                        return;
                                    };
                                    throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [ v2.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [ v.constructor.name, v1.constructor.name, m.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                            };
                            return $tco_result;
                        };
                    };
                };
                return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
            };
        };
    };
};
var intersection = function (dictOrd) {
    return intersectionWith(dictOrd)(Data_Function["const"]);
};
var $$delete = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
        };
    };
};
var difference = function (dictOrd) {
    return function (m1) {
        return function (m2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
        };
    };
};
var checkValid = function (tree) {
    var allHeights = function (v) {
        if (v instanceof Leaf) {
            return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
        };
        if (v instanceof Two) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        };
        if (v instanceof Three) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [ v.constructor.name ]);
    };
    return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};
var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableMap;
}, function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(function ($760) {
                return Data_Tuple.uncurry(Data_Function.flip(f)($760));
            })(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
});
var mapMaybeWithKey = function (dictOrd) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
            return function (a) {
                return function (acc) {
                    return Data_Maybe.maybe(acc)(function (b) {
                        return insert(dictOrd)(k)(b)(acc);
                    })(f(k)(a));
                };
            };
        })(empty);
    };
};
var mapMaybe = function (dictOrd) {
    return function ($761) {
        return mapMaybeWithKey(dictOrd)(Data_Function["const"]($761));
    };
};
var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexMap;
}, function () {
    return functorWithIndexMap;
}, function () {
    return traversableMap;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 136, column 67): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var alter = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                var v = f(lookup(dictOrd)(k)(m));
                if (v instanceof Data_Maybe.Nothing) {
                    return $$delete(dictOrd)(k)(m);
                };
                if (v instanceof Data_Maybe.Just) {
                    return insert(dictOrd)(k)(v.value0)(m);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
            };
        };
    };
};
var fromFoldableWith = function (dictOrd) {
    return function (dictFoldable) {
        return function (f) {
            var combine = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Maybe.Just) {
                        return Data_Maybe.Just.create(f(v)(v1.value0));
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Data_Maybe.Just(v);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(function (m) {
                return function (v) {
                    return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                };
            })(empty);
        };
    };
};
var insertWith = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (v) {
                return alter(dictOrd)(function ($762) {
                    return Data_Maybe.Just.create(Data_Maybe.maybe(v)(Data_Function.flip(f)(v))($762));
                })(k);
            };
        };
    };
};
var unionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (m) {
                    return function (v) {
                        return alter(dictOrd)(function ($763) {
                            return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($763));
                        })(v.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
            };
        };
    };
};
var union = function (dictOrd) {
    return unionWith(dictOrd)(Data_Function["const"]);
};
var semigroupMap = function (dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var monoidMap = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(dictOrd);
    }, empty);
};
var submap = function (dictOrd) {
    return function (kmin) {
        return function (kmax) {
            return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
        };
    };
};
var unions = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var update = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    showTree: showTree,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    checkValid: checkValid,
    insert: insert,
    insertWith: insertWith,
    lookup: lookup,
    lookupLE: lookupLE,
    lookupLT: lookupLT,
    lookupGE: lookupGE,
    lookupGT: lookupGT,
    findMin: findMin,
    findMax: findMax,
    foldSubmap: foldSubmap,
    submap: submap,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromFoldableWithIndex: fromFoldableWithIndex,
    toUnfoldable: toUnfoldable,
    toUnfoldableUnordered: toUnfoldableUnordered,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    keys: keys,
    values: values,
    union: union,
    unionWith: unionWith,
    unions: unions,
    intersection: intersection,
    intersectionWith: intersectionWith,
    difference: difference,
    isSubmap: isSubmap,
    size: size,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    mapMaybeWithKey: mapMaybeWithKey,
    mapMaybe: mapMaybe,
    eq1Map: eq1Map,
    eqMap: eqMap,
    ord1Map: ord1Map,
    ordMap: ordMap,
    showMap: showMap,
    semigroupMap: semigroupMap,
    monoidMap: monoidMap,
    functorMap: functorMap,
    functorWithIndexMap: functorWithIndexMap,
    foldableMap: foldableMap,
    foldableWithIndexMap: foldableWithIndexMap,
    traversableMap: traversableMap,
    traversableWithIndexMap: traversableWithIndexMap
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.HeytingAlgebra/index.js":165,"../Data.List.Lazy.Types/index.js":189,"../Data.List.Lazy/index.js":190,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262}],195:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var ordFirst = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;
var eqFirst = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1First = Data_Maybe.eq1Maybe;
var boundedFirst = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function () {
    return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function () {
    return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function () {
    return applicativeFirst;
}, function () {
    return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
    return alternativeFirst;
}, function () {
    return monadFirst;
});
module.exports = {
    First: First,
    newtypeFirst: newtypeFirst,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    functorFirst: functorFirst,
    invariantFirst: invariantFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    extendFirst: extendFirst,
    showFirst: showFirst,
    semigroupFirst: semigroupFirst,
    monoidFirst: monoidFirst,
    altFirst: altFirst,
    plusFirst: plusFirst,
    alternativeFirst: alternativeFirst,
    monadZeroFirst: monadZeroFirst
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],196:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 52, column 45): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordLast = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
    return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;
var eqLast = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1Last = Data_Maybe.eq1Maybe;
var boundedLast = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function () {
    return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function () {
    return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function () {
    return applicativeLast;
}, function () {
    return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function () {
    return alternativeLast;
}, function () {
    return monadLast;
});
module.exports = {
    Last: Last,
    newtypeLast: newtypeLast,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    functorLast: functorLast,
    invariantLast: invariantLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    extendLast: extendLast,
    showLast: showLast,
    semigroupLast: semigroupLast,
    monoidLast: monoidLast,
    altLast: altLast,
    plusLast: plusLast,
    alternativeLast: alternativeLast,
    monadZeroLast: monadZeroLast
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],197:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Just) {
            return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 47): " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 174, column 62): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var optional = function (dictAlternative) {
    return function (a) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
    };
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Data_Unit.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromJust = function (dictPartial) {
    return function (v) {
        if (v instanceof Just) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
    };
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return true;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMaybe(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Nothing) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Nothing) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 194, column 8 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
    return eq1Maybe;
}, function (dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
});
var boundedMaybe = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordMaybe(dictBounded.Ord0());
    }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};
var applyMaybe = new Control_Apply.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Data_Functor.map(functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 67, column 35): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Control_Bind.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 125, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return applicativeMaybe;
}, function () {
    return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing,
    Just: Just,
    maybe: maybe,
    "maybe'": maybe$prime,
    fromMaybe: fromMaybe,
    "fromMaybe'": fromMaybe$prime,
    isJust: isJust,
    isNothing: isNothing,
    fromJust: fromJust,
    optional: optional,
    functorMaybe: functorMaybe,
    applyMaybe: applyMaybe,
    applicativeMaybe: applicativeMaybe,
    altMaybe: altMaybe,
    plusMaybe: plusMaybe,
    alternativeMaybe: alternativeMaybe,
    bindMaybe: bindMaybe,
    monadMaybe: monadMaybe,
    monadZeroMaybe: monadZeroMaybe,
    extendMaybe: extendMaybe,
    invariantMaybe: invariantMaybe,
    semigroupMaybe: semigroupMaybe,
    monoidMaybe: monoidMaybe,
    eqMaybe: eqMaybe,
    eq1Maybe: eq1Maybe,
    ordMaybe: ordMaybe,
    ord1Maybe: ord1Maybe,
    boundedMaybe: boundedMaybe,
    showMaybe: showMaybe
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Extend/index.js":40,"../Control.Monad/index.js":65,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Bounded/index.js":110,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Unit/index.js":266}],198:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var textXML = "text/xml";
var textPlain = "text/plain";
var textHTML = "text/html";
var textCSV = "text/csv";
var multipartFormData = "multipart/form-data";
var imagePNG = "image/png";
var imageJPEG = "image/jpeg";
var imageGIF = "image/gif";
var applicationXML = "application/xml";
var applicationOctetStream = "application/octet-stream";
var applicationJavascript = "application/javascript";
var applicationJSON = "application/json";
var applicationFormURLEncoded = "application/x-www-form-urlencoded";
module.exports = {
    applicationFormURLEncoded: applicationFormURLEncoded,
    applicationJSON: applicationJSON,
    applicationJavascript: applicationJavascript,
    applicationOctetStream: applicationOctetStream,
    applicationXML: applicationXML,
    imageGIF: imageGIF,
    imageJPEG: imageJPEG,
    imagePNG: imagePNG,
    multipartFormData: multipartFormData,
    textCSV: textCSV,
    textHTML: textHTML,
    textPlain: textPlain,
    textXML: textXML
};

},{}],199:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var MediaType = function (x) {
    return x;
};
var showMediaType = new Data_Show.Show(function (v) {
    return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
    return n;
}, MediaType);
var eqMediaType = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordMediaType = new Data_Ord.Ord(function () {
    return eqMediaType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    MediaType: MediaType,
    newtypeMediaType: newtypeMediaType,
    eqMediaType: eqMediaType,
    ordMediaType: ordMediaType,
    showMediaType: showMediaType
};

},{"../Data.Eq/index.js":133,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235}],200:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return dictOrd;
};
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Data_Semiring.zero(dictSemiring));
};
var functorAdditive = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqAdditive = function (dictEq) {
    return dictEq;
};
var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function () {
    return eq1Additive;
}, function (dictOrd) {
    return Data_Ord.compare(ordAdditive(dictOrd));
});
var boundedAdditive = function (dictBounded) {
    return dictBounded;
};
var applyAdditive = new Control_Apply.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Control_Bind.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive,
    eqAdditive: eqAdditive,
    eq1Additive: eq1Additive,
    ordAdditive: ordAdditive,
    ord1Additive: ord1Additive,
    boundedAdditive: boundedAdditive,
    showAdditive: showAdditive,
    functorAdditive: functorAdditive,
    applyAdditive: applyAdditive,
    applicativeAdditive: applicativeAdditive,
    bindAdditive: bindAdditive,
    monadAdditive: monadAdditive,
    semigroupAdditive: semigroupAdditive,
    monoidAdditive: monoidAdditive
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],201:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var semigroupConj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return dictOrd;
};
var monoidConj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var functorConj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqConj = function (dictEq) {
    return dictEq;
};
var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function () {
    return eq1Conj;
}, function (dictOrd) {
    return Data_Ord.compare(ordConj(dictOrd));
});
var boundedConj = function (dictBounded) {
    return dictBounded;
};
var applyConj = new Control_Apply.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Control_Bind.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj,
    eqConj: eqConj,
    eq1Conj: eq1Conj,
    ordConj: ordConj,
    ord1Conj: ord1Conj,
    boundedConj: boundedConj,
    showConj: showConj,
    functorConj: functorConj,
    applyConj: applyConj,
    applicativeConj: applicativeConj,
    bindConj: bindConj,
    monadConj: monadConj,
    semigroupConj: semigroupConj,
    monoidConj: monoidConj,
    semiringConj: semiringConj
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],202:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var semigroupDisj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return dictOrd;
};
var monoidDisj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var functorDisj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDisj = function (dictEq) {
    return dictEq;
};
var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function () {
    return eq1Disj;
}, function (dictOrd) {
    return Data_Ord.compare(ordDisj(dictOrd));
});
var boundedDisj = function (dictBounded) {
    return dictBounded;
};
var applyDisj = new Control_Apply.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Control_Bind.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj,
    eqDisj: eqDisj,
    eq1Disj: eq1Disj,
    ordDisj: ordDisj,
    ord1Disj: ord1Disj,
    boundedDisj: boundedDisj,
    showDisj: showDisj,
    functorDisj: functorDisj,
    applyDisj: applyDisj,
    applicativeDisj: applicativeDisj,
    bindDisj: bindDisj,
    monadDisj: monadDisj,
    semigroupDisj: semigroupDisj,
    monoidDisj: monoidDisj,
    semiringDisj: semiringDisj
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],203:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
        };
    });
};
var ordDual = function (dictOrd) {
    return dictOrd;
};
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid.Semigroup0());
    }, Data_Monoid.mempty(dictMonoid));
};
var functorDual = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDual = function (dictEq) {
    return dictEq;
};
var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function () {
    return eq1Dual;
}, function (dictOrd) {
    return Data_Ord.compare(ordDual(dictOrd));
});
var boundedDual = function (dictBounded) {
    return dictBounded;
};
var applyDual = new Control_Apply.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Control_Bind.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual,
    eqDual: eqDual,
    eq1Dual: eq1Dual,
    ordDual: ordDual,
    ord1Dual: ord1Dual,
    boundedDual: boundedDual,
    showDual: showDual,
    functorDual: functorDual,
    applyDual: applyDual,
    applicativeDual: applicativeDual,
    bindDual: bindDual,
    monadDual: monadDual,
    semigroupDual: semigroupDual,
    monoidDual: monoidDual
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],204:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Endo = function (x) {
    return x;
};
var showEndo = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupEndo = function (dictSemigroupoid) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
        };
    });
};
var ordEndo = function (dictOrd) {
    return dictOrd;
};
var monoidEndo = function (dictCategory) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEndo(dictCategory.Semigroupoid0());
    }, Control_Category.identity(dictCategory));
};
var eqEndo = function (dictEq) {
    return dictEq;
};
var boundedEndo = function (dictBounded) {
    return dictBounded;
};
module.exports = {
    Endo: Endo,
    eqEndo: eqEndo,
    ordEndo: ordEndo,
    boundedEndo: boundedEndo,
    showEndo: showEndo,
    semigroupEndo: semigroupEndo,
    monoidEndo: monoidEndo
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],205:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return dictOrd;
};
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Data_Semiring.one(dictSemiring));
};
var functorMultiplicative = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqMultiplicative = function (dictEq) {
    return dictEq;
};
var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function () {
    return eq1Multiplicative;
}, function (dictOrd) {
    return Data_Ord.compare(ordMultiplicative(dictOrd));
});
var boundedMultiplicative = function (dictBounded) {
    return dictBounded;
};
var applyMultiplicative = new Control_Apply.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative,
    eqMultiplicative: eqMultiplicative,
    eq1Multiplicative: eq1Multiplicative,
    ordMultiplicative: ordMultiplicative,
    ord1Multiplicative: ord1Multiplicative,
    boundedMultiplicative: boundedMultiplicative,
    showMultiplicative: showMultiplicative,
    functorMultiplicative: functorMultiplicative,
    applyMultiplicative: applyMultiplicative,
    applicativeMultiplicative: applicativeMultiplicative,
    bindMultiplicative: bindMultiplicative,
    monadMultiplicative: monadMultiplicative,
    semigroupMultiplicative: semigroupMultiplicative,
    monoidMultiplicative: monoidMultiplicative
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],206:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
    this.SemigroupRecord0 = SemigroupRecord0;
    this.memptyRecord = memptyRecord;
};
var Monoid = function (Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
    return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function () {
    return Data_Semigroup.semigroupRecordNil;
}, function (v) {
    return {};
});
var monoidOrdering = new Monoid(function () {
    return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function () {
    return Data_Semigroup.semigroupArray;
}, [  ]);
var memptyRecord = function (dict) {
    return dict.memptyRecord;
};
var monoidRecord = function (dictRowToList) {
    return function (dictMonoidRecord) {
        return new Monoid(function () {
            return Data_Semigroup.semigroupRecord(dictRowToList)(dictMonoidRecord.SemigroupRecord0());
        }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }, function (v) {
        return mempty(dictMonoid);
    });
};
var monoidRecordCons = function (dictIsSymbol) {
    return function (dictMonoid) {
        return function (dictCons) {
            return function (dictMonoidRecord) {
                return new MonoidRecord(function () {
                    return Data_Semigroup.semigroupRecordCons(dictIsSymbol)(dictCons)(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                }, function (v) {
                    var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(mempty(dictMonoid))(tail);
                });
            };
        };
    };
};
var power = function (dictMonoid) {
    return function (x) {
        var go = function (p) {
            if (p <= 0) {
                return mempty(dictMonoid);
            };
            if (p === 1) {
                return x;
            };
            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            };
            if (Data_Boolean.otherwise) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            };
            throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [ p.constructor.name ]);
        };
        return go;
    };
};
var guard = function (dictMonoid) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return mempty(dictMonoid);
            };
            throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
module.exports = {
    Monoid: Monoid,
    mempty: mempty,
    power: power,
    guard: guard,
    MonoidRecord: MonoidRecord,
    memptyRecord: memptyRecord,
    monoidUnit: monoidUnit,
    monoidOrdering: monoidOrdering,
    monoidFn: monoidFn,
    monoidString: monoidString,
    monoidArray: monoidArray,
    monoidRecord: monoidRecord,
    monoidRecordNil: monoidRecordNil,
    monoidRecordCons: monoidRecordCons
};

},{"../Data.Boolean/index.js":107,"../Data.EuclideanRing/index.js":135,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401}],207:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Newtype = function (unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
};
var wrap = function (dict) {
    return dict.wrap;
};
var unwrap = function (dict) {
    return dict.unwrap;
};
var underF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($66) {
                            return function ($67) {
                                return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)))($66)($67));
                            };
                        };
                    };
                };
            };
        };
    };
};
var underF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($68) {
                            return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($68)));
                        };
                    };
                };
            };
        };
    };
};
var under2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($69) {
                    return function ($70) {
                        return unwrap(dictNewtype1)(Data_Function.on(f)(wrap(dictNewtype))($69)($70));
                    };
                };
            };
        };
    };
};
var under = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($71) {
                    return unwrap(dictNewtype1)(f(wrap(dictNewtype)($71)));
                };
            };
        };
    };
};
var un = function (dictNewtype) {
    return function (v) {
        return unwrap(dictNewtype);
    };
};
var traverse = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                return function ($72) {
                    return Data_Functor.map(dictFunctor)(wrap(dictNewtype))(f(unwrap(dictNewtype)($72)));
                };
            };
        };
    };
};
var overF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($73) {
                            return function ($74) {
                                return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)))($73)($74));
                            };
                        };
                    };
                };
            };
        };
    };
};
var overF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($75) {
                            return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($75)));
                        };
                    };
                };
            };
        };
    };
};
var over2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($76) {
                    return function ($77) {
                        return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($76)($77));
                    };
                };
            };
        };
    };
};
var over = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                return function ($78) {
                    return wrap(dictNewtype1)(f(unwrap(dictNewtype)($78)));
                };
            };
        };
    };
};
var op = function (dictNewtype) {
    return un(dictNewtype);
};
var newtypeMultiplicative = new Newtype(function (v) {
    return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function (v) {
    return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function (v) {
    return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function (v) {
    return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function (v) {
    return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function (v) {
    return v;
}, Data_Monoid_Additive.Additive);
var collect = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                return function ($79) {
                    return wrap(dictNewtype)(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($79)));
                };
            };
        };
    };
};
var alaF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        return function ($80) {
                            return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                        };
                    };
                };
            };
        };
    };
};
var ala = function (dictFunctor) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (v) {
                return function (f) {
                    return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                };
            };
        };
    };
};
module.exports = {
    unwrap: unwrap,
    wrap: wrap,
    Newtype: Newtype,
    un: un,
    op: op,
    ala: ala,
    alaF: alaF,
    over: over,
    overF: overF,
    under: under,
    underF: underF,
    over2: over2,
    overF2: overF2,
    under2: under2,
    underF2: underF2,
    traverse: traverse,
    collect: collect,
    newtypeAdditive: newtypeAdditive,
    newtypeMultiplicative: newtypeMultiplicative,
    newtypeConj: newtypeConj,
    newtypeDisj: newtypeDisj,
    newtypeDual: newtypeDual,
    newtypeEndo: newtypeEndo,
    newtypeFirst: newtypeFirst,
    newtypeLast: newtypeLast
};

},{"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Monoid.Additive/index.js":200,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Endo/index.js":204,"../Data.Monoid.Multiplicative/index.js":205,"../Data.Semigroup.First/index.js":225,"../Data.Semigroup.Last/index.js":227}],208:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmpty = (function () {
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    return NonEmpty;
})();
var unfoldable1NonEmpty = function (dictUnfoldable) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
        };
    });
};
var tail = function (v) {
    return v.value1;
};
var singleton = function (dictPlus) {
    return function (a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
    };
};
var showNonEmpty = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var oneOf = function (dictAlternative) {
    return function (v) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
    };
};
var head = function (v) {
    return v.value0;
};
var functorNonEmpty = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (m) {
            return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndex = function (dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
        return functorNonEmpty(dictFunctorWithIndex.Functor0());
    }, function (f) {
        return function (v) {
            return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
                return f(Data_Maybe.Just.create($146));
            })(v.value1));
        };
    });
};
var fromNonEmpty = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var foldl1 = function (dictFoldable) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
        };
    };
};
var foldableNonEmpty = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
        };
    });
};
var foldableWithIndexNonEmpty = function (dictFoldableWithIndex) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function () {
        return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
    }, function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
                    return f(Data_Maybe.Just.create($147));
                })(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
                    return f(Data_Maybe.Just.create($148));
                })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
                    return f(Data_Maybe.Just.create($149));
                })(b)(v.value1));
            };
        };
    });
};
var traversableNonEmpty = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableNonEmpty(dictTraversable.Foldable1());
    }, function () {
        return functorNonEmpty(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var traversableWithIndexNonEmpty = function (dictTraversableWithIndex) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
        return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
    }, function () {
        return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
    }, function () {
        return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
                    return f(Data_Maybe.Just.create($150));
                })(v.value1));
            };
        };
    });
};
var foldable1NonEmpty = function (dictFoldable) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableNonEmpty(dictFoldable);
    }, function (dictSemigroup) {
        return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictSemigroup) {
        return function (f) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(function (s) {
                    return function (a1) {
                        return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                    };
                })(f(v.value0))(v.value1);
            };
        };
    });
};
var eqNonEmpty = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
            };
        });
    };
};
var ordNonEmpty = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
            };
        });
    };
};
var eq1NonEmpty = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
    });
};
var ord1NonEmpty = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1NonEmpty(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
    });
};
module.exports = {
    NonEmpty: NonEmpty,
    singleton: singleton,
    foldl1: foldl1,
    fromNonEmpty: fromNonEmpty,
    oneOf: oneOf,
    head: head,
    tail: tail,
    showNonEmpty: showNonEmpty,
    eqNonEmpty: eqNonEmpty,
    eq1NonEmpty: eq1NonEmpty,
    ordNonEmpty: ordNonEmpty,
    ord1NonEmpty: ord1NonEmpty,
    functorNonEmpty: functorNonEmpty,
    functorWithIndex: functorWithIndex,
    foldableNonEmpty: foldableNonEmpty,
    foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
    traversableNonEmpty: traversableNonEmpty,
    traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
    foldable1NonEmpty: foldable1NonEmpty,
    unfoldable1NonEmpty: unfoldable1NonEmpty
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Control.Plus/index.js":70,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Data.Unfoldable1/index.js":264}],209:[function(require,module,exports){
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};

},{}],210:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
var toMaybe = function (n) {
    return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};
var showNullable = function (dictShow) {
    return new Data_Show.Show(function ($5) {
        return Data_Maybe.maybe("null")(Data_Show.show(dictShow))(toMaybe($5));
    });
};
var eqNullable = function (dictEq) {
    return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
};
var ordNullable = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqNullable(dictOrd.Eq0());
    }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
};
var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqNullable(dictEq));
});
var ord1Nullable = new Data_Ord.Ord1(function () {
    return eq1Nullable;
}, function (dictOrd) {
    return Data_Ord.compare(ordNullable(dictOrd));
});
module.exports = {
    toMaybe: toMaybe,
    toNullable: toNullable,
    showNullable: showNullable,
    eqNullable: eqNullable,
    eq1Nullable: eq1Nullable,
    ordNullable: ordNullable,
    ord1Nullable: ord1Nullable,
    "null": $foreign["null"],
    notNull: $foreign.notNull
};

},{"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"./foreign.js":209}],211:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Max = function (x) {
    return x;
};
var showMax = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Max " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMax = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.max(dictOrd)(v)(v1);
        };
    });
};
var newtypeMax = new Data_Newtype.Newtype(function (n) {
    return n;
}, Max);
var monoidMax = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMax(dictBounded.Ord0());
    }, Data_Bounded.bottom(dictBounded));
};
var eqMax = function (dictEq) {
    return dictEq;
};
var ordMax = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMax(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Max: Max,
    newtypeMax: newtypeMax,
    eqMax: eqMax,
    ordMax: ordMax,
    semigroupMax: semigroupMax,
    monoidMax: monoidMax,
    showMax: showMax
};

},{"../Data.Bounded/index.js":110,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],212:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Min = function (x) {
    return x;
};
var showMin = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Min " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMin = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.min(dictOrd)(v)(v1);
        };
    });
};
var newtypeMin = new Data_Newtype.Newtype(function (n) {
    return n;
}, Min);
var monoidMin = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMin(dictBounded.Ord0());
    }, Data_Bounded.top(dictBounded));
};
var eqMin = function (dictEq) {
    return dictEq;
};
var ordMin = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMin(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Min: Min,
    newtypeMin: newtypeMin,
    eqMin: eqMin,
    ordMin: ordMin,
    semigroupMin: semigroupMin,
    monoidMin: monoidMin,
    showMin: showMin
};

},{"../Data.Bounded/index.js":110,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],213:[function(require,module,exports){
"use strict";

var unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

},{}],214:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var OrdRecord = function (EqRecord0, compareRecord) {
    this.EqRecord0 = EqRecord0;
    this.compareRecord = compareRecord;
};
var Ord1 = function (Eq10, compare1) {
    this.Eq10 = Eq10;
    this.compare1 = compare1;
};
var Ord = function (Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
var ordVoid = new Ord(function () {
    return Data_Eq.eqVoid;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordUnit = new Ord(function () {
    return Data_Eq.eqUnit;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordString = new Ord(function () {
    return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function () {
    return Data_Eq.eqRowNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Ordering.EQ.value;
        };
    };
});
var ordOrdering = new Ord(function () {
    return Data_Ordering.eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.GT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 112, column 37): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordNumber = new Ord(function () {
    return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function () {
    return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function () {
    return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function () {
    return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var compareRecord = function (dict) {
    return dict.compareRecord;
};
var ordRecord = function (dictRowToList) {
    return function (dictOrdRecord) {
        return new Ord(function () {
            return Data_Eq.eqRec(dictRowToList)(dictOrdRecord.EqRecord0());
        }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var compare1 = function (dict) {
    return dict.compare1;
};
var compare = function (dict) {
    return dict.compare;
};
var comparing = function (dictOrd) {
    return function (f) {
        return function (x) {
            return function (y) {
                return compare(dictOrd)(f(x))(f(y));
            };
        };
    };
};
var greaterThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return true;
            };
            return false;
        };
    };
};
var greaterThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return false;
            };
            return true;
        };
    };
};
var signum = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($43) {
                return Data_Semiring.one(dictRing.Semiring0());
            };
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
    };
};
var lessThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return true;
            };
            return false;
        };
    };
};
var lessThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return false;
            };
            return true;
        };
    };
};
var max = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return y;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return x;
            };
            throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
        };
    };
};
var min = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return x;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return y;
            };
            throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
        };
    };
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return Data_Eq.eqArray(dictOrd.Eq0());
    }, (function () {
        var toDelta = function (x) {
            return function (y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.GT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 70, column 1): " + [ v.constructor.name ]);
            };
        };
        return function (xs) {
            return function (ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    })());
};
var ord1Array = new Ord1(function () {
    return Data_Eq.eq1Array;
}, function (dictOrd) {
    return compare(ordArray(dictOrd));
});
var ordRecordCons = function (dictOrdRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictOrd) {
                return new OrdRecord(function () {
                    return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())(dictCons)(dictIsSymbol)(dictOrd.Eq0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                            var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                            if ($49) {
                                return left;
                            };
                            return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                        };
                    };
                });
            };
        };
    };
};
var clamp = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
};
var between = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                if (lessThan(dictOrd)(x)(low)) {
                    return false;
                };
                if (greaterThan(dictOrd)(x)(hi)) {
                    return false;
                };
                return true;
            };
        };
    };
};
var abs = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($53) {
                return x;
            };
            return Data_Ring.negate(dictRing)(x);
        };
    };
};
module.exports = {
    Ord: Ord,
    compare: compare,
    Ord1: Ord1,
    compare1: compare1,
    lessThan: lessThan,
    lessThanOrEq: lessThanOrEq,
    greaterThan: greaterThan,
    greaterThanOrEq: greaterThanOrEq,
    comparing: comparing,
    min: min,
    max: max,
    clamp: clamp,
    between: between,
    abs: abs,
    signum: signum,
    OrdRecord: OrdRecord,
    compareRecord: compareRecord,
    ordBoolean: ordBoolean,
    ordInt: ordInt,
    ordNumber: ordNumber,
    ordString: ordString,
    ordChar: ordChar,
    ordUnit: ordUnit,
    ordVoid: ordVoid,
    ordArray: ordArray,
    ordOrdering: ordOrdering,
    ord1Array: ord1Array,
    ordRecordNil: ordRecordNil,
    ordRecordCons: ordRecordCons,
    ordRecord: ordRecord
};

},{"../Data.Eq/index.js":133,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semiring/index.js":233,"../Data.Symbol/index.js":250,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"./foreign.js":213}],215:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var showOrdering = new Data_Show.Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 26, column 39): " + [ v.constructor.name ]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 21, column 49): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invert = function (v) {
    if (v instanceof GT) {
        return LT.value;
    };
    if (v instanceof EQ) {
        return EQ.value;
    };
    if (v instanceof LT) {
        return GT.value;
    };
    throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
};
var eqOrdering = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
module.exports = {
    LT: LT,
    GT: GT,
    EQ: EQ,
    invert: invert,
    eqOrdering: eqOrdering,
    semigroupOrdering: semigroupOrdering,
    showOrdering: showOrdering
};

},{"../Data.Eq/index.js":133,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],216:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Choice = function (Profunctor0, left, right) {
    this.Profunctor0 = Profunctor0;
    this.left = left;
    this.right = right;
};
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};
var splitChoice = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
            };
        };
    };
};
var fanin = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
            };
        };
    };
};
var choiceFn = new Choice(function () {
    return Data_Profunctor.profunctorFn;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(v(v1.value0));
        };
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
        };
        throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 32, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
}, Data_Functor.map(Data_Either.functorEither));
module.exports = {
    left: left,
    right: right,
    Choice: Choice,
    splitChoice: splitChoice,
    fanin: fanin,
    choiceFn: choiceFn
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Profunctor/index.js":222}],217:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Closed = function (Profunctor0, closed) {
    this.Profunctor0 = Profunctor0;
    this.closed = closed;
};
var closedFunction = new Closed(function () {
    return Data_Profunctor.profunctorFn;
}, Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var closed = function (dict) {
    return dict.closed;
};
module.exports = {
    closed: closed,
    Closed: Closed,
    closedFunction: closedFunction
};

},{"../Control.Semigroupoid/index.js":71,"../Data.Profunctor/index.js":222}],218:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Cochoice = function (Profunctor0, unleft, unright) {
    this.Profunctor0 = Profunctor0;
    this.unleft = unleft;
    this.unright = unright;
};
var unright = function (dict) {
    return dict.unright;
};
var unleft = function (dict) {
    return dict.unleft;
};
module.exports = {
    unleft: unleft,
    unright: unright,
    Cochoice: Cochoice
};

},{}],219:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Costrong = function (Profunctor0, unfirst, unsecond) {
    this.Profunctor0 = Profunctor0;
    this.unfirst = unfirst;
    this.unsecond = unsecond;
};
var unsecond = function (dict) {
    return dict.unsecond;
};
var unfirst = function (dict) {
    return dict.unfirst;
};
module.exports = {
    unfirst: unfirst,
    unsecond: unsecond,
    Costrong: Costrong
};

},{}],220:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Closed = require("../Data.Profunctor.Closed/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Star = function (x) {
    return x;
};
var semigroupoidStar = function (dictBind) {
    return new Control_Semigroupoid.Semigroupoid(function (v) {
        return function (v1) {
            return function (x) {
                return Control_Bind.bind(dictBind)(v1(x))(v);
            };
        };
    });
};
var profunctorStar = function (dictFunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                return function ($78) {
                    return Data_Functor.map(dictFunctor)(g)(v(f($78)));
                };
            };
        };
    });
};
var strongStar = function (dictFunctor) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorStar(dictFunctor);
    }, function (v) {
        return function (v1) {
            return Data_Functor.map(dictFunctor)(function (v2) {
                return new Data_Tuple.Tuple(v2, v1.value1);
            })(v(v1.value0));
        };
    }, function (v) {
        return function (v1) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create(v1.value0))(v(v1.value1));
        };
    });
};
var newtypeStar = new Data_Newtype.Newtype(function (n) {
    return n;
}, Star);
var invariantStar = function (dictInvariant) {
    return new Data_Functor_Invariant.Invariant(function (f) {
        return function (g) {
            return function (v) {
                return function ($79) {
                    return Data_Functor_Invariant.imap(dictInvariant)(f)(g)(v($79));
                };
            };
        };
    });
};
var hoistStar = function (f) {
    return function (v) {
        return function ($80) {
            return f(v($80));
        };
    };
};
var functorStar = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function ($81) {
                return Data_Functor.map(dictFunctor)(f)(v($81));
            };
        };
    });
};
var distributiveStar = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorStar(dictDistributive.Functor0());
    }, function (dictFunctor) {
        return function (f) {
            return function ($82) {
                return Data_Distributive.distribute(distributiveStar(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($82));
            };
        };
    }, function (dictFunctor) {
        return function (f) {
            return function (a) {
                return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (v) {
                    return v(a);
                })(f);
            };
        };
    });
};
var closedStar = function (dictDistributive) {
    return new Data_Profunctor_Closed.Closed(function () {
        return profunctorStar(dictDistributive.Functor0());
    }, function (v) {
        return function (g) {
            return Data_Distributive.distribute(dictDistributive)(Data_Functor.functorFn)(function ($83) {
                return v(g($83));
            });
        };
    });
};
var choiceStar = function (dictApplicative) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorStar((dictApplicative.Apply0()).Functor0());
    }, function (v) {
        return Star(Data_Either.either(function ($84) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Left.create)(v($84));
        })(function ($85) {
            return Control_Applicative.pure(dictApplicative)(Data_Either.Right.create($85));
        }));
    }, function (v) {
        return Star(Data_Either.either(function ($86) {
            return Control_Applicative.pure(dictApplicative)(Data_Either.Left.create($86));
        })(function ($87) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create)(v($87));
        }));
    });
};
var categoryStar = function (dictMonad) {
    return new Control_Category.Category(function () {
        return semigroupoidStar(dictMonad.Bind1());
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var applyStar = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorStar(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (a) {
                return Control_Apply.apply(dictApply)(v(a))(v1(a));
            };
        };
    });
};
var bindStar = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyStar(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return function (x) {
                return Control_Bind.bind(dictBind)(v(x))(function (a) {
                    var v1 = f(a);
                    return v1(x);
                });
            };
        };
    });
};
var applicativeStar = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyStar(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
var monadStar = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeStar(dictMonad.Applicative0());
    }, function () {
        return bindStar(dictMonad.Bind1());
    });
};
var altStar = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorStar(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return function (a) {
                return Control_Alt.alt(dictAlt)(v(a))(v1(a));
            };
        };
    });
};
var plusStar = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altStar(dictPlus.Alt0());
    }, function (v) {
        return Control_Plus.empty(dictPlus);
    });
};
var alternativeStar = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeStar(dictAlternative.Applicative0());
    }, function () {
        return plusStar(dictAlternative.Plus1());
    });
};
var monadZeroStar = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeStar(dictMonadZero.Alternative1());
    }, function () {
        return monadStar(dictMonadZero.Monad0());
    });
};
var monadPlusStar = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroStar(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    Star: Star,
    hoistStar: hoistStar,
    newtypeStar: newtypeStar,
    semigroupoidStar: semigroupoidStar,
    categoryStar: categoryStar,
    functorStar: functorStar,
    invariantStar: invariantStar,
    applyStar: applyStar,
    applicativeStar: applicativeStar,
    bindStar: bindStar,
    monadStar: monadStar,
    altStar: altStar,
    plusStar: plusStar,
    alternativeStar: alternativeStar,
    monadZeroStar: monadZeroStar,
    monadPlusStar: monadPlusStar,
    distributiveStar: distributiveStar,
    profunctorStar: profunctorStar,
    strongStar: strongStar,
    choiceStar: choiceStar,
    closedStar: closedStar
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad/index.js":65,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Control.Semigroupoid/index.js":71,"../Data.Distributive/index.js":127,"../Data.Either/index.js":129,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Profunctor.Choice/index.js":216,"../Data.Profunctor.Closed/index.js":217,"../Data.Profunctor.Strong/index.js":221,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],221:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Strong = function (Profunctor0, first, second) {
    this.Profunctor0 = Profunctor0;
    this.first = first;
    this.second = second;
};
var strongFn = new Strong(function () {
    return Data_Profunctor.profunctorFn;
}, function (a2b) {
    return function (v) {
        return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
    };
}, Data_Functor.map(Data_Tuple.functorTuple));
var second = function (dict) {
    return dict.second;
};
var first = function (dict) {
    return dict.first;
};
var splitStrong = function (dictCategory) {
    return function (dictStrong) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
            };
        };
    };
};
var fanout = function (dictCategory) {
    return function (dictStrong) {
        return function (l) {
            return function (r) {
                var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                    return new Data_Tuple.Tuple(a, a);
                })(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
            };
        };
    };
};
module.exports = {
    first: first,
    second: second,
    Strong: Strong,
    splitStrong: splitStrong,
    fanout: fanout,
    strongFn: strongFn
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Functor/index.js":156,"../Data.Profunctor/index.js":222,"../Data.Tuple/index.js":260}],222:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorFn = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return function ($9) {
                return c2d(b2c(a2b($9)));
            };
        };
    };
});
var dimap = function (dict) {
    return dict.dimap;
};
var lcmap = function (dictProfunctor) {
    return function (a2b) {
        return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictProfunctor) {
    return function (b2c) {
        return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
    };
};
var unwrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return dimap(dictProfunctor)(Data_Newtype.wrap(dictNewtype))(Data_Newtype.unwrap(dictNewtype));
    };
};
var wrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return function (v) {
            return dimap(dictProfunctor)(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype));
        };
    };
};
var arr = function (dictCategory) {
    return function (dictProfunctor) {
        return function (f) {
            return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
        };
    };
};
module.exports = {
    dimap: dimap,
    Profunctor: Profunctor,
    lcmap: lcmap,
    rmap: rmap,
    arr: arr,
    unwrapIso: unwrapIso,
    wrapIso: wrapIso,
    profunctorFn: profunctorFn
};

},{"../Control.Category/index.js":36,"../Data.Newtype/index.js":207}],223:[function(require,module,exports){
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

},{}],224:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var RingRecord = function (SemiringRecord0, subRecord) {
    this.SemiringRecord0 = SemiringRecord0;
    this.subRecord = subRecord;
};
var Ring = function (Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
var subRecord = function (dict) {
    return dict.subRecord;
};
var sub = function (dict) {
    return dict.sub;
};
var ringUnit = new Ring(function () {
    return Data_Semiring.semiringUnit;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var ringRecordNil = new RingRecord(function () {
    return Data_Semiring.semiringRecordNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var ringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictRingRecord) {
            return function (dictRing) {
                return new RingRecord(function () {
                    return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
var ringRecord = function (dictRowToList) {
    return function (dictRingRecord) {
        return new Ring(function () {
            return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());
        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
var ringFn = function (dictRing) {
    return new Ring(function () {
        return Data_Semiring.semiringFn(dictRing.Semiring0());
    }, function (f) {
        return function (g) {
            return function (x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
};
var negate = function (dictRing) {
    return function (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
    };
};
module.exports = {
    Ring: Ring,
    sub: sub,
    negate: negate,
    RingRecord: RingRecord,
    subRecord: subRecord,
    ringInt: ringInt,
    ringNumber: ringNumber,
    ringUnit: ringUnit,
    ringFn: ringFn,
    ringRecord: ringRecord,
    ringRecordNil: ringRecordNil,
    ringRecordCons: ringRecordCons
};

},{"../Data.Semiring/index.js":233,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"./foreign.js":223}],225:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(First " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
    return function (v) {
        return x;
    };
});
var ordFirst = function (dictOrd) {
    return dictOrd;
};
var functorFirst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqFirst = function (dictEq) {
    return dictEq;
};
var eq1First = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function () {
    return eq1First;
}, function (dictOrd) {
    return Data_Ord.compare(ordFirst(dictOrd));
});
var boundedFirst = function (dictBounded) {
    return dictBounded;
};
var applyFirst = new Control_Apply.Apply(function () {
    return functorFirst;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindFirst = new Control_Bind.Bind(function () {
    return applyFirst;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeFirst = new Control_Applicative.Applicative(function () {
    return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    showFirst: showFirst,
    functorFirst: functorFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    semigroupFirst: semigroupFirst
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],226:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord_Max = require("../Data.Ord.Max/index.js");
var Data_Ord_Min = require("../Data.Ord.Min/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var JoinWith = function (x) {
    return x;
};
var Act = function (x) {
    return x;
};
var Foldable1 = function (Foldable0, fold1, foldMap1) {
    this.Foldable0 = Foldable0;
    this.fold1 = fold1;
    this.foldMap1 = foldMap1;
};
var semigroupJoinWith = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return JoinWith(function (j) {
                return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
            });
        };
    });
};
var semigroupAct = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var joinee = function (v) {
    return v;
};
var getAct = function (v) {
    return v;
};
var foldMap1 = function (dict) {
    return dict.foldMap1;
};
var intercalateMap = function (dictFoldable1) {
    return function (dictSemigroup) {
        return function (j) {
            return function (f) {
                return function (foldable) {
                    return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
                        return JoinWith(Data_Function["const"](f($43)));
                    })(foldable))(j);
                };
            };
        };
    };
};
var intercalate = function (dictFoldable1) {
    return function (dictSemigroup) {
        return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
    };
};
var traverse1_ = function (dictFoldable1) {
    return function (dictApply) {
        return function (f) {
            return function (t) {
                return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
                    return Act(f($44));
                })(t)));
            };
        };
    };
};
var for1_ = function (dictFoldable1) {
    return function (dictApply) {
        return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
    };
};
var sequence1_ = function (dictFoldable1) {
    return function (dictApply) {
        return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var fold1Default = function (dictFoldable1) {
    return function (dictSemigroup) {
        return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldableDual = new Foldable1(function () {
    return Data_Foldable.foldableDual;
}, function (dictSemigroup) {
    return fold1Default(foldableDual)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var foldableMultiplicative = new Foldable1(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictSemigroup) {
    return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var fold1 = function (dict) {
    return dict.fold1;
};
var foldMap1Default = function (dictFoldable1) {
    return function (dictFunctor) {
        return function (dictSemigroup) {
            return function (f) {
                return function ($45) {
                    return fold1(dictFoldable1)(dictSemigroup)(Data_Functor.map(dictFunctor)(f)($45));
                };
            };
        };
    };
};
module.exports = {
    Foldable1: Foldable1,
    foldMap1: foldMap1,
    fold1: fold1,
    traverse1_: traverse1_,
    for1_: for1_,
    sequence1_: sequence1_,
    foldMap1Default: foldMap1Default,
    fold1Default: fold1Default,
    intercalate: intercalate,
    intercalateMap: intercalateMap,
    maximum: maximum,
    minimum: minimum,
    foldableDual: foldableDual,
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Ord.Max/index.js":211,"../Data.Ord.Min/index.js":212,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266}],227:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (x) {
        return x;
    };
});
var ordLast = function (dictOrd) {
    return dictOrd;
};
var functorLast = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqLast = function (dictEq) {
    return dictEq;
};
var eq1Last = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function () {
    return eq1Last;
}, function (dictOrd) {
    return Data_Ord.compare(ordLast(dictOrd));
});
var boundedLast = function (dictBounded) {
    return dictBounded;
};
var applyLast = new Control_Apply.Apply(function () {
    return functorLast;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindLast = new Control_Bind.Bind(function () {
    return applyLast;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeLast = new Control_Applicative.Applicative(function () {
    return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    showLast: showLast,
    functorLast: functorLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    semigroupLast: semigroupLast
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],228:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
    this.Foldable10 = Foldable10;
    this.Traversable1 = Traversable1;
    this.sequence1 = sequence1;
    this.traverse1 = traverse1;
};
var traverse1 = function (dict) {
    return dict.traverse1;
};
var sequence1Default = function (dictTraversable1) {
    return function (dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableDual = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApply) {
    return sequence1Default(traversableDual)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableMultiplicative = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApply) {
    return sequence1Default(traversableMultiplicative)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var sequence1 = function (dict) {
    return dict.sequence1;
};
var traverse1Default = function (dictTraversable1) {
    return function (dictApply) {
        return function (f) {
            return function (ta) {
                return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
            };
        };
    };
};
module.exports = {
    sequence1: sequence1,
    traverse1: traverse1,
    Traversable1: Traversable1,
    traverse1Default: traverse1Default,
    sequence1Default: sequence1Default,
    traversableDual: traversableDual,
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Category/index.js":36,"../Data.Functor/index.js":156,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Multiplicative/index.js":205,"../Data.Semigroup.Foldable/index.js":226,"../Data.Traversable/index.js":257}],229:[function(require,module,exports){
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

},{}],230:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemigroupRecord = function (appendRecord) {
    this.appendRecord = appendRecord;
};
var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var appendRecord = function (dict) {
    return dict.appendRecord;
};
var semigroupRecord = function (dictRowToList) {
    return function (dictSemigroupRecord) {
        return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var semigroupRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemigroupRecord) {
            return function (dictSemigroup) {
                return new SemigroupRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
module.exports = {
    Semigroup: Semigroup,
    append: append,
    SemigroupRecord: SemigroupRecord,
    appendRecord: appendRecord,
    semigroupString: semigroupString,
    semigroupUnit: semigroupUnit,
    semigroupVoid: semigroupVoid,
    semigroupFn: semigroupFn,
    semigroupArray: semigroupArray,
    semigroupRecord: semigroupRecord,
    semigroupRecordNil: semigroupRecordNil,
    semigroupRecordCons: semigroupRecordCons
};

},{"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Data.Void/index.js":270,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"./foreign.js":229}],231:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Free = function (x) {
    return x;
};
var showFree = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Free " + (Data_Show.show(Data_List_Types.showList(Data_List_Types.showList(dictShow)))(v) + ")");
    });
};
var semiringFree = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(v)(v1);
    };
}, function (v) {
    return function (v1) {
        return Control_Bind.bind(Data_List_Types.bindList)(v)(function (v2) {
            return Control_Bind.bind(Data_List_Types.bindList)(v1)(function (v3) {
                return Control_Applicative.pure(Data_List_Types.applicativeList)(Data_Semigroup.append(Data_List_Types.semigroupList)(v2)(v3));
            });
        });
    };
}, Data_List.singleton(Data_List_Types.Nil.value), Data_List_Types.Nil.value);
var newtypeFree = new Data_Newtype.Newtype(function (n) {
    return n;
}, Free);
var liftFree = function (dictSemiring) {
    return function (f) {
        return function (v) {
            return Data_Foldable.sum(Data_List_Types.foldableList)(dictSemiring)(Data_Functor.map(Data_List_Types.functorList)(function ($60) {
                return Data_Foldable.product(Data_List_Types.foldableList)(dictSemiring)(Data_Functor.map(Data_List_Types.functorList)(f)($60));
            })(v));
        };
    };
};
var functorFree = new Data_Functor.Functor(function (fn) {
    return function (v) {
        return Free(Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(Data_List_Types.functorList)(fn))(v));
    };
});
var free = function (a) {
    return Data_List.singleton(Data_List.singleton(a));
};
var lowerFree = function (dictSemiring) {
    return function (f) {
        return function (a) {
            return f(free(a));
        };
    };
};
var foldableFree = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (fn) {
        return function (v) {
            return Data_Foldable.fold(Data_List_Types.foldableList)(dictMonoid)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_List_Types.monoidList)(Data_Functor.map(Data_List_Types.functorList)(fn))(v));
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Foldable.foldl(Data_List_Types.foldableList)(fn))(accum)(v);
        };
    };
}, function (fn) {
    return function (accum) {
        return function (v) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.flip(Data_Foldable.foldr(Data_List_Types.foldableList)(fn)))(accum)(v);
        };
    };
});
var traversableFree = new Data_Traversable.Traversable(function () {
    return foldableFree;
}, function () {
    return functorFree;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Free)(Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(Data_Functor.map(Data_List_Types.functorList)(Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative))(v)));
    };
}, function (dictApplicative) {
    return function (fn) {
        return function (freeA) {
            return Data_Traversable.sequence(traversableFree)(dictApplicative)(Data_Functor.map(functorFree)(fn)(freeA));
        };
    };
});
var eqFree = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_List_Types.eqList(Data_List_Types.eqList(dictEq)))(v)(v1);
        };
    });
};
var ordFree = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqFree(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_List_Types.ordList(Data_List_Types.ordList(dictOrd)))(v)(v1);
        };
    });
};
var applyFree = new Control_Apply.Apply(function () {
    return functorFree;
}, function (v) {
    return function (v1) {
        return Free(Control_Bind.bind(Data_List_Types.bindList)(v)(function (v2) {
            return Control_Bind.bind(Data_List_Types.bindList)(v1)(function (v3) {
                return Control_Applicative.pure(Data_List_Types.applicativeList)(Control_Apply.apply(Data_List_Types.applyList)(v2)(v3));
            });
        }));
    };
});
var applicativeFree = new Control_Applicative.Applicative(function () {
    return applyFree;
}, free);
module.exports = {
    Free: Free,
    free: free,
    liftFree: liftFree,
    lowerFree: lowerFree,
    newtypeFree: newtypeFree,
    showFree: showFree,
    eqFree: eqFree,
    ordFree: ordFree,
    semiringFree: semiringFree,
    functorFree: functorFree,
    applyFree: applyFree,
    applicativeFree: applicativeFree,
    foldableFree: foldableFree,
    traversableFree: traversableFree
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257}],232:[function(require,module,exports){
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

},{}],233:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
    this.addRecord = addRecord;
    this.mulRecord = mulRecord;
    this.oneRecord = oneRecord;
    this.zeroRecord = zeroRecord;
};
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var zeroRecord = function (dict) {
    return dict.zeroRecord;
};
var zero = function (dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var oneRecord = function (dict) {
    return dict.oneRecord;
};
var one = function (dict) {
    return dict.one;
};
var mulRecord = function (dict) {
    return dict.mulRecord;
};
var mul = function (dict) {
    return dict.mul;
};
var addRecord = function (dict) {
    return dict.addRecord;
};
var semiringRecord = function (dictRowToList) {
    return function (dictSemiringRecord) {
        return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var add = function (dict) {
    return dict.add;
};
var semiringFn = function (dictSemiring) {
    return new Semiring(function (f) {
        return function (g) {
            return function (x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (f) {
        return function (g) {
            return function (x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (v) {
        return one(dictSemiring);
    }, function (v) {
        return zero(dictSemiring);
    });
};
var semiringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemiringRecord) {
            return function (dictSemiring) {
                return new SemiringRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(one(dictSemiring))(tail);
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(zero(dictSemiring))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    Semiring: Semiring,
    add: add,
    zero: zero,
    mul: mul,
    one: one,
    SemiringRecord: SemiringRecord,
    addRecord: addRecord,
    mulRecord: mulRecord,
    oneRecord: oneRecord,
    zeroRecord: zeroRecord,
    semiringInt: semiringInt,
    semiringNumber: semiringNumber,
    semiringFn: semiringFn,
    semiringUnit: semiringUnit,
    semiringRecord: semiringRecord,
    semiringRecordNil: semiringRecordNil,
    semiringRecordCons: semiringRecordCons
};

},{"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Record.Unsafe/index.js":386,"../Type.Data.Row/index.js":400,"../Type.Data.RowList/index.js":401,"./foreign.js":232}],234:[function(require,module,exports){
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
    function (c, i) {
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};

},{}],235:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ShowRecordFields = function (showRecordFields) {
    this.showRecordFields = showRecordFields;
};
var Show = function (show) {
    this.show = show;
};
var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
    return function (v1) {
        return [  ];
    };
});
var showRecordFields = function (dict) {
    return dict.showRecordFields;
};
var showRecord = function (dictRowToList) {
    return function (dictShowRecordFields) {
        return new Show(function (record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
            if (v.length === 0) {
                return "{}";
            };
            return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
        });
    };
};
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 20, column 37): " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var showRecordFieldsCons = function (dictIsSymbol) {
    return function (dictShowRecordFields) {
        return function (dictShow) {
            return new ShowRecordFields(function (v) {
                return function (record) {
                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var focus = Record_Unsafe.unsafeGet(key)(record);
                    return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                };
            });
        };
    };
};
module.exports = {
    Show: Show,
    show: show,
    ShowRecordFields: ShowRecordFields,
    showRecordFields: showRecordFields,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray,
    showRecord: showRecord,
    showRecordFieldsNil: showRecordFieldsNil,
    showRecordFieldsCons: showRecordFieldsCons
};

},{"../Data.Symbol/index.js":250,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"./foreign.js":234}],236:[function(require,module,exports){
"use strict";
/* global Symbol */

var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator =
  typeof Symbol !== "undefined" &&
  Symbol != null &&
  typeof Symbol.iterator !== "undefined" &&
  typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";

exports._unsafeCodePointAt0 = function (fallback) {
  return hasCodePointAt
    ? function (str) { return str.codePointAt(0); }
    : fallback;
};

exports._codePointAt = function (fallback) {
  return function (Just) {
    return function (Nothing) {
      return function (unsafeCodePointAt0) {
        return function (index) {
          return function (str) {
            var length = str.length;
            if (index < 0 || index >= length) return Nothing;
            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();
              for (var i = index;; --i) {
                var o = iter.next();
                if (o.done) return Nothing;
                if (i === 0) return Just(unsafeCodePointAt0(o.value));
              }
            }
            return fallback(index)(str);
          };
        };
      };
    };
  };
};

exports._countPrefix = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasStringIterator) {
      return function (pred) {
        return function (str) {
          var iter = str[Symbol.iterator]();
          for (var cpCount = 0; ; ++cpCount) {
            var o = iter.next();
            if (o.done) return cpCount;
            var cp = unsafeCodePointAt0(o.value);
            if (!pred(cp)) return cpCount;
          }
        };
      };
    }
    return fallback;
  };
};

exports._fromCodePointArray = function (singleton) {
  return hasFromCodePoint
    ? function (cps) {
      // Function.prototype.apply will fail for very large second parameters,
      // so we don't use it for arrays with 10,000 or more entries.
      if (cps.length < 10e3) {
        return String.fromCodePoint.apply(String, cps);
      }
      return cps.map(singleton).join("");
    }
    : function (cps) {
      return cps.map(singleton).join("");
    };
};

exports._singleton = function (fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};

exports._take = function (fallback) {
  return function (n) {
    if (hasStringIterator) {
      return function (str) {
        var accum = "";
        var iter = str[Symbol.iterator]();
        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }
        return accum;
      };
    }
    return fallback(n);
  };
};

exports._toCodePointArray = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasArrayFrom) {
      return function (str) {
        return Array.from(str, unsafeCodePointAt0);
      };
    }
    return fallback;
  };
};

},{}],237:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var CodePoint = function (x) {
    return x;
};
var unsurrogate = function (lead) {
    return function (trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
};
var showCodePoint = new Data_Show.Show(function (v) {
    return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});
var isTrail = function (cu) {
    return 56320 <= cu && cu <= 57343;
};
var isLead = function (cu) {
    return 55296 <= cu && cu <= 56319;
};
var uncons = function (s) {
    var v = Data_String_CodeUnits.length(s);
    if (v === 0) {
        return Data_Maybe.Nothing.value;
    };
    if (v === 1) {
        return new Data_Maybe.Just({
            head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
            tail: ""
        });
    };
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $21 = isLead(cu0) && isTrail(cu1);
    if ($21) {
        return new Data_Maybe.Just({
            head: unsurrogate(cu0)(cu1),
            tail: Data_String_CodeUnits.drop(2)(s)
        });
    };
    return new Data_Maybe.Just({
        head: cu0,
        tail: Data_String_CodeUnits.drop(1)(s)
    });
};
var unconsButWithTuple = function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return new Data_Tuple.Tuple(v.head, v.tail);
    })(uncons(s));
};
var toCodePointArrayFallback = function (s) {
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};
var unsafeCodePointAt0Fallback = function (s) {
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
    if ($25) {
        var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
        var $26 = isTrail(cu1);
        if ($26) {
            return unsurrogate(cu0)(cu1);
        };
        return cu0;
    };
    return cu0;
};
var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
var length = function ($52) {
    return Data_Array.length(toCodePointArray($52));
};
var lastIndexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.lastIndexOf(p)(s));
    };
};
var indexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.indexOf(p)(s));
    };
};
var fromCharCode = function ($53) {
    return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
};
var singletonFallback = function (v) {
    if (v <= 65535) {
        return fromCharCode(v);
    };
    var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode(lead) + fromCharCode(trail);
};
var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);
var takeFallback = function (n) {
    return function (v) {
        if (n < 1) {
            return "";
        };
        var v1 = uncons(v);
        if (v1 instanceof Data_Maybe.Just) {
            return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
        };
        return v;
    };
};
var take = $foreign["_take"](takeFallback);
var lastIndexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var i$prime = Data_String_CodeUnits.length(take(i)(s));
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return length(Data_String_CodeUnits.take(k)(s));
            })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
        };
    };
};
var splitAt = function (i) {
    return function (s) {
        var before = take(i)(s);
        return {
            before: before,
            after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
        };
    };
};
var eqCodePoint = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordCodePoint = new Data_Ord.Ord(function () {
    return eqCodePoint;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var drop = function (n) {
    return function (s) {
        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
    };
};
var indexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var s$prime = drop(i)(s);
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
            })(Data_String_CodeUnits.indexOf(p)(s$prime));
        };
    };
};
var countTail = function ($copy_p) {
    return function ($copy_s) {
        return function ($copy_accum) {
            var $tco_var_p = $copy_p;
            var $tco_var_s = $copy_s;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(p, s, accum) {
                var v = uncons(s);
                if (v instanceof Data_Maybe.Just) {
                    var $39 = p(v.value0.head);
                    if ($39) {
                        $tco_var_p = p;
                        $tco_var_s = v.value0.tail;
                        $copy_accum = accum + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return accum;
                };
                $tco_done = true;
                return accum;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
            };
            return $tco_result;
        };
    };
};
var countFallback = function (p) {
    return function (s) {
        return countTail(p)(s)(0);
    };
};
var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
var dropWhile = function (p) {
    return function (s) {
        return drop(countPrefix(p)(s))(s);
    };
};
var takeWhile = function (p) {
    return function (s) {
        return take(countPrefix(p)(s))(s);
    };
};
var codePointFromChar = function ($54) {
    return CodePoint(Data_Enum.fromEnum(Data_Enum.boundedEnumChar)($54));
};
var codePointAtFallback = function ($copy_n) {
    return function ($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
            var v = uncons(s);
            if (v instanceof Data_Maybe.Just) {
                var $44 = n === 0;
                if ($44) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0.head);
                };
                $tco_var_n = n - 1 | 0;
                $copy_s = v.value0.tail;
                return;
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_n, $copy_s);
        };
        return $tco_result;
    };
};
var codePointAt = function (v) {
    return function (v1) {
        if (v < 0) {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0 && v1 === "") {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0) {
            return new Data_Maybe.Just(unsafeCodePointAt0(v1));
        };
        return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
    };
};
var boundedCodePoint = new Data_Bounded.Bounded(function () {
    return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
    return boundedCodePoint;
}, function () {
    return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 1114111) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 63, column 55): " + [ n.constructor.name ]);
});
var enumCodePoint = new Data_Enum.Enum(function () {
    return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
    codePointFromChar: codePointFromChar,
    singleton: singleton,
    fromCodePointArray: fromCodePointArray,
    toCodePointArray: toCodePointArray,
    codePointAt: codePointAt,
    uncons: uncons,
    length: length,
    countPrefix: countPrefix,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    splitAt: splitAt,
    eqCodePoint: eqCodePoint,
    ordCodePoint: ordCodePoint,
    showCodePoint: showCodePoint,
    boundedCodePoint: boundedCodePoint,
    enumCodePoint: enumCodePoint,
    boundedEnumCodePoint: boundedEnumCodePoint
};

},{"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.String.Common/index.js":241,"../Data.String.Unsafe/index.js":248,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"./foreign.js":236}],238:[function(require,module,exports){
"use strict";

exports.fromCharArray = function (a) {
  return a.join("");
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.singleton = function (c) {
  return c;
};

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports.countPrefix = function (p) {
  return function (s) {
    var i = 0;
    while (i < s.length && p(s.charAt(i))) i++;
    return i;
  };
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_indexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_lastIndexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports._slice = function (b) {
  return function (e) {
    return function (s) {
      return s.slice(b,e);
    };
  };
};

exports.splitAt = function (i) {
  return function (s) {
    return { before: s.substring(0, i), after: s.substring(i) };
  };
};

},{}],239:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
    };
};
var takeRight = function (i) {
    return function (s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
    };
};
var slice = function (b) {
    return function (e) {
        return function (s) {
            var l = $foreign.length(s);
            var norm = function (x) {
                if (x < 0) {
                    return l + x | 0;
                };
                if (Data_Boolean.otherwise) {
                    return x;
                };
                throw new Error("Failed pattern match at Data.String.CodeUnits (line 314, column 5 - line 315, column 27): " + [ x.constructor.name ]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $7 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
            if ($7) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
        };
    };
};
var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripSuffix = function (v) {
    return function (str) {
        var v1 = lastIndexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
            return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripPrefix = function (v) {
    return function (str) {
        var v1 = indexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
            return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
    };
};
var dropRight = function (i) {
    return function (s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
    };
};
var contains = function (pat) {
    return function ($16) {
        return Data_Maybe.isJust(indexOf(pat)($16));
    };
};
var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    charAt: charAt,
    toChar: toChar,
    uncons: uncons,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    takeRight: takeRight,
    takeWhile: takeWhile,
    dropRight: dropRight,
    dropWhile: dropWhile,
    slice: slice,
    singleton: $foreign.singleton,
    fromCharArray: $foreign.fromCharArray,
    toCharArray: $foreign.toCharArray,
    length: $foreign.length,
    countPrefix: $foreign.countPrefix,
    take: $foreign.take,
    drop: $foreign.drop,
    splitAt: $foreign.splitAt
};

},{"../Data.Boolean/index.js":107,"../Data.Maybe/index.js":197,"../Data.String.Unsafe/index.js":248,"./foreign.js":238}],240:[function(require,module,exports){
"use strict";

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
    };
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};

},{}],241:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var $$null = function (s) {
    return s === "";
};
var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
    "null": $$null,
    localeCompare: localeCompare,
    replace: $foreign.replace,
    replaceAll: $foreign.replaceAll,
    split: $foreign.split,
    toLower: $foreign.toLower,
    toUpper: $foreign.toUpper,
    trim: $foreign.trim,
    joinWith: $foreign.joinWith
};

},{"../Data.Ordering/index.js":215,"./foreign.js":240}],242:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var NonEmptyString = function (x) {
    return x;
};
var NonEmptyReplacement = function (x) {
    return x;
};
var MakeNonEmpty = function (nes) {
    this.nes = nes;
};
var toUpper = function (v) {
    return Data_String_Common.toUpper(v);
};
var toString = function (v) {
    return v;
};
var toLower = function (v) {
    return Data_String_Common.toLower(v);
};
var showNonEmptyString = new Data_Show.Show(function (v) {
    return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showNonEmptyReplacement = new Data_Show.Show(function (v) {
    return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
});
var semigroupNonEmptyString = Data_Semigroup.semigroupString;
var semigroupNonEmptyReplacement = semigroupNonEmptyString;
var replaceAll = function (pat) {
    return function (v) {
        return function (v1) {
            return Data_String_Common.replaceAll(pat)(v)(v1);
        };
    };
};
var replace = function (pat) {
    return function (v) {
        return function (v1) {
            return Data_String_Common.replace(pat)(v)(v1);
        };
    };
};
var prependString = function (s1) {
    return function (v) {
        return s1 + v;
    };
};
var ordNonEmptyString = Data_Ord.ordString;
var ordNonEmptyReplacement = ordNonEmptyString;
var nonEmptyNonEmpty = function (dictIsSymbol) {
    return new MakeNonEmpty(function (p) {
        return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
    });
};
var nes = function (dict) {
    return dict.nes;
};
var makeNonEmptyBad = function (dictFail) {
    return new MakeNonEmpty(function (v) {
        return "";
    });
};
var localeCompare = function (v) {
    return function (v1) {
        return Data_String_Common.localeCompare(v)(v1);
    };
};
var liftS = function (f) {
    return function (v) {
        return f(v);
    };
};
var joinWith1 = function (dictFoldable1) {
    return function (v) {
        return function ($46) {
            return NonEmptyString(Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v)($46));
        };
    };
};
var joinWith = function (dictFoldable) {
    return function (splice) {
        return function ($47) {
            return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice)($47);
        };
    };
};
var join1With = function (dictFoldable1) {
    return function (splice) {
        return function ($48) {
            return NonEmptyString(joinWith(dictFoldable1.Foldable0())(splice)($48));
        };
    };
};
var fromString = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(v);
};
var stripPrefix = function (pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
};
var stripSuffix = function (pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
};
var trim = function (v) {
    return fromString(Data_String_Common.trim(v));
};
var unsafeFromString = function (dictPartial) {
    return function ($49) {
        return Data_Maybe.fromJust(dictPartial)(fromString($49));
    };
};
var eqNonEmptyString = Data_Eq.eqString;
var eqNonEmptyReplacement = eqNonEmptyString;
var contains = function ($50) {
    return liftS(Data_String_CodeUnits.contains($50));
};
var appendString = function (v) {
    return function (s2) {
        return v + s2;
    };
};
module.exports = {
    nes: nes,
    NonEmptyString: NonEmptyString,
    MakeNonEmpty: MakeNonEmpty,
    NonEmptyReplacement: NonEmptyReplacement,
    fromString: fromString,
    unsafeFromString: unsafeFromString,
    toString: toString,
    appendString: appendString,
    prependString: prependString,
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    localeCompare: localeCompare,
    replace: replace,
    replaceAll: replaceAll,
    toLower: toLower,
    toUpper: toUpper,
    trim: trim,
    joinWith: joinWith,
    join1With: join1With,
    joinWith1: joinWith1,
    liftS: liftS,
    eqNonEmptyString: eqNonEmptyString,
    ordNonEmptyString: ordNonEmptyString,
    semigroupNonEmptyString: semigroupNonEmptyString,
    showNonEmptyString: showNonEmptyString,
    makeNonEmptyBad: makeNonEmptyBad,
    nonEmptyNonEmpty: nonEmptyNonEmpty,
    eqNonEmptyReplacement: eqNonEmptyReplacement,
    ordNonEmptyReplacement: ordNonEmptyReplacement,
    semigroupNonEmptyReplacement: semigroupNonEmptyReplacement,
    showNonEmptyReplacement: showNonEmptyReplacement
};

},{"../Control.Bind/index.js":35,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250}],243:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Replacement = function (x) {
    return x;
};
var Pattern = function (x) {
    return x;
};
var showReplacement = new Data_Show.Show(function (v) {
    return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showPattern = new Data_Show.Show(function (v) {
    return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeReplacement = new Data_Newtype.Newtype(function (n) {
    return n;
}, Replacement);
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var eqReplacement = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordReplacement = new Data_Ord.Ord(function () {
    return eqReplacement;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqPattern = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordPattern = new Data_Ord.Ord(function () {
    return eqPattern;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    Pattern: Pattern,
    Replacement: Replacement,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern,
    eqReplacement: eqReplacement,
    ordReplacement: ordReplacement,
    newtypeReplacement: newtypeReplacement,
    showReplacement: showReplacement
};

},{"../Data.Eq/index.js":133,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235}],244:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var RegexFlags = (function () {
    function RegexFlags(value0) {
        this.value0 = value0;
    };
    RegexFlags.create = function (value0) {
        return new RegexFlags(value0);
    };
    return RegexFlags;
})();
var unicode = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: true
});
var sticky = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: true,
    unicode: false
});
var showRegexFlags = new Data_Show.Show(function (v) {
    var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
    var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
    if ($6) {
        return "noFlags";
    };
    return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
});
var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return new RegexFlags({
            global: v.value0.global || v1.value0.global,
            ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
            multiline: v.value0.multiline || v1.value0.multiline,
            sticky: v.value0.sticky || v1.value0.sticky,
            unicode: v.value0.unicode || v1.value0.unicode
        });
    };
});
var noFlags = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: false
});
var multiline = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: true,
    sticky: false,
    unicode: false
});
var monoidRegexFlags = new Data_Monoid.Monoid(function () {
    return semigroupRegexFlags;
}, noFlags);
var ignoreCase = new RegexFlags({
    global: false,
    ignoreCase: true,
    multiline: false,
    sticky: false,
    unicode: false
});
var global = new RegexFlags({
    global: true,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: false
});
var eqRegexFlags = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
    };
});
module.exports = {
    RegexFlags: RegexFlags,
    noFlags: noFlags,
    global: global,
    ignoreCase: ignoreCase,
    multiline: multiline,
    sticky: sticky,
    unicode: unicode,
    semigroupRegexFlags: semigroupRegexFlags,
    monoidRegexFlags: monoidRegexFlags,
    eqRegexFlags: eqRegexFlags,
    showRegexFlags: showRegexFlags
};

},{"../Control.MonadZero/index.js":67,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.Common/index.js":241}],245:[function(require,module,exports){
"use strict";

exports["showRegex'"] = function (r) {
  return "" + r;
};

exports["regex'"] = function (left) {
  return function (right) {
    return function (s1) {
      return function (s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};

exports.source = function (r) {
  return r.source;
};

exports["flags'"] = function (r) {
  return {
    multiline: r.multiline,
    ignoreCase: r.ignoreCase,
    global: r.global,
    sticky: !!r.sticky,
    unicode: !!r.unicode
  };
};

exports.test = function (r) {
  return function (s) {
    var lastIndex = r.lastIndex;
    var result = r.test(s);
    r.lastIndex = lastIndex;
    return result;
  };
};

exports._match = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var m = s.match(r);
        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i = 0; i < m.length; i++) {
            m[i] = m[i] == null ? nothing : just(m[i]);
          }
          return just(m);
        }
      };
    };
  };
};

exports.replace = function (r) {
  return function (s1) {
    return function (s2) {
      return s2.replace(r, s1);
    };
  };
};

exports["replace'"] = function (r) {
  return function (f) {
    return function (s2) {
      return s2.replace(r, function (match) {
        return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
      });
    };
  };
};

exports._search = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

exports.split = function (r) {
  return function (s) {
    return s.split(r);
  };
};

},{}],246:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var showRegex = new Data_Show.Show($foreign["showRegex'"]);
var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var renderFlags = function (v) {
    return (function () {
        if (v.value0.global) {
            return "g";
        };
        return "";
    })() + ((function () {
        if (v.value0.ignoreCase) {
            return "i";
        };
        return "";
    })() + ((function () {
        if (v.value0.multiline) {
            return "m";
        };
        return "";
    })() + ((function () {
        if (v.value0.sticky) {
            return "y";
        };
        return "";
    })() + (function () {
        if (v.value0.unicode) {
            return "u";
        };
        return "";
    })())));
};
var regex = function (s) {
    return function (f) {
        return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
    };
};
var parseFlags = function (s) {
    return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String_CodeUnits.contains("g")(s),
        ignoreCase: Data_String_CodeUnits.contains("i")(s),
        multiline: Data_String_CodeUnits.contains("m")(s),
        sticky: Data_String_CodeUnits.contains("y")(s),
        unicode: Data_String_CodeUnits.contains("u")(s)
    });
};
var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var flags = function ($8) {
    return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
};
module.exports = {
    regex: regex,
    flags: flags,
    renderFlags: renderFlags,
    parseFlags: parseFlags,
    match: match,
    search: search,
    showRegex: showRegex,
    source: $foreign.source,
    test: $foreign.test,
    replace: $foreign.replace,
    "replace'": $foreign["replace'"],
    split: $foreign.split
};

},{"../Data.Either/index.js":129,"../Data.Maybe/index.js":197,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.String.Regex.Flags/index.js":244,"./foreign.js":245}],247:[function(require,module,exports){
"use strict";

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],248:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    "char": $foreign["char"],
    charAt: $foreign.charAt
};

},{"./foreign.js":247}],249:[function(require,module,exports){
"use strict";

// module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};


},{}],250:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var SProxy = (function () {
    function SProxy() {

    };
    SProxy.value = new SProxy();
    return SProxy;
})();
var IsSymbol = function (reflectSymbol) {
    this.reflectSymbol = reflectSymbol;
};
var reifySymbol = function (s) {
    return function (f) {
        return $foreign.unsafeCoerce(function (dictIsSymbol) {
            return f(dictIsSymbol);
        })({
            reflectSymbol: function (v) {
                return s;
            }
        })(SProxy.value);
    };
};
var reflectSymbol = function (dict) {
    return dict.reflectSymbol;
};
module.exports = {
    IsSymbol: IsSymbol,
    reflectSymbol: reflectSymbol,
    reifySymbol: reifySymbol,
    SProxy: SProxy
};

},{"./foreign.js":249}],251:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var This = (function () {
    function This(value0) {
        this.value0 = value0;
    };
    This.create = function (value0) {
        return new This(value0);
    };
    return This;
})();
var That = (function () {
    function That(value0) {
        this.value0 = value0;
    };
    That.create = function (value0) {
        return new That(value0);
    };
    return That;
})();
var Both = (function () {
    function Both(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Both.create = function (value0) {
        return function (value1) {
            return new Both(value0, value1);
        };
    };
    return Both;
})();
var thisOrBoth = function (a) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new This(a);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(a, v.value0);
        };
        throw new Error("Failed pattern match at Data.These (line 106, column 1 - line 106, column 52): " + [ a.constructor.name, v.constructor.name ]);
    };
};
var $$this = function (v) {
    if (v instanceof This) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var theseRight = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value1);
    };
    if (v instanceof That) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var theseLeft = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof This) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var these = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v3 instanceof This) {
                    return v(v3.value0);
                };
                if (v3 instanceof That) {
                    return v1(v3.value0);
                };
                if (v3 instanceof Both) {
                    return v2(v3.value0)(v3.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 101, column 1 - line 101, column 79): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
            };
        };
    };
};
var thatOrBoth = function (b) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new That(b);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(v.value0, b);
        };
        throw new Error("Failed pattern match at Data.These (line 110, column 1 - line 110, column 52): " + [ b.constructor.name, v.constructor.name ]);
    };
};
var that = function (v) {
    if (v instanceof That) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var showThese = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof This) {
                return "(This " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof That) {
                return "(That " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            if (v instanceof Both) {
                return "(Both " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            };
            throw new Error("Failed pattern match at Data.These (line 96, column 1 - line 96, column 59): " + [ v.constructor.name ]);
        });
    };
};
var semigroupThese = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                if (v instanceof This && v1 instanceof This) {
                    return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                };
                if (v instanceof This && v1 instanceof That) {
                    return new Both(v.value0, v1.value0);
                };
                if (v instanceof This && v1 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
                };
                if (v instanceof That && v1 instanceof This) {
                    return new Both(v1.value0, v.value0);
                };
                if (v instanceof That && v1 instanceof That) {
                    return new That(Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value0));
                };
                if (v instanceof That && v1 instanceof Both) {
                    return new Both(v1.value0, Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value1));
                };
                if (v instanceof Both && v1 instanceof This) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1);
                };
                if (v instanceof Both && v1 instanceof That) {
                    return new Both(v.value0, Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value0));
                };
                if (v instanceof Both && v1 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.These (line 21, column 1 - line 21, column 79): " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var maybeThese = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new This(v.value0));
        };
        if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new That(v1.value0));
        };
        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new Both(v.value0, v1.value0));
        };
        if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.These (line 116, column 14 - line 120, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var functorThese = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Both) {
            return new Both(v1.value0, v(v1.value1));
        };
        if (v1 instanceof That) {
            return new That(v(v1.value0));
        };
        if (v1 instanceof This) {
            return new This(v1.value0);
        };
        throw new Error("Failed pattern match at Data.These (line 32, column 1 - line 32, column 43): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invariantThese = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorThese));
var fromThese = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof This) {
                return new Data_Tuple.Tuple(v2.value0, v1);
            };
            if (v2 instanceof That) {
                return new Data_Tuple.Tuple(v, v2.value0);
            };
            if (v2 instanceof Both) {
                return new Data_Tuple.Tuple(v2.value0, v2.value1);
            };
            throw new Error("Failed pattern match at Data.These (line 122, column 1 - line 122, column 58): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var foldableThese = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function ($241) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(theseRight($241));
        };
    };
}, function (f) {
    return function (z) {
        return function ($242) {
            return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(z)(theseRight($242));
        };
    };
}, function (f) {
    return function (z) {
        return function ($243) {
            return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(z)(theseRight($243));
        };
    };
});
var traversableThese = new Data_Traversable.Traversable(function () {
    return foldableThese;
}, function () {
    return functorThese;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof This) {
            return Control_Applicative.pure(dictApplicative)(new This(v.value0));
        };
        if (v instanceof That) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v.value0);
        };
        if (v instanceof Both) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create(v.value0))(v.value1);
        };
        throw new Error("Failed pattern match at Data.These (line 45, column 1 - line 45, column 51): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof This) {
                return Control_Applicative.pure(dictApplicative)(new This(v1.value0));
            };
            if (v1 instanceof That) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v(v1.value0));
            };
            if (v1 instanceof Both) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create(v1.value0))(v(v1.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 45, column 1 - line 45, column 51): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorThese;
}, function (v) {
    return function (v1) {
        if (v1 instanceof This) {
            return new This(v1.value0);
        };
        return Data_Functor.map(functorThese)(Data_Function["const"](v(v1)))(v1);
    };
});
var eqThese = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof This && y instanceof This) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof That && y instanceof That) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                if (x instanceof Both && y instanceof Both) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                };
                return false;
            };
        });
    };
};
var ordThese = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqThese(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof This && y instanceof This) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof This) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof This) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof That && y instanceof That) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                if (x instanceof That) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof That) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Both && y instanceof Both) {
                    var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 19, column 8 - line 19, column 62): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var bifunctorThese = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof This) {
                return new This(v(v2.value0));
            };
            if (v2 instanceof That) {
                return new That(v1(v2.value0));
            };
            if (v2 instanceof Both) {
                return new Both(v(v2.value0), v1(v2.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 53, column 1 - line 53, column 43): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableThese = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return these(f)(g)(function (x) {
                return function (y) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(g(y));
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(function (v) {
                return f(z)(v);
            })(function (v) {
                return g(z)(v);
            })(function (x) {
                return function (y) {
                    return g(f(z)(x))(y);
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(function (v) {
                return f(v)(z);
            })(function (v) {
                return g(v)(z);
            })(function (x) {
                return function (y) {
                    return f(x)(g(y)(z));
                };
            });
        };
    };
});
var bitraversableThese = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableThese;
}, function () {
    return bifunctorThese;
}, function (dictApplicative) {
    return Data_Bitraversable.bitraverse(bitraversableThese)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof This) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(This.create)(v(v2.value0));
                };
                if (v2 instanceof That) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v1(v2.value0));
                };
                if (v2 instanceof Both) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create)(v(v2.value0)))(v1(v2.value1));
                };
                throw new Error("Failed pattern match at Data.These (line 63, column 1 - line 63, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyThese = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorThese;
    }, function (v) {
        return function (v1) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That && v1 instanceof This) {
                return new This(v1.value0);
            };
            if (v instanceof That && v1 instanceof That) {
                return new That(v.value0(v1.value0));
            };
            if (v instanceof That && v1 instanceof Both) {
                return new Both(v1.value0, v.value0(v1.value1));
            };
            if (v instanceof Both && v1 instanceof This) {
                return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            if (v instanceof Both && v1 instanceof That) {
                return new Both(v.value0, v.value1(v1.value0));
            };
            if (v instanceof Both && v1 instanceof Both) {
                return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 69, column 1 - line 69, column 54): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var bindThese = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyThese(dictSemigroup);
    }, function (v) {
        return function (v1) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That) {
                return v1(v.value0);
            };
            if (v instanceof Both) {
                var v2 = v1(v.value1);
                if (v2 instanceof This) {
                    return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v2.value0));
                };
                if (v2 instanceof That) {
                    return new Both(v.value0, v2.value0);
                };
                if (v2 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v2.value0), v2.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 85, column 5 - line 88, column 34): " + [ v2.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.These (line 81, column 1 - line 81, column 52): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var applicativeThese = function (dictSemigroup) {
    return new Control_Applicative.Applicative(function () {
        return applyThese(dictSemigroup);
    }, That.create);
};
var monadThese = function (dictSemigroup) {
    return new Control_Monad.Monad(function () {
        return applicativeThese(dictSemigroup);
    }, function () {
        return bindThese(dictSemigroup);
    });
};
module.exports = {
    This: This,
    That: That,
    Both: Both,
    these: these,
    thisOrBoth: thisOrBoth,
    thatOrBoth: thatOrBoth,
    maybeThese: maybeThese,
    fromThese: fromThese,
    theseLeft: theseLeft,
    theseRight: theseRight,
    "this": $$this,
    that: that,
    eqThese: eqThese,
    ordThese: ordThese,
    semigroupThese: semigroupThese,
    functorThese: functorThese,
    invariantThese: invariantThese,
    foldableThese: foldableThese,
    traversableThese: traversableThese,
    bifunctorThese: bifunctorThese,
    bifoldableThese: bifoldableThese,
    bitraversableThese: bitraversableThese,
    applyThese: applyThese,
    applicativeThese: applicativeThese,
    bindThese: bindThese,
    monadThese: monadThese,
    extendEither: extendEither,
    showThese: showThese
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Extend/index.js":40,"../Control.Monad/index.js":65,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor/index.js":105,"../Data.Bitraversable/index.js":106,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260}],252:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Second = function (x) {
    return x;
};
var Minute = function (x) {
    return x;
};
var Millisecond = function (x) {
    return x;
};
var Hour = function (x) {
    return x;
};
var showSecond = new Data_Show.Show(function (v) {
    return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMinute = new Data_Show.Show(function (v) {
    return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMillisecond = new Data_Show.Show(function (v) {
    return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showHour = new Data_Show.Show(function (v) {
    return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordSecond = Data_Ord.ordInt;
var ordMinute = Data_Ord.ordInt;
var ordMillisecond = Data_Ord.ordInt;
var ordHour = Data_Ord.ordInt;
var eqSecond = Data_Eq.eqInt;
var eqMinute = Data_Eq.eqInt;
var eqMillisecond = Data_Eq.eqInt;
var eqHour = Data_Eq.eqInt;
var boundedSecond = new Data_Bounded.Bounded(function () {
    return ordSecond;
}, 0, 59);
var boundedMinute = new Data_Bounded.Bounded(function () {
    return ordMinute;
}, 0, 59);
var boundedMillisecond = new Data_Bounded.Bounded(function () {
    return ordMillisecond;
}, 0, 999);
var boundedHour = new Data_Bounded.Bounded(function () {
    return ordHour;
}, 0, 23);
var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
    return boundedSecond;
}, function () {
    return enumSecond;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 90, column 49): " + [ n.constructor.name ]);
});
var enumSecond = new Data_Enum.Enum(function () {
    return ordSecond;
}, function ($28) {
    return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumSecond)($28)));
}, function ($29) {
    return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumSecond)($29)));
});
var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
    return boundedMinute;
}, function () {
    return enumMinute;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 61, column 49): " + [ n.constructor.name ]);
});
var enumMinute = new Data_Enum.Enum(function () {
    return ordMinute;
}, function ($30) {
    return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMinute)($30)));
}, function ($31) {
    return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMinute)($31)));
});
var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
    return boundedMillisecond;
}, function () {
    return enumMillisecond;
}, 1000, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 999) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 120, column 59): " + [ n.constructor.name ]);
});
var enumMillisecond = new Data_Enum.Enum(function () {
    return ordMillisecond;
}, function ($32) {
    return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMillisecond)($32)));
}, function ($33) {
    return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumMillisecond)($33)));
});
var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
    return boundedHour;
}, function () {
    return enumHour;
}, 24, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 23) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 32, column 45): " + [ n.constructor.name ]);
});
var enumHour = new Data_Enum.Enum(function () {
    return ordHour;
}, function ($34) {
    return Data_Enum.toEnum(boundedEnumHour)((function (v) {
        return v - 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumHour)($34)));
}, function ($35) {
    return Data_Enum.toEnum(boundedEnumHour)((function (v) {
        return v + 1 | 0;
    })(Data_Enum.fromEnum(boundedEnumHour)($35)));
});
module.exports = {
    eqHour: eqHour,
    ordHour: ordHour,
    boundedHour: boundedHour,
    enumHour: enumHour,
    boundedEnumHour: boundedEnumHour,
    showHour: showHour,
    eqMinute: eqMinute,
    ordMinute: ordMinute,
    boundedMinute: boundedMinute,
    enumMinute: enumMinute,
    boundedEnumMinute: boundedEnumMinute,
    showMinute: showMinute,
    eqSecond: eqSecond,
    ordSecond: ordSecond,
    boundedSecond: boundedSecond,
    enumSecond: enumSecond,
    boundedEnumSecond: boundedEnumSecond,
    showSecond: showSecond,
    eqMillisecond: eqMillisecond,
    ordMillisecond: ordMillisecond,
    boundedMillisecond: boundedMillisecond,
    enumMillisecond: enumMillisecond,
    boundedEnumMillisecond: boundedEnumMillisecond,
    showMillisecond: showMillisecond
};

},{"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235}],253:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Seconds = function (x) {
    return x;
};
var Minutes = function (x) {
    return x;
};
var Milliseconds = function (x) {
    return x;
};
var Hours = function (x) {
    return x;
};
var Days = function (x) {
    return x;
};
var Duration = function (fromDuration, toDuration) {
    this.fromDuration = fromDuration;
    this.toDuration = toDuration;
};
var toDuration = function (dict) {
    return dict.toDuration;
};
var showSeconds = new Data_Show.Show(function (v) {
    return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMinutes = new Data_Show.Show(function (v) {
    return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMilliseconds = new Data_Show.Show(function (v) {
    return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showHours = new Data_Show.Show(function (v) {
    return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showDays = new Data_Show.Show(function (v) {
    return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var ordSeconds = Data_Ord.ordNumber;
var ordMinutes = Data_Ord.ordNumber;
var ordMilliseconds = Data_Ord.ordNumber;
var ordHours = Data_Ord.ordNumber;
var ordDays = Data_Ord.ordNumber;
var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Seconds);
var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
    return n;
}, Minutes);
var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Milliseconds);
var newtypeHours = new Data_Newtype.Newtype(function (n) {
    return n;
}, Hours);
var newtypeDays = new Data_Newtype.Newtype(function (n) {
    return n;
}, Days);
var monoidSeconds = new Data_Monoid.Monoid(function () {
    return semigroupSeconds;
}, 0.0);
var monoidMinutes = new Data_Monoid.Monoid(function () {
    return semigroupMinutes;
}, 0.0);
var monoidMilliseconds = new Data_Monoid.Monoid(function () {
    return semigroupMilliseconds;
}, 0.0);
var monoidHours = new Data_Monoid.Monoid(function () {
    return semigroupHours;
}, 0.0);
var monoidDays = new Data_Monoid.Monoid(function () {
    return semigroupDays;
}, 0.0);
var fromDuration = function (dict) {
    return dict.fromDuration;
};
var negateDuration = function (dictDuration) {
    return function ($56) {
        return toDuration(dictDuration)(Data_Newtype.over(newtypeMilliseconds)(newtypeMilliseconds)(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber))(fromDuration(dictDuration)($56)));
    };
};
var eqSeconds = Data_Eq.eqNumber;
var eqMinutes = Data_Eq.eqNumber;
var eqMilliseconds = Data_Eq.eqNumber;
var eqHours = Data_Eq.eqNumber;
var eqDays = Data_Eq.eqNumber;
var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
    return v * 1000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
    return v / 1000.0;
}));
var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
    return v * 60000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
    return v / 60000.0;
}));
var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
    return v * 3600000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
    return v / 3600000.0;
}));
var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
    return v * 8.64e7;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
    return v / 8.64e7;
}));
var convertDuration = function (dictDuration) {
    return function (dictDuration1) {
        return function ($57) {
            return toDuration(dictDuration1)(fromDuration(dictDuration)($57));
        };
    };
};
module.exports = {
    fromDuration: fromDuration,
    toDuration: toDuration,
    Milliseconds: Milliseconds,
    Seconds: Seconds,
    Minutes: Minutes,
    Hours: Hours,
    Days: Days,
    Duration: Duration,
    convertDuration: convertDuration,
    negateDuration: negateDuration,
    newtypeMilliseconds: newtypeMilliseconds,
    eqMilliseconds: eqMilliseconds,
    ordMilliseconds: ordMilliseconds,
    semigroupMilliseconds: semigroupMilliseconds,
    monoidMilliseconds: monoidMilliseconds,
    showMilliseconds: showMilliseconds,
    newtypeSeconds: newtypeSeconds,
    eqSeconds: eqSeconds,
    ordSeconds: ordSeconds,
    semigroupSeconds: semigroupSeconds,
    monoidSeconds: monoidSeconds,
    showSeconds: showSeconds,
    newtypeMinutes: newtypeMinutes,
    eqMinutes: eqMinutes,
    ordMinutes: ordMinutes,
    semigroupMinutes: semigroupMinutes,
    monoidMinutes: monoidMinutes,
    showMinutes: showMinutes,
    newtypeHours: newtypeHours,
    eqHours: eqHours,
    ordHours: ordHours,
    semigroupHours: semigroupHours,
    monoidHours: monoidHours,
    showHours: showHours,
    newtypeDays: newtypeDays,
    eqDays: eqDays,
    ordDays: ordDays,
    semigroupDays: semigroupDays,
    monoidDays: monoidDays,
    showDays: showDays,
    durationMilliseconds: durationMilliseconds,
    durationSeconds: durationSeconds,
    durationMinutes: durationMinutes,
    durationHours: durationHours,
    durationDays: durationDays
};

},{"../Control.Category/index.js":36,"../Data.Eq/index.js":133,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ring/index.js":224,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235}],254:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var $$Math = require("../Math/index.js");
var Time = (function () {
    function Time(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Time.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Time(value0, value1, value2, value3);
                };
            };
        };
    };
    return Time;
})();
var showTime = new Data_Show.Show(function (v) {
    return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
});
var setSecond = function (s) {
    return function (v) {
        return new Time(v.value0, v.value1, s, v.value3);
    };
};
var setMinute = function (m) {
    return function (v) {
        return new Time(v.value0, m, v.value2, v.value3);
    };
};
var setMillisecond = function (ms) {
    return function (v) {
        return new Time(v.value0, v.value1, v.value2, ms);
    };
};
var setHour = function (h) {
    return function (v) {
        return new Time(h, v.value1, v.value2, v.value3);
    };
};
var second = function (v) {
    return v.value2;
};
var minute = function (v) {
    return v.value1;
};
var millisecond = function (v) {
    return v.value3;
};
var millisToTime = function (v) {
    var hours = $$Math.floor(v / 3600000.0);
    var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
    var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
    var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
    return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
};
var hour = function (v) {
    return v.value0;
};
var timeToMillis = function (t) {
    return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
};
var eqTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
    };
});
var ordTime = new Data_Ord.Ord(function () {
    return eqTime;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
        if (v2 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v2 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
    };
});
var diff = function (dictDuration) {
    return function (t1) {
        return function (t2) {
            return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
        };
    };
};
var boundedTime = new Data_Bounded.Bounded(function () {
    return ordTime;
}, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
var adjust = function (dictDuration) {
    return function (d) {
        return function (t) {
            var tLength = timeToMillis(t);
            var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
            var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
            var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
            var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
            var wrap = (function () {
                var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                if ($112) {
                    return 1.0;
                };
                var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
                if ($113) {
                    return -1.0;
                };
                return 0.0;
            })();
            return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
        };
    };
};
module.exports = {
    Time: Time,
    hour: hour,
    setHour: setHour,
    minute: minute,
    setMinute: setMinute,
    second: second,
    setSecond: setSecond,
    millisecond: millisecond,
    setMillisecond: setMillisecond,
    adjust: adjust,
    diff: diff,
    eqTime: eqTime,
    ordTime: ordTime,
    boundedTime: boundedTime,
    showTime: showTime
};

},{"../Control.Apply/index.js":31,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Time.Component/index.js":252,"../Data.Time.Duration/index.js":253,"../Data.Tuple/index.js":260,"../Math/index.js":369}],255:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var StateR = function (x) {
    return x;
};
var StateL = function (x) {
    return x;
};
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var functorStateR = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateR(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var functorStateL = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateL(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var applyStateR = new Control_Apply.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
                accum: v1.accum,
                value: v1.value(v.value)
            };
        };
    };
});
var applyStateL = new Control_Apply.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
                accum: v1.accum,
                value: v.value(v1.value)
            };
        };
    };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
var applicativeStateL = new Control_Applicative.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
module.exports = {
    StateL: StateL,
    stateL: stateL,
    StateR: StateR,
    stateR: stateR,
    functorStateL: functorStateL,
    applyStateL: applyStateL,
    applicativeStateL: applicativeStateL,
    functorStateR: functorStateR,
    applyStateR: applyStateR,
    applicativeStateR: applicativeStateR
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Data.Functor/index.js":156}],256:[function(require,module,exports){
"use strict";

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function array1(a) {
    return [a];
  }

  function array2(a) {
    return function (b) {
      return [a, b];
    };
  }

  function array3(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  }

  function concat2(xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          return function (array) {
            function go(bot, top) {
              switch (top - bot) {
              case 0: return pure([]);
              case 1: return map(array1)(f(array[bot]));
              case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
              case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
              default:
                // This slightly tricky pivot selection aims to produce two
                // even-length partitions where possible.
                var pivot = bot + Math.floor((top - bot) / 4) * 2;
                return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
              }
            }
            return go(0, array.length);
          };
        };
      };
    };
  };
}();

},{}],257:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Traversable = function (Foldable1, Functor0, sequence, traverse) {
    this.Foldable1 = Foldable1;
    this.Functor0 = Functor0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 86, column 47): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 86, column 47): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Functor.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
        };
    };
};
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
module.exports = {
    Traversable: Traversable,
    traverse: traverse,
    sequence: sequence,
    traverseDefault: traverseDefault,
    sequenceDefault: sequenceDefault,
    "for": $$for,
    scanl: scanl,
    scanr: scanr,
    mapAccumL: mapAccumL,
    mapAccumR: mapAccumR,
    traversableArray: traversableArray,
    traversableMaybe: traversableMaybe,
    traversableFirst: traversableFirst,
    traversableLast: traversableLast,
    traversableAdditive: traversableAdditive,
    traversableDual: traversableDual,
    traversableConj: traversableConj,
    traversableDisj: traversableDisj,
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Category/index.js":36,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Maybe.First/index.js":195,"../Data.Maybe.Last/index.js":196,"../Data.Maybe/index.js":197,"../Data.Monoid.Additive/index.js":200,"../Data.Monoid.Conj/index.js":201,"../Data.Monoid.Disj/index.js":202,"../Data.Monoid.Dual/index.js":203,"../Data.Monoid.Multiplicative/index.js":205,"../Data.Traversable.Accum.Internal/index.js":255,"./foreign.js":256}],258:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
    this.FoldableWithIndex1 = FoldableWithIndex1;
    this.FunctorWithIndex0 = FunctorWithIndex0;
    this.Traversable2 = Traversable2;
    this.traverseWithIndex = traverseWithIndex;
};
var traverseWithIndexDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            return function ($19) {
                return Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative)(Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f)($19));
            };
        };
    };
};
var traverseWithIndex = function (dict) {
    return dict.traverseWithIndex;
};
var traverseDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
        };
    };
};
var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function () {
    return Data_Traversable.traversableMaybe;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexLast = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexLast;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexLast;
}, function () {
    return Data_Traversable.traversableLast;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexFirst = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexFirst;
}, function () {
    return Data_Traversable.traversableFirst;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDual = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDual;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDisj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDisj;
}, function () {
    return Data_Traversable.traversableDisj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexConj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexConj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexConj;
}, function () {
    return Data_Traversable.traversableConj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexArray = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexArray;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexArray;
}, function () {
    return Data_Traversable.traversableArray;
}, function (dictApplicative) {
    return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function () {
    return Data_Traversable.traversableAdditive;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
    };
});
var mapAccumRWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanrWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(a)(b);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumLWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanlWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(b)(a);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var forWithIndex = function (dictApplicative) {
    return function (dictTraversableWithIndex) {
        return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
    };
};
module.exports = {
    TraversableWithIndex: TraversableWithIndex,
    traverseWithIndex: traverseWithIndex,
    traverseWithIndexDefault: traverseWithIndexDefault,
    forWithIndex: forWithIndex,
    scanlWithIndex: scanlWithIndex,
    mapAccumLWithIndex: mapAccumLWithIndex,
    scanrWithIndex: scanrWithIndex,
    mapAccumRWithIndex: mapAccumRWithIndex,
    traverseDefault: traverseDefault,
    traversableWithIndexArray: traversableWithIndexArray,
    traversableWithIndexMaybe: traversableWithIndexMaybe,
    traversableWithIndexFirst: traversableWithIndexFirst,
    traversableWithIndexLast: traversableWithIndexLast,
    traversableWithIndexAdditive: traversableWithIndexAdditive,
    traversableWithIndexDual: traversableWithIndexDual,
    traversableWithIndexConj: traversableWithIndexConj,
    traversableWithIndexDisj: traversableWithIndexDisj,
    traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};

},{"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.FunctorWithIndex/index.js":158,"../Data.Traversable.Accum.Internal/index.js":255,"../Data.Traversable/index.js":257,"../Data.Unit/index.js":266}],259:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var uncurry9 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry8 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry7 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry6 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry5 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
    };
};
var uncurry4 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
    };
};
var uncurry3 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
    };
};
var uncurry2 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0);
    };
};
var uncurry10 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry1 = function (f) {
    return function (v) {
        return f(v.value0);
    };
};
var tuple9 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple8 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple7 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                        };
                    };
                };
            };
        };
    };
};
var tuple6 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                    };
                };
            };
        };
    };
};
var tuple5 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                };
            };
        };
    };
};
var tuple4 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
            };
        };
    };
};
var tuple3 = function (a) {
    return function (b) {
        return function (c) {
            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
        };
    };
};
var tuple2 = function (a) {
    return function (b) {
        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
    };
};
var tuple10 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return function (j) {
                                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple1 = function (a) {
    return new Data_Tuple.Tuple(a, Data_Unit.unit);
};
var over9 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
    };
};
var over8 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
    };
};
var over7 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
    };
};
var over6 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
    };
};
var over5 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
    };
};
var over4 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
    };
};
var over3 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
    };
};
var over2 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
    };
};
var over10 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
    };
};
var over1 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(o(v.value0), v.value1);
    };
};
var get9 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get8 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get7 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value0;
};
var get6 = function (v) {
    return v.value1.value1.value1.value1.value1.value0;
};
var get5 = function (v) {
    return v.value1.value1.value1.value1.value0;
};
var get4 = function (v) {
    return v.value1.value1.value1.value0;
};
var get3 = function (v) {
    return v.value1.value1.value0;
};
var get2 = function (v) {
    return v.value1.value0;
};
var get10 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get1 = function (v) {
    return v.value0;
};
var curry9 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry8 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry7 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry6 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry5 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                        };
                    };
                };
            };
        };
    };
};
var curry4 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                    };
                };
            };
        };
    };
};
var curry3 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                };
            };
        };
    };
};
var curry2 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
            };
        };
    };
};
var curry10 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return function (j) {
                                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry1 = function (z) {
    return function (f) {
        return function (a) {
            return f(new Data_Tuple.Tuple(a, z));
        };
    };
};
module.exports = {
    tuple1: tuple1,
    tuple2: tuple2,
    tuple3: tuple3,
    tuple4: tuple4,
    tuple5: tuple5,
    tuple6: tuple6,
    tuple7: tuple7,
    tuple8: tuple8,
    tuple9: tuple9,
    tuple10: tuple10,
    get1: get1,
    get2: get2,
    get3: get3,
    get4: get4,
    get5: get5,
    get6: get6,
    get7: get7,
    get8: get8,
    get9: get9,
    get10: get10,
    over1: over1,
    over2: over2,
    over3: over3,
    over4: over4,
    over5: over5,
    over6: over6,
    over7: over7,
    over8: over8,
    over9: over9,
    over10: over10,
    uncurry1: uncurry1,
    uncurry2: uncurry2,
    uncurry3: uncurry3,
    uncurry4: uncurry4,
    uncurry5: uncurry5,
    uncurry6: uncurry6,
    uncurry7: uncurry7,
    uncurry8: uncurry8,
    uncurry9: uncurry9,
    uncurry10: uncurry10,
    curry1: curry1,
    curry2: curry2,
    curry3: curry3,
    curry4: curry4,
    curry5: curry5,
    curry6: curry6,
    curry7: curry7,
    curry8: curry8,
    curry9: curry9,
    curry10: curry10
};

},{"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266}],260:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Data_Semiring.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Data_Ring.Ring(function () {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            return function ($312) {
                return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                    var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                    if ($163) {
                        return new Data_Maybe.Just(v.value1);
                    };
                    return Data_Maybe.Nothing.value;
                })($312));
            };
        };
    };
};
var heytingAlgebraTuple = function (dictHeytingAlgebra) {
    return function (dictHeytingAlgebra1) {
        return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
        }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
    };
};
var functorTuple = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new Tuple(m.value0, f(m.value1));
    };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTuple;
}, function (f) {
    return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Data_Unit.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTuple;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTuple;
}, function () {
    return functorWithIndexTuple;
}, function () {
    return traversableTuple;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
        };
    };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableTuple;
}, function (dictSemigroup) {
    return function (v) {
        return v.value1;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Tuple;
}, function () {
    return traversableTuple;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var eq1Tuple = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
    });
};
var ord1Tuple = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Tuple(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
    });
};
var distributiveTuple = function (dictTypeEquals) {
    return new Data_Distributive.Distributive(function () {
        return functorTuple;
    }, function (dictFunctor) {
        return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
    }, function (dictFunctor) {
        return function ($313) {
            return Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit))(Data_Functor.map(dictFunctor)(snd)($313));
        };
    });
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var commutativeRingTuple = function (dictCommutativeRing) {
    return function (dictCommutativeRing1) {
        return new Data_CommutativeRing.CommutativeRing(function () {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
        });
    };
};
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Data_BooleanAlgebra.BooleanAlgebra(function () {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyTuple(dictMonoid.Semigroup0());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Control_Monad.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid.Semigroup0());
    });
};
module.exports = {
    Tuple: Tuple,
    fst: fst,
    snd: snd,
    curry: curry,
    uncurry: uncurry,
    swap: swap,
    lookup: lookup,
    showTuple: showTuple,
    eqTuple: eqTuple,
    eq1Tuple: eq1Tuple,
    ordTuple: ordTuple,
    ord1Tuple: ord1Tuple,
    boundedTuple: boundedTuple,
    semigroupoidTuple: semigroupoidTuple,
    semigroupTuple: semigroupTuple,
    monoidTuple: monoidTuple,
    semiringTuple: semiringTuple,
    ringTuple: ringTuple,
    commutativeRingTuple: commutativeRingTuple,
    heytingAlgebraTuple: heytingAlgebraTuple,
    booleanAlgebraTuple: booleanAlgebraTuple,
    functorTuple: functorTuple,
    functorWithIndexTuple: functorWithIndexTuple,
    invariantTuple: invariantTuple,
    bifunctorTuple: bifunctorTuple,
    applyTuple: applyTuple,
    biapplyTuple: biapplyTuple,
    applicativeTuple: applicativeTuple,
    biapplicativeTuple: biapplicativeTuple,
    bindTuple: bindTuple,
    monadTuple: monadTuple,
    extendTuple: extendTuple,
    comonadTuple: comonadTuple,
    lazyTuple: lazyTuple,
    foldableTuple: foldableTuple,
    foldable1Tuple: foldable1Tuple,
    foldableWithIndexTuple: foldableWithIndexTuple,
    bifoldableTuple: bifoldableTuple,
    traversableTuple: traversableTuple,
    traversable1Tuple: traversable1Tuple,
    traversableWithIndexTuple: traversableWithIndexTuple,
    bitraversableTuple: bitraversableTuple,
    distributiveTuple: distributiveTuple
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Biapplicative/index.js":32,"../Control.Biapply/index.js":33,"../Control.Bind/index.js":35,"../Control.Comonad/index.js":37,"../Control.Extend/index.js":40,"../Control.Lazy/index.js":41,"../Control.Monad/index.js":65,"../Control.Semigroupoid/index.js":71,"../Data.Bifoldable/index.js":99,"../Data.Bifunctor/index.js":105,"../Data.Bitraversable/index.js":106,"../Data.BooleanAlgebra/index.js":108,"../Data.Bounded/index.js":110,"../Data.CommutativeRing/index.js":117,"../Data.Distributive/index.js":127,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Functor.Invariant/index.js":153,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe.First/index.js":195,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semigroup.Foldable/index.js":226,"../Data.Semigroup.Traversable/index.js":228,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Unit/index.js":266,"../Type.Equality/index.js":402}],261:[function(require,module,exports){
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};

},{}],262:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Unfoldable = function (Unfoldable10, unfoldr) {
    this.Unfoldable10 = Unfoldable10;
    this.unfoldr = unfoldr;
};
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableArray = new Unfoldable(function () {
    return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $7 = i <= 0;
                if ($7) {
                    return Data_Maybe.Nothing.value;
                };
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};
var fromMaybe = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable,
    unfoldr: unfoldr,
    replicate: replicate,
    replicateA: replicateA,
    none: none,
    fromMaybe: fromMaybe,
    unfoldableArray: unfoldableArray
};

},{"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable1/index.js":264,"../Data.Unit/index.js":266,"./foreign.js":261}],263:[function(require,module,exports){
"use strict";

exports.unfoldr1ArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var tuple = f(value);
              result.push(fst(tuple));
              var maybe = snd(tuple);
              if (isNothing(maybe)) return result;
              value = fromJust(maybe);
            }
          };
        };
      };
    };
  };
};

},{}],264:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unfoldable1 = function (unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
var unfoldr1 = function (dict) {
    return dict.unfoldr1;
};
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate1 = function (dictUnfoldable1) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                if (i <= 0) {
                    return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 64, column 5 - line 64, column 39): " + [ i.constructor.name ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};
var replicate1A = function (dictApply) {
    return function (dictUnfoldable1) {
        return function (dictTraversable1) {
            return function (n) {
                return function (m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};
var singleton = function (dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};
var range = function (dictUnfoldable1) {
    return function (start) {
        return function (end) {
            var go = function (delta) {
                return function (i) {
                    var i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, (function () {
                        var $8 = i === end;
                        if ($8) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(i$prime);
                    })());
                };
            };
            var delta = (function () {
                var $9 = end >= start;
                if ($9) {
                    return 1;
                };
                return -1 | 0;
            })();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array
};

},{"../Data.Boolean/index.js":107,"../Data.Maybe/index.js":197,"../Data.Semigroup.Traversable/index.js":228,"../Data.Tuple/index.js":260,"./foreign.js":263}],265:[function(require,module,exports){
"use strict";

exports.unit = {};

},{}],266:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var showUnit = new Data_Show.Show(function (v) {
    return "unit";
});
module.exports = {
    showUnit: showUnit,
    unit: $foreign.unit
};

},{"../Data.Show/index.js":235,"./foreign.js":265}],267:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var V = function (x) {
    return x;
};
var unV = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_Either.Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Data_Either.Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring (line 48, column 1 - line 48, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var toEither = function (v) {
    return v;
};
var showV = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Data_Either.Left) {
                return "invalid (" + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Data_Either.Right) {
                return "pure (" + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring (line 81, column 10 - line 85, column 1): " + [ v.constructor.name ]);
        });
    };
};
var newtypeV = new Data_Newtype.Newtype(function (n) {
    return n;
}, V);
var isValid = function (v) {
    if (v instanceof Data_Either.Right) {
        return true;
    };
    return false;
};
var invalid = function ($71) {
    return V(Data_Either.Left.create($71));
};
var functorV = Data_Either.functorEither;
var foldableV = new Data_Foldable.Foldable(function (dictMonoid) {
    return unV(Data_Function["const"](Data_Monoid.mempty(dictMonoid)));
}, function (f) {
    return function (b) {
        return unV(Data_Function["const"](b))(f(b));
    };
}, function (f) {
    return function (b) {
        return unV(Data_Function["const"](b))(Data_Function.flip(f)(b));
    };
});
var traversableV = new Data_Traversable.Traversable(function () {
    return foldableV;
}, function () {
    return functorV;
}, function (dictApplicative) {
    return unV(function ($72) {
        return Control_Applicative.pure(dictApplicative)(V(Data_Either.Left.create($72)));
    })(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($73) {
        return V(Data_Either.Right.create($73));
    }));
}, function (dictApplicative) {
    return function (f) {
        return unV(function ($74) {
            return Control_Applicative.pure(dictApplicative)(V(Data_Either.Left.create($74)));
        })(function ($75) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($76) {
                return V(Data_Either.Right.create($76));
            })(f($75));
        });
    };
});
var eqV = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(Data_Either.eqEither(dictEq)(dictEq1))(x)(y);
            };
        });
    };
};
var ordV = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqV(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                return Data_Ord.compare(Data_Either.ordEither(dictOrd)(dictOrd1))(x)(y);
            };
        });
    };
};
var eq1V = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqV(dictEq)(dictEq1));
    });
};
var ord1V = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1V(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordV(dictOrd)(dictOrd1));
    });
};
var bifunctorV = Data_Either.bifunctorEither;
var applyV = function (dictSemiring) {
    return new Control_Apply.Apply(function () {
        return functorV;
    }, function (v) {
        return function (v1) {
            if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0));
            };
            if (v instanceof Data_Either.Left) {
                return new Data_Either.Left(v.value0);
            };
            if (v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(v1.value0);
            };
            if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v.value0(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring (line 89, column 1 - line 89, column 49): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var semigroupV = function (dictSemiring) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyV(dictSemiring))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeV = function (dictSemiring) {
    return new Control_Applicative.Applicative(function () {
        return applyV(dictSemiring);
    }, function ($77) {
        return V(Data_Either.Right.create($77));
    });
};
var monoidV = function (dictSemiring) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupV(dictSemiring)(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeV(dictSemiring))(Data_Monoid.mempty(dictMonoid)));
    };
};
var andThen = function (v1) {
    return function (f) {
        return unV(invalid)(f)(v1);
    };
};
var altV = function (dictSemiring) {
    return new Control_Alt.Alt(function () {
        return functorV;
    }, function (v) {
        return function (v1) {
            if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0));
            };
            if (v instanceof Data_Either.Left) {
                return v1;
            };
            if (v instanceof Data_Either.Right) {
                return new Data_Either.Right(v.value0);
            };
            throw new Error("Failed pattern match at Data.Validation.Semiring (line 104, column 1 - line 104, column 45): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var plusV = function (dictSemiring) {
    return new Control_Plus.Plus(function () {
        return altV(dictSemiring);
    }, new Data_Either.Left(Data_Semiring.zero(dictSemiring)));
};
module.exports = {
    V: V,
    unV: unV,
    invalid: invalid,
    isValid: isValid,
    toEither: toEither,
    andThen: andThen,
    newtypeV: newtypeV,
    eqV: eqV,
    eq1V: eq1V,
    ordV: ordV,
    ord1V: ord1V,
    showV: showV,
    functorV: functorV,
    bifunctorV: bifunctorV,
    applyV: applyV,
    applicativeV: applicativeV,
    semigroupV: semigroupV,
    monoidV: monoidV,
    altV: altV,
    plusV: plusV,
    foldableV: foldableV,
    traversableV: traversableV
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257}],268:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var VariantRep = function (x) {
    return x;
};
var FProxy = (function () {
    function FProxy() {

    };
    FProxy.value = new FProxy();
    return FProxy;
})();
var VariantTags = function (variantTags) {
    this.variantTags = variantTags;
};
var VariantMatchCases = {};
var VariantFMatchCases = {};
var Contractable = function (contractWith) {
    this.contractWith = contractWith;
};
var variantTagsNil = new VariantTags(function (v) {
    return Data_List_Types.Nil.value;
});
var variantTags = function (dict) {
    return dict.variantTags;
};
var variantTagsCons = function (dictVariantTags) {
    return function (dictIsSymbol) {
        return new VariantTags(function (v) {
            return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var variantMatchNil = VariantMatchCases;
var variantMatchCons = function (dictVariantMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantMatchCases;
        };
    };
};
var variantFMatchNil = VariantFMatchCases;
var variantFMatchCons = function (dictVariantFMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantFMatchCases;
        };
    };
};
var lookupToEnum = (function () {
    var go = function ($copy_ix) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_ix = $copy_ix;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ix, v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v1.value0.cardinality > ix) {
                            var v2 = v1.value0.toEnum(ix);
                            if (v2 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v.value0,
                                    value: v2.value0
                                });
                            };
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_ix = ix - v1.value0.cardinality | 0;
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ix, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go;
})();
var lookupTag = function (tag) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons) {
                if (v.value0 === tag) {
                    $tco_done = true;
                    return true;
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = v.value1;
                    return;
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return false;
            };
            throw new Error("Failed pattern match at Data.Variant.Internal (line 94, column 8 - line 98, column 18): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var lookupCardinality = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = acc + v.value0.cardinality | 0;
                    $copy_v = v.value1;
                    return;
                };
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 216, column 12 - line 218, column 16): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(0);
})();
var impossible = function (str) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
};
var lookup = function (name) {
    return function (tag) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v.value0 === tag) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupEq = function (tags) {
    return function (eqs) {
        return function (v) {
            return function (v1) {
                if (v.type === v1.type) {
                    return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
                };
                if (Data_Boolean.otherwise) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 100, column 1 - line 105, column 12): " + [ tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var lookupOrd = function (tags) {
    return function (ords) {
        return function (v) {
            return function (v1) {
                var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
                if (v3 instanceof Data_Ordering.EQ) {
                    return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
                };
                return v3;
            };
        };
    };
};
var lookupFirst = function (name) {
    return function (f) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                    return {
                        type: v.value0,
                        value: f(v1.value0)
                    };
                };
                return impossible(name);
            };
        };
        return go;
    };
};
var lookupFromEnum = function (v) {
    var go = function ($copy_acc) {
        return function ($copy_v1) {
            return function ($copy_v2) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v1, v2) {
                    if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                        if (v1.value0 === v.type) {
                            $tco_done = true;
                            return acc + v2.value0.fromEnum(v.value) | 0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_acc = acc + v2.value0.cardinality | 0;
                            $tco_var_v1 = v1.value1;
                            $copy_v2 = v2.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("fromEnum");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v1, $copy_v2);
                };
                return $tco_result;
            };
        };
    };
    return go(0);
};
var lookupLast = function (name) {
    return function (f) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && (v.value1 instanceof Data_List_Types.Nil && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil))) {
                        $tco_done = true;
                        return {
                            type: v.value0,
                            value: f(v1.value0)
                        };
                    };
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        $tco_var_v = v.value1;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupPred = function (v) {
    var go2 = function ($copy_t1) {
        return function ($copy_b1) {
            return function ($copy_d1) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        return function ($copy_v3) {
                            var $tco_var_t1 = $copy_t1;
                            var $tco_var_b1 = $copy_b1;
                            var $tco_var_d1 = $copy_d1;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_var_v2 = $copy_v2;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(t1, b1, d1, v1, v2, v3) {
                                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                                    if (v1.value0 === v.type) {
                                        var v4 = v3.value0.pred(v.value);
                                        if (v4 instanceof Data_Maybe.Nothing) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: t1,
                                                value: b1.top
                                            });
                                        };
                                        if (v4 instanceof Data_Maybe.Just) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: v.type,
                                                value: v4.value0
                                            });
                                        };
                                        throw new Error("Failed pattern match at Data.Variant.Internal (line 184, column 11 - line 186, column 69): " + [ v4.constructor.name ]);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        $tco_var_t1 = v1.value0;
                                        $tco_var_b1 = v2.value0;
                                        $tco_var_d1 = v3.value0;
                                        $tco_var_v1 = v1.value1;
                                        $tco_var_v2 = v2.value1;
                                        $copy_v3 = v3.value1;
                                        return;
                                    };
                                };
                                $tco_done = true;
                                return impossible("pred");
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_t1, $tco_var_b1, $tco_var_d1, $tco_var_v1, $tco_var_v2, $copy_v3);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
        };
    };
    var go1 = function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                    if (v1.value0 === v.type) {
                        var v4 = v3.value0.pred(v.value);
                        if (v4 instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v4 instanceof Data_Maybe.Just) {
                            return Data_Maybe.Just.create({
                                type: v.type,
                                value: v4.value0
                            });
                        };
                        throw new Error("Failed pattern match at Data.Variant.Internal (line 175, column 11 - line 177, column 69): " + [ v4.constructor.name ]);
                    };
                    if (Data_Boolean.otherwise) {
                        return go2(v1.value0)(v2.value0)(v3.value0)(v1.value1)(v2.value1)(v3.value1);
                    };
                };
                return impossible("pred");
            };
        };
    };
    return go1;
};
var lookupSucc = function (v) {
    var go = function ($copy_v1) {
        return function ($copy_v2) {
            return function ($copy_v3) {
                var $tco_var_v1 = $copy_v1;
                var $tco_var_v2 = $copy_v2;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v1, v2, v3) {
                    if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                        if (v1.value0 === v.type) {
                            var v4 = v3.value0.succ(v.value);
                            if (v4 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v1.value0,
                                    value: v4.value0
                                });
                            };
                            if (v4 instanceof Data_Maybe.Nothing) {
                                if (v1.value1 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Cons) {
                                    $tco_done = true;
                                    return Data_Maybe.Just.create({
                                        type: v1.value1.value0,
                                        value: v2.value1.value0.bottom
                                    });
                                };
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            };
                            throw new Error("Failed pattern match at Data.Variant.Internal (line 202, column 11 - line 206, column 29): " + [ v4.constructor.name ]);
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v1 = v1.value1;
                            $tco_var_v2 = v2.value1;
                            $copy_v3 = v3.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("succ");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
                };
                return $tco_result;
            };
        };
    };
    return go;
};
var contractWithInstance = function (dictRowToList) {
    return function (dictUnion) {
        return function (dictVariantTags) {
            return new Contractable(function (dictAlternative) {
                return function (v) {
                    return function (v1) {
                        return function (tag) {
                            return function (a) {
                                if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value))) {
                                    return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                                };
                                if (Data_Boolean.otherwise) {
                                    return Control_Plus.empty(dictAlternative.Plus1());
                                };
                                throw new Error("Failed pattern match at Data.Variant.Internal (line 254, column 1 - line 259, column 23): " + [ v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name ]);
                            };
                        };
                    };
                };
            });
        };
    };
};
var contractWith = function (dict) {
    return dict.contractWith;
};
module.exports = {
    FProxy: FProxy,
    VariantRep: VariantRep,
    VariantTags: VariantTags,
    variantTags: variantTags,
    Contractable: Contractable,
    contractWith: contractWith,
    VariantMatchCases: VariantMatchCases,
    VariantFMatchCases: VariantFMatchCases,
    lookup: lookup,
    lookupTag: lookupTag,
    lookupEq: lookupEq,
    lookupOrd: lookupOrd,
    lookupLast: lookupLast,
    lookupFirst: lookupFirst,
    lookupPred: lookupPred,
    lookupSucc: lookupSucc,
    lookupCardinality: lookupCardinality,
    lookupFromEnum: lookupFromEnum,
    lookupToEnum: lookupToEnum,
    impossible: impossible,
    variantMatchCons: variantMatchCons,
    variantMatchNil: variantMatchNil,
    variantFMatchCons: variantFMatchCons,
    variantFMatchNil: variantFMatchNil,
    variantTagsNil: variantTagsNil,
    variantTagsCons: variantTagsCons,
    contractWithInstance: contractWithInstance
};

},{"../Control.Applicative/index.js":29,"../Control.Plus/index.js":70,"../Data.Boolean/index.js":107,"../Data.List.Types/index.js":192,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Symbol/index.js":250,"../Partial.Unsafe/index.js":378,"../Type.Data.RowList/index.js":401}],269:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Unvariant = function (x) {
    return x;
};
var VariantShows = function (variantShows) {
    this.variantShows = variantShows;
};
var VariantOrds = function (variantOrds) {
    this.variantOrds = variantOrds;
};
var VariantEqs = function (variantEqs) {
    this.variantEqs = variantEqs;
};
var VariantBounded = function (variantBounded) {
    this.variantBounded = variantBounded;
};
var VariantBoundedEnums = function (VariantBounded0, variantBoundedEnums) {
    this.VariantBounded0 = VariantBounded0;
    this.variantBoundedEnums = variantBoundedEnums;
};
var variantShows = function (dict) {
    return dict.variantShows;
};
var variantOrds = function (dict) {
    return dict.variantOrds;
};
var variantEqs = function (dict) {
    return dict.variantEqs;
};
var variantBoundedEnums = function (dict) {
    return dict.variantBoundedEnums;
};
var variantBounded = function (dict) {
    return dict.variantBounded;
};
var unvariant = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return f(dictIsSymbol)(dictCons);
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})(Data_Symbol.SProxy.value)(v.value);
    };
};
var showVariantNil = new VariantShows(function (v) {
    return Data_List_Types.Nil.value;
});
var showVariantCons = function (dictVariantShows) {
    return function (dictShow) {
        return new VariantShows(function (v) {
            return new Data_List_Types.Cons(Data_Show.show(dictShow), variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var showVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantShows) {
            return new Data_Show.Show(function (v1) {
                var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                var shows = variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value);
                var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
            });
        };
    };
};
var ordVariantNil = new VariantOrds(function (v) {
    return Data_List_Types.Nil.value;
});
var ordVariantCons = function (dictVariantOrds) {
    return function (dictOrd) {
        return new VariantOrds(function (v) {
            return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictAlternative) {
            return function (p) {
                return on(dictCons)(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (value) {
                return {
                    type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                    value: value
                };
            };
        };
    };
};
var revariant = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return inj(dictCons)(dictIsSymbol);
        };
    });
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var eqVariantNil = new VariantEqs(function (v) {
    return Data_List_Types.Nil.value;
});
var eqVariantCons = function (dictVariantEqs) {
    return function (dictEq) {
        return new VariantEqs(function (v) {
            return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var eqVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return new Data_Eq.Eq(function (v1) {
                return function (v2) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var eqs = variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value);
                    return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                };
            });
        };
    };
};
var ordVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return new Data_Ord.Ord(function () {
                    return eqVariant(dictRowToList)(dictVariantTags)(dictVariantEqs);
                }, function (v1) {
                    return function (v2) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var ords = variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                    };
                });
            };
        };
    };
};
var enumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.Enum(function () {
                        return ordVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupPred(a)(tags)(bounds)(dicts);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupSucc(a)(tags)(bounds)(dicts);
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
};
var match = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch(dictRowToList)(dictVariantMatchCases)(dictUnion)(r)(case_);
            };
        };
    };
};
var boundedVariantNil = new VariantBounded(function (v) {
    return Data_List_Types.Nil.value;
});
var enumVariantNil = new VariantBoundedEnums(function () {
    return boundedVariantNil;
}, function (v) {
    return Data_List_Types.Nil.value;
});
var boundedVariantCons = function (dictVariantBounded) {
    return function (dictBounded) {
        return new VariantBounded(function (v) {
            var dict = {
                top: Data_Bounded.top(dictBounded),
                bottom: Data_Bounded.bottom(dictBounded)
            };
            return new Data_List_Types.Cons(dict, variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var enumVariantCons = function (dictVariantBoundedEnums) {
    return function (dictBoundedEnum) {
        return new VariantBoundedEnums(function () {
            return boundedVariantCons(dictVariantBoundedEnums.VariantBounded0())(dictBoundedEnum.Bounded0());
        }, function (v) {
            var dict = {
                pred: Data_Enum.pred(dictBoundedEnum.Enum1()),
                succ: Data_Enum.succ(dictBoundedEnum.Enum1()),
                fromEnum: Data_Enum.fromEnum(dictBoundedEnum),
                toEnum: Data_Enum.toEnum(dictBoundedEnum),
                cardinality: Data_Enum.cardinality(dictBoundedEnum)
            };
            return new Data_List_Types.Cons(dict, variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var boundedVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBounded) {
                    return new Data_Bounded.Bounded(function () {
                        return ordVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupFirst("bottom")(function (v) {
                            return v.bottom;
                        })(tags)(dicts));
                    })(), (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupLast("top")(function (v) {
                            return v.top;
                        })(tags)(dicts));
                    })());
                };
            };
        };
    };
};
var boundedEnumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.BoundedEnum(function () {
                        return boundedVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums.VariantBounded0());
                    }, function () {
                        return enumVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums);
                    }, Data_Enum.Cardinality(Data_Variant_Internal.lookupCardinality(variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value))), function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupFromEnum(a)(tags)(dicts);
                    }, function (n) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupToEnum(n)(tags)(dicts);
                    });
                };
            };
        };
    };
};
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    expand: expand,
    contract: contract,
    Unvariant: Unvariant,
    unvariant: unvariant,
    revariant: revariant,
    VariantEqs: VariantEqs,
    variantEqs: variantEqs,
    VariantOrds: VariantOrds,
    variantOrds: variantOrds,
    VariantShows: VariantShows,
    variantShows: variantShows,
    VariantBounded: VariantBounded,
    variantBounded: variantBounded,
    VariantBoundedEnums: VariantBoundedEnums,
    variantBoundedEnums: variantBoundedEnums,
    eqVariantNil: eqVariantNil,
    eqVariantCons: eqVariantCons,
    eqVariant: eqVariant,
    boundedVariantNil: boundedVariantNil,
    boundedVariantCons: boundedVariantCons,
    boundedVariant: boundedVariant,
    enumVariantNil: enumVariantNil,
    enumVariantCons: enumVariantCons,
    enumVariant: enumVariant,
    boundedEnumVariant: boundedEnumVariant,
    ordVariantNil: ordVariantNil,
    ordVariantCons: ordVariantCons,
    ordVariant: ordVariant,
    showVariantNil: showVariantNil,
    showVariantCons: showVariantCons,
    showVariant: showVariant
};

},{"../Control.Applicative/index.js":29,"../Control.Plus/index.js":70,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.List.Types/index.js":192,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Data.Variant.Internal/index.js":268,"../Partial.Unsafe/index.js":378,"../Record.Unsafe/index.js":386,"../Type.Data.Row/index.js":400,"../Type.Data.RowList/index.js":401,"../Unsafe.Coerce/index.js":405}],270:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Void = function (x) {
    return x;
};
var absurd = function (a) {
    var spin = function ($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
            $copy_v = v;
            return;
        };
        while (!false) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
module.exports = {
    absurd: absurd,
    showVoid: showVoid
};

},{"../Data.Show/index.js":235}],271:[function(require,module,exports){
/* globals exports, setTimeout */
"use strict";

var AVar = function () {

  function MutableQueue () {
    this.head = null;
    this.last = null;
    this.size = 0;
  }

  function MutableCell (queue, value) {
    this.queue = queue;
    this.value = value;
    this.next  = null;
    this.prev  = null;
  }

  function AVar (value) {
    this.draining = false;
    this.error    = null;
    this.value    = value;
    this.takes    = new MutableQueue();
    this.reads    = new MutableQueue();
    this.puts     = new MutableQueue();
  }

  var EMPTY = {};

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function putLast (queue, value) {
    var cell = new MutableCell(queue, value);
    switch (queue.size) {
    case 0:
      queue.head = cell;
      break;
    case 1:
      cell.prev = queue.head;
      queue.head.next = cell;
      queue.last = cell;
      break;
    default:
      cell.prev = queue.last;
      queue.last.next = cell;
      queue.last = cell;
    }
    queue.size++;
    return cell;
  }

  function takeLast (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.last;
      queue.head.next = null;
      queue.last = null;
      break;
    default:
      cell = queue.last;
      queue.last = cell.prev;
      queue.last.next = null;
    }
    cell.prev = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function takeHead (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.head;
      queue.last.prev = null;
      queue.head = queue.last;
      queue.last = null;
      break;
    default:
      cell = queue.head;
      queue.head = cell.next;
      queue.head.prev = null;
    }
    cell.next = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function deleteCell (cell) {
    if (cell.queue === null) {
      return;
    }
    if (cell.queue.last === cell) {
      takeLast(cell.queue);
      return;
    }
    if (cell.queue.head === cell) {
      takeHead(cell.queue);
      return;
    }
    if (cell.prev) {
      cell.prev.next = cell.next;
    }
    if (cell.next) {
      cell.next.prev = cell.prev;
    }
    cell.queue.size--;
    cell.queue = null;
    cell.value = null;
    cell.next  = null;
    cell.prev  = null;
  }

  function drainVar (util, avar) {
    if (avar.draining) {
      return;
    }

    var ps = avar.puts;
    var ts = avar.takes;
    var rs = avar.reads;
    var p, r, t, value, rsize;

    avar.draining = true;

    while (1) { // eslint-disable-line no-constant-condition
      p = null;
      r = null;
      t = null;
      value = avar.value;
      rsize = rs.size;

      if (avar.error !== null) {
        value = util.left(avar.error);
        while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
          runEff(p.cb(value));
        }
        while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
          runEff(r(value));
        }
        while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
          runEff(t(value));
        }
        break;
      }

      // Process the next put. We do not immediately invoke the callback
      // because we want to preserve ordering. If there are takes/reads
      // we want to run those first.
      if (value === EMPTY && (p = takeHead(ps))) {
        avar.value = value = p.value;
      }

      if (value !== EMPTY) {
        // We go ahead and queue up the next take for the same reasons as
        // above. Invoking the read callbacks can affect the mutable queue.
        t = takeHead(ts);
        // We only want to process the reads queued up before running these
        // callbacks so we guard on rsize.
        while (rsize-- && (r = takeHead(rs))) {
          runEff(r(util.right(value)));
        }
        if (t !== null) {
          avar.value = EMPTY;
          runEff(t(util.right(value)));
        }
      }

      if (p !== null) {
        runEff(p.cb(util.right(void 0)));
      }

      // Callbacks could have queued up more items so we need to guard on the
      // actual mutable properties.
      if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
        break;
      }
    }
    avar.draining = false;
  }

  AVar.EMPTY      = EMPTY;
  AVar.putLast    = putLast;
  AVar.takeLast   = takeLast;
  AVar.takeHead   = takeHead;
  AVar.deleteCell = deleteCell;
  AVar.drainVar   = drainVar;

  return AVar;
}();

exports.empty = function () {
  return new AVar(AVar.EMPTY);
};

exports._newVar = function (value) {
  return function () {
    return new AVar(value);
  };
};

exports._killVar = function (util, error, avar) {
  return function () {
    if (avar.error === null) {
      avar.error = error;
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
    }
  };
};

exports._putVar = function (util, value, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._takeVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.takes, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._readVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.reads, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._tryPutVar = function (util, value, avar) {
  return function () {
    if (avar.value === AVar.EMPTY && avar.error === null) {
      avar.value = value;
      AVar.drainVar(util, avar);
      return true;
    } else {
      return false;
    }
  };
};

exports._tryTakeVar = function (util, avar) {
  return function () {
    var value = avar.value;
    if (value === AVar.EMPTY) {
      return util.nothing;
    } else {
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
      return util.just(value);
    }
  };
};

exports._tryReadVar = function (util, avar) {
  return function () {
    if (avar.value === AVar.EMPTY) {
      return util.nothing;
    } else {
      return util.just(avar.value);
    }
  };
};

exports._status = function (util, avar) {
  return function () {
    if (avar.error) {
      return util.killed(avar.error);
    }
    if (avar.value === AVar.EMPTY) {
      return util.empty;
    }
    return util.filled(avar.value);
  };
};


},{}],272:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var Filled = (function () {
    function Filled(value0) {
        this.value0 = value0;
    };
    Filled.create = function (value0) {
        return new Filled(value0);
    };
    return Filled;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var $$new = $foreign["_newVar"];
var isKilled = function (v) {
    if (v instanceof Killed) {
        return true;
    };
    return false;
};
var isFilled = function (v) {
    if (v instanceof Filled) {
        return true;
    };
    return false;
};
var isEmpty = function (v) {
    if (v instanceof Empty) {
        return true;
    };
    return false;
};
var ffiUtil = {
    left: Data_Either.Left.create,
    right: Data_Either.Right.create,
    nothing: Data_Maybe.Nothing.value,
    just: Data_Maybe.Just.create,
    killed: Killed.create,
    filled: Filled.create,
    empty: Empty.value
};
var kill = function (err) {
    return function (avar) {
        return $foreign["_killVar"](ffiUtil, err, avar);
    };
};
var put = function (value) {
    return function (avar) {
        return function (cb) {
            return $foreign["_putVar"](ffiUtil, value, avar, cb);
        };
    };
};
var read = function (avar) {
    return function (cb) {
        return $foreign["_readVar"](ffiUtil, avar, cb);
    };
};
var status = function (avar) {
    return $foreign["_status"](ffiUtil, avar);
};
var take = function (avar) {
    return function (cb) {
        return $foreign["_takeVar"](ffiUtil, avar, cb);
    };
};
var tryPut = function (value) {
    return function (avar) {
        return $foreign["_tryPutVar"](ffiUtil, value, avar);
    };
};
var tryRead = function (avar) {
    return $foreign["_tryReadVar"](ffiUtil, avar);
};
var tryTake = function (avar) {
    return $foreign["_tryTakeVar"](ffiUtil, avar);
};
module.exports = {
    Killed: Killed,
    Filled: Filled,
    Empty: Empty,
    "new": $$new,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill,
    status: status,
    isEmpty: isEmpty,
    isFilled: isFilled,
    isKilled: isKilled,
    empty: $foreign.empty
};

},{"../Data.Either/index.js":129,"../Data.Maybe/index.js":197,"./foreign.js":271}],273:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Effect_AVar = require("../Effect.AVar/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var tryTake = function ($6) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.tryTake($6));
};
var tryRead = function ($7) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.tryRead($7));
};
var tryPut = function (value) {
    return function ($8) {
        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.tryPut(value)($8));
    };
};
var take = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v = Effect_AVar.take(avar)(k)();
            return Effect_Aff.effectCanceler(v);
        };
    });
};
var status = function ($9) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.status($9));
};
var read = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v = Effect_AVar.read(avar)(k)();
            return Effect_Aff.effectCanceler(v);
        };
    });
};
var put = function (value) {
    return function (avar) {
        return Effect_Aff.makeAff(function (k) {
            return function __do() {
                var v = Effect_AVar.put(value)(avar)(k)();
                return Effect_Aff.effectCanceler(v);
            };
        });
    };
};
var $$new = function ($10) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar["new"]($10));
};
var kill = function (error) {
    return function ($11) {
        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.kill(error)($11));
    };
};
var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
module.exports = {
    "new": $$new,
    empty: empty,
    status: status,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill
};

},{"../Effect.AVar/index.js":272,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279}],274:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var MonadAff = function (MonadEffect0, liftAff) {
    this.MonadEffect0 = MonadEffect0;
    this.liftAff = liftAff;
};
var monadAffAff = new MonadAff(function () {
    return Effect_Aff.monadEffectAff;
}, Control_Category.identity(Control_Category.categoryFn));
var liftAff = function (dict) {
    return dict.liftAff;
};
var monadAffContT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
    }, function ($10) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($10));
    });
};
var monadAffExceptT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
    }, function ($11) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($11));
    });
};
var monadAffListT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
    }, function ($12) {
        return Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($12));
    });
};
var monadAffMaybe = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
    }, function ($13) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($13));
    });
};
var monadAffRWS = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
        }, function ($14) {
            return Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($14));
        });
    };
};
var monadAffReader = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
    }, function ($15) {
        return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($15));
    });
};
var monadAffState = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
    }, function ($16) {
        return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($16));
    });
};
var monadAffWriter = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
        }, function ($17) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0())(liftAff(dictMonadAff)($17));
        });
    };
};
module.exports = {
    liftAff: liftAff,
    MonadAff: MonadAff,
    monadAffAff: monadAffAff,
    monadAffContT: monadAffContT,
    monadAffExceptT: monadAffExceptT,
    monadAffListT: monadAffListT,
    monadAffMaybe: monadAffMaybe,
    monadAffReader: monadAffReader,
    monadAffRWS: monadAffRWS,
    monadAffState: monadAffState,
    monadAffWriter: monadAffWriter
};

},{"../Control.Category/index.js":36,"../Control.Monad.Cont.Trans/index.js":43,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.List.Trans/index.js":50,"../Control.Monad.Maybe.Trans/index.js":51,"../Control.Monad.RWS.Trans/index.js":52,"../Control.Monad.Reader.Trans/index.js":54,"../Control.Monad.State.Trans/index.js":59,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Trans/index.js":63,"../Effect.Aff/index.js":277}],275:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var EffectFnCanceler = function (x) {
    return x;
};
var EffectFnAff = function (x) {
    return x;
};
var fromEffectFnAff = function (v) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v1 = v(function ($4) {
                return k(Data_Either.Left.create($4))();
            }, function ($5) {
                return k(Data_Either.Right.create($5))();
            });
            return function (e) {
                return Effect_Aff.makeAff(function (k2) {
                    return function __do() {
                        v1(e, function ($6) {
                            return k2(Data_Either.Left.create($6))();
                        }, function ($7) {
                            return k2(Data_Either.Right.create($7))();
                        });
                        return Effect_Aff.nonCanceler;
                    };
                });
            };
        };
    });
};
module.exports = {
    EffectFnAff: EffectFnAff,
    EffectFnCanceler: EffectFnCanceler,
    fromEffectFnAff: fromEffectFnAff
};

},{"../Data.Either/index.js":129,"../Effect.Aff/index.js":277}],276:[function(require,module,exports){
(function (setImmediate,clearImmediate){
/* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
/* jshint -W083, -W098, -W003 */
"use strict";

var Aff = function () {
  // A unique value for empty.
  var EMPTY = {};

  /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */
  var PURE    = "Pure";
  var THROW   = "Throw";
  var CATCH   = "Catch";
  var SYNC    = "Sync";
  var ASYNC   = "Async";
  var BIND    = "Bind";
  var BRACKET = "Bracket";
  var FORK    = "Fork";
  var SEQ     = "Sequential";

  /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */
  var MAP   = "Map";
  var APPLY = "Apply";
  var ALT   = "Alt";

  // Various constructors used in interpretation
  var CONS      = "Cons";      // Cons-list, for stacks
  var RESUME    = "Resume";    // Continue indiscriminately
  var RELEASE   = "Release";   // Continue with bracket finalizers
  var FINALIZER = "Finalizer"; // A non-interruptible effect
  var FINALIZED = "Finalized"; // Marker for finalization
  var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
  var FIBER     = "Fiber";     // Actual fiber reference
  var THUNK     = "Thunk";     // Primed effect, ready to invoke

  function Aff(tag, _1, _2, _3) {
    this.tag = tag;
    this._1  = _1;
    this._2  = _2;
    this._3  = _3;
  }

  function AffCtr(tag) {
    var fn = function (_1, _2, _3) {
      return new Aff(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }

  function nonCanceler(error) {
    return new Aff(PURE, void 0);
  }

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error) {
      return left(error);
    }
  }

  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error) {
      k(left(error))();
      return nonCanceler;
    }
  }

  var Scheduler = function () {
    var limit    = 1024;
    var size     = 0;
    var ix       = 0;
    var queue    = new Array(limit);
    var draining = false;

    function drain() {
      var thunk;
      draining = true;
      while (size !== 0) {
        size--;
        thunk     = queue[ix];
        queue[ix] = void 0;
        ix        = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }

    return {
      isDraining: function () {
        return draining;
      },
      enqueue: function (cb) {
        var i, tmp;
        if (size === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }

        queue[(ix + size) % limit] = cb;
        size++;

        if (!draining) {
          drain();
        }
      }
    };
  }();

  function Supervisor(util) {
    var fibers  = {};
    var fiberId = 0;
    var count   = 0;

    return {
      register: function (fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function (result) {
            return function () {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function () {
        return count === 0;
      },
      killAll: function (killError, cb) {
        return function () {
          if (count === 0) {
            return cb();
          }

          var killCount = 0;
          var kills     = {};

          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function (result) {
              return function () {
                delete kills[fid];
                killCount--;
                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function () {
                    throw util.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }

          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }

          fibers  = {};
          fiberId = 0;
          count   = 0;

          return function (error) {
            return new Aff(SYNC, function () {
              for (var k in kills) {
                if (kills.hasOwnProperty(k)) {
                  kills[k]();
                }
              }
            });
          };
        };
      }
    };
  }

  // Fiber state machine
  var SUSPENDED   = 0; // Suspended, pending a join.
  var CONTINUE    = 1; // Interpret the next instruction.
  var STEP_BIND   = 2; // Apply the next bind.
  var STEP_RESULT = 3; // Handle potential failure from a result.
  var PENDING     = 4; // An async effect is running.
  var RETURN      = 5; // The current stack has returned.
  var COMPLETED   = 6; // The entire fiber has completed.

  function Fiber(util, supervisor, aff) {
    // Monotonically increasing tick, increased on each asynchronous turn.
    var runTick = 0;

    // The current branch of the state machine.
    var status = SUSPENDED;

    // The current point of interest for the state machine branch.
    var step      = aff;  // Successful step
    var fail      = null; // Failure step
    var interrupt = null; // Asynchronous interrupt

    // Stack of continuations for the current fiber.
    var bhead = null;
    var btail = null;

    // Stack of attempts and finalizers for error recovery. Every `Cons` is also
    // tagged with current `interrupt` state. We use this to track which items
    // should be ignored or evaluated as a result of a kill.
    var attempts = null;

    // A special state is needed for Bracket, because it cannot be killed. When
    // we enter a bracket acquisition or finalizer, we increment the counter,
    // and then decrement once complete.
    var bracketCount = 0;

    // Each join gets a new id so they can be revoked.
    var joinId  = 0;
    var joins   = null;
    var rethrow = true;

    // Each invocation of `run` requires a tick. When an asynchronous effect is
    // resolved, we must check that the local tick coincides with the fiber
    // tick before resuming. This prevents multiple async continuations from
    // accidentally resuming the same fiber. A common example may be invoking
    // the provided callback in `makeAff` more than once, but it may also be an
    // async effect resuming after the fiber was already cancelled.
    function run(localRunTick) {
      var tmp, result, attempt;
      while (true) {
        tmp       = null;
        result    = null;
        attempt   = null;

        switch (status) {
        case STEP_BIND:
          status = CONTINUE;
          try {
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
          } catch (e) {
            status = RETURN;
            fail   = util.left(e);
            step   = null;
          }
          break;

        case STEP_RESULT:
          if (util.isLeft(step)) {
            status = RETURN;
            fail   = step;
            step   = null;
          } else if (bhead === null) {
            status = RETURN;
          } else {
            status = STEP_BIND;
            step   = util.fromRight(step);
          }
          break;

        case CONTINUE:
          switch (step.tag) {
          case BIND:
            if (bhead) {
              btail = new Aff(CONS, bhead, btail);
            }
            bhead  = step._2;
            status = CONTINUE;
            step   = step._1;
            break;

          case PURE:
            if (bhead === null) {
              status = RETURN;
              step   = util.right(step._1);
            } else {
              status = STEP_BIND;
              step   = step._1;
            }
            break;

          case SYNC:
            status = STEP_RESULT;
            step   = runSync(util.left, util.right, step._1);
            break;

          case ASYNC:
            status = PENDING;
            step   = runAsync(util.left, step._1, function (result) {
              return function () {
                if (runTick !== localRunTick) {
                  return;
                }
                runTick++;
                Scheduler.enqueue(function () {
                  // It's possible to interrupt the fiber between enqueuing and
                  // resuming, so we need to check that the runTick is still
                  // valid.
                  if (runTick !== localRunTick + 1) {
                    return;
                  }
                  status = STEP_RESULT;
                  step   = result;
                  run(runTick);
                });
              };
            });
            return;

          case THROW:
            status = RETURN;
            fail   = util.left(step._1);
            step   = null;
            break;

          // Enqueue the Catch so that we can call the error handler later on
          // in case of an exception.
          case CATCH:
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead    = null;
            btail    = null;
            status   = CONTINUE;
            step     = step._1;
            break;

          // Enqueue the Bracket so that we can call the appropriate handlers
          // after resource acquisition.
          case BRACKET:
            bracketCount++;
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead  = null;
            btail  = null;
            status = CONTINUE;
            step   = step._1;
            break;

          case FORK:
            status = STEP_RESULT;
            tmp    = Fiber(util, supervisor, step._2);
            if (supervisor) {
              supervisor.register(tmp);
            }
            if (step._1) {
              tmp.run();
            }
            step = util.right(tmp);
            break;

          case SEQ:
            status = CONTINUE;
            step   = sequential(util, supervisor, step._1);
            break;
          }
          break;

        case RETURN:
          bhead = null;
          btail = null;
          // If the current stack has returned, and we have no other stacks to
          // resume or finalizers to run, the fiber has halted and we can
          // invoke all join callbacks. Otherwise we need to resume.
          if (attempts === null) {
            status = COMPLETED;
            step   = interrupt || fail || step;
          } else {
            // The interrupt status for the enqueued item.
            tmp      = attempts._3;
            attempt  = attempts._1;
            attempts = attempts._2;

            switch (attempt.tag) {
            // We cannot recover from an unmasked interrupt. Otherwise we should
            // continue stepping, or run the exception handler if an exception
            // was raised.
            case CATCH:
              // We should compare the interrupt status as well because we
              // only want it to apply if there has been an interrupt since
              // enqueuing the catch.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                status = RETURN;
              } else if (fail) {
                status = CONTINUE;
                step   = attempt._2(util.fromLeft(fail));
                fail   = null;
              }
              break;

            // We cannot resume from an unmasked interrupt or exception.
            case RESUME:
              // As with Catch, we only want to ignore in the case of an
              // interrupt since enqueing the item.
              if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                status = RETURN;
              } else {
                bhead  = attempt._1;
                btail  = attempt._2;
                status = STEP_BIND;
                step   = util.fromRight(step);
              }
              break;

            // If we have a bracket, we should enqueue the handlers,
            // and continue with the success branch only if the fiber has
            // not been interrupted. If the bracket acquisition failed, we
            // should not run either.
            case BRACKET:
              bracketCount--;
              if (fail === null) {
                result   = util.fromRight(step);
                // We need to enqueue the Release with the same interrupt
                // status as the Bracket that is initiating it.
                attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                // We should only coninue as long as the interrupt status has not changed or
                // we are currently within a non-interruptable finalizer.
                if (interrupt === tmp || bracketCount > 0) {
                  status = CONTINUE;
                  step   = attempt._3(result);
                }
              }
              break;

            // Enqueue the appropriate handler. We increase the bracket count
            // because it should not be cancelled.
            case RELEASE:
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              // It has only been killed if the interrupt status has changed
              // since we enqueued the item, and the bracket count is 0. If the
              // bracket count is non-zero then we are in a masked state so it's
              // impossible to be killed.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
              } else if (fail) {
                step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
              } else {
                step = attempt._1.completed(util.fromRight(step))(attempt._2);
              }
              fail = null;
              bracketCount++;
              break;

            case FINALIZER:
              bracketCount++;
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              step     = attempt._1;
              break;

            case FINALIZED:
              bracketCount--;
              status = RETURN;
              step   = attempt._1;
              fail   = attempt._2;
              break;
            }
          }
          break;

        case COMPLETED:
          for (var k in joins) {
            if (joins.hasOwnProperty(k)) {
              rethrow = rethrow && joins[k].rethrow;
              runEff(joins[k].handler(step));
            }
          }
          joins = null;
          // If we have an interrupt and a fail, then the thread threw while
          // running finalizers. This should always rethrow in a fresh stack.
          if (interrupt && fail) {
            setTimeout(function () {
              throw util.fromLeft(fail);
            }, 0);
          // If we have an unhandled exception, and no other fiber has joined
          // then we need to throw the exception in a fresh stack.
          } else if (util.isLeft(step) && rethrow) {
            setTimeout(function () {
              // Guard on reathrow because a completely synchronous fiber can
              // still have an observer which was added after-the-fact.
              if (rethrow) {
                throw util.fromLeft(step);
              }
            }, 0);
          }
          return;
        case SUSPENDED:
          status = CONTINUE;
          break;
        case PENDING: return;
        }
      }
    }

    function onComplete(join) {
      return function () {
        if (status === COMPLETED) {
          rethrow = rethrow && join.rethrow;
          join.handler(step)();
          return function () {};
        }

        var jid    = joinId++;
        joins      = joins || {};
        joins[jid] = join;

        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }

    function kill(error, cb) {
      return function () {
        if (status === COMPLETED) {
          cb(util.right(void 0))();
          return function () {};
        }

        var canceler = onComplete({
          rethrow: false,
          handler: function (/* unused */) {
            return cb(util.right(void 0));
          }
        })();

        switch (status) {
        case SUSPENDED:
          interrupt = util.left(error);
          status    = COMPLETED;
          step      = interrupt;
          run(runTick);
          break;
        case PENDING:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            if (status === PENDING) {
              attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
            }
            status   = RETURN;
            step     = null;
            fail     = null;
            run(++runTick);
          }
          break;
        default:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            status = RETURN;
            step   = null;
            fail   = null;
          }
        }

        return canceler;
      };
    }

    function join(cb) {
      return function () {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();
        if (status === SUSPENDED) {
          run(runTick);
        }
        return canceler;
      };
    }

    return {
      kill: kill,
      join: join,
      onComplete: onComplete,
      isSuspended: function () {
        return status === SUSPENDED;
      },
      run: function () {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function () {
              run(runTick);
            });
          } else {
            run(runTick);
          }
        }
      }
    };
  }

  function runPar(util, supervisor, par, cb) {
    // Table of all forked fibers.
    var fiberId   = 0;
    var fibers    = {};

    // Table of currently running cancelers, as a product of `Alt` behavior.
    var killId    = 0;
    var kills     = {};

    // Error used for early cancelation on Alt branches.
    var early     = new Error("[ParAff] Early exit");

    // Error used to kill the entire tree.
    var interrupt = null;

    // The root pointer of the tree.
    var root      = EMPTY;

    // Walks a tree, invoking all the cancelers. Returns the table of pending
    // cancellation fibers.
    function kill(error, par, cb) {
      var step  = par;
      var head  = null;
      var tail  = null;
      var count = 0;
      var kills = {};
      var tmp, kid;

      loop: while (true) {
        tmp = null;

        switch (step.tag) {
        case FORKED:
          if (step._3 === EMPTY) {
            tmp = fibers[step._1];
            kills[count++] = tmp.kill(error, function (result) {
              return function () {
                count--;
                if (count === 0) {
                  cb(result)();
                }
              };
            });
          }
          // Terminal case.
          if (head === null) {
            break loop;
          }
          // Go down the right side of the tree.
          step = head._2;
          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
          break;
        case MAP:
          step = step._2;
          break;
        case APPLY:
        case ALT:
          if (head) {
            tail = new Aff(CONS, head, tail);
          }
          head = step;
          step = step._1;
          break;
        }
      }

      if (count === 0) {
        cb(util.right(void 0))();
      } else {
        // Run the cancelation effects. We alias `count` because it's mutable.
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills[kid] = kills[kid]();
        }
      }

      return kills;
    }

    // When a fiber resolves, we need to bubble back up the tree with the
    // result, computing the applicative nodes.
    function join(result, head, tail) {
      var fail, step, lhs, rhs, tmp, kid;

      if (util.isLeft(result)) {
        fail = result;
        step = null;
      } else {
        step = result;
        fail = null;
      }

      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null;

        // We should never continue if the entire tree has been interrupted.
        if (interrupt !== null) {
          return;
        }

        // We've made it all the way to the root of the tree, which means
        // the tree has fully evaluated.
        if (head === null) {
          cb(fail || step)();
          return;
        }

        // The tree has already been computed, so we shouldn't try to do it
        // again. This should never happen.
        // TODO: Remove this?
        if (head._3 !== EMPTY) {
          return;
        }

        switch (head.tag) {
        case MAP:
          if (fail === null) {
            head._3 = util.right(head._1(util.fromRight(step)));
            step    = head._3;
          } else {
            head._3 = fail;
          }
          break;
        case APPLY:
          lhs = head._1._3;
          rhs = head._2._3;
          // If we have a failure we should kill the other side because we
          // can't possible yield a result anymore.
          if (fail) {
            head._3 = fail;
            tmp     = true;
            kid     = killId++;

            kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(fail, null, null);
                } else {
                  join(fail, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          } else if (lhs === EMPTY || rhs === EMPTY) {
            // We can only proceed if both sides have resolved.
            return;
          } else {
            step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
            head._3 = step;
          }
          break;
        case ALT:
          lhs = head._1._3;
          rhs = head._2._3;
          // We can only proceed if both have resolved or we have a success
          if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
            return;
          }
          // If both sides resolve with an error, we should continue with the
          // first error
          if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
            fail    = step === lhs ? rhs : lhs;
            step    = null;
            head._3 = fail;
          } else {
            head._3 = step;
            tmp     = true;
            kid     = killId++;
            // Once a side has resolved, we need to cancel the side that is still
            // pending before we can continue.
            kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(step, null, null);
                } else {
                  join(step, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          }
          break;
        }

        if (tail === null) {
          head = null;
        } else {
          head = tail._1;
          tail = tail._2;
        }
      }
    }

    function resolve(fiber) {
      return function (result) {
        return function () {
          delete fibers[fiber._1];
          fiber._3 = result;
          join(result, fiber._2._1, fiber._2._2);
        };
      };
    }

    // Walks the applicative tree, substituting non-applicative nodes with
    // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
    // as a mutable slot for memoization. In an unresolved state, the `_3`
    // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
    // the left side first, because both operations are left-associative. As
    // we `RETURN` from those branches, we then walk the right side.
    function run() {
      var status = CONTINUE;
      var step   = par;
      var head   = null;
      var tail   = null;
      var tmp, fid;

      loop: while (true) {
        tmp = null;
        fid = null;

        switch (status) {
        case CONTINUE:
          switch (step.tag) {
          case MAP:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(MAP, step._1, EMPTY, EMPTY);
            step = step._2;
            break;
          case APPLY:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(APPLY, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(ALT, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          default:
            // When we hit a leaf value, we suspend the stack in the `FORKED`.
            // When the fiber resolves, it can bubble back up the tree.
            fid    = fiberId++;
            status = RETURN;
            tmp    = step;
            step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
            tmp    = Fiber(util, supervisor, tmp);
            tmp.onComplete({
              rethrow: false,
              handler: resolve(step)
            })();
            fibers[fid] = tmp;
            if (supervisor) {
              supervisor.register(tmp);
            }
          }
          break;
        case RETURN:
          // Terminal case, we are back at the root.
          if (head === null) {
            break loop;
          }
          // If we are done with the right side, we need to continue down the
          // left. Otherwise we should continue up the stack.
          if (head._1 === EMPTY) {
            head._1 = step;
            status  = CONTINUE;
            step    = head._2;
            head._2 = EMPTY;
          } else {
            head._2 = step;
            step    = head;
            if (tail === null) {
              head  = null;
            } else {
              head  = tail._1;
              tail  = tail._2;
            }
          }
        }
      }

      // Keep a reference to the tree root so it can be cancelled.
      root = step;

      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }

    // Cancels the entire tree. If there are already subtrees being canceled,
    // we need to first cancel those joins. We will then add fresh joins for
    // all pending branches including those that were in the process of being
    // canceled.
    function cancel(error, cb) {
      interrupt = util.left(error);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }

      kills = null;
      var newKills = kill(error, root, cb);

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            for (var kid in newKills) {
              if (newKills.hasOwnProperty(kid)) {
                newKills[kid]();
              }
            }
            return nonCanceler;
          };
        });
      };
    }

    run();

    return function (killError) {
      return new Aff(ASYNC, function (killCb) {
        return function () {
          return cancel(killError, killCb);
        };
      });
    };
  }

  function sequential(util, supervisor, par) {
    return new Aff(ASYNC, function (cb) {
      return function () {
        return runPar(util, supervisor, par, cb);
      };
    });
  }

  Aff.EMPTY       = EMPTY;
  Aff.Pure        = AffCtr(PURE);
  Aff.Throw       = AffCtr(THROW);
  Aff.Catch       = AffCtr(CATCH);
  Aff.Sync        = AffCtr(SYNC);
  Aff.Async       = AffCtr(ASYNC);
  Aff.Bind        = AffCtr(BIND);
  Aff.Bracket     = AffCtr(BRACKET);
  Aff.Fork        = AffCtr(FORK);
  Aff.Seq         = AffCtr(SEQ);
  Aff.ParMap      = AffCtr(MAP);
  Aff.ParApply    = AffCtr(APPLY);
  Aff.ParAlt      = AffCtr(ALT);
  Aff.Fiber       = Fiber;
  Aff.Supervisor  = Supervisor;
  Aff.Scheduler   = Scheduler;
  Aff.nonCanceler = nonCanceler;

  return Aff;
}();

exports._pure = Aff.Pure;

exports._throwError = Aff.Throw;

exports._catchError = function (aff) {
  return function (k) {
    return Aff.Catch(aff, k);
  };
};

exports._map = function (f) {
  return function (aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function (value) {
        return Aff.Pure(f(value));
      });
    }
  };
};

exports._bind = function (aff) {
  return function (k) {
    return Aff.Bind(aff, k);
  };
};

exports._fork = function (immediate) {
  return function (aff) {
    return Aff.Fork(immediate, aff);
  };
};

exports._liftEffect = Aff.Sync;

exports._parAffMap = function (f) {
  return function (aff) {
    return Aff.ParMap(f, aff);
  };
};

exports._parAffApply = function (aff1) {
  return function (aff2) {
    return Aff.ParApply(aff1, aff2);
  };
};

exports._parAffAlt = function (aff1) {
  return function (aff2) {
    return Aff.ParAlt(aff1, aff2);
  };
};

exports.makeAff = Aff.Async;

exports.generalBracket = function (acquire) {
  return function (options) {
    return function (k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
};

exports._makeFiber = function (util, aff) {
  return function () {
    return Aff.Fiber(util, null, aff);
  };
};

exports._makeSupervisedFiber = function (util, aff) {
  return function () {
    var supervisor = Aff.Supervisor(util);
    return {
      fiber: Aff.Fiber(util, supervisor, aff),
      supervisor: supervisor
    };
  };
};

exports._killAll = function (error, supervisor, cb) {
  return supervisor.killAll(error, cb);
};

exports._delay = function () {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }

  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }

  return function (right, ms) {
    return Aff.Async(function (cb) {
      return function () {
        var timer = setDelay(ms, cb(right()));
        return function () {
          return Aff.Sync(function () {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();

exports._sequential = Aff.Seq;

}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"timers":5}],277:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Fiber = function (x) {
    return x;
};
var FFIUtil = function (x) {
    return x;
};
var Canceler = function (x) {
    return x;
};
var suspendAff = $foreign["_fork"](false);
var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
    return n;
}, Canceler);
var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
var functorAff = new Data_Functor.Functor($foreign["_map"]);
var forkAff = $foreign["_fork"](true);
var ffiUtil = (function () {
    var unsafeFromRight = function (v) {
        if (v instanceof Data_Either.Right) {
            return v.value0;
        };
        if (v instanceof Data_Either.Left) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 31): " + [ v.constructor.name ]);
    };
    var unsafeFromLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return v.value0;
        };
        if (v instanceof Data_Either.Right) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 399, column 3): " + [ v.constructor.name ]);
    };
    var isLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return true;
        };
        if (v instanceof Data_Either.Right) {
            return false;
        };
        throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
    };
    return {
        isLeft: isLeft,
        fromLeft: unsafeFromLeft,
        fromRight: unsafeFromRight,
        left: Data_Either.Left.create,
        right: Data_Either.Right.create
    };
})();
var makeFiber = function (aff) {
    return $foreign["_makeFiber"](ffiUtil, aff);
};
var launchAff = function (aff) {
    return function __do() {
        var v = makeFiber(aff)();
        v.run();
        return v;
    };
};
var launchAff_ = function ($49) {
    return Data_Functor["void"](Effect.functorEffect)(launchAff($49));
};
var launchSuspendedAff = makeFiber;
var delay = function (v) {
    return $foreign["_delay"](Data_Either.Right.create, v);
};
var bracket = function (acquire) {
    return function (completed) {
        return $foreign.generalBracket(acquire)({
            killed: Data_Function["const"](completed),
            failed: Data_Function["const"](completed),
            completed: Data_Function["const"](completed)
        });
    };
};
var applyParAff = new Control_Apply.Apply(function () {
    return functorParAff;
}, $foreign["_parAffApply"]);
var semigroupParAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadAff = new Control_Monad.Monad(function () {
    return applicativeAff;
}, function () {
    return bindAff;
});
var bindAff = new Control_Bind.Bind(function () {
    return applyAff;
}, $foreign["_bind"]);
var applyAff = new Control_Apply.Apply(function () {
    return functorAff;
}, Control_Monad.ap(monadAff));
var applicativeAff = new Control_Applicative.Applicative(function () {
    return applyAff;
}, $foreign["_pure"]);
var cancelWith = function (aff) {
    return function (v) {
        return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
            killed: function (e) {
                return function (v1) {
                    return v(e);
                };
            },
            failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
            completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
        })(Data_Function["const"](aff));
    };
};
var $$finally = function (fin) {
    return function (a) {
        return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
    };
};
var invincible = function (a) {
    return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};
var lazyAff = new Control_Lazy.Lazy(function (f) {
    return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
});
var semigroupAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadEffectAff = new Effect_Class.MonadEffect(function () {
    return monadAff;
}, $foreign["_liftEffect"]);
var effectCanceler = function ($50) {
    return Canceler(Data_Function["const"](Effect_Class.liftEffect(monadEffectAff)($50)));
};
var joinFiber = function (v) {
    return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
    });
};
var functorFiber = new Data_Functor.Functor(function (f) {
    return function (t) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
    };
});
var applyFiber = new Control_Apply.Apply(function () {
    return functorFiber;
}, function (t1) {
    return function (t2) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
    };
});
var applicativeFiber = new Control_Applicative.Applicative(function () {
    return applyFiber;
}, function (a) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
});
var killFiber = function (e) {
    return function (v) {
        return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
            if (v1) {
                return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
            };
            return $foreign.makeAff(function (k) {
                return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
            });
        });
    };
};
var fiberCanceler = function ($51) {
    return Canceler(Data_Function.flip(killFiber)($51));
};
var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
    return monadAff;
}, $foreign["_throwError"]);
var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowAff;
}, $foreign["_catchError"]);
var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
var runAff = function (k) {
    return function (aff) {
        return launchAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
            return Effect_Class.liftEffect(monadEffectAff)(k($52));
        })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var runAff_ = function (k) {
    return function (aff) {
        return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
    };
};
var runSuspendedAff = function (k) {
    return function (aff) {
        return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)(function ($53) {
            return Effect_Class.liftEffect(monadEffectAff)(k($53));
        })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var parallelAff = new Control_Parallel_Class.Parallel(function () {
    return applicativeParAff;
}, function () {
    return monadAff;
}, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
var applicativeParAff = new Control_Applicative.Applicative(function () {
    return applyParAff;
}, function ($54) {
    return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($54));
});
var monoidParAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupParAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
};
var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (err) {
            return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
        };
    };
});
var supervise = function (aff) {
    var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
    var killAll = function (err) {
        return function (sup) {
            return $foreign.makeAff(function (k) {
                return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
            });
        };
    };
    var acquire = function __do() {
        var v = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
        v.fiber.run();
        return v;
    };
    return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
        killed: function (err) {
            return function (sup) {
                return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
            };
        },
        failed: Data_Function["const"](killAll(killError)),
        completed: Data_Function["const"](killAll(killError))
    })(function ($55) {
        return joinFiber((function (v) {
            return v.fiber;
        })($55));
    });
};
var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadAff;
}, function (k) {
    var go = function (a) {
        return Control_Bind.bind(bindAff)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeAff)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return go(v.value0);
            };
            throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ v.constructor.name ]);
        });
    };
    return go;
});
var monoidAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
};
var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = new Data_Monoid.Monoid(function () {
    return semigroupCanceler;
}, nonCanceler);
var never = $foreign.makeAff(function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});
var apathize = function ($56) {
    return Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit))(attempt($56));
};
var altParAff = new Control_Alt.Alt(function () {
    return functorParAff;
}, $foreign["_parAffAlt"]);
var altAff = new Control_Alt.Alt(function () {
    return functorAff;
}, function (a1) {
    return function (a2) {
        return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
    };
});
var plusAff = new Control_Plus.Plus(function () {
    return altAff;
}, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
var plusParAff = new Control_Plus.Plus(function () {
    return altParAff;
}, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
var alternativeParAff = new Control_Alternative.Alternative(function () {
    return applicativeParAff;
}, function () {
    return plusParAff;
});
module.exports = {
    Canceler: Canceler,
    launchAff: launchAff,
    launchAff_: launchAff_,
    launchSuspendedAff: launchSuspendedAff,
    runAff: runAff,
    runAff_: runAff_,
    runSuspendedAff: runSuspendedAff,
    forkAff: forkAff,
    suspendAff: suspendAff,
    supervise: supervise,
    attempt: attempt,
    apathize: apathize,
    delay: delay,
    never: never,
    "finally": $$finally,
    invincible: invincible,
    killFiber: killFiber,
    joinFiber: joinFiber,
    cancelWith: cancelWith,
    bracket: bracket,
    nonCanceler: nonCanceler,
    effectCanceler: effectCanceler,
    fiberCanceler: fiberCanceler,
    functorAff: functorAff,
    applyAff: applyAff,
    applicativeAff: applicativeAff,
    bindAff: bindAff,
    monadAff: monadAff,
    semigroupAff: semigroupAff,
    monoidAff: monoidAff,
    altAff: altAff,
    plusAff: plusAff,
    monadRecAff: monadRecAff,
    monadThrowAff: monadThrowAff,
    monadErrorAff: monadErrorAff,
    monadEffectAff: monadEffectAff,
    lazyAff: lazyAff,
    functorParAff: functorParAff,
    applyParAff: applyParAff,
    applicativeParAff: applicativeParAff,
    semigroupParAff: semigroupParAff,
    monoidParAff: monoidParAff,
    altParAff: altParAff,
    plusParAff: plusParAff,
    alternativeParAff: alternativeParAff,
    parallelAff: parallelAff,
    functorFiber: functorFiber,
    applyFiber: applyFiber,
    applicativeFiber: applicativeFiber,
    newtypeCanceler: newtypeCanceler,
    semigroupCanceler: semigroupCanceler,
    monoidCanceler: monoidCanceler,
    makeAff: $foreign.makeAff,
    generalBracket: $foreign.generalBracket
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Lazy/index.js":41,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad/index.js":65,"../Control.Parallel.Class/index.js":68,"../Control.Parallel/index.js":69,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266,"../Effect.Class/index.js":279,"../Effect.Exception/index.js":284,"../Effect.Unsafe/index.js":292,"../Effect/index.js":294,"../Partial.Unsafe/index.js":378,"../Unsafe.Coerce/index.js":405,"./foreign.js":276}],278:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var warnShow = function (dictMonadEffect) {
    return function (dictShow) {
        return function ($14) {
            return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.warnShow(dictShow)($14));
        };
    };
};
var warn = function (dictMonadEffect) {
    return function ($15) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.warn($15));
    };
};
var timeEnd = function (dictMonadEffect) {
    return function ($16) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.timeEnd($16));
    };
};
var time = function (dictMonadEffect) {
    return function ($17) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.time($17));
    };
};
var logShow = function (dictMonadEffect) {
    return function (dictShow) {
        return function ($18) {
            return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.logShow(dictShow)($18));
        };
    };
};
var log = function (dictMonadEffect) {
    return function ($19) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.log($19));
    };
};
var infoShow = function (dictMonadEffect) {
    return function (dictShow) {
        return function ($20) {
            return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.infoShow(dictShow)($20));
        };
    };
};
var info = function (dictMonadEffect) {
    return function ($21) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.info($21));
    };
};
var errorShow = function (dictMonadEffect) {
    return function (dictShow) {
        return function ($22) {
            return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.errorShow(dictShow)($22));
        };
    };
};
var error = function (dictMonadEffect) {
    return function ($23) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.error($23));
    };
};
module.exports = {
    log: log,
    logShow: logShow,
    warn: warn,
    warnShow: warnShow,
    error: error,
    errorShow: errorShow,
    info: info,
    infoShow: infoShow,
    time: time,
    timeEnd: timeEnd
};

},{"../Effect.Class/index.js":279,"../Effect.Console/index.js":281}],279:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Effect = require("../Effect/index.js");
var MonadEffect = function (Monad0, liftEffect) {
    this.Monad0 = Monad0;
    this.liftEffect = liftEffect;
};
var monadEffectEffect = new MonadEffect(function () {
    return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));
var liftEffect = function (dict) {
    return dict.liftEffect;
};
module.exports = {
    liftEffect: liftEffect,
    MonadEffect: MonadEffect,
    monadEffectEffect: monadEffectEffect
};

},{"../Control.Category/index.js":36,"../Effect/index.js":294}],280:[function(require,module,exports){
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

},{}],281:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var warnShow = function (dictShow) {
    return function (a) {
        return $foreign.warn(Data_Show.show(dictShow)(a));
    };
};
var logShow = function (dictShow) {
    return function (a) {
        return $foreign.log(Data_Show.show(dictShow)(a));
    };
};
var infoShow = function (dictShow) {
    return function (a) {
        return $foreign.info(Data_Show.show(dictShow)(a));
    };
};
var errorShow = function (dictShow) {
    return function (a) {
        return $foreign.error(Data_Show.show(dictShow)(a));
    };
};
module.exports = {
    logShow: logShow,
    warnShow: warnShow,
    errorShow: errorShow,
    infoShow: infoShow,
    log: $foreign.log,
    warn: $foreign.warn,
    error: $foreign.error,
    info: $foreign.info,
    time: $foreign.time,
    timeEnd: $foreign.timeEnd
};

},{"../Data.Show/index.js":235,"./foreign.js":280}],282:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var unsafeThrowException = function ($0) {
    return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
};
var unsafeThrow = function ($1) {
    return unsafeThrowException(Effect_Exception.error($1));
};
module.exports = {
    unsafeThrowException: unsafeThrowException,
    unsafeThrow: unsafeThrow
};

},{"../Effect.Exception/index.js":284,"../Effect.Unsafe/index.js":292}],283:[function(require,module,exports){
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.name = function (e) {
  return e.name || "Error";
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};

},{}],284:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var $$try = function (action) {
    return $foreign.catchException(function ($0) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create($0));
    })(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};
var $$throw = function ($1) {
    return $foreign.throwException($foreign.error($1));
};
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack,
    "throw": $$throw,
    "try": $$try,
    showError: showError,
    error: $foreign.error,
    message: $foreign.message,
    name: $foreign.name,
    throwException: $foreign.throwException,
    catchException: $foreign.catchException
};

},{"../Control.Applicative/index.js":29,"../Data.Either/index.js":129,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Show/index.js":235,"../Effect/index.js":294,"./foreign.js":283}],285:[function(require,module,exports){
"use strict";

exports.now = function () {
  return Date.now();
};

},{}],286:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var nowTime = Data_Functor.map(Effect.functorEffect)(function ($0) {
    return Data_DateTime.time(Data_DateTime_Instant.toDateTime($0));
})($foreign.now);
var nowDateTime = Data_Functor.map(Effect.functorEffect)(Data_DateTime_Instant.toDateTime)($foreign.now);
var nowDate = Data_Functor.map(Effect.functorEffect)(function ($1) {
    return Data_DateTime.date(Data_DateTime_Instant.toDateTime($1));
})($foreign.now);
module.exports = {
    nowDateTime: nowDateTime,
    nowDate: nowDate,
    nowTime: nowTime,
    now: $foreign.now
};

},{"../Data.DateTime.Instant/index.js":124,"../Data.DateTime/index.js":126,"../Data.Functor/index.js":156,"../Effect/index.js":294,"./foreign.js":285}],287:[function(require,module,exports){
"use strict";

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (val) {
  return function (ref) {
    return function () {
      ref.value = val;
      return {};
    };
  };
};

},{}],288:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var modify_ = function (f) {
    return function (s) {
        return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
    };
};
module.exports = {
    modify: modify,
    modify_: modify_,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"../Data.Functor/index.js":156,"../Effect/index.js":294,"./foreign.js":287}],289:[function(require,module,exports){
/* global exports */
"use strict";

exports.setTimeout = function (ms) {
  return function (fn) {
    return function () {
      return setTimeout(fn, ms);
    };
  };
};

exports.clearTimeout = function (id) {
  return function () {
    clearTimeout(id);
  };
};

exports.setInterval = function (ms) {
  return function (fn) {
    return function () {
      return setInterval(fn, ms);
    };
  };
};

exports.clearInterval = function (id) {
  return function () {
    clearInterval(id);
  };
};

},{}],290:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var TimeoutId = function (x) {
    return x;
};
var IntervalId = function (x) {
    return x;
};
var eqTimeoutId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordTimeoutId = new Data_Ord.Ord(function () {
    return eqTimeoutId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var eqIntervalId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordIntervalId = new Data_Ord.Ord(function () {
    return eqIntervalId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
module.exports = {
    eqTimeoutId: eqTimeoutId,
    ordTimeoutId: ordTimeoutId,
    eqIntervalId: eqIntervalId,
    ordIntervalId: ordIntervalId,
    setTimeout: $foreign.setTimeout,
    clearTimeout: $foreign.clearTimeout,
    setInterval: $foreign.setInterval,
    clearInterval: $foreign.clearInterval
};

},{"../Data.Eq/index.js":133,"../Data.Ord/index.js":214,"./foreign.js":289}],291:[function(require,module,exports){
"use strict";

exports.unsafePerformEffect = function (f) {
  return f();
};

},{}],292:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafePerformEffect: $foreign.unsafePerformEffect
};

},{"./foreign.js":291}],293:[function(require,module,exports){
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],294:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var monadEffect = new Control_Monad.Monad(function () {
    return applicativeEffect;
}, function () {
    return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function () {
    return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function () {
    return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function () {
    return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
var semigroupEffect = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};
var monoidEffect = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEffect(dictMonoid.Semigroup0());
    }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};
module.exports = {
    functorEffect: functorEffect,
    applyEffect: applyEffect,
    applicativeEffect: applicativeEffect,
    bindEffect: bindEffect,
    monadEffect: monadEffect,
    semigroupEffect: semigroupEffect,
    monoidEffect: monoidEffect,
    untilE: $foreign.untilE,
    whileE: $foreign.whileE,
    forE: $foreign.forE,
    foreachE: $foreign.foreachE
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Semigroup/index.js":230,"./foreign.js":293}],295:[function(require,module,exports){
"use strict";

var CanvasGauges = require('canvas-gauges');

exports.destroyGaugeInstance = function (gaugeJsInstance) {
  return function () {
    gaugeJsInstance.destroy();
  };
};

exports.createRadialGauge = function (element) {
  return function (options) {
    return function () {
      options.renderTo = element;
      var gauge = new CanvasGauges.RadialGauge(options);
      gauge.draw();
      return gauge;
    };
  };
};

exports.updateRadialGauge = function (gaugeJsInstance) {
  return function (options) {
    return function () {
      for (var optname in options) {
        gaugeJsInstance[optname] = options[optname];
      }
      gaugeJsInstance.update();
    };
  };
};

},{"canvas-gauges":1}],296:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var redrawRadialGauge = $foreign.updateRadialGauge;
var drawRadialGauge = $foreign.createRadialGauge;
var destroyGauge = $foreign.destroyGaugeInstance;
module.exports = {
    destroyGauge: destroyGauge,
    drawRadialGauge: drawRadialGauge,
    redrawRadialGauge: redrawRadialGauge
};

},{"./foreign.js":295}],297:[function(require,module,exports){
"use strict";

var Chart = require('chart.js');

exports.destroyLineChartJs = function (chartJsInstance) {
  return function () {
    chartJsInstance.destroy();
  };
};

exports.lineChartJs = function (context) {
  return function (datasets) {
    return function (options) {
      return function () {
        return new Chart(context, {
          type: 'line',
          data: datasets,
          options: options
        });
      };
    };
  };
};

},{"chart.js":2}],298:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var drawLineChart = $foreign.lineChartJs;
var destroyLineChart = $foreign.destroyLineChartJs;
var defLineChartOptionAxes = {
    display: true,
    autoSkip: false,
    beginAtZero: false,
    maxTicksLimit: 1
};
var defLineChartOptions = {
    xAxisID: "x",
    yAxisID: "y",
    responsive: true,
    maintainAspectRatio: true,
    scales: {
        xAxes: [ defLineChartOptionAxes ],
        yAxes: [ defLineChartOptionAxes ]
    }
};
module.exports = {
    defLineChartOptionAxes: defLineChartOptionAxes,
    defLineChartOptions: defLineChartOptions,
    drawLineChart: drawLineChart,
    destroyLineChart: destroyLineChart
};

},{"./foreign.js":297}],299:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Generic_Internal = require("../Foreign.Generic.Internal/index.js");
var Foreign_Index = require("../Foreign.Index/index.js");
var Foreign_NullOrUndefined = require("../Foreign.NullOrUndefined/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var TaggedObject = (function () {
    function TaggedObject(value0) {
        this.value0 = value0;
    };
    TaggedObject.create = function (value0) {
        return new TaggedObject(value0);
    };
    return TaggedObject;
})();
var GenericEncodeArgs = function (encodeArgs) {
    this.encodeArgs = encodeArgs;
};
var GenericEncode = function (encodeOpts) {
    this.encodeOpts = encodeOpts;
};
var GenericDecodeArgs = function (decodeArgs) {
    this.decodeArgs = decodeArgs;
};
var GenericDecode = function (decodeOpts) {
    this.decodeOpts = decodeOpts;
};
var GenericCountArgs = function (countArgs) {
    this.countArgs = countArgs;
};
var EncodeWithOptions = function (encodeWithOptions) {
    this.encodeWithOptions = encodeWithOptions;
};
var EncodeRecord = function (encodeRecordWithOptions) {
    this.encodeRecordWithOptions = encodeRecordWithOptions;
};
var Encode = function (encode) {
    this.encode = encode;
};
var DecodeWithOptions = function (decodeWithOptions) {
    this.decodeWithOptions = decodeWithOptions;
};
var DecodeRecord = function (decodeRecordWithOptions) {
    this.decodeRecordWithOptions = decodeRecordWithOptions;
};
var Decode = function (decode) {
    this.decode = decode;
};
var voidEncode = new Encode(Data_Void.absurd);
var voidDecode = new Decode(function (v) {
    return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(new Data_Either.Left(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Foreign.ForeignError("Decode: void"))));
});
var unitEncode = new Encode(function (v) {
    return Foreign.unsafeToForeign({});
});
var unitDecode = new Decode(function (v) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit);
});
var stringEncode = new Encode(Foreign.unsafeToForeign);
var stringDecode = new Decode(Foreign.readString);
var numberEncode = new Encode(Foreign.unsafeToForeign);
var numberDecode = new Decode(Foreign.readNumber);
var intEncode = new Encode(Foreign.unsafeToForeign);
var intDecode = new Decode(Foreign.readInt);
var genericEncodeArgsNoArguments = new GenericEncodeArgs(function (v) {
    return Data_Monoid.mempty(Data_Monoid.monoidFn(Data_List_Types.monoidList));
});
var genericDecodeNoConstructors = new GenericDecode(function (opts) {
    return function (v) {
        return Foreign.fail(new Foreign.ForeignError("No constructors"));
    };
});
var genericDecodeArgsNoArguments = new GenericDecodeArgs(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                    result: Data_Generic_Rep.NoArguments.value,
                    rest: Data_List_Types.Nil.value,
                    next: v1
                });
            };
            return Foreign.fail(new Foreign.ForeignError("Too many constructor arguments"));
        };
    };
});
var genericCountArgsNoArguments = new GenericCountArgs(function (v) {
    return new Data_Either.Left(Data_Generic_Rep.NoArguments.value);
});
var genericCountArgsArgument = new GenericCountArgs(function (v) {
    return new Data_Either.Right(1);
});
var foreignEncode = new Encode(Control_Category.identity(Control_Category.categoryFn));
var foreignDecode = new Decode(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
var encodeWithOptions = function (dict) {
    return dict.encodeWithOptions;
};
var genericEncodeArgsArgument = function (dictEncodeWithOptions) {
    return new GenericEncodeArgs(function (opts) {
        return function (v) {
            return Data_List.singleton(encodeWithOptions(dictEncodeWithOptions)(opts)(v));
        };
    });
};
var encodeRecordWithOptions = function (dict) {
    return dict.encodeRecordWithOptions;
};
var encodeWithOptionsRecord = function (dictRowToList) {
    return function (dictEncodeRecord) {
        return new EncodeWithOptions(function (opts) {
            return function ($164) {
                return Foreign.unsafeToForeign(encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts)($164));
            };
        });
    };
};
var encodeRecordNil = new EncodeRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Foreign_Object.empty;
        };
    };
});
var encodeRecordCons = function (dictCons) {
    return function (dictEncodeRecord) {
        return function (dictIsSymbol) {
            return function (dictEncodeWithOptions) {
                return new EncodeRecord(function (v) {
                    return function (opts) {
                        return function (rec) {
                            var obj = encodeRecordWithOptions(dictEncodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(rec);
                            var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            return Foreign_Object.insert(opts.fieldTransform(l))(encodeWithOptions(dictEncodeWithOptions)(opts)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(rec)))(obj);
                        };
                    };
                });
            };
        };
    };
};
var encodeOpts = function (dict) {
    return dict.encodeOpts;
};
var genericEncodeNoConstructors = new GenericEncode(function (opts) {
    return function (a) {
        return encodeOpts(genericEncodeNoConstructors)(opts)(a);
    };
});
var genericEncodeSum = function (dictGenericEncode) {
    return function (dictGenericEncode1) {
        return new GenericEncode(function (opts) {
            return function (v) {
                if (v instanceof Data_Generic_Rep.Inl) {
                    return encodeOpts(dictGenericEncode)({
                        sumEncoding: opts.sumEncoding,
                        unwrapSingleConstructors: false,
                        unwrapSingleArguments: opts.unwrapSingleArguments,
                        fieldTransform: opts.fieldTransform
                    })(v.value0);
                };
                if (v instanceof Data_Generic_Rep.Inr) {
                    return encodeOpts(dictGenericEncode1)({
                        sumEncoding: opts.sumEncoding,
                        unwrapSingleConstructors: false,
                        unwrapSingleArguments: opts.unwrapSingleArguments,
                        fieldTransform: opts.fieldTransform
                    })(v.value0);
                };
                throw new Error("Failed pattern match at Foreign.Generic.Class (line 351, column 1 - line 353, column 29): " + [ opts.constructor.name, v.constructor.name ]);
            };
        });
    };
};
var encodeArgs = function (dict) {
    return dict.encodeArgs;
};
var genericEncodeArgsProduct = function (dictGenericEncodeArgs) {
    return function (dictGenericEncodeArgs1) {
        return new GenericEncodeArgs(function (opts) {
            return function (v) {
                return Data_Semigroup.append(Data_List_Types.semigroupList)(encodeArgs(dictGenericEncodeArgs)(opts)(v.value0))(encodeArgs(dictGenericEncodeArgs1)(opts)(v.value1));
            };
        });
    };
};
var genericEncodeConstructor = function (dictIsSymbol) {
    return function (dictGenericEncodeArgs) {
        return new GenericEncode(function (opts) {
            return function (v) {
                var unwrapArguments = function (v1) {
                    if (v1.length === 0) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v1.length === 1 && opts.unwrapSingleArguments) {
                        return new Data_Maybe.Just(v1[0]);
                    };
                    return new Data_Maybe.Just(Foreign.unsafeToForeign(v1));
                };
                var encodeArgsArray = function ($165) {
                    return unwrapArguments(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(encodeArgs(dictGenericEncodeArgs)(opts)($165)));
                };
                var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                if (opts.unwrapSingleConstructors) {
                    return Data_Maybe.maybe(Foreign.unsafeToForeign({}))(Foreign.unsafeToForeign)(encodeArgsArray(v));
                };
                return Foreign.unsafeToForeign(Foreign_Object.union(Foreign_Object.singleton(opts.sumEncoding.value0.tagFieldName)(Foreign.unsafeToForeign(opts.sumEncoding.value0.constructorTagTransform(ctorName))))(Data_Maybe.maybe(Foreign_Object.empty)(Foreign_Object.singleton(opts.sumEncoding.value0.contentsFieldName))(encodeArgsArray(v))));
            };
        });
    };
};
var encode = function (dict) {
    return dict.encode;
};
var encodeWithOptionsOther = function (dictEncode) {
    return new EncodeWithOptions(function (v) {
        return encode(dictEncode);
    });
};
var identityEncode = function (dictEncode) {
    return new Encode(function ($166) {
        return encode(dictEncode)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($166));
    });
};
var maybeEncode = function (dictEncode) {
    return new Encode(Data_Maybe.maybe(Foreign_NullOrUndefined["null"])(encode(dictEncode)));
};
var objectEncode = function (dictEncode) {
    return new Encode(function ($167) {
        return Foreign.unsafeToForeign(Foreign_Object.mapWithKey(function (v) {
            return encode(dictEncode);
        })($167));
    });
};
var defaultOptions = {
    sumEncoding: new TaggedObject({
        tagFieldName: "tag",
        contentsFieldName: "contents",
        constructorTagTransform: Control_Category.identity(Control_Category.categoryFn)
    }),
    unwrapSingleConstructors: false,
    unwrapSingleArguments: true,
    fieldTransform: Control_Category.identity(Control_Category.categoryFn)
};
var recordEncode = function (dictRowToList) {
    return function (dictEncodeRecord) {
        return new Encode(encodeWithOptions(encodeWithOptionsRecord(dictRowToList)(dictEncodeRecord))(defaultOptions));
    };
};
var decodeWithOptions = function (dict) {
    return dict.decodeWithOptions;
};
var genericDecodeArgsArgument = function (dictDecodeWithOptions) {
    return new GenericDecodeArgs(function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(v1))))(decodeWithOptions(dictDecodeWithOptions)(v)(v2.value0)))(function (v3) {
                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                            result: v3,
                            rest: v2.value1,
                            next: v1 + 1 | 0
                        });
                    });
                };
                return Foreign.fail(new Foreign.ForeignError("Not enough constructor arguments"));
            };
        };
    });
};
var decodeRecordWithOptions = function (dict) {
    return dict.decodeRecordWithOptions;
};
var decodeWithOptionsRecord = function (dictRowToList) {
    return function (dictDecodeRecord) {
        return new DecodeWithOptions(function (opts) {
            return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({})))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts));
        });
    };
};
var recordDecode = function (dictRowToList) {
    return function (dictDecodeRecord) {
        return new Decode(decodeWithOptions(decodeWithOptionsRecord(dictRowToList)(dictDecodeRecord))(defaultOptions));
    };
};
var decodeRecordNil = new DecodeRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
        };
    };
});
var decodeRecordCons = function (dictCons) {
    return function (dictDecodeRecord) {
        return function (dictIsSymbol) {
            return function (dictDecodeWithOptions) {
                return function (dictLacks) {
                    return new DecodeRecord(function (v) {
                        return function (opts) {
                            return function (f) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeRecordWithOptions(dictDecodeRecord)(Type_Data_RowList.RLProxy.value)(opts)(f))(function (v1) {
                                    var l = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                    var l_transformed = opts.fieldTransform(l);
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(l_transformed))(function (v2) {
                                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(l_transformed))))(decodeWithOptions(dictDecodeWithOptions)(opts)(v2)))(function (v3) {
                                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(v1)(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(v3)));
                                        });
                                    });
                                });
                            };
                        };
                    });
                };
            };
        };
    };
};
var decodeOpts = function (dict) {
    return dict.decodeOpts;
};
var genericDecodeSum = function (dictGenericDecode) {
    return function (dictGenericDecode1) {
        return new GenericDecode(function (opts) {
            return function (f) {
                var opts$prime = {
                    unwrapSingleConstructors: false,
                    fieldTransform: opts.fieldTransform,
                    sumEncoding: opts.sumEncoding,
                    unwrapSingleArguments: opts.unwrapSingleArguments
                };
                return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inl.create)(decodeOpts(dictGenericDecode)(opts$prime)(f)))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Inr.create)(decodeOpts(dictGenericDecode1)(opts$prime)(f)));
            };
        });
    };
};
var decodeArgs = function (dict) {
    return dict.decodeArgs;
};
var genericDecodeArgsProduct = function (dictGenericDecodeArgs) {
    return function (dictGenericDecodeArgs1) {
        return new GenericDecodeArgs(function (opts) {
            return function (i) {
                return function (xs) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(i)(xs))(function (v) {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs1)(opts)(v.next)(v.rest))(function (v1) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                                result: new Data_Generic_Rep.Product(v.result, v1.result),
                                rest: v1.rest,
                                next: v1.next
                            });
                        });
                    });
                };
            };
        });
    };
};
var decode = function (dict) {
    return dict.decode;
};
var decodeWithOptionsOther = function (dictDecode) {
    return new DecodeWithOptions(function (v) {
        return decode(dictDecode);
    });
};
var identityDecode = function (dictDecode) {
    return new Decode(function ($168) {
        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Identity.Identity)(decode(dictDecode)($168));
    });
};
var maybeDecode = function (dictDecode) {
    return new Decode(Foreign_NullOrUndefined.readNullOrUndefined(decode(dictDecode)));
};
var objectDecode = function (dictDecode) {
    return new Decode(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($169) {
        return Data_Traversable.sequence(Foreign_Object.traversableObject)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign_Object.mapWithKey(function (v) {
            return decode(dictDecode);
        })($169));
    })(Foreign_Generic_Internal.readObject));
};
var countArgs = function (dict) {
    return dict.countArgs;
};
var genericCountArgsProduct = function (dictGenericCountArgs) {
    return function (dictGenericCountArgs1) {
        return new GenericCountArgs(function (v) {
            var v1 = countArgs(dictGenericCountArgs1)(Type_Proxy["Proxy"].value);
            var v2 = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
            if (v2 instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(new Data_Generic_Rep.Product(v2.value0, v1.value0));
            };
            if (v2 instanceof Data_Either.Left && v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v1.value0);
            };
            if (v2 instanceof Data_Either.Right && v1 instanceof Data_Either.Left) {
                return new Data_Either.Right(v2.value0);
            };
            if (v2 instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(v2.value0 + v1.value0 | 0);
            };
            throw new Error("Failed pattern match at Foreign.Generic.Class (line 400, column 5 - line 404, column 39): " + [ v2.constructor.name, v1.constructor.name ]);
        });
    };
};
var genericDecodeConstructor = function (dictIsSymbol) {
    return function (dictGenericDecodeArgs) {
        return function (dictGenericCountArgs) {
            return new GenericDecode(function (opts) {
                return function (f) {
                    var numArgs = countArgs(dictGenericCountArgs)(Type_Proxy["Proxy"].value);
                    var readArguments = function (args) {
                        if (numArgs instanceof Data_Either.Left) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(numArgs.value0);
                        };
                        if (numArgs instanceof Data_Either.Right && (numArgs.value0 === 1 && opts.unwrapSingleArguments)) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.singleton(args)))(function (v) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v.rest))(Foreign.fail(new Foreign.ForeignError("Expected a single argument"))))(function () {
                                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v.result);
                                });
                            });
                        };
                        if (numArgs instanceof Data_Either.Right) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(args))(function (v) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(decodeArgs(dictGenericDecodeArgs)(opts)(0)(Data_List.fromFoldable(Data_Foldable.foldableArray)(v)))(function (v1) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_List["null"](v1.rest))(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showInt)(numArgs.value0) + " constructor arguments")))))(function () {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v1.result);
                                    });
                                });
                            });
                        };
                        throw new Error("Failed pattern match at Foreign.Generic.Class (line 307, column 9 - line 319, column 24): " + [ numArgs.constructor.name ]);
                    };
                    var ctorName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    if (opts.unwrapSingleConstructors) {
                        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.Constructor)(readArguments(f));
                    };
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.tagFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.tagFieldName))(Foreign.readString))(function (v) {
                        var expected = opts.sumEncoding.value0.constructorTagTransform(ctorName);
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v === expected)(Foreign.fail(new Foreign.ForeignError("Expected " + (Data_Show.show(Data_Show.showString)(expected) + " tag")))))(function () {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v);
                        });
                    })))(function (v) {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(opts.sumEncoding.value0.contentsFieldName))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.index(Foreign_Index.indexString)(f)(opts.sumEncoding.value0.contentsFieldName))(readArguments)))(function (v1) {
                            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(v1);
                        });
                    });
                };
            });
        };
    };
};
var charEncode = new Encode(Foreign.unsafeToForeign);
var charDecode = new Decode(Foreign.readChar);
var booleanEncode = new Encode(Foreign.unsafeToForeign);
var booleanDecode = new Decode(Foreign.readBoolean);
var arrayEncode = function (dictEncode) {
    return new Encode(function ($170) {
        return Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(encode(dictEncode))($170));
    });
};
var arrayDecode = function (dictDecode) {
    return new Decode((function () {
        var readElement = function (i) {
            return function (value) {
                return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i))))(decode(dictDecode)(value));
            };
        };
        var readElements = function (arr) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
        };
        return Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray)(readElements);
    })());
};
module.exports = {
    countArgs: countArgs,
    decode: decode,
    decodeArgs: decodeArgs,
    decodeOpts: decodeOpts,
    decodeRecordWithOptions: decodeRecordWithOptions,
    decodeWithOptions: decodeWithOptions,
    encode: encode,
    encodeArgs: encodeArgs,
    encodeOpts: encodeOpts,
    encodeRecordWithOptions: encodeRecordWithOptions,
    encodeWithOptions: encodeWithOptions,
    TaggedObject: TaggedObject,
    defaultOptions: defaultOptions,
    Decode: Decode,
    Encode: Encode,
    DecodeWithOptions: DecodeWithOptions,
    EncodeWithOptions: EncodeWithOptions,
    DecodeRecord: DecodeRecord,
    EncodeRecord: EncodeRecord,
    GenericDecode: GenericDecode,
    GenericEncode: GenericEncode,
    GenericDecodeArgs: GenericDecodeArgs,
    GenericEncodeArgs: GenericEncodeArgs,
    GenericCountArgs: GenericCountArgs,
    voidDecode: voidDecode,
    unitDecode: unitDecode,
    foreignDecode: foreignDecode,
    stringDecode: stringDecode,
    charDecode: charDecode,
    booleanDecode: booleanDecode,
    numberDecode: numberDecode,
    intDecode: intDecode,
    identityDecode: identityDecode,
    arrayDecode: arrayDecode,
    maybeDecode: maybeDecode,
    objectDecode: objectDecode,
    recordDecode: recordDecode,
    voidEncode: voidEncode,
    unitEncode: unitEncode,
    foreignEncode: foreignEncode,
    stringEncode: stringEncode,
    charEncode: charEncode,
    booleanEncode: booleanEncode,
    numberEncode: numberEncode,
    intEncode: intEncode,
    identityEncode: identityEncode,
    arrayEncode: arrayEncode,
    maybeEncode: maybeEncode,
    objectEncode: objectEncode,
    recordEncode: recordEncode,
    decodeWithOptionsRecord: decodeWithOptionsRecord,
    decodeWithOptionsOther: decodeWithOptionsOther,
    encodeWithOptionsRecord: encodeWithOptionsRecord,
    encodeWithOptionsOther: encodeWithOptionsOther,
    decodeRecordNil: decodeRecordNil,
    encodeRecordNil: encodeRecordNil,
    decodeRecordCons: decodeRecordCons,
    encodeRecordCons: encodeRecordCons,
    genericDecodeNoConstructors: genericDecodeNoConstructors,
    genericEncodeNoConstructors: genericEncodeNoConstructors,
    genericDecodeConstructor: genericDecodeConstructor,
    genericEncodeConstructor: genericEncodeConstructor,
    genericDecodeSum: genericDecodeSum,
    genericEncodeSum: genericEncodeSum,
    genericDecodeArgsNoArguments: genericDecodeArgsNoArguments,
    genericEncodeArgsNoArguments: genericEncodeArgsNoArguments,
    genericDecodeArgsArgument: genericDecodeArgsArgument,
    genericEncodeArgsArgument: genericEncodeArgsArgument,
    genericDecodeArgsProduct: genericDecodeArgsProduct,
    genericEncodeArgsProduct: genericEncodeArgsProduct,
    genericCountArgsNoArguments: genericCountArgsNoArguments,
    genericCountArgsArgument: genericCountArgsArgument,
    genericCountArgsProduct: genericCountArgsProduct
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Except/index.js":46,"../Control.Semigroupoid/index.js":71,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep/index.js":162,"../Data.Identity/index.js":166,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Data.Traversable/index.js":257,"../Data.Unfoldable/index.js":262,"../Data.Unit/index.js":266,"../Data.Void/index.js":270,"../Foreign.Generic.Internal/index.js":300,"../Foreign.Index/index.js":303,"../Foreign.NullOrUndefined/index.js":307,"../Foreign.Object/index.js":311,"../Foreign/index.js":313,"../Record.Builder/index.js":382,"../Record/index.js":387,"../Type.Data.RowList/index.js":401,"../Type.Proxy/index.js":403}],300:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign = require("../Foreign/index.js");
var isObject = function (v) {
    return Foreign.tagOf(v) === "Object";
};
var readObject = function (value) {
    if (isObject(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.unsafeFromForeign(value));
    };
    if (Data_Boolean.otherwise) {
        return Foreign.fail(new Foreign.TypeMismatch("Object", Foreign.tagOf(value)));
    };
    throw new Error("Failed pattern match at Foreign.Generic.Internal (line 13, column 1 - line 13, column 44): " + [ value.constructor.name ]);
};
module.exports = {
    isObject: isObject,
    readObject: readObject
};

},{"../Control.Applicative/index.js":29,"../Control.Monad.Except.Trans/index.js":45,"../Data.Boolean/index.js":107,"../Data.Identity/index.js":166,"../Foreign/index.js":313}],301:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign_Generic_Class = require("../Foreign.Generic.Class/index.js");
var Foreign_JSON = require("../Foreign.JSON/index.js");
var Global_Unsafe = require("../Global.Unsafe/index.js");
var genericEncode = function (dictGeneric) {
    return function (dictGenericEncode) {
        return function (opts) {
            return function ($10) {
                return Foreign_Generic_Class.encodeOpts(dictGenericEncode)(opts)(Data_Generic_Rep.from(dictGeneric)($10));
            };
        };
    };
};
var genericEncodeJSON = function (dictGeneric) {
    return function (dictGenericEncode) {
        return function (opts) {
            return function ($11) {
                return Global_Unsafe.unsafeStringify(genericEncode(dictGeneric)(dictGenericEncode)(opts)($11));
            };
        };
    };
};
var genericDecode = function (dictGeneric) {
    return function (dictGenericDecode) {
        return function (opts) {
            return function ($12) {
                return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Generic_Rep.to(dictGeneric))(Foreign_Generic_Class.decodeOpts(dictGenericDecode)(opts)($12));
            };
        };
    };
};
var genericDecodeJSON = function (dictGeneric) {
    return function (dictGenericDecode) {
        return function (opts) {
            return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(genericDecode(dictGeneric)(dictGenericDecode)(opts))(Foreign_JSON.parseJSON);
        };
    };
};
var encodeJSON = function (dictEncode) {
    return function ($13) {
        return Global_Unsafe.unsafeStringify(Foreign_Generic_Class.encode(dictEncode)($13));
    };
};
var decodeJSON = function (dictDecode) {
    return Foreign_JSON.decodeJSONWith(Foreign_Generic_Class.decode(dictDecode));
};
module.exports = {
    genericDecode: genericDecode,
    genericEncode: genericEncode,
    decodeJSON: decodeJSON,
    encodeJSON: encodeJSON,
    genericDecodeJSON: genericDecodeJSON,
    genericEncodeJSON: genericEncodeJSON
};

},{"../Control.Bind/index.js":35,"../Control.Monad.Except.Trans/index.js":45,"../Data.Functor/index.js":156,"../Data.Generic.Rep/index.js":162,"../Data.Identity/index.js":166,"../Foreign.Generic.Class/index.js":299,"../Foreign.JSON/index.js":305,"../Global.Unsafe/index.js":328}],302:[function(require,module,exports){
"use strict";

exports.unsafeReadPropImpl = function (f, s, key, value) {
  return value == null ? f : s(value[key]);
};

exports.unsafeHasOwnProperty = function (prop, value) {
  return Object.prototype.hasOwnProperty.call(value, prop);
};

exports.unsafeHasProperty = function (prop, value) {
  return prop in value;
};

},{}],303:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign = require("../Foreign/index.js");
var Indexable = function (ix) {
    this.ix = ix;
};
var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
    this.errorAt = errorAt;
    this.hasOwnProperty = hasOwnProperty;
    this.hasProperty = hasProperty;
    this.index = index;
};
var unsafeReadProp = function (k) {
    return function (value) {
        return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
    };
};
var readProp = unsafeReadProp;
var readIndex = unsafeReadProp;
var ix = function (dict) {
    return dict.ix;
};
var index = function (dict) {
    return dict.index;
};
var indexableExceptT = new Indexable(function (dictIndex) {
    return function (f) {
        return function (i) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
        };
    };
});
var indexableForeign = new Indexable(function (dictIndex) {
    return index(dictIndex);
});
var hasPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasProperty(v, value);
        };
        return false;
    };
};
var hasProperty = function (dict) {
    return dict.hasProperty;
};
var hasOwnPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasOwnProperty(v, value);
        };
        return false;
    };
};
var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
var hasOwnProperty = function (dict) {
    return dict.hasOwnProperty;
};
var errorAt = function (dict) {
    return dict.errorAt;
};
module.exports = {
    Index: Index,
    Indexable: Indexable,
    readProp: readProp,
    readIndex: readIndex,
    ix: ix,
    index: index,
    hasProperty: hasProperty,
    hasOwnProperty: hasOwnProperty,
    errorAt: errorAt,
    indexString: indexString,
    indexInt: indexInt,
    indexableForeign: indexableForeign,
    indexableExceptT: indexableExceptT
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Except.Trans/index.js":45,"../Data.Function/index.js":149,"../Data.Identity/index.js":166,"../Foreign/index.js":313,"./foreign.js":302}],304:[function(require,module,exports){
"use strict";

exports.parseJSONImpl = function (str) {
  return JSON.parse(str);
};

},{}],305:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Foreign = require("../Foreign/index.js");
var parseJSON = function ($0) {
    return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function ($1) {
        return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Foreign.ForeignError.create(Effect_Exception.message($1)));
    })(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"](function () {
        return $foreign.parseJSONImpl($0);
    })))));
};
var decodeJSONWith = function (f) {
    return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(f)(parseJSON);
};
module.exports = {
    parseJSON: parseJSON,
    decodeJSONWith: decodeJSONWith
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Except.Trans/index.js":45,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Identity/index.js":166,"../Data.List.Types/index.js":192,"../Effect.Exception/index.js":284,"../Effect.Unsafe/index.js":292,"../Foreign/index.js":313,"./foreign.js":304}],306:[function(require,module,exports){
exports['null'] = null;

exports['undefined'] = undefined;

},{}],307:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Foreign = require("../Foreign/index.js");
var readNullOrUndefined = function (v) {
    return function (value) {
        if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
        };
        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
    };
};
module.exports = {
    readNullOrUndefined: readNullOrUndefined,
    "undefined": $foreign["undefined"],
    "null": $foreign["null"]
};

},{"../Control.Applicative/index.js":29,"../Control.Monad.Except.Trans/index.js":45,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Maybe/index.js":197,"../Foreign/index.js":313,"./foreign.js":306}],308:[function(require,module,exports){
"use strict";

exports["new"] = function () {
  return {};
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (k) {
      return function (m) {
        return function () {
          return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (k) {
  return function (v) {
    return function (m) {
      return function () {
        m[k] = v;
        return m;
      };
    };
  };
};

exports["delete"] = function (k) {
  return function (m) {
    return function () {
      delete m[k];
      return m;
    };
  };
};

},{}],309:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    peek: peek,
    "new": $foreign["new"],
    poke: $foreign.poke,
    "delete": $foreign["delete"]
};

},{"../Data.Maybe/index.js":197,"./foreign.js":308}],310:[function(require,module,exports){
"use strict";

exports._copyST = function (m) {
  return function () {
    var r = {};
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }
    return r;
  };
};

exports.empty = {};

exports.runST = function (f) {
  return f();
};

exports._fmapObject = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
};

exports._mapWithKey = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
};

exports._foldM = function (bind) {
  return function (f) {
    return function (mz) {
      return function (m) {
        var acc = mz;
        function g(k) {
          return function (z) {
            return f(z)(k)(m[k]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind(acc)(g(k));
          }
        }
        return acc;
      };
    };
  };
};

exports._foldSCObject = function (m, z, f, fromMaybe) {
  var acc = z;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      var maybeR = f(acc)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return acc;
      else acc = r;
    }
  }
  return acc;
};

exports.all = function (f) {
  return function (m) {
    for (var k in m) {
      if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
    }
    return true;
  };
};

exports.size = function (m) {
  var s = 0;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      ++s;
    }
  }
  return s;
};

exports._lookup = function (no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
};

exports._lookupST = function (no, yes, k, m) {
  return function () {
    return k in m ? yes(m[k]) : no;
  };
};

function toArrayWithKey(f) {
  return function (m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}

exports.toArrayWithKey = toArrayWithKey;

exports.keys = Object.keys || toArrayWithKey(function (k) {
  return function () { return k; };
});

},{}],311:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var values = $foreign.toArrayWithKey(function (v) {
    return function (v1) {
        return v1;
    };
});
var toUnfoldable = function (dictUnfoldable) {
    return function ($45) {
        return Data_Array.toUnfoldable(dictUnfoldable)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)($45));
    };
};
var toAscUnfoldable = function (dictUnfoldable) {
    return function ($46) {
        return Data_Array.toUnfoldable(dictUnfoldable)(Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)($46)));
    };
};
var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
var thawST = $foreign["_copyST"];
var singleton = function (k) {
    return function (v) {
        return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
    };
};
var showObject = function (dictShow) {
    return new Data_Show.Show(function (m) {
        return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
    });
};
var mutate = function (f) {
    return function (m) {
        return $foreign.runST(function __do() {
            var v = thawST(m)();
            var v1 = f(v)();
            return v;
        });
    };
};
var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
var mapWithKey = function (f) {
    return function (m) {
        return $foreign["_mapWithKey"](m, f);
    };
};
var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var isSubmap = function (dictEq) {
    return function (m1) {
        return function (m2) {
            var f = function (k) {
                return function (v) {
                    return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
                };
            };
            return $foreign.all(f)(m1);
        };
    };
};
var isEmpty = $foreign.all(function (v) {
    return function (v1) {
        return false;
    };
});
var insert = function (k) {
    return function (v) {
        return mutate(Foreign_Object_ST.poke(k)(v));
    };
};
var functorObject = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $foreign["_fmapObject"](m, f);
    };
});
var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorObject;
}, mapWithKey);
var fromHomogeneous = function (dictHomogeneous) {
    return Unsafe_Coerce.unsafeCoerce;
};
var fromFoldableWith = function (dictFoldable) {
    return function (f) {
        return function (l) {
            return $foreign.runST(function __do() {
                var v = Foreign_Object_ST["new"]();
                Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v1) {
                    return function __do() {
                        var v$prime = $foreign["_lookupST"](v1.value1, f(v1.value1), v1.value0, v)();
                        return Foreign_Object_ST.poke(v1.value0)(v$prime)(v)();
                    };
                })();
                return v;
            });
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return function (l) {
        return $foreign.runST(function __do() {
            var v = Foreign_Object_ST["new"]();
            Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v1.value0)(v1.value1)(v));
            })();
            return v;
        });
    };
};
var freezeST = $foreign["_copyST"];
var foldMaybe = function (f) {
    return function (z) {
        return function (m) {
            return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (z) {
            return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
        };
    };
};
var semigroupObject = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (m1) {
        return function (m2) {
            return mutate(function (s1) {
                return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                    return function (k) {
                        return function (v2) {
                            return Foreign_Object_ST.poke(k)($foreign["_lookup"](v2, function (v1) {
                                return Data_Semigroup.append(dictSemigroup)(v1)(v2);
                            }, k, m2))(s2);
                        };
                    };
                })(s1)(m1);
            })(m2);
        };
    });
};
var monoidObject = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupObject(dictSemigroup);
    }, $foreign.empty);
};
var union = function (m) {
    return mutate(function (s) {
        return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
            return function (k) {
                return function (v) {
                    return Foreign_Object_ST.poke(k)(v)(s$prime);
                };
            };
        })(s)(m);
    });
};
var unions = function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
};
var fold = $foreign["_foldM"](Data_Function.applyFlipped);
var foldMap = function (dictMonoid) {
    return function (f) {
        return fold(function (acc) {
            return function (k) {
                return function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
};
var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return foldMap(dictMonoid)(Data_Function["const"](f));
    };
}, function (f) {
    return fold(function (z) {
        return function (v) {
            return f(z);
        };
    });
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
});
var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableObject;
}, function (dictMonoid) {
    return foldMap(dictMonoid);
}, function (f) {
    return fold(Data_Function.flip(f));
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
        };
    };
});
var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexObject;
}, function () {
    return functorWithIndexObject;
}, function () {
    return traversableObject;
}, function (dictApplicative) {
    return function (f) {
        return function (ms) {
            return fold(function (acc) {
                return function (k) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                    };
                };
            })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
        };
    };
});
var traversableObject = new Data_Traversable.Traversable(function () {
    return foldableObject;
}, function () {
    return functorObject;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function ($47) {
        return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative)(Data_Function["const"]($47));
    };
});
var filterWithKey = function (predicate) {
    return function (m) {
        var go = (function () {
            var step = function (acc) {
                return function (k) {
                    return function (v) {
                        var $41 = predicate(k)(v);
                        if ($41) {
                            return Foreign_Object_ST.poke(k)(v)(acc);
                        };
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                    };
                };
            };
            return function __do() {
                var v = Foreign_Object_ST["new"]();
                return foldM(Control_Monad_ST_Internal.monadST)(step)(v)(m)();
            };
        })();
        return $foreign.runST(go);
    };
};
var filterKeys = function (predicate) {
    return filterWithKey(function ($48) {
        return Data_Function["const"](predicate($48));
    });
};
var filter = function (predicate) {
    return filterWithKey(Data_Function["const"](predicate));
};
var eqObject = function (dictEq) {
    return new Data_Eq.Eq(function (m1) {
        return function (m2) {
            return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
        };
    });
};
var ordObject = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqObject(dictOrd.Eq0());
    }, function (m1) {
        return function (m2) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
        };
    });
};
var eq1Object = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqObject(dictEq));
});
var $$delete = function (k) {
    return mutate(Foreign_Object_ST["delete"](k));
};
var pop = function (k) {
    return function (m) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
            return new Data_Tuple.Tuple(a, $$delete(k)(m));
        });
    };
};
var alter = function (f) {
    return function (k) {
        return function (m) {
            var v = f(lookup(k)(m));
            if (v instanceof Data_Maybe.Nothing) {
                return $$delete(k)(m);
            };
            if (v instanceof Data_Maybe.Just) {
                return insert(k)(v.value0)(m);
            };
            throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [ v.constructor.name ]);
        };
    };
};
var update = function (f) {
    return function (k) {
        return function (m) {
            return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
    };
};
module.exports = {
    isEmpty: isEmpty,
    singleton: singleton,
    insert: insert,
    lookup: lookup,
    toUnfoldable: toUnfoldable,
    toAscUnfoldable: toAscUnfoldable,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromHomogeneous: fromHomogeneous,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    mapWithKey: mapWithKey,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    values: values,
    union: union,
    unions: unions,
    isSubmap: isSubmap,
    fold: fold,
    foldMap: foldMap,
    foldM: foldM,
    foldMaybe: foldMaybe,
    thawST: thawST,
    freezeST: freezeST,
    functorObject: functorObject,
    functorWithIndexObject: functorWithIndexObject,
    foldableObject: foldableObject,
    foldableWithIndexObject: foldableWithIndexObject,
    traversableObject: traversableObject,
    traversableWithIndexObject: traversableWithIndexObject,
    eqObject: eqObject,
    eq1Object: eq1Object,
    ordObject: ordObject,
    showObject: showObject,
    semigroupObject: semigroupObject,
    monoidObject: monoidObject,
    empty: $foreign.empty,
    size: $foreign.size,
    keys: $foreign.keys,
    all: $foreign.all,
    runST: $foreign.runST,
    toArrayWithKey: $foreign.toArrayWithKey
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.ST.Internal/index.js":57,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.FoldableWithIndex/index.js":139,"../Data.Function.Uncurried/index.js":148,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Traversable/index.js":257,"../Data.TraversableWithIndex/index.js":258,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"../Foreign.Object.ST/index.js":309,"../Unsafe.Coerce/index.js":405,"./foreign.js":310}],312:[function(require,module,exports){
"use strict";

exports.unsafeToForeign = function (value) {
  return value;
};

exports.unsafeFromForeign = function (value) {
  return value;
};

exports.typeOf = function (value) {
  return typeof value;
};

exports.tagOf = function (value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};

exports.isNull = function (value) {
  return value === null;
};

exports.isUndefined = function (value) {
  return value === undefined;
};

exports.isArray = Array.isArray || function (value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

},{}],313:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var ForeignError = (function () {
    function ForeignError(value0) {
        this.value0 = value0;
    };
    ForeignError.create = function (value0) {
        return new ForeignError(value0);
    };
    return ForeignError;
})();
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var showForeignError = new Data_Show.Show(function (v) {
    if (v instanceof ForeignError) {
        return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
    };
    if (v instanceof ErrorAtIndex) {
        return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof ErrorAtProperty) {
        return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof TypeMismatch) {
        return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 63, column 47): " + [ v.constructor.name ]);
});
var renderForeignError = function (v) {
    if (v instanceof ForeignError) {
        return v.value0;
    };
    if (v instanceof ErrorAtIndex) {
        return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof ErrorAtProperty) {
        return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof TypeMismatch) {
        return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
    };
    throw new Error("Failed pattern match at Foreign (line 72, column 1 - line 72, column 45): " + [ v.constructor.name ]);
};
var readUndefined = function (value) {
    if ($foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 157, column 1 - line 157, column 46): " + [ value.constructor.name ]);
};
var readNullOrUndefined = function (value) {
    if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 162, column 1 - line 162, column 52): " + [ value.constructor.name ]);
};
var readNull = function (value) {
    if ($foreign.isNull(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 152, column 1 - line 152, column 41): " + [ value.constructor.name ]);
};
var fail = function ($107) {
    return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($107));
};
var readArray = function (value) {
    if ($foreign.isArray(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
    };
    if (Data_Boolean.otherwise) {
        return fail(new TypeMismatch("array", $foreign.tagOf(value)));
    };
    throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
};
var unsafeReadTagged = function (tag) {
    return function (value) {
        if ($foreign.tagOf(value) === tag) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
        };
        if (Data_Boolean.otherwise) {
            return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
        };
        throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
    };
};
var readBoolean = unsafeReadTagged("Boolean");
var readNumber = unsafeReadTagged("Number");
var readInt = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
    var fromNumber = function ($108) {
        return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($108));
    };
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
};
var readString = unsafeReadTagged("String");
var readChar = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
    var fromString = function ($109) {
        return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_String_CodeUnits.toChar($109));
    };
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
};
var eqForeignError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return x.value0 === y.value0;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        return false;
    };
});
var ordForeignError = new Data_Ord.Ord(function () {
    return eqForeignError;
}, function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof ForeignError) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ForeignError) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtIndex) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ErrorAtIndex) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at Foreign (line 61, column 8 - line 61, column 52): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    ForeignError: ForeignError,
    TypeMismatch: TypeMismatch,
    ErrorAtIndex: ErrorAtIndex,
    ErrorAtProperty: ErrorAtProperty,
    renderForeignError: renderForeignError,
    unsafeReadTagged: unsafeReadTagged,
    readString: readString,
    readChar: readChar,
    readBoolean: readBoolean,
    readNumber: readNumber,
    readInt: readInt,
    readArray: readArray,
    readNull: readNull,
    readUndefined: readUndefined,
    readNullOrUndefined: readNullOrUndefined,
    fail: fail,
    eqForeignError: eqForeignError,
    ordForeignError: ordForeignError,
    showForeignError: showForeignError,
    unsafeToForeign: $foreign.unsafeToForeign,
    unsafeFromForeign: $foreign.unsafeFromForeign,
    typeOf: $foreign.typeOf,
    tagOf: $foreign.tagOf,
    isNull: $foreign.isNull,
    isUndefined: $foreign.isUndefined,
    isArray: $foreign.isArray
};

},{"../Control.Applicative/index.js":29,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Except/index.js":46,"../Data.Boolean/index.js":107,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Identity/index.js":166,"../Data.Int/index.js":168,"../Data.List.NonEmpty/index.js":191,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"./foreign.js":312}],314:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Formless_Class_Initial = require("../Formless.Class.Initial/index.js");
var Formless_Transform_Record = require("../Formless.Transform.Record/index.js");
var Formless_Types_Form = require("../Formless.Types.Form/index.js");
var validateAll = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "validateAll";
}))(Data_Symbol.SProxy.value)(Data_Unit.unit);
var validate = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                    return "validate";
                }))(Data_Symbol.SProxy.value)(Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Formless_Types_Form.U.value)));
            };
        };
    };
};
var submit = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "submit";
}))(Data_Symbol.SProxy.value)(Data_Unit.unit);
var setValidateAll = function (dictNewtype) {
    return function (dictHMap) {
        return function (is) {
            return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "setAll";
            }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Formless_Transform_Record.wrapInputFields(dictNewtype)(dictHMap)(is), true));
        };
    };
};
var setValidate = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (i) {
                    return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "modifyValidate";
                    }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(Data_Function["const"](i))))));
                };
            };
        };
    };
};
var setAll = function (dictNewtype) {
    return function (dictHMap) {
        return function (is) {
            return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "setAll";
            }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Formless_Transform_Record.wrapInputFields(dictNewtype)(dictHMap)(is), false));
        };
    };
};
var set = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (i) {
                    return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "modify";
                    }))(Data_Symbol.SProxy.value)(Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(Data_Function["const"](i)))));
                };
            };
        };
    };
};
var resetAll = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "resetAll";
}))(Data_Symbol.SProxy.value)(Data_Unit.unit);
var reset = function (dictIsSymbol) {
    return function (dictInitial) {
        return function (dictNewtype) {
            return function (dictCons) {
                return function (sym) {
                    return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "reset";
                    }))(Data_Symbol.SProxy.value)(Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(Data_Function["const"](Formless_Class_Initial.initial(dictInitial))))));
                };
            };
        };
    };
};
var modifyValidateAll = function (dictNewtype) {
    return function (dictHMap) {
        return function (ifs) {
            return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "modifyAll";
            }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Formless_Transform_Record.wrapInputFunctions(dictNewtype)(dictHMap)(ifs), true));
        };
    };
};
var modifyValidate = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (f) {
                    return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "modifyValidate";
                    }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(f)))));
                };
            };
        };
    };
};
var modifyAll = function (dictNewtype) {
    return function (dictHMap) {
        return function (fs) {
            return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "modifyAll";
            }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(Formless_Transform_Record.wrapInputFunctions(dictNewtype)(dictHMap)(fs), false));
        };
    };
};
var modify = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (f) {
                    return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "modify";
                    }))(Data_Symbol.SProxy.value)(Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(f))));
                };
            };
        };
    };
};
var loadForm = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "loadForm";
}))(Data_Symbol.SProxy.value);
var injAction = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "userAction";
}))(Data_Symbol.SProxy.value);
var asyncSetValidate = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (ms) {
                return function (sym) {
                    return function (i) {
                        return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "modifyValidate";
                        }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(new Data_Maybe.Just(ms), Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(Data_Function["const"](i))))));
                    };
                };
            };
        };
    };
};
var asyncModifyValidate = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (ms) {
                return function (s) {
                    return function (f) {
                        return Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "modifyValidate";
                        }))(Data_Symbol.SProxy.value)(new Data_Tuple.Tuple(new Data_Maybe.Just(ms), Data_Newtype.wrap(dictNewtype)(Data_Variant.inj(dictCons)(dictIsSymbol)(s)(Data_Newtype.wrap(Formless_Types_Form.newtypeInputFunction)(f)))));
                    };
                };
            };
        };
    };
};
module.exports = {
    injAction: injAction,
    set: set,
    modify: modify,
    validate: validate,
    setValidate: setValidate,
    modifyValidate: modifyValidate,
    asyncSetValidate: asyncSetValidate,
    asyncModifyValidate: asyncModifyValidate,
    reset: reset,
    setAll: setAll,
    modifyAll: modifyAll,
    validateAll: validateAll,
    setValidateAll: setValidateAll,
    modifyValidateAll: modifyValidateAll,
    resetAll: resetAll,
    submit: submit,
    loadForm: loadForm
};

},{"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Data.Variant/index.js":269,"../Formless.Class.Initial/index.js":315,"../Formless.Transform.Record/index.js":322,"../Formless.Types.Form/index.js":325}],315:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Initial = function (initial) {
    this.initial = initial;
};
var initialUnit = new Initial(Data_Monoid.mempty(Data_Monoid.monoidUnit));
var initialString = new Initial(Data_Monoid.mempty(Data_Monoid.monoidString));
var initialRecord = function (dictRowToList) {
    return function (dictMonoidRecord) {
        return new Initial(Data_Monoid.mempty(Data_Monoid.monoidRecord(dictRowToList)(dictMonoidRecord)));
    };
};
var initialOrdering = new Initial(Data_Monoid.mempty(Data_Monoid.monoidOrdering));
var initialNumber = new Initial(0.0);
var initialMaybe = new Initial(Data_Maybe.Nothing.value);
var initialMap = function (dictOrd) {
    return new Initial(Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd)));
};
var initialList = new Initial(Data_Monoid.mempty(Data_List_Types.monoidList));
var initialInt = new Initial(0);
var initialFn = function (dictMonoid) {
    return new Initial(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
};
var initialBoolean = new Initial(false);
var initialArray = new Initial(Data_Monoid.mempty(Data_Monoid.monoidArray));
var initial = function (dict) {
    return dict.initial;
};
var initialTuple = function (dictInitial) {
    return function (dictInitial1) {
        return new Initial(new Data_Tuple.Tuple(initial(dictInitial), initial(dictInitial1)));
    };
};
module.exports = {
    initial: initial,
    Initial: Initial,
    initialUnit: initialUnit,
    initialBoolean: initialBoolean,
    initialInt: initialInt,
    initialNumber: initialNumber,
    initialString: initialString,
    initialOrdering: initialOrdering,
    initialMaybe: initialMaybe,
    initialArray: initialArray,
    initialList: initialList,
    initialMap: initialMap,
    initialFn: initialFn,
    initialTuple: initialTuple,
    initialRecord: initialRecord
};

},{"../Data.List.Types/index.js":192,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Tuple/index.js":260}],316:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Formless_Action = require("../Formless.Action/index.js");
var Formless_Data_FormFieldResult = require("../Formless.Data.FormFieldResult/index.js");
var Formless_Internal_Component = require("../Formless.Internal.Component/index.js");
var Formless_Internal_Debounce = require("../Formless.Internal.Debounce/index.js");
var Formless_Internal_Transform = require("../Formless.Internal.Transform/index.js");
var Formless_Transform_Record = require("../Formless.Transform.Record/index.js");
var Formless_Transform_Row = require("../Formless.Transform.Row/index.js");
var Formless_Types_Component = require("../Formless.Types.Component/index.js");
var Formless_Types_Form = require("../Formless.Types.Form/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var raiseResult = function (dictNewtype) {
    return function (dictHMap) {
        return function (v) {
            if (v instanceof Formless_Types_Component.Submitted) {
                return Halogen_Query_HalogenM.raise(Formless_Transform_Record.unwrapOutputFields(dictNewtype)(dictHMap)(v.value0));
            };
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
        };
    };
};
var handleAction = function (dictMonadAff) {
    return function (dictRowToList) {
        return function (dictRowToList1) {
            return function (dictEqRecord) {
                return function (dictInputFieldsToFormFields) {
                    return function (dictFormFieldsToInputFields) {
                        return function (dictCountErrors) {
                            return function (dictAllTouched) {
                                return function (dictSetFormFieldsTouched) {
                                    return function (dictReplaceFormFieldInputs) {
                                        return function (dictModifyAll) {
                                            return function (dictValidateAll) {
                                                return function (dictFormFieldToMaybeOutput) {
                                                    return function (dictNewtype) {
                                                        return function (dictNewtype1) {
                                                            return function (dictNewtype2) {
                                                                return function (dictNewtype3) {
                                                                    return function (dictNewtype4) {
                                                                        return function (dictNewtype5) {
                                                                            return function (dictNewtype6) {
                                                                                return function (dictNewtype7) {
                                                                                    return function (dictLacks) {
                                                                                        return function (handleAction$prime) {
                                                                                            return function (handleEvent) {
                                                                                                return function (action) {
                                                                                                    var sync = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                                                                                        return "syncFormData";
                                                                                                    }))(Data_Symbol.SProxy.value)(Data_Unit.unit);
                                                                                                    return Data_Function.flip(Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))())(action)({
                                                                                                        initialize: function (mbAction) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v1) {
                                                                                                                    var setFields = function (rec) {
                                                                                                                        return {
                                                                                                                            debounceRef: new Data_Maybe.Just(v),
                                                                                                                            validationRef: new Data_Maybe.Just(v1),
                                                                                                                            allTouched: rec.allTouched,
                                                                                                                            initialInputs: rec.initialInputs,
                                                                                                                            validators: rec.validators
                                                                                                                        };
                                                                                                                    };
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                        var $132 = {};
                                                                                                                        for (var $133 in st) {
                                                                                                                            if ({}.hasOwnProperty.call(st, $133)) {
                                                                                                                                $132[$133] = st[$133];
                                                                                                                            };
                                                                                                                        };
                                                                                                                        $132.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(setFields)(st.internal);
                                                                                                                        return $132;
                                                                                                                    }))(function () {
                                                                                                                        return Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(handleAction$prime)(mbAction);
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        syncFormData: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                                                                var errors = Formless_Internal_Transform.countErrors(dictRowToList1)(dictCountErrors)(dictNewtype2)(v1.form);
                                                                                                                var dirty = !Data_Eq.eq(Data_Eq.eqRec(dictRowToList)(dictEqRecord))(Data_Newtype.unwrap(dictNewtype)(Formless_Internal_Transform.formFieldsToInputFields(dictRowToList1)(dictFormFieldsToInputFields)(dictNewtype)(dictNewtype2)(v1.form)))(Data_Newtype.unwrap(dictNewtype)((Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v1.internal)).initialInputs));
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                                                                                                    var v2 = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v1.internal)).allTouched;
                                                                                                                    if (v2) {
                                                                                                                        return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v3) {
                                                                                                                            var $138 = {};
                                                                                                                            for (var $139 in v3) {
                                                                                                                                if ({}.hasOwnProperty.call(v3, $139)) {
                                                                                                                                    $138[$139] = v3[$139];
                                                                                                                                };
                                                                                                                            };
                                                                                                                            $138.validity = (function () {
                                                                                                                                var $137 = errors === 0;
                                                                                                                                if ($137) {
                                                                                                                                    return Formless_Types_Component.Valid.value;
                                                                                                                                };
                                                                                                                                return Formless_Types_Component.Invalid.value;
                                                                                                                            })();
                                                                                                                            $138.errors = errors;
                                                                                                                            $138.dirty = dirty;
                                                                                                                            return $138;
                                                                                                                        });
                                                                                                                    };
                                                                                                                    var v3 = Formless_Internal_Transform.allTouched(dictRowToList1)(dictAllTouched)(dictNewtype2)(v1.form);
                                                                                                                    if (v3) {
                                                                                                                        return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v4) {
                                                                                                                            var $143 = {};
                                                                                                                            for (var $144 in v4) {
                                                                                                                                if ({}.hasOwnProperty.call(v4, $144)) {
                                                                                                                                    $143[$144] = v4[$144];
                                                                                                                                };
                                                                                                                            };
                                                                                                                            $143.validity = (function () {
                                                                                                                                var $142 = errors === 0;
                                                                                                                                if ($142) {
                                                                                                                                    return Formless_Types_Component.Valid.value;
                                                                                                                                };
                                                                                                                                return Formless_Types_Component.Invalid.value;
                                                                                                                            })();
                                                                                                                            $143.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(function (v5) {
                                                                                                                                return {
                                                                                                                                    allTouched: true,
                                                                                                                                    debounceRef: v5.debounceRef,
                                                                                                                                    initialInputs: v5.initialInputs,
                                                                                                                                    validationRef: v5.validationRef,
                                                                                                                                    validators: v5.validators
                                                                                                                                };
                                                                                                                            })(v1.internal);
                                                                                                                            $143.errors = errors;
                                                                                                                            $143.dirty = dirty;
                                                                                                                            return $143;
                                                                                                                        });
                                                                                                                    };
                                                                                                                    return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v4) {
                                                                                                                        var $146 = {};
                                                                                                                        for (var $147 in v4) {
                                                                                                                            if ({}.hasOwnProperty.call(v4, $147)) {
                                                                                                                                $146[$147] = v4[$147];
                                                                                                                            };
                                                                                                                        };
                                                                                                                        $146.validity = Formless_Types_Component.Incomplete.value;
                                                                                                                        $146.errors = errors;
                                                                                                                        $146.dirty = dirty;
                                                                                                                        return $146;
                                                                                                                    });
                                                                                                                })())(function (v2) {
                                                                                                                    return handleEvent(Formless_Types_Component.Changed.create(Formless_Internal_Component.getPublicState(dictLacks)(v2)));
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        userAction: function (act) {
                                                                                                            return handleAction$prime(act);
                                                                                                        },
                                                                                                        modify: function (variant) {
                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                var $150 = {};
                                                                                                                for (var $151 in st) {
                                                                                                                    if ({}.hasOwnProperty.call(st, $151)) {
                                                                                                                        $150[$151] = st[$151];
                                                                                                                    };
                                                                                                                };
                                                                                                                $150.form = Formless_Internal_Transform.unsafeModifyInputVariant(dictNewtype6)(dictNewtype2)(Control_Category.identity(Control_Category.categoryFn))(variant)(st.form);
                                                                                                                return $150;
                                                                                                            }))(function () {
                                                                                                                return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                            });
                                                                                                        },
                                                                                                        validate: function (variant) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                                                                                                                var validators = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v.internal)).validators;
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0())(Formless_Internal_Transform.unsafeRunValidationVariant((dictMonadAff.MonadEffect0()).Monad0())(dictNewtype7)(dictNewtype2)(dictNewtype4)(variant)(validators)(v.form)))(function (v1) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                                                                                                        var $155 = {};
                                                                                                                        for (var $156 in v2) {
                                                                                                                            if ({}.hasOwnProperty.call(v2, $156)) {
                                                                                                                                $155[$156] = v2[$156];
                                                                                                                            };
                                                                                                                        };
                                                                                                                        $155.form = v1;
                                                                                                                        return $155;
                                                                                                                    }))(function () {
                                                                                                                        return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        modifyValidate: function (v) {
                                                                                                            var validate = Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                                                                var vs = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v1.internal)).validators;
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0())(Formless_Internal_Transform.unsafeRunValidationVariant((dictMonadAff.MonadEffect0()).Monad0())(dictNewtype7)(dictNewtype2)(dictNewtype4)(v.value1)(vs)(v1.form)))(function (v2) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v3) {
                                                                                                                        var $161 = {};
                                                                                                                        for (var $162 in v3) {
                                                                                                                            if ({}.hasOwnProperty.call(v3, $162)) {
                                                                                                                                $161[$162] = v3[$162];
                                                                                                                            };
                                                                                                                        };
                                                                                                                        $161.form = v2;
                                                                                                                        return $161;
                                                                                                                    }))(function () {
                                                                                                                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v2);
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                            var modifyWith = function (f) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (s) {
                                                                                                                    var $164 = {};
                                                                                                                    for (var $165 in s) {
                                                                                                                        if ({}.hasOwnProperty.call(s, $165)) {
                                                                                                                            $164[$165] = s[$165];
                                                                                                                        };
                                                                                                                    };
                                                                                                                    $164.form = Formless_Internal_Transform.unsafeModifyInputVariant(dictNewtype6)(dictNewtype2)(f)(v.value1)(s.form);
                                                                                                                    return $164;
                                                                                                                }))(function (v1) {
                                                                                                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v1.form);
                                                                                                                });
                                                                                                            };
                                                                                                            if (v.value0 instanceof Data_Maybe.Nothing) {
                                                                                                                return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(modifyWith(Control_Category.identity(Control_Category.categoryFn)))(validate))(handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync));
                                                                                                            };
                                                                                                            if (v.value0 instanceof Data_Maybe.Just) {
                                                                                                                return Formless_Internal_Debounce.debounceForm(dictMonadAff)(v.value0.value0)(modifyWith(Control_Category.identity(Control_Category.categoryFn)))(Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(modifyWith(Data_Function["const"](Formless_Data_FormFieldResult.Validating.value)))(validate))(handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync));
                                                                                                            };
                                                                                                            throw new Error("Failed pattern match at Formless.Component (line 263, column 7 - line 271, column 58): " + [ v.value0.constructor.name ]);
                                                                                                        },
                                                                                                        reset: function (variant) {
                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                var $172 = {};
                                                                                                                for (var $173 in st) {
                                                                                                                    if ({}.hasOwnProperty.call(st, $173)) {
                                                                                                                        $172[$173] = st[$173];
                                                                                                                    };
                                                                                                                };
                                                                                                                $172.form = Formless_Internal_Transform.unsafeModifyInputVariant(dictNewtype6)(dictNewtype2)(Control_Category.identity(Control_Category.categoryFn))(variant)(st.form);
                                                                                                                $172.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(function (v1) {
                                                                                                                    return {
                                                                                                                        allTouched: false,
                                                                                                                        debounceRef: v1.debounceRef,
                                                                                                                        initialInputs: v1.initialInputs,
                                                                                                                        validationRef: v1.validationRef,
                                                                                                                        validators: v1.validators
                                                                                                                    };
                                                                                                                })(st.internal);
                                                                                                                return $172;
                                                                                                            }))(function () {
                                                                                                                return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                            });
                                                                                                        },
                                                                                                        setAll: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                var $176 = {};
                                                                                                                for (var $177 in st) {
                                                                                                                    if ({}.hasOwnProperty.call(st, $177)) {
                                                                                                                        $176[$177] = st[$177];
                                                                                                                    };
                                                                                                                };
                                                                                                                $176.form = Formless_Internal_Transform.replaceFormFieldInputs(dictRowToList1)(dictReplaceFormFieldInputs)(dictNewtype)(dictNewtype2)(v.value0)(st.form);
                                                                                                                return $176;
                                                                                                            }))(function (v1) {
                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(handleEvent(Formless_Types_Component.Changed.create(Formless_Internal_Component.getPublicState(dictLacks)(v1))))(function () {
                                                                                                                    if (v.value1) {
                                                                                                                        return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(Formless_Action.validateAll);
                                                                                                                    };
                                                                                                                    return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        modifyAll: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                var $184 = {};
                                                                                                                for (var $185 in st) {
                                                                                                                    if ({}.hasOwnProperty.call(st, $185)) {
                                                                                                                        $184[$185] = st[$185];
                                                                                                                    };
                                                                                                                };
                                                                                                                $184.form = Formless_Internal_Transform.modifyAll(dictRowToList1)(dictModifyAll)(dictNewtype1)(dictNewtype2)(v.value0)(st.form);
                                                                                                                return $184;
                                                                                                            }))(function (v1) {
                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(handleEvent(Formless_Types_Component.Changed.create(Formless_Internal_Component.getPublicState(dictLacks)(v1))))(function () {
                                                                                                                    if (v.value1) {
                                                                                                                        return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(Formless_Action.validateAll);
                                                                                                                    };
                                                                                                                    return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        validateAll: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0())(Formless_Internal_Transform.validateAll(dictRowToList1)((dictMonadAff.MonadEffect0()).Monad0())(dictValidateAll)(dictNewtype4)(dictNewtype2)((Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v1.internal)).validators)(v1.form)))(function (v2) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v3) {
                                                                                                                        var $193 = {};
                                                                                                                        for (var $194 in v3) {
                                                                                                                            if ({}.hasOwnProperty.call(v3, $194)) {
                                                                                                                                $193[$194] = v3[$194];
                                                                                                                            };
                                                                                                                        };
                                                                                                                        $193.form = v2;
                                                                                                                        return $193;
                                                                                                                    }))(function () {
                                                                                                                        return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(sync);
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        resetAll: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                                                                var $196 = {};
                                                                                                                for (var $197 in st) {
                                                                                                                    if ({}.hasOwnProperty.call(st, $197)) {
                                                                                                                        $196[$197] = st[$197];
                                                                                                                    };
                                                                                                                };
                                                                                                                $196.validity = Formless_Types_Component.Incomplete.value;
                                                                                                                $196.dirty = false;
                                                                                                                $196.errors = 0;
                                                                                                                $196.submitAttempts = 0;
                                                                                                                $196.submitting = false;
                                                                                                                $196.form = Formless_Internal_Transform.replaceFormFieldInputs(dictRowToList1)(dictReplaceFormFieldInputs)(dictNewtype)(dictNewtype2)((Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(st.internal)).initialInputs)(st.form);
                                                                                                                $196.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(function (v2) {
                                                                                                                    return {
                                                                                                                        allTouched: false,
                                                                                                                        debounceRef: v2.debounceRef,
                                                                                                                        initialInputs: v2.initialInputs,
                                                                                                                        validationRef: v2.validationRef,
                                                                                                                        validators: v2.validators
                                                                                                                    };
                                                                                                                })(st.internal);
                                                                                                                return $196;
                                                                                                            }))(function (v1) {
                                                                                                                return handleEvent(Formless_Types_Component.Changed.create(Formless_Internal_Component.getPublicState(dictLacks)(v1)));
                                                                                                            });
                                                                                                        },
                                                                                                        submit: function (v) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Formless_Internal_Component.preSubmit(dictMonadAff)(dictRowToList1)(dictAllTouched)(dictSetFormFieldsTouched)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictValidateAll)(dictNewtype2)(dictNewtype3)(dictNewtype4))(function (v1) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(handleAction$prime)(handleEvent)(Formless_Action.validateAll))(function (v2) {
                                                                                                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Formless_Internal_Component.submit(dictMonadAff)(dictRowToList1)(dictAllTouched)(dictSetFormFieldsTouched)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictValidateAll)(dictNewtype2)(dictNewtype3)(dictNewtype4))(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(function ($213) {
                                                                                                                        return handleEvent(Formless_Types_Component.Submitted.create($213));
                                                                                                                    }));
                                                                                                                });
                                                                                                            });
                                                                                                        },
                                                                                                        loadForm: function (formInputs) {
                                                                                                            var setFields = function (rec) {
                                                                                                                return {
                                                                                                                    allTouched: false,
                                                                                                                    initialInputs: formInputs,
                                                                                                                    debounceRef: rec.debounceRef,
                                                                                                                    validationRef: rec.validationRef,
                                                                                                                    validators: rec.validators
                                                                                                                };
                                                                                                            };
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                                                                                                    var $201 = {};
                                                                                                                    for (var $202 in v1) {
                                                                                                                        if ({}.hasOwnProperty.call(v1, $202)) {
                                                                                                                            $201[$202] = v1[$202];
                                                                                                                        };
                                                                                                                    };
                                                                                                                    $201.validity = Formless_Types_Component.Incomplete.value;
                                                                                                                    $201.dirty = false;
                                                                                                                    $201.errors = 0;
                                                                                                                    $201.submitAttempts = 0;
                                                                                                                    $201.submitting = false;
                                                                                                                    $201.form = Formless_Internal_Transform.replaceFormFieldInputs(dictRowToList1)(dictReplaceFormFieldInputs)(dictNewtype)(dictNewtype2)(formInputs)(v.form);
                                                                                                                    $201.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(setFields)(v.internal);
                                                                                                                    return $201;
                                                                                                                }))(function (v1) {
                                                                                                                    return handleEvent(Formless_Types_Component.Changed.create(Formless_Internal_Component.getPublicState(dictLacks)(v1)));
                                                                                                                });
                                                                                                            });
                                                                                                        }
                                                                                                    });
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var handleQuery = function (dictMonadAff) {
    return function (dictRowToList) {
        return function (dictRowToList1) {
            return function (dictEqRecord) {
                return function (dictInputFieldsToFormFields) {
                    return function (dictFormFieldsToInputFields) {
                        return function (dictCountErrors) {
                            return function (dictAllTouched) {
                                return function (dictSetFormFieldsTouched) {
                                    return function (dictReplaceFormFieldInputs) {
                                        return function (dictModifyAll) {
                                            return function (dictValidateAll) {
                                                return function (dictFormFieldToMaybeOutput) {
                                                    return function (dictNewtype) {
                                                        return function (dictNewtype1) {
                                                            return function (dictNewtype2) {
                                                                return function (dictNewtype3) {
                                                                    return function (dictNewtype4) {
                                                                        return function (dictNewtype5) {
                                                                            return function (dictNewtype6) {
                                                                                return function (dictNewtype7) {
                                                                                    return function (dictLacks) {
                                                                                        return function (handleQuery$prime) {
                                                                                            return function (handleEvent) {
                                                                                                return Data_Functor_Variant.match()(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()({
                                                                                                    query: function (v) {
                                                                                                        if (v instanceof Formless_Types_Component.SubmitReply) {
                                                                                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Formless_Internal_Component.preSubmit(dictMonadAff)(dictRowToList1)(dictAllTouched)(dictSetFormFieldsTouched)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictValidateAll)(dictNewtype2)(dictNewtype3)(dictNewtype4))(function (v1) {
                                                                                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)))(handleEvent)(Formless_Action.validateAll))(function (v2) {
                                                                                                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Formless_Internal_Component.submit(dictMonadAff)(dictRowToList1)(dictAllTouched)(dictSetFormFieldsTouched)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictValidateAll)(dictNewtype2)(dictNewtype3)(dictNewtype4))(function (v3) {
                                                                                                                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Just.create(v.value0(v3)));
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        };
                                                                                                        if (v instanceof Formless_Types_Component.SendQuery) {
                                                                                                            return Halogen_Query_HalogenM.HalogenM(Control_Monad_Free.liftF(new Halogen_Query_HalogenM.ChildQuery(v.value0)));
                                                                                                        };
                                                                                                        if (v instanceof Formless_Types_Component.AsQuery) {
                                                                                                            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(new Data_Maybe.Just(v.value1))(handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks)(Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)))(handleEvent)(Data_Variant.expand()(v.value0)));
                                                                                                        };
                                                                                                        throw new Error("Failed pattern match at Formless.Component (line 368, column 12 - line 382, column 44): " + [ v.constructor.name ]);
                                                                                                    },
                                                                                                    userQuery: function (q) {
                                                                                                        return handleQuery$prime(q);
                                                                                                    }
                                                                                                });
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var defaultSpec = {
    render: Data_Function["const"](Halogen_HTML_Core.text(Data_Monoid.mempty(Data_Monoid.monoidString))),
    handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
    handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
    handleEvent: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
    receive: Data_Function["const"](Data_Maybe.Nothing.value),
    initialize: Data_Maybe.Nothing.value,
    finalize: Data_Maybe.Nothing.value
};
var component = function (dictMonadAff) {
    return function (dictRowToList) {
        return function (dictRowToList1) {
            return function (dictEqRecord) {
                return function (dictInputFieldsToFormFields) {
                    return function (dictFormFieldsToInputFields) {
                        return function (dictCountErrors) {
                            return function (dictAllTouched) {
                                return function (dictSetFormFieldsTouched) {
                                    return function (dictReplaceFormFieldInputs) {
                                        return function (dictModifyAll) {
                                            return function (dictValidateAll) {
                                                return function (dictFormFieldToMaybeOutput) {
                                                    return function (dictMakeInputFieldsFromRow) {
                                                        return function (dictNewtype) {
                                                            return function (dictNewtype1) {
                                                                return function (dictNewtype2) {
                                                                    return function (dictNewtype3) {
                                                                        return function (dictNewtype4) {
                                                                            return function (dictNewtype5) {
                                                                                return function (dictNewtype6) {
                                                                                    return function (dictNewtype7) {
                                                                                        return function (dictLacks) {
                                                                                            return function (dictLacks1) {
                                                                                                return function (dictLacks2) {
                                                                                                    return function (dictLacks3) {
                                                                                                        return function (dictLacks4) {
                                                                                                            return function (dictLacks5) {
                                                                                                                return function (dictLacks6) {
                                                                                                                    return function (dictLacks7) {
                                                                                                                        return function (dictLacks8) {
                                                                                                                            return function (mkInput) {
                                                                                                                                return function (spec) {
                                                                                                                                    var initialState = function (input) {
                                                                                                                                        var initialInputs = (function () {
                                                                                                                                            if (input.initialInputs instanceof Data_Maybe.Nothing) {
                                                                                                                                                return Formless_Transform_Row.mkInputFields(dictRowToList)(dictNewtype)(dictMakeInputFieldsFromRow)(Formless_Types_Form.FormProxy.value);
                                                                                                                                            };
                                                                                                                                            if (input.initialInputs instanceof Data_Maybe.Just) {
                                                                                                                                                return input.initialInputs.value0;
                                                                                                                                            };
                                                                                                                                            throw new Error("Failed pattern match at Formless.Component (line 138, column 21 - line 140, column 28): " + [ input.initialInputs.constructor.name ]);
                                                                                                                                        })();
                                                                                                                                        var internalState = {
                                                                                                                                            allTouched: false,
                                                                                                                                            initialInputs: initialInputs,
                                                                                                                                            validators: input.validators,
                                                                                                                                            debounceRef: Data_Maybe.Nothing.value,
                                                                                                                                            validationRef: Data_Maybe.Nothing.value
                                                                                                                                        };
                                                                                                                                        var initialForm = Formless_Internal_Transform.inputFieldsToFormFields(dictRowToList)(dictInputFieldsToFormFields)(dictNewtype)(dictNewtype2)(initialInputs);
                                                                                                                                        var pipeline = Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder["delete"](new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "validators";
                                                                                                                                        }))((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks))()(Data_Symbol.SProxy.value))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder["delete"](new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "initialInputs";
                                                                                                                                        }))(dictLacks1)()(Data_Symbol.SProxy.value))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()(dictLacks2)(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "validity";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(Formless_Types_Component.Incomplete.value))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks3))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "dirty";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(false))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks4))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "errors";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(0))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks5))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "submitAttempts";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(0))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks6))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "submitting";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(false))(Control_Semigroupoid.composeFlipped(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks7))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "form";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(initialForm))(Record_Builder.insert()((function () {
                                                                                                                                            return undefined;
                                                                                                                                        })(dictLacks8))(new Data_Symbol.IsSymbol(function () {
                                                                                                                                            return "internal";
                                                                                                                                        }))(Data_Symbol.SProxy.value)(internalState)))))))));
                                                                                                                                        return Record_Builder.build(pipeline)(input);
                                                                                                                                    };
                                                                                                                                    return Halogen_Component.mkComponent({
                                                                                                                                        initialState: function ($214) {
                                                                                                                                            return initialState(mkInput($214));
                                                                                                                                        },
                                                                                                                                        render: function ($215) {
                                                                                                                                            return spec.render(Formless_Internal_Component.getPublicState(dictLacks8)($215));
                                                                                                                                        },
                                                                                                                                        "eval": Halogen_Component.mkEval({
                                                                                                                                            handleQuery: function (q) {
                                                                                                                                                return handleQuery(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks8)(spec.handleQuery)(spec.handleEvent)(q);
                                                                                                                                            },
                                                                                                                                            handleAction: function (act) {
                                                                                                                                                return handleAction(dictMonadAff)(dictRowToList)(dictRowToList1)(dictEqRecord)(dictInputFieldsToFormFields)(dictFormFieldsToInputFields)(dictCountErrors)(dictAllTouched)(dictSetFormFieldsTouched)(dictReplaceFormFieldInputs)(dictModifyAll)(dictValidateAll)(dictFormFieldToMaybeOutput)(dictNewtype)(dictNewtype1)(dictNewtype2)(dictNewtype3)(dictNewtype4)(dictNewtype5)(dictNewtype6)(dictNewtype7)(dictLacks8)(spec.handleAction)(spec.handleEvent)(act);
                                                                                                                                            },
                                                                                                                                            initialize: new Data_Maybe.Just(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                                                                                                                                return "initialize";
                                                                                                                                            }))(Data_Symbol.SProxy.value)(spec.initialize)),
                                                                                                                                            receive: Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Formless_Action.injAction))(spec.receive),
                                                                                                                                            finalize: Data_Functor.map(Data_Maybe.functorMaybe)(Formless_Action.injAction)(spec.finalize)
                                                                                                                                        })
                                                                                                                                    });
                                                                                                                                };
                                                                                                                            };
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    defaultSpec: defaultSpec,
    raiseResult: raiseResult,
    component: component,
    handleAction: handleAction,
    handleQuery: handleQuery
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Free/index.js":49,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Semigroupoid/index.js":71,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor.Variant/index.js":154,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Data.Variant.Internal/index.js":268,"../Data.Variant/index.js":269,"../Effect.Class/index.js":279,"../Effect.Ref/index.js":288,"../Formless.Action/index.js":314,"../Formless.Data.FormFieldResult/index.js":317,"../Formless.Internal.Component/index.js":318,"../Formless.Internal.Debounce/index.js":319,"../Formless.Internal.Transform/index.js":320,"../Formless.Transform.Record/index.js":322,"../Formless.Transform.Row/index.js":323,"../Formless.Types.Component/index.js":324,"../Formless.Types.Form/index.js":325,"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.Query.HalogenM/index.js":348,"../Record.Builder/index.js":382,"../Type.Equality/index.js":402}],317:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var NotValidated = (function () {
    function NotValidated() {

    };
    NotValidated.value = new NotValidated();
    return NotValidated;
})();
var Validating = (function () {
    function Validating() {

    };
    Validating.value = new Validating();
    return Validating;
})();
var $$Error = (function () {
    function $$Error(value0) {
        this.value0 = value0;
    };
    $$Error.create = function (value0) {
        return new $$Error(value0);
    };
    return $$Error;
})();
var Success = (function () {
    function Success(value0) {
        this.value0 = value0;
    };
    Success.create = function (value0) {
        return new Success(value0);
    };
    return Success;
})();
var toMaybe = function (v) {
    if (v instanceof Success) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var genericFormFieldResult = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof NotValidated) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Validating) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof $$Error) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof Success) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 19, column 8 - line 19, column 74): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return NotValidated.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return Validating.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new $$Error(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new Success(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 19, column 8 - line 19, column 74): " + [ x.constructor.name ]);
});
var showFormFieldResult = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFormFieldResult)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
            return "NotValidated";
        })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
            return "Validating";
        })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(new Data_Symbol.IsSymbol(function () {
            return "Error";
        })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow1))(new Data_Symbol.IsSymbol(function () {
            return "Success";
        })))))));
    };
};
var functorFormFieldResult = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof NotValidated) {
            return NotValidated.value;
        };
        if (m instanceof Validating) {
            return Validating.value;
        };
        if (m instanceof $$Error) {
            return new $$Error(m.value0);
        };
        if (m instanceof Success) {
            return new Success(f(m.value0));
        };
        throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 21, column 8 - line 21, column 70): " + [ m.constructor.name ]);
    };
});
var fromEither = function (v) {
    if (v instanceof Data_Either.Left) {
        return new $$Error(v.value0);
    };
    if (v instanceof Data_Either.Right) {
        return new Success(v.value0);
    };
    throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 44, column 14 - line 46, column 23): " + [ v.constructor.name ]);
};
var eqFormFieldResult = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof NotValidated && y instanceof NotValidated) {
                    return true;
                };
                if (x instanceof Validating && y instanceof Validating) {
                    return true;
                };
                if (x instanceof $$Error && y instanceof $$Error) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Success && y instanceof Success) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var applyFormFieldResult = new Control_Apply.Apply(function () {
    return functorFormFieldResult;
}, function (v) {
    return function (v1) {
        if (v instanceof Success) {
            return Data_Functor.map(functorFormFieldResult)(v.value0)(v1);
        };
        if (v instanceof $$Error) {
            return new $$Error(v.value0);
        };
        if (v instanceof Validating) {
            return Validating.value;
        };
        if (v instanceof NotValidated) {
            return NotValidated.value;
        };
        throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 23, column 1 - line 23, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindFormFieldResult = new Control_Bind.Bind(function () {
    return applyFormFieldResult;
}, function (v) {
    return function (v1) {
        if (v instanceof Success) {
            return v1(v.value0);
        };
        if (v instanceof $$Error) {
            return new $$Error(v.value0);
        };
        if (v instanceof Validating) {
            return Validating.value;
        };
        if (v instanceof NotValidated) {
            return NotValidated.value;
        };
        throw new Error("Failed pattern match at Formless.Data.FormFieldResult (line 32, column 1 - line 32, column 57): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeFormFieldResult = new Control_Applicative.Applicative(function () {
    return applyFormFieldResult;
}, Success.create);
var monadFormFieldResult = new Control_Monad.Monad(function () {
    return applicativeFormFieldResult;
}, function () {
    return bindFormFieldResult;
});
var _Success = function (dictChoice) {
    return Data_Lens_Prism["prism'"](Success.create)(function (v) {
        if (v instanceof Success) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var _Error = function (dictChoice) {
    return Data_Lens_Prism["prism'"]($$Error.create)(function (v) {
        if (v instanceof $$Error) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
module.exports = {
    NotValidated: NotValidated,
    Validating: Validating,
    "Error": $$Error,
    Success: Success,
    fromEither: fromEither,
    toMaybe: toMaybe,
    "_Error": _Error,
    "_Success": _Success,
    genericFormFieldResult: genericFormFieldResult,
    eqFormFieldResult: eqFormFieldResult,
    functorFormFieldResult: functorFormFieldResult,
    applyFormFieldResult: applyFormFieldResult,
    applicativeFormFieldResult: applicativeFormFieldResult,
    bindFormFieldResult: bindFormFieldResult,
    monadFormFieldResult: monadFormFieldResult,
    showFormFieldResult: showFormFieldResult
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Lens.Prism/index.js":187,"../Data.Maybe/index.js":197,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250}],318:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Formless_Internal_Transform = require("../Formless.Internal.Transform/index.js");
var Formless_Types_Component = require("../Formless.Types.Component/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var submit = function (dictMonadAff) {
    return function (dictRowToList) {
        return function (dictAllTouched) {
            return function (dictSetFormFieldsTouched) {
                return function (dictValidateAll) {
                    return function (dictFormFieldToMaybeOutput) {
                        return function (dictValidateAll1) {
                            return function (dictNewtype) {
                                return function (dictNewtype1) {
                                    return function (dictNewtype2) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                                var $28 = {};
                                                for (var $29 in v1) {
                                                    if ({}.hasOwnProperty.call(v1, $29)) {
                                                        $28[$29] = v1[$29];
                                                    };
                                                };
                                                $28.submitting = false;
                                                return $28;
                                            }))(function () {
                                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)((function () {
                                                    if (v.validity instanceof Formless_Types_Component.Valid) {
                                                        return Formless_Internal_Transform.formFieldsToMaybeOutputFields(dictRowToList)(dictNewtype)(dictNewtype1)(dictFormFieldToMaybeOutput)(v.form);
                                                    };
                                                    return Data_Maybe.Nothing.value;
                                                })());
                                            });
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var preSubmit = function (dictMonadAff) {
    return function (dictRowToList) {
        return function (dictAllTouched) {
            return function (dictSetFormFieldsTouched) {
                return function (dictValidateAll) {
                    return function (dictFormFieldToMaybeOutput) {
                        return function (dictValidateAll1) {
                            return function (dictNewtype) {
                                return function (dictNewtype1) {
                                    return function (dictNewtype2) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                            var $32 = {};
                                            for (var $33 in st) {
                                                if ({}.hasOwnProperty.call(st, $33)) {
                                                    $32[$33] = st[$33];
                                                };
                                            };
                                            $32.submitAttempts = st.submitAttempts + 1 | 0;
                                            $32.submitting = true;
                                            return $32;
                                        }))(function (v) {
                                            var internal = Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v.internal);
                                            return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(!internal.allTouched)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                                var $36 = {};
                                                for (var $37 in v1) {
                                                    if ({}.hasOwnProperty.call(v1, $37)) {
                                                        $36[$37] = v1[$37];
                                                    };
                                                };
                                                $36.form = Formless_Internal_Transform.setFormFieldsTouched(dictRowToList)(dictSetFormFieldsTouched)(dictNewtype)(v.form);
                                                $36.internal = Data_Newtype.over(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.newtypeInternalState)(Formless_Types_Component.InternalState)(function (v2) {
                                                    return {
                                                        allTouched: true,
                                                        debounceRef: v2.debounceRef,
                                                        initialInputs: v2.initialInputs,
                                                        validationRef: v2.validationRef,
                                                        validators: v2.validators
                                                    };
                                                })(v.internal);
                                                return $36;
                                            }));
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var getPublicState = function (dictLacks) {
    return Record_Builder.build(Record_Builder["delete"](new Data_Symbol.IsSymbol(function () {
        return "internal";
    }))((function () {
        return undefined;
    })(dictLacks))()(Data_Symbol.SProxy.value));
};
module.exports = {
    getPublicState: getPublicState,
    preSubmit: preSubmit,
    submit: submit
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Formless.Internal.Transform/index.js":320,"../Formless.Types.Component/index.js":324,"../Halogen.Query.HalogenM/index.js":348,"../Record.Builder/index.js":382}],319:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Formless_Types_Component = require("../Formless.Types.Component/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var debounceForm = function (dictMonadAff) {
    return function (ms) {
        return function (pre) {
            return function (post) {
                return function (last) {
                    var readRef = function (dictMonadAff1) {
                        return function ($29) {
                            return Effect_Class.liftEffect(dictMonadAff1.MonadEffect0())(Data_Functor.map(Effect.functorEffect)(Control_Bind.join(Data_Maybe.bindMaybe))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Effect_Ref.read)($29)));
                        };
                    };
                    var mkFiber = function (v) {
                        return Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Effect_Aff.forkAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(ms))(function () {
                            return Effect_Aff_AVar.put(Data_Unit.unit)(v);
                        })));
                    };
                    var killFiber$prime = function (dictMonadAff1) {
                        return function ($30) {
                            return Effect_Aff_Class.liftAff(dictMonadAff1)(Effect_Aff.killFiber(Effect_Exception.error("time's up!"))($30));
                        };
                    };
                    var atomic = function (dictMonadAff1) {
                        return function (process) {
                            return function (maybeLast) {
                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                                    var ref = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v.internal)).validationRef;
                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(readRef(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff1))(ref))(function (v1) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Foldable.for_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(v1)(Halogen_Query_HalogenM.kill))(function () {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff1.MonadEffect0()))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(ref)(Effect_Ref.write(Data_Maybe.Nothing.value))))(function () {
                                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.fork(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(process)(function (v2) {
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v3) {
                                                        var $18 = {};
                                                        for (var $19 in v3) {
                                                            if ({}.hasOwnProperty.call(v3, $19)) {
                                                                $18[$19] = v3[$19];
                                                            };
                                                        };
                                                        $18.form = v2;
                                                        return $18;
                                                    }))(function () {
                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff1.MonadEffect0()))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(ref)(Effect_Ref.write(Data_Maybe.Nothing.value))))(function () {
                                                            return Data_Foldable.for_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(maybeLast)(Control_Category.identity(Control_Category.categoryFn));
                                                        });
                                                    });
                                                })))(function (v2) {
                                                    return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff1.MonadEffect0()))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(ref)(Effect_Ref.write(new Data_Maybe.Just(v2))));
                                                });
                                            });
                                        });
                                    });
                                });
                            };
                        };
                    };
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v) {
                        var vdRef = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v.internal)).validationRef;
                        var dbRef = (Data_Newtype.unwrap(Formless_Types_Component.newtypeInternalState)(v.internal)).debounceRef;
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(readRef(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(vdRef))(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(Halogen_Query_HalogenM.kill)))(function () {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Functor.map(Effect.functorEffect)(Control_Bind.join(Data_Maybe.bindMaybe))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Effect_Ref.read)(dbRef))))(function (v1) {
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Effect_Aff_AVar.empty))(function (v2) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(mkFiber(v2))(function (v3) {
                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.fork(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Effect_Aff_AVar.take(v2))))(function () {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Effect_Ref.write(Data_Maybe.Nothing.value))(dbRef)))(function () {
                                                    return atomic(dictMonadAff)(post)(new Data_Maybe.Just(last));
                                                });
                                            })))(function (v4) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(dbRef)(Effect_Ref.write(new Data_Maybe.Just({
                                                    "var": v2,
                                                    fiber: v3
                                                })))))(function () {
                                                    return atomic(dictMonadAff)(pre)(Data_Maybe.Nothing.value);
                                                });
                                            });
                                        });
                                    });
                                };
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(killFiber$prime(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(v1.value0.fiber)))(function () {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(mkFiber(v1["value0"]["var"]))(function (v2) {
                                            return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(dbRef)(Effect_Ref.write(new Data_Maybe.Just({
                                                "var": v1["value0"]["var"],
                                                fiber: v2
                                            }))));
                                        });
                                    });
                                };
                                throw new Error("Failed pattern match at Formless.Internal.Debounce (line 40, column 3 - line 57, column 66): " + [ v1.constructor.name ]);
                            });
                        });
                    });
                };
            };
        };
    };
};
module.exports = {
    debounceForm: debounceForm
};

},{"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.State.Class/index.js":58,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Traversable/index.js":257,"../Data.Unit/index.js":266,"../Effect.Aff.AVar/index.js":273,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Exception/index.js":284,"../Effect.Ref/index.js":288,"../Effect/index.js":294,"../Formless.Types.Component/index.js":324,"../Halogen.Query.HalogenM/index.js":348}],320:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Formless_Data_FormFieldResult = require("../Formless.Data.FormFieldResult/index.js");
var Formless_Types_Form = require("../Formless.Types.Form/index.js");
var Formless_Validation = require("../Formless.Validation/index.js");
var Record = require("../Record/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ValidateAll = function (validateAllBuilder) {
    this.validateAllBuilder = validateAllBuilder;
};
var SetFormFieldsTouched = function (setFormFieldsTouchedBuilder) {
    this.setFormFieldsTouchedBuilder = setFormFieldsTouchedBuilder;
};
var Row1Cons = function (Cons0, Lacks1) {
    this.Cons0 = Cons0;
    this.Lacks1 = Lacks1;
};
var ReplaceFormFieldInputs = function (replaceFormFieldInputsBuilder) {
    this.replaceFormFieldInputsBuilder = replaceFormFieldInputsBuilder;
};
var ModifyAll = function (modifyAllBuilder) {
    this.modifyAllBuilder = modifyAllBuilder;
};
var InputFieldsToFormFields = function (inputFieldsToFormFieldsBuilder) {
    this.inputFieldsToFormFieldsBuilder = inputFieldsToFormFieldsBuilder;
};
var FormFieldsToInputFields = function (formFieldsToInputFieldsBuilder) {
    this.formFieldsToInputFieldsBuilder = formFieldsToInputFieldsBuilder;
};
var FormFieldToMaybeOutput = function (formFieldsToMaybeOutputBuilder) {
    this.formFieldsToMaybeOutputBuilder = formFieldsToMaybeOutputBuilder;
};
var CountErrors = function (countErrorsImpl) {
    this.countErrorsImpl = countErrorsImpl;
};
var AllTouched = function (allTouchedImpl) {
    this.allTouchedImpl = allTouchedImpl;
};
var validateAllBuilder = function (dict) {
    return dict.validateAllBuilder;
};
var unsafeRunValidationVariant = function (dictMonad) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (dictNewtype2) {
                return function ($$var) {
                    return function (vs) {
                        return function (rec) {
                            var label = (function () {
                                var v = Data_Newtype.unwrap(dictNewtype)($$var);
                                return v.type;
                            })();
                            var rec2 = (function () {
                                var v = Record_Unsafe.unsafeGet(label)(Data_Newtype.unwrap(dictNewtype1)(rec));
                                return Control_Bind.bind(dictMonad.Bind1())(Formless_Validation.runValidation(dictMonad)(Record_Unsafe.unsafeGet(label)(Data_Newtype.unwrap(dictNewtype2)(vs)))(rec)(v.input))(function (v1) {
                                    var rec$prime = Record_Unsafe.unsafeSet(label)(Formless_Types_Form.FormField({
                                        input: v.input,
                                        touched: v.touched,
                                        result: Formless_Data_FormFieldResult.fromEither(v1)
                                    }))(Data_Newtype.unwrap(dictNewtype1)(rec));
                                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_Newtype.wrap(dictNewtype1)(rec$prime));
                                });
                            })();
                            return rec2;
                        };
                    };
                };
            };
        };
    };
};
var unsafeModifyInputVariant = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (f) {
            return function ($$var) {
                return function (rec) {
                    var rep = (function () {
                        var v = Data_Newtype.unwrap(dictNewtype)($$var);
                        return new Data_Tuple.Tuple(v.type, v.value);
                    })();
                    var val = (function () {
                        var v = Record_Unsafe.unsafeGet(Data_Tuple.fst(rep))(Data_Newtype.unwrap(dictNewtype1)(rec));
                        return Formless_Types_Form.FormField({
                            input: Data_Newtype.unwrap(Formless_Types_Form.newtypeInputFunction)(Data_Tuple.snd(rep))(v.input),
                            touched: true,
                            result: f(v.result)
                        });
                    })();
                    return Data_Newtype.wrap(dictNewtype1)(Record_Unsafe.unsafeSet(Data_Tuple.fst(rep))(val)(Data_Newtype.unwrap(dictNewtype1)(rec)));
                };
            };
        };
    };
};
var setFormFieldsTouchedNil = new SetFormFieldsTouched(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var setFormFieldsTouchedBuilder = function (dict) {
    return dict.setFormFieldsTouchedBuilder;
};
var setFormFieldsTouchedCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSetFormFieldsTouched) {
            return function (dictRow1Cons) {
                return new SetFormFieldsTouched(function (v) {
                    return function (r) {
                        var rest = setFormFieldsTouchedBuilder(dictSetFormFieldsTouched)(Type_Data_RowList.RLProxy.value)(r);
                        var val = Data_Newtype.over(Formless_Types_Form.newtypeFormField)(Formless_Types_Form.newtypeFormField)(Formless_Types_Form.FormField)(function (v1) {
                            return {
                                touched: true,
                                input: v1.input,
                                result: v1.result
                            };
                        })(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r));
                        var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(val);
                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                    };
                });
            };
        };
    };
};
var row1Cons = function (dictCons) {
    return function (dictLacks) {
        return new Row1Cons(function () {
            return dictCons;
        }, function () {
            return dictLacks;
        });
    };
};
var replaceFormFieldInputsTouchedNil = new ReplaceFormFieldInputs(function (v) {
    return function (v1) {
        return function (v2) {
            return Control_Category.identity(Record_Builder.categoryBuilder);
        };
    };
});
var replaceFormFieldInputsBuilder = function (dict) {
    return dict.replaceFormFieldInputsBuilder;
};
var replaceFormFieldInputsTouchedCons = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (dictRow1Cons) {
                        return function (dictReplaceFormFieldInputs) {
                            return new ReplaceFormFieldInputs(function (ir) {
                                return function (v) {
                                    return function (fr) {
                                        var rest = replaceFormFieldInputsBuilder(dictReplaceFormFieldInputs)(ir)(Type_Data_RowList.RLProxy.value)(fr);
                                        var f = Data_Newtype.unwrap(dictNewtype1)(Record.get(dictIsSymbol)(dictCons1)(Data_Symbol.SProxy.value)(fr));
                                        var i = Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(ir);
                                        var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(Formless_Types_Form.FormField({
                                            input: Data_Newtype.unwrap(dictNewtype)(i),
                                            touched: false,
                                            result: Formless_Data_FormFieldResult.NotValidated.value
                                        }));
                                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                                    };
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var nilCountErrors = new CountErrors(function (v) {
    return function (v1) {
        return 0;
    };
});
var nilAllTouched = new AllTouched(function (v) {
    return function (v1) {
        return true;
    };
});
var modifyAllNil = new ModifyAll(function (v) {
    return function (v1) {
        return function (v2) {
            return Control_Category.identity(Record_Builder.categoryBuilder);
        };
    };
});
var modifyAllBuilder = function (dict) {
    return dict.modifyAllBuilder;
};
var modifyAllCons = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (dictRow1Cons) {
                        return function (dictModifyAll) {
                            return new ModifyAll(function (ifs) {
                                return function (v) {
                                    return function (r) {
                                        var rest = modifyAllBuilder(dictModifyAll)(ifs)(Type_Data_RowList.RLProxy.value)(r);
                                        var f = Data_Newtype.unwrap(dictNewtype)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(ifs));
                                        var field = Record.get(dictIsSymbol)(dictCons1)(Data_Symbol.SProxy.value)(r);
                                        var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Newtype.over(dictNewtype1)(dictNewtype1)(Formless_Types_Form.FormField)(function (x) {
                                            return {
                                                input: f(x.input),
                                                result: x.result,
                                                touched: x.touched
                                            };
                                        })(field));
                                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                                    };
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var inputFieldsToInputNil = new FormFieldsToInputFields(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var inputFieldsToFormFieldsNil = new InputFieldsToFormFields(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var inputFieldsToFormFieldsBuilder = function (dict) {
    return dict.inputFieldsToFormFieldsBuilder;
};
var inputFieldsToFormFieldsCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictInputFieldsToFormFields) {
            return function (dictRow1Cons) {
                return new InputFieldsToFormFields(function (v) {
                    return function (r) {
                        var transform = function (v1) {
                            return {
                                input: v1,
                                touched: false,
                                result: Formless_Data_FormFieldResult.NotValidated.value
                            };
                        };
                        var rest = inputFieldsToFormFieldsBuilder(dictInputFieldsToFormFields)(Type_Data_RowList.RLProxy.value)(r);
                        var val = transform(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r));
                        var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(val);
                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                    };
                });
            };
        };
    };
};
var fromScratch = Data_Functor.flap(Data_Functor.functorFn)(Record_Builder.build)({});
var inputFieldsToFormFields = function (dictRowToList) {
    return function (dictInputFieldsToFormFields) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (r) {
                    var builder = inputFieldsToFormFieldsBuilder(dictInputFieldsToFormFields)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype)(r));
                    return Data_Newtype.wrap(dictNewtype1)(fromScratch(builder));
                };
            };
        };
    };
};
var modifyAll = function (dictRowToList) {
    return function (dictModifyAll) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (ifs) {
                    return function (fs) {
                        var builder = modifyAllBuilder(dictModifyAll)(Data_Newtype.unwrap(dictNewtype)(ifs))(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype1)(fs));
                        return Data_Newtype.wrap(dictNewtype1)(fromScratch(builder));
                    };
                };
            };
        };
    };
};
var replaceFormFieldInputs = function (dictRowToList) {
    return function (dictReplaceFormFieldInputs) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (is) {
                    return function (fs) {
                        var builder = replaceFormFieldInputsBuilder(dictReplaceFormFieldInputs)(Data_Newtype.unwrap(dictNewtype)(is))(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype1)(fs));
                        return Data_Newtype.wrap(dictNewtype1)(fromScratch(builder));
                    };
                };
            };
        };
    };
};
var setFormFieldsTouched = function (dictRowToList) {
    return function (dictSetFormFieldsTouched) {
        return function (dictNewtype) {
            return function (r) {
                var builder = setFormFieldsTouchedBuilder(dictSetFormFieldsTouched)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype)(r));
                return Data_Newtype.wrap(dictNewtype)(fromScratch(builder));
            };
        };
    };
};
var validateAll = function (dictRowToList) {
    return function (dictMonad) {
        return function (dictValidateAll) {
            return function (dictNewtype) {
                return function (dictNewtype1) {
                    return function (vs) {
                        return function (fs) {
                            var builder = validateAllBuilder(dictValidateAll)(Data_Newtype.unwrap(dictNewtype)(vs))(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype1)(fs));
                            return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Newtype.wrap(dictNewtype1))(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(fromScratch)(builder));
                        };
                    };
                };
            };
        };
    };
};
var formFieldsToMaybeOutputNil = new FormFieldToMaybeOutput(function (v) {
    return function (v1) {
        return new Data_Maybe.Just(Control_Category.identity(Record_Builder.categoryBuilder));
    };
});
var formFieldsToMaybeOutputBuilder = function (dict) {
    return dict.formFieldsToMaybeOutputBuilder;
};
var formFieldsToMaybeOutputCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFormFieldToMaybeOutput) {
            return function (dictRow1Cons) {
                return new FormFieldToMaybeOutput(function (v) {
                    return function (r) {
                        var rest = formFieldsToMaybeOutputBuilder(dictFormFieldToMaybeOutput)(Type_Data_RowList.RLProxy.value)(r);
                        var transform = function (v1) {
                            return function (builder$prime) {
                                return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(v1))(builder$prime);
                            };
                        };
                        var val = Data_Functor.map(Data_Maybe.functorMaybe)(Formless_Types_Form.OutputField)(Formless_Data_FormFieldResult.toMaybe((Data_Newtype.unwrap(Formless_Types_Form.newtypeFormField)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r))).result));
                        return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(transform)(val))(rest);
                    };
                });
            };
        };
    };
};
var formFieldsToMaybeOutputFields = function (dictRowToList) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (dictFormFieldToMaybeOutput) {
                return function (r) {
                    var builder = formFieldsToMaybeOutputBuilder(dictFormFieldToMaybeOutput)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype)(r));
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap(dictNewtype1))(Data_Functor.map(Data_Maybe.functorMaybe)(fromScratch)(builder));
                };
            };
        };
    };
};
var formFieldsToInputFieldsBuilder = function (dict) {
    return dict.formFieldsToInputFieldsBuilder;
};
var inputFieldsToInputCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFormFieldsToInputFields) {
            return function (dictRow1Cons) {
                return new FormFieldsToInputFields(function (v) {
                    return function (r) {
                        var transform = function (v1) {
                            return v1.input;
                        };
                        var rest = formFieldsToInputFieldsBuilder(dictFormFieldsToInputFields)(Type_Data_RowList.RLProxy.value)(r);
                        var val = transform(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r));
                        var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(val);
                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                    };
                });
            };
        };
    };
};
var formFieldsToInputFields = function (dictRowToList) {
    return function (dictFormFieldsToInputFields) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (r) {
                    var builder = formFieldsToInputFieldsBuilder(dictFormFieldsToInputFields)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype1)(r));
                    return Data_Newtype.wrap(dictNewtype)(fromScratch(builder));
                };
            };
        };
    };
};
var countErrorsImpl = function (dict) {
    return dict.countErrorsImpl;
};
var countErrors = function (dictRowToList) {
    return function (dictCountErrors) {
        return function (dictNewtype) {
            return function ($146) {
                return countErrorsImpl(dictCountErrors)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype)($146));
            };
        };
    };
};
var consCountErrors = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCountErrors) {
            return new CountErrors(function (v) {
                return function (r) {
                    var res = (function () {
                        var v1 = (Data_Newtype.unwrap(Formless_Types_Form.newtypeFormField)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r))).result;
                        if (v1 instanceof Formless_Data_FormFieldResult["Error"]) {
                            return 1;
                        };
                        return 0;
                    })();
                    return res + countErrorsImpl(dictCountErrors)(Type_Data_RowList.RLProxy.value)(r) | 0;
                };
            });
        };
    };
};
var applyToValidationNil = function (dictMonad) {
    return new ValidateAll(function (v) {
        return function (v1) {
            return function (v2) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Control_Category.identity(Record_Builder.categoryBuilder));
            };
        };
    });
};
var applyToValidationCons = function (dictIsSymbol) {
    return function (dictMonad) {
        return function (dictCons) {
            return function (dictNewtype) {
                return function (dictCons1) {
                    return function (dictRow1Cons) {
                        return function (dictValidateAll) {
                            return new ValidateAll(function (vs) {
                                return function (v) {
                                    return function (r) {
                                        var rest = validateAllBuilder(dictValidateAll)(vs)(Type_Data_RowList.RLProxy.value)(r);
                                        var fn = function (val$prime) {
                                            return function (rest$prime) {
                                                return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(val$prime))(rest$prime);
                                            };
                                        };
                                        var val = (function () {
                                            var validator = Data_Newtype.unwrap(Formless_Validation.newtypeValidation)(Record.get(dictIsSymbol)(dictCons1)(Data_Symbol.SProxy.value)(vs));
                                            var formField = Data_Newtype.unwrap(Formless_Types_Form.newtypeFormField)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r));
                                            return Control_Bind.bind(dictMonad.Bind1())(validator(Data_Newtype.wrap(dictNewtype)(r))(formField.input))(function (v1) {
                                                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Newtype.wrap(Formless_Types_Form.newtypeFormField)((function () {
                                                    var $142 = {};
                                                    for (var $143 in formField) {
                                                        if ({}.hasOwnProperty.call(formField, $143)) {
                                                            $142[$143] = formField[$143];
                                                        };
                                                    };
                                                    $142.result = Formless_Data_FormFieldResult.fromEither(v1);
                                                    return $142;
                                                })()));
                                            });
                                        })();
                                        return Control_Apply.apply((dictMonad.Bind1()).Apply0())(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(fn)(val))(rest);
                                    };
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var allTouchedImpl = function (dict) {
    return dict.allTouchedImpl;
};
var consAllTouched = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictAllTouched) {
            return new AllTouched(function (v) {
                return function (r) {
                    var $145 = (Data_Newtype.unwrap(Formless_Types_Form.newtypeFormField)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(r))).touched;
                    if ($145) {
                        return allTouchedImpl(dictAllTouched)(Type_Data_RowList.RLProxy.value)(r);
                    };
                    return false;
                };
            });
        };
    };
};
var allTouched = function (dictRowToList) {
    return function (dictAllTouched) {
        return function (dictNewtype) {
            return function ($147) {
                return allTouchedImpl(dictAllTouched)(Type_Data_RowList.RLProxy.value)(Data_Newtype.unwrap(dictNewtype)($147));
            };
        };
    };
};
module.exports = {
    allTouchedImpl: allTouchedImpl,
    countErrorsImpl: countErrorsImpl,
    formFieldsToInputFieldsBuilder: formFieldsToInputFieldsBuilder,
    formFieldsToMaybeOutputBuilder: formFieldsToMaybeOutputBuilder,
    inputFieldsToFormFieldsBuilder: inputFieldsToFormFieldsBuilder,
    modifyAllBuilder: modifyAllBuilder,
    replaceFormFieldInputsBuilder: replaceFormFieldInputsBuilder,
    setFormFieldsTouchedBuilder: setFormFieldsTouchedBuilder,
    validateAllBuilder: validateAllBuilder,
    fromScratch: fromScratch,
    Row1Cons: Row1Cons,
    allTouched: allTouched,
    countErrors: countErrors,
    setFormFieldsTouched: setFormFieldsTouched,
    formFieldsToInputFields: formFieldsToInputFields,
    inputFieldsToFormFields: inputFieldsToFormFields,
    formFieldsToMaybeOutputFields: formFieldsToMaybeOutputFields,
    replaceFormFieldInputs: replaceFormFieldInputs,
    modifyAll: modifyAll,
    validateAll: validateAll,
    unsafeModifyInputVariant: unsafeModifyInputVariant,
    unsafeRunValidationVariant: unsafeRunValidationVariant,
    SetFormFieldsTouched: SetFormFieldsTouched,
    FormFieldsToInputFields: FormFieldsToInputFields,
    InputFieldsToFormFields: InputFieldsToFormFields,
    FormFieldToMaybeOutput: FormFieldToMaybeOutput,
    CountErrors: CountErrors,
    AllTouched: AllTouched,
    ValidateAll: ValidateAll,
    ModifyAll: ModifyAll,
    ReplaceFormFieldInputs: ReplaceFormFieldInputs,
    row1Cons: row1Cons,
    setFormFieldsTouchedNil: setFormFieldsTouchedNil,
    setFormFieldsTouchedCons: setFormFieldsTouchedCons,
    inputFieldsToInputNil: inputFieldsToInputNil,
    inputFieldsToInputCons: inputFieldsToInputCons,
    inputFieldsToFormFieldsNil: inputFieldsToFormFieldsNil,
    inputFieldsToFormFieldsCons: inputFieldsToFormFieldsCons,
    formFieldsToMaybeOutputNil: formFieldsToMaybeOutputNil,
    formFieldsToMaybeOutputCons: formFieldsToMaybeOutputCons,
    nilCountErrors: nilCountErrors,
    consCountErrors: consCountErrors,
    nilAllTouched: nilAllTouched,
    consAllTouched: consAllTouched,
    applyToValidationNil: applyToValidationNil,
    applyToValidationCons: applyToValidationCons,
    modifyAllNil: modifyAllNil,
    modifyAllCons: modifyAllCons,
    replaceFormFieldInputsTouchedNil: replaceFormFieldInputsTouchedNil,
    replaceFormFieldInputsTouchedCons: replaceFormFieldInputsTouchedCons
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Data.Tuple/index.js":260,"../Formless.Data.FormFieldResult/index.js":317,"../Formless.Types.Form/index.js":325,"../Formless.Validation/index.js":326,"../Record.Builder/index.js":382,"../Record.Unsafe/index.js":386,"../Record/index.js":387,"../Type.Data.RowList/index.js":401}],321:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Formless_Data_FormFieldResult = require("../Formless.Data.FormFieldResult/index.js");
var Formless_Types_Form = require("../Formless.Types.Form/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var GetTouchedField = (function () {
    function GetTouchedField() {

    };
    GetTouchedField.value = new GetTouchedField();
    return GetTouchedField;
})();
var GetResultField = (function () {
    function GetResultField() {

    };
    GetResultField.value = new GetResultField();
    return GetResultField;
})();
var GetOutput = (function () {
    function GetOutput() {

    };
    GetOutput.value = new GetOutput();
    return GetOutput;
})();
var GetInputField = (function () {
    function GetInputField() {

    };
    GetInputField.value = new GetInputField();
    return GetInputField;
})();
var GetError = (function () {
    function GetError() {

    };
    GetError.value = new GetError();
    return GetError;
})();
var getTouchedField = new Heterogeneous_Mapping.Mapping(function (v) {
    return function (v1) {
        return v1.touched;
    };
});
var getTouchedAll = function (dictHMap) {
    return function (dictNewtype) {
        return function ($79) {
            return Heterogeneous_Mapping.hmap(dictHMap)(GetTouchedField.value)(Data_Newtype.unwrap(dictNewtype)($79));
        };
    };
};
var getResultField = new Heterogeneous_Mapping.Mapping(function (v) {
    return function (v1) {
        return v1.result;
    };
});
var getResultAll = function (dictHMap) {
    return function (dictNewtype) {
        return function ($80) {
            return Heterogeneous_Mapping.hmap(dictHMap)(GetResultField.value)(Data_Newtype.unwrap(dictNewtype)($80));
        };
    };
};
var getOutputAll = function (dictHMap) {
    return function (dictNewtype) {
        return function ($81) {
            return Heterogeneous_Mapping.hmap(dictHMap)(GetOutput.value)(Data_Newtype.unwrap(dictNewtype)($81));
        };
    };
};
var getOutput$prime = new Heterogeneous_Mapping.Mapping(function (v) {
    return function (v1) {
        return Formless_Data_FormFieldResult.toMaybe(v1.result);
    };
});
var getInputField = new Heterogeneous_Mapping.Mapping(function (v) {
    return function (v1) {
        return v1.input;
    };
});
var getInputAll = function (dictHMap) {
    return function (dictNewtype) {
        return function ($82) {
            return Heterogeneous_Mapping.hmap(dictHMap)(GetInputField.value)(Data_Newtype.unwrap(dictNewtype)($82));
        };
    };
};
var getErrorResult$prime = new Heterogeneous_Mapping.Mapping(function (v) {
    return function (v1) {
        if (v1.result instanceof Formless_Data_FormFieldResult["Error"]) {
            return new Data_Maybe.Just(v1.result.value0);
        };
        return Data_Maybe.Nothing.value;
    };
});
var getErrorAll = function (dictHMap) {
    return function (dictNewtype) {
        return function ($83) {
            return Heterogeneous_Mapping.hmap(dictHMap)(GetError.value)(Data_Newtype.unwrap(dictNewtype)($83));
        };
    };
};
var _Field = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictStrong) {
                    return function ($84) {
                        return Data_Lens_Iso_Newtype["_Newtype"](dictNewtype)(dictNewtype)(dictStrong.Profunctor0())(Data_Lens_Record.prop(dictIsSymbol)(dictCons)(dictCons)(sym)(dictStrong)(Data_Lens_Iso_Newtype["_Newtype"](Formless_Types_Form.newtypeFormField)(Formless_Types_Form.newtypeFormField)(dictStrong.Profunctor0())($84)));
                    };
                };
            };
        };
    };
};
var _FieldInput = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictStrong) {
                    return function ($85) {
                        return _Field(dictIsSymbol)(dictNewtype)(dictCons)(sym)(dictStrong)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                            return "input";
                        }))()()(Data_Symbol.SProxy.value)(dictStrong)($85));
                    };
                };
            };
        };
    };
};
var getInput = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Getter.view(_FieldInput(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.strongForget));
            };
        };
    };
};
var _FieldResult = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictStrong) {
                    return function ($86) {
                        return _Field(dictIsSymbol)(dictNewtype)(dictCons)(sym)(dictStrong)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                            return "result";
                        }))()()(Data_Symbol.SProxy.value)(dictStrong)($86));
                    };
                };
            };
        };
    };
};
var _FieldError = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictWander) {
                    return function ($87) {
                        return _FieldResult(dictIsSymbol)(dictNewtype)(dictCons)(sym)(dictWander.Strong0())(Formless_Data_FormFieldResult["_Error"](dictWander.Choice1())($87));
                    };
                };
            };
        };
    };
};
var getError = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Fold.preview(_FieldError(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)));
            };
        };
    };
};
var _FieldOutput = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictWander) {
                    return function ($88) {
                        return _FieldResult(dictIsSymbol)(dictNewtype)(dictCons)(sym)(dictWander.Strong0())(Formless_Data_FormFieldResult["_Success"](dictWander.Choice1())($88));
                    };
                };
            };
        };
    };
};
var getOutput = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Fold.preview(_FieldOutput(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)));
            };
        };
    };
};
var getResult = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Getter.view(_FieldResult(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.strongForget));
            };
        };
    };
};
var _FieldTouched = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return function (dictStrong) {
                    return function ($89) {
                        return _Field(dictIsSymbol)(dictNewtype)(dictCons)(sym)(dictStrong)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                            return "touched";
                        }))()()(Data_Symbol.SProxy.value)(dictStrong)($89));
                    };
                };
            };
        };
    };
};
var getTouched = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Getter.view(_FieldTouched(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.strongForget));
            };
        };
    };
};
var getField = function (dictIsSymbol) {
    return function (dictNewtype) {
        return function (dictCons) {
            return function (sym) {
                return Data_Lens_Getter.view(_Field(dictIsSymbol)(dictNewtype)(dictCons)(sym)(Data_Lens_Internal_Forget.strongForget));
            };
        };
    };
};
module.exports = {
    getField: getField,
    getInput: getInput,
    getTouched: getTouched,
    getResult: getResult,
    getError: getError,
    getOutput: getOutput,
    getInputAll: getInputAll,
    getTouchedAll: getTouchedAll,
    getResultAll: getResultAll,
    getErrorAll: getErrorAll,
    getOutputAll: getOutputAll,
    "_Field": _Field,
    "_FieldInput": _FieldInput,
    "_FieldTouched": _FieldTouched,
    "_FieldResult": _FieldResult,
    "_FieldError": _FieldError,
    "_FieldOutput": _FieldOutput,
    GetInputField: GetInputField,
    GetTouchedField: GetTouchedField,
    GetResultField: GetResultField,
    GetError: GetError,
    GetOutput: GetOutput,
    getInputField: getInputField,
    getTouchedField: getTouchedField,
    getResultField: getResultField,
    "getErrorResult'": getErrorResult$prime,
    "getOutput'": getOutput$prime
};

},{"../Data.Lens.Fold/index.js":174,"../Data.Lens.Getter/index.js":175,"../Data.Lens.Internal.Forget/index.js":177,"../Data.Lens.Iso.Newtype/index.js":184,"../Data.Lens.Record/index.js":188,"../Data.Maybe.First/index.js":195,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Formless.Data.FormFieldResult/index.js":317,"../Formless.Types.Form/index.js":325,"../Heterogeneous.Mapping/index.js":361}],322:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Newtype = require("../Data.Newtype/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var WrapField = (function () {
    function WrapField() {

    };
    WrapField.value = new WrapField();
    return WrapField;
})();
var UnwrapField = (function () {
    function UnwrapField() {

    };
    UnwrapField.value = new UnwrapField();
    return UnwrapField;
})();
var wrapRecord = function (dictHMap) {
    return Heterogeneous_Mapping.hmap(dictHMap)(WrapField.value);
};
var wrapInputFunctions = function (dictNewtype) {
    return function (dictHMap) {
        return function ($14) {
            return Data_Newtype.wrap(dictNewtype)(wrapRecord(dictHMap)($14));
        };
    };
};
var wrapInputFields = function (dictNewtype) {
    return function (dictHMap) {
        return function ($15) {
            return Data_Newtype.wrap(dictNewtype)(wrapRecord(dictHMap)($15));
        };
    };
};
var wrapField = function (dictNewtype) {
    return new Heterogeneous_Mapping.Mapping(function (v) {
        return Data_Newtype.wrap(dictNewtype);
    });
};
var unwrapRecord = function (dictHMap) {
    return Heterogeneous_Mapping.hmap(dictHMap)(UnwrapField.value);
};
var unwrapOutputFields = function (dictNewtype) {
    return function (dictHMap) {
        return function ($16) {
            return unwrapRecord(dictHMap)(Data_Newtype.unwrap(dictNewtype)($16));
        };
    };
};
var unwrapField = function (dictNewtype) {
    return new Heterogeneous_Mapping.Mapping(function (v) {
        return Data_Newtype.unwrap(dictNewtype);
    });
};
module.exports = {
    UnwrapField: UnwrapField,
    unwrapRecord: unwrapRecord,
    WrapField: WrapField,
    wrapRecord: wrapRecord,
    unwrapOutputFields: unwrapOutputFields,
    wrapInputFields: wrapInputFields,
    wrapInputFunctions: wrapInputFunctions,
    unwrapField: unwrapField,
    wrapField: wrapField
};

},{"../Data.Newtype/index.js":207,"../Heterogeneous.Mapping/index.js":361}],323:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Formless_Class_Initial = require("../Formless.Class.Initial/index.js");
var Formless_Internal_Transform = require("../Formless.Internal.Transform/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MakeSProxies = function (makeSProxiesBuilder) {
    this.makeSProxiesBuilder = makeSProxiesBuilder;
};
var MakeInputFieldsFromRow = function (mkInputFieldsFromRowBuilder) {
    this.mkInputFieldsFromRowBuilder = mkInputFieldsFromRowBuilder;
};
var mkInputFieldsFromRowNil = new MakeInputFieldsFromRow(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var mkInputFieldsFromRowBuilder = function (dict) {
    return dict.mkInputFieldsFromRowBuilder;
};
var mkInputFieldsFromRowCons = function (dictIsSymbol) {
    return function (dictInitial) {
        return function (dictCons) {
            return function (dictMakeInputFieldsFromRow) {
                return function (dictRow1Cons) {
                    return new MakeInputFieldsFromRow(function (v) {
                        return function (r) {
                            var val = Formless_Class_Initial.initial(dictInitial);
                            var rest = mkInputFieldsFromRowBuilder(dictMakeInputFieldsFromRow)(Type_Data_RowList.RLProxy.value)(r);
                            var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(val);
                            return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                        };
                    });
                };
            };
        };
    };
};
var mkInputFields = function (dictRowToList) {
    return function (dictNewtype) {
        return function (dictMakeInputFieldsFromRow) {
            return function (v) {
                var builder = mkInputFieldsFromRowBuilder(dictMakeInputFieldsFromRow)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                return Data_Newtype.wrap(dictNewtype)(Formless_Internal_Transform.fromScratch(builder));
            };
        };
    };
};
var makeSProxiesNil = new MakeSProxies(function (v) {
    return Control_Category.identity(Record_Builder.categoryBuilder);
});
var makeSProxiesBuilder = function (dict) {
    return dict.makeSProxiesBuilder;
};
var makeSProxiesCons = function (dictIsSymbol) {
    return function (dictRow1Cons) {
        return function (dictMakeSProxies) {
            return new MakeSProxies(function (v) {
                var rest = makeSProxiesBuilder(dictMakeSProxies)(Type_Data_RowList.RLProxy.value);
                var first = Record_Builder.insert(dictRow1Cons.Cons0())(dictRow1Cons.Lacks1())(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Symbol.SProxy.value);
                return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
            });
        };
    };
};
var mkSProxies = function (dictRowToList) {
    return function (dictNewtype) {
        return function (dictMakeSProxies) {
            return function (v) {
                var builder = makeSProxiesBuilder(dictMakeSProxies)(Type_Data_RowList.RLProxy.value);
                return Formless_Internal_Transform.fromScratch(builder);
            };
        };
    };
};
module.exports = {
    makeSProxiesBuilder: makeSProxiesBuilder,
    mkInputFieldsFromRowBuilder: mkInputFieldsFromRowBuilder,
    mkInputFields: mkInputFields,
    MakeInputFieldsFromRow: MakeInputFieldsFromRow,
    mkSProxies: mkSProxies,
    MakeSProxies: MakeSProxies,
    mkInputFieldsFromRowNil: mkInputFieldsFromRowNil,
    mkInputFieldsFromRowCons: mkInputFieldsFromRowCons,
    makeSProxiesNil: makeSProxiesNil,
    makeSProxiesCons: makeSProxiesCons
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Newtype/index.js":207,"../Data.Symbol/index.js":250,"../Formless.Class.Initial/index.js":315,"../Formless.Internal.Transform/index.js":320,"../Record.Builder/index.js":382,"../Type.Data.Row/index.js":400,"../Type.Data.RowList/index.js":401}],324:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Invalid = (function () {
    function Invalid() {

    };
    Invalid.value = new Invalid();
    return Invalid;
})();
var Incomplete = (function () {
    function Incomplete() {

    };
    Incomplete.value = new Incomplete();
    return Incomplete;
})();
var Valid = (function () {
    function Valid() {

    };
    Valid.value = new Valid();
    return Valid;
})();
var SubmitReply = (function () {
    function SubmitReply(value0) {
        this.value0 = value0;
    };
    SubmitReply.create = function (value0) {
        return new SubmitReply(value0);
    };
    return SubmitReply;
})();
var SendQuery = (function () {
    function SendQuery(value0) {
        this.value0 = value0;
    };
    SendQuery.create = function (value0) {
        return new SendQuery(value0);
    };
    return SendQuery;
})();
var AsQuery = (function () {
    function AsQuery(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AsQuery.create = function (value0) {
        return function (value1) {
            return new AsQuery(value0, value1);
        };
    };
    return AsQuery;
})();
var Submitted = (function () {
    function Submitted(value0) {
        this.value0 = value0;
    };
    Submitted.create = function (value0) {
        return new Submitted(value0);
    };
    return Submitted;
})();
var Changed = (function () {
    function Changed(value0) {
        this.value0 = value0;
    };
    Changed.create = function (value0) {
        return new Changed(value0);
    };
    return Changed;
})();
var InternalState = function (x) {
    return x;
};
var newtypeInternalState = new Data_Newtype.Newtype(function (n) {
    return n;
}, InternalState);
var genericValidStatus = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Invalid) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Incomplete) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof Valid) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
    };
    throw new Error("Failed pattern match at Formless.Types.Component (line 171, column 8 - line 171, column 60): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return Invalid.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return Incomplete.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
        return Valid.value;
    };
    throw new Error("Failed pattern match at Formless.Types.Component (line 171, column 8 - line 171, column 60): " + [ x.constructor.name ]);
});
var showValidStatus = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericValidStatus)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Invalid";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Incomplete";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Valid";
}))))));
var functorQueryF = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof SubmitReply) {
            return new SubmitReply(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
        };
        if (m instanceof SendQuery) {
            return new SendQuery(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(m.value0));
        };
        if (m instanceof AsQuery) {
            return new AsQuery(m.value0, f(m.value1));
        };
        throw new Error("Failed pattern match at Formless.Types.Component (line 88, column 8 - line 88, column 61): " + [ m.constructor.name ]);
    };
});
var eqValidStatus = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Invalid && y instanceof Invalid) {
            return true;
        };
        if (x instanceof Incomplete && y instanceof Incomplete) {
            return true;
        };
        if (x instanceof Valid && y instanceof Valid) {
            return true;
        };
        return false;
    };
});
var ordValidStatus = new Data_Ord.Ord(function () {
    return eqValidStatus;
}, function (x) {
    return function (y) {
        if (x instanceof Invalid && y instanceof Invalid) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Invalid) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Invalid) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Incomplete && y instanceof Incomplete) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Incomplete) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Incomplete) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Valid && y instanceof Valid) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Formless.Types.Component (line 173, column 8 - line 173, column 50): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var _formless = Data_Symbol.SProxy.value;
module.exports = {
    SubmitReply: SubmitReply,
    SendQuery: SendQuery,
    AsQuery: AsQuery,
    InternalState: InternalState,
    Invalid: Invalid,
    Incomplete: Incomplete,
    Valid: Valid,
    Submitted: Submitted,
    Changed: Changed,
    "_formless": _formless,
    functorQueryF: functorQueryF,
    newtypeInternalState: newtypeInternalState,
    genericValidStatus: genericValidStatus,
    eqValidStatus: eqValidStatus,
    ordValidStatus: ordValidStatus,
    showValidStatus: showValidStatus
};

},{"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Halogen.Query.ChildQuery/index.js":346}],325:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Formless_Data_FormFieldResult = require("../Formless.Data.FormFieldResult/index.js");
var U = (function () {
    function U() {

    };
    U.value = new U();
    return U;
})();
var OutputField = function (x) {
    return x;
};
var InputFunction = function (x) {
    return x;
};
var InputField = function (x) {
    return x;
};
var FormProxy = (function () {
    function FormProxy() {

    };
    FormProxy.value = new FormProxy();
    return FormProxy;
})();
var FormField = function (x) {
    return x;
};
var newtypeOutputField = new Data_Newtype.Newtype(function (n) {
    return n;
}, OutputField);
var newtypeInputFunction = new Data_Newtype.Newtype(function (n) {
    return n;
}, InputFunction);
var newtypeInputField = new Data_Newtype.Newtype(function (n) {
    return n;
}, InputField);
var newtypeFormField = new Data_Newtype.Newtype(function (n) {
    return n;
}, FormField);
var eqOutputField = function (dictEq) {
    return dictEq;
};
var eqInputField = function (dictEq) {
    return dictEq;
};
var eqFormField = function (dictEq) {
    return function (dictEq1) {
        return function (dictEq2) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    return Data_Eq.eq(dictEq1)(x.input)(y.input) && Data_Eq.eq(Formless_Data_FormFieldResult.eqFormFieldResult(dictEq)(dictEq2))(x.result)(y.result) && x.touched === y.touched;
                };
            });
        };
    };
};
module.exports = {
    FormProxy: FormProxy,
    InputField: InputField,
    OutputField: OutputField,
    U: U,
    InputFunction: InputFunction,
    FormField: FormField,
    newtypeInputField: newtypeInputField,
    eqInputField: eqInputField,
    newtypeOutputField: newtypeOutputField,
    eqOutputField: eqOutputField,
    newtypeInputFunction: newtypeInputFunction,
    newtypeFormField: newtypeFormField,
    eqFormField: eqFormField
};

},{"../Data.Eq/index.js":133,"../Data.Newtype/index.js":207,"../Formless.Data.FormFieldResult/index.js":317}],326:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Heterogeneous_Mapping = require("../Heterogeneous.Mapping/index.js");
var Validation = function (x) {
    return x;
};
var EmptyValidators = (function () {
    function EmptyValidators() {

    };
    EmptyValidators.value = new EmptyValidators();
    return EmptyValidators;
})();
var semigroupValidation = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return function (form) {
                return function (i) {
                    return Data_Semigroup.append(dictSemigroup)(v(form)(i))(v1(form)(i));
                };
            };
        };
    });
};
var noValidators = function (dictMonad) {
    return function (dictRowToList) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (dictMapRecordWithIndex) {
                    return function ($48) {
                        return Data_Newtype.wrap(dictNewtype)(Heterogeneous_Mapping.hmap(Heterogeneous_Mapping.hmapRecord(dictRowToList)(dictMapRecordWithIndex))(EmptyValidators.value)(Data_Newtype.unwrap(dictNewtype1)($48)));
                    };
                };
            };
        };
    };
};
var newtypeValidation = new Data_Newtype.Newtype(function (n) {
    return n;
}, Validation);
var runValidation = function (dictMonad) {
    return Data_Newtype.unwrap(newtypeValidation);
};
var semigroupoidValidation = function (dictMonad) {
    return new Control_Semigroupoid.Semigroupoid(function (v1) {
        return function (v0) {
            return function (form) {
                return function (i) {
                    return Control_Bind.bind(dictMonad.Bind1())(Data_Newtype.unwrap(newtypeValidation)(v0)(form)(i))(function (v) {
                        return Data_Either.either(function ($49) {
                            return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($49));
                        })(Data_Newtype.unwrap(newtypeValidation)(v1)(form))(v);
                    });
                };
            };
        };
    });
};
var monoidValidation = function (dictApplicative) {
    return function (dictMonoid) {
        return function (dictSemigroup) {
            return new Data_Monoid.Monoid(function () {
                return semigroupValidation(dictMonoid.Semigroup0());
            }, Validation(Data_Function["const"](Control_Applicative.pure(Control_Applicative.applicativeFn)(Data_Monoid.mempty(dictMonoid)))));
        };
    };
};
var hoistFn_ = function (dictMonad) {
    return function (f) {
        return Validation(Data_Function["const"](function ($50) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Control_Applicative.pure(Data_Either.applicativeEither)(f($50)));
        }));
    };
};
var noValidation = function (dictMonad) {
    return hoistFn_(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var hoistFnME_ = function (dictMonad) {
    return function ($51) {
        return Validation(Data_Function["const"]($51));
    };
};
var hoistFnME = function (dictMonad) {
    return Validation;
};
var hoistFnE_ = function (dictMonad) {
    return function (f) {
        return Validation(Data_Function["const"](function ($52) {
            return Control_Applicative.pure(dictMonad.Applicative0())(f($52));
        }));
    };
};
var hoistFnE = function (dictMonad) {
    return function (f) {
        return Validation(function (form) {
            return function ($53) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(form)($53));
            };
        });
    };
};
var hoistFn = function (dictMonad) {
    return function (f) {
        return Validation(function (form) {
            return function ($54) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Control_Applicative.pure(Data_Either.applicativeEither)(f(form)($54)));
            };
        });
    };
};
var functorValidation = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (m) {
            return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f))))(m);
        };
    });
};
var emptyValidators = function (dictMonad) {
    return new Heterogeneous_Mapping.Mapping(function (v) {
        return Data_Function["const"](hoistFn_(dictMonad)(Control_Category.identity(Control_Category.categoryFn)));
    });
};
var categoryValidation = function (dictMonad) {
    return new Control_Category.Category(function () {
        return semigroupoidValidation(dictMonad);
    }, Validation(function (v) {
        return function ($55) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Control_Applicative.pure(Data_Either.applicativeEither)($55));
        };
    }));
};
var applyValidation = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorValidation(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (vf) {
        return function (va) {
            return function (form) {
                return function (i) {
                    return Control_Bind.bind(dictMonad.Bind1())(Data_Newtype.unwrap(newtypeValidation)(vf)(form)(i))(function (v) {
                        return Control_Bind.bind(dictMonad.Bind1())(Data_Newtype.unwrap(newtypeValidation)(va)(form)(i))(function (v1) {
                            return Control_Applicative.pure(dictMonad.Applicative0())(Control_Apply.apply(Data_Either.applyEither)(v)(v1));
                        });
                    });
                };
            };
        };
    });
};
var applicativeValidation = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyValidation(dictMonad);
    }, function ($56) {
        return Validation(Data_Function["const"](Data_Function["const"](Control_Applicative.pure(dictMonad.Applicative0())(Control_Applicative.pure(Data_Either.applicativeEither)($56)))));
    });
};
var altValidation = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorValidation(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (v0) {
        return function (v1) {
            return function (form) {
                return function (i) {
                    return Control_Bind.bind(dictMonad.Bind1())(Data_Newtype.unwrap(newtypeValidation)(v0)(form)(i))(function (v) {
                        return Control_Bind.bind(dictMonad.Bind1())(Data_Newtype.unwrap(newtypeValidation)(v1)(form)(i))(function (v2) {
                            return Control_Applicative.pure(dictMonad.Applicative0())(Control_Alt.alt(Data_Either.altEither)(v)(v2));
                        });
                    });
                };
            };
        };
    });
};
module.exports = {
    Validation: Validation,
    runValidation: runValidation,
    hoistFn: hoistFn,
    hoistFn_: hoistFn_,
    hoistFnE: hoistFnE,
    hoistFnE_: hoistFnE_,
    hoistFnME: hoistFnME,
    hoistFnME_: hoistFnME_,
    noValidators: noValidators,
    noValidation: noValidation,
    EmptyValidators: EmptyValidators,
    newtypeValidation: newtypeValidation,
    functorValidation: functorValidation,
    applyValidation: applyValidation,
    applicativeValidation: applicativeValidation,
    altValidation: altValidation,
    semigroupValidation: semigroupValidation,
    monoidValidation: monoidValidation,
    semigroupoidValidation: semigroupoidValidation,
    categoryValidation: categoryValidation,
    emptyValidators: emptyValidators
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Either/index.js":129,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Semigroup/index.js":230,"../Heterogeneous.Mapping/index.js":361}],327:[function(require,module,exports){
/* globals exports, JSON */
"use strict";

exports.unsafeStringify = function (x) {
  return JSON.stringify(x);
};

exports.unsafeToFixed = function (digits) {
  return function (n) {
    return n.toFixed(digits);
  };
};

exports.unsafeToExponential = function (digits) {
  return function (n) {
    return n.toExponential(digits);
  };
};

exports.unsafeToPrecision  = function (digits) {
  return function (n) {
    return n.toPrecision(digits);
  };
};

exports.unsafeDecodeURI = decodeURI;
exports.unsafeEncodeURI = encodeURI;
exports.unsafeDecodeURIComponent = decodeURIComponent;
exports.unsafeEncodeURIComponent = encodeURIComponent;

},{}],328:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeStringify: $foreign.unsafeStringify,
    unsafeToFixed: $foreign.unsafeToFixed,
    unsafeToExponential: $foreign.unsafeToExponential,
    unsafeToPrecision: $foreign.unsafeToPrecision,
    unsafeDecodeURI: $foreign.unsafeDecodeURI,
    unsafeEncodeURI: $foreign.unsafeEncodeURI,
    unsafeDecodeURIComponent: $foreign.unsafeDecodeURIComponent,
    unsafeEncodeURIComponent: $foreign.unsafeEncodeURIComponent
};

},{"./foreign.js":327}],329:[function(require,module,exports){
/* globals exports */
"use strict";

exports.nan = NaN;

exports.isNaN = isNaN;

exports.infinity = Infinity;

exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

var formatNumber = function (format) {
  return function (fail, succ, digits, n) {
    try {
      return succ(n[format](digits));
    }
    catch (e) {
      return fail(e.message);
    }
  };
};

exports._toFixed = formatNumber("toFixed");
exports._toExponential = formatNumber("toExponential");
exports._toPrecision = formatNumber("toPrecision");

var encdecURI = function (encdec) {
  return function (fail, succ, s) {
    try {
      return succ(encdec(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
};

exports._decodeURI = encdecURI(decodeURI);
exports._encodeURI = encdecURI(encodeURI);
exports._decodeURIComponent = encdecURI(decodeURIComponent);
exports._encodeURIComponent = encdecURI(encodeURIComponent);

},{}],330:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var toPrecision = function (digits) {
    return function (n) {
        return $foreign["_toPrecision"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toFixed = function (digits) {
    return function (n) {
        return $foreign["_toFixed"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var toExponential = function (digits) {
    return function (n) {
        return $foreign["_toExponential"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
    };
};
var $$encodeURIComponent = function (s) {
    return $foreign["_encodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$encodeURI = function (s) {
    return $foreign["_encodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURIComponent = function (s) {
    return $foreign["_decodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
var $$decodeURI = function (s) {
    return $foreign["_decodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};
module.exports = {
    toFixed: toFixed,
    toExponential: toExponential,
    toPrecision: toPrecision,
    "decodeURI": $$decodeURI,
    "encodeURI": $$encodeURI,
    "decodeURIComponent": $$decodeURIComponent,
    "encodeURIComponent": $$encodeURIComponent,
    nan: $foreign.nan,
    "isNaN": $foreign["isNaN"],
    infinity: $foreign.infinity,
    "isFinite": $foreign["isFinite"],
    readInt: $foreign.readInt,
    readFloat: $foreign.readFloat
};

},{"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"./foreign.js":329}],331:[function(require,module,exports){
/* global exports */
"use strict";

exports.canvasElementToImageSource = function(e) {
    return e;
};

exports.tryLoadImageImpl = function (src) {
  return function(e) {
        return function(f) {
            return function () {
                var img = new Image();
                img.src = src;
                img.addEventListener("load", function() {
                    f(img)();
                }, false);
                img.addEventListener("error", function(error) {
                    e();
                }, false);
            }
        }
    };
};

exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
    return function() {
        var el = document.getElementById(id);
        if (el && el instanceof HTMLCanvasElement) {
            return Just(el);
        } else {
            return Nothing;
        }
    };
};

exports.getContext2D = function(c) {
    return function() {
        return c.getContext('2d');
    };
};

exports.getCanvasWidth = function(canvas) {
    return function() {
        return canvas.width;
    };
};

exports.getCanvasHeight = function(canvas) {
    return function() {
        return canvas.height;
    };
};

exports.setCanvasWidth = function(canvas) {
    return function(width) {
        return function() {
            canvas.width = width;
        };
    };
};

exports.setCanvasHeight = function(canvas) {
    return function(height) {
        return function() {
            canvas.height = height;
        };
    };
};

exports.canvasToDataURL = function(canvas) {
    return function() {
        return canvas.toDataURL();
    };
};

exports.setLineWidth = function(ctx) {
    return function(width) {
        return function() {
            ctx.lineWidth = width;
        };
    };
};

exports.setLineDash = function(ctx) {
    return function(dash) {
        return function() {
            ctx.setLineDash(dash);
        };
    };
};

exports.setFillStyle = function(ctx) {
    return function(style) {
        return function() {
            ctx.fillStyle = style;
        };
    };
};

exports.setStrokeStyle = function(ctx) {
    return function(style) {
        return function() {
            ctx.strokeStyle = style;
        };
    };
};

exports.setShadowColor = function(ctx) {
    return function(color) {
        return function() {
            ctx.shadowColor = color;
        };
    };
};

exports.setShadowBlur = function(ctx) {
    return function(blur) {
        return function() {
            ctx.shadowBlur = blur;
        };
    };
};

exports.setShadowOffsetX = function(ctx) {
    return function(offsetX) {
        return function() {
            ctx.shadowOffsetX = offsetX;
        };
    };
};

exports.setShadowOffsetY = function(ctx) {
    return function(offsetY) {
        return function() {
            ctx.shadowOffsetY = offsetY;
        };
    };
};

exports.setMiterLimit = function(ctx) {
    return function(limit) {
        return function() {
            ctx.miterLimit = limit;
        };
    };
};

exports.setLineCapImpl = function(ctx) {
    return function(cap) {
        return function() {
            ctx.lineCap = cap;
        };
    };
};

exports.setLineJoinImpl = function(ctx) {
    return function(join) {
        return function() {
            ctx.lineJoin = join;
        };
    };
};

exports.setGlobalCompositeOperationImpl = function(ctx) {
    return function(op) {
        return function() {
            ctx.globalCompositeOperation = op;
        };
    };
};

exports.setGlobalAlpha = function(ctx) {
    return function(alpha) {
        return function() {
            ctx.globalAlpha = alpha;
        };
    };
};

exports.beginPath = function(ctx) {
    return function() {
        ctx.beginPath();
    };
};

exports.stroke = function(ctx) {
    return function() {
        ctx.stroke();
    };
};

exports.fill = function(ctx) {
    return function() {
        ctx.fill();
    };
};

exports.clip = function(ctx) {
    return function() {
        ctx.clip();
    };
};

exports.lineTo = function(ctx) {
    return function(x) {
        return function(y) {
            return function() {
                ctx.lineTo(x, y);
            };
        };
    };
};

exports.moveTo = function(ctx) {
    return function(x) {
        return function(y) {
            return function() {
                ctx.moveTo(x, y);
            };
        };
    };
};

exports.closePath = function(ctx) {
    return function() {
        ctx.closePath();
    };
};

exports.arc = function(ctx) {
    return function(a) {
        return function() {
            ctx.arc(a.x, a.y, a.radius, a.start, a.end);
        };
    };
};

exports.rect = function(ctx) {
    return function(r) {
        return function() {
            ctx.rect(r.x, r.y, r.width, r.height);
        };
    };
};

exports.fillRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.fillRect(r.x, r.y, r.width, r.height);
        };
    };
};

exports.strokeRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.strokeRect(r.x, r.y, r.width, r.height);
        };
    };
};

exports.clearRect = function(ctx) {
    return function(r) {
        return function() {
            ctx.clearRect(r.x, r.y, r.width, r.height);
        };
    };
};

exports.scale = function(ctx) {
    return function(t) {
        return function() {
            ctx.scale(t.scaleX, t.scaleY);
        };
    };
};

exports.rotate = function(ctx) {
    return function(angle) {
        return function() {
            ctx.rotate(angle);
        };
    };
};

exports.translate = function(ctx) {
    return function(t) {
        return function() {
            ctx.translate(t.translateX, t.translateY);
        };
    };
};

exports.transform = function(ctx) {
    return function(t) {
        return function() {
            ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
        };
    };
};

exports.setTransform = function(ctx) {
    return function(t) {
        return function() {
            ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
        };
    };
};

exports.textAlignImpl = function(ctx) {
    return function() {
        return ctx.textAlign;
    }
};

exports.setTextAlignImpl = function(ctx) {
    return function(textAlign) {
        return function() {
            ctx.textAlign = textAlign;
        }
    }
};

exports.font = function(ctx) {
    return function() {
        return ctx.font;
    };
};

exports.setFont = function(ctx) {
    return function(fontspec) {
        return function() {
            ctx.font = fontspec;
        };
    };
};

exports.fillText = function(ctx) {
    return function(text) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.fillText(text, x, y);
                };
            };
        };
    };
};

exports.strokeText = function(ctx) {
    return function(text) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.strokeText(text, x, y);
                };
            };
        };
    };
};

exports.measureText = function(ctx) {
    return function(text) {
        return function() {
            return ctx.measureText(text);
        };
    };
};

exports.save = function(ctx) {
    return function() {
        ctx.save();
    };
};

exports.restore = function(ctx) {
    return function() {
        ctx.restore();
    };
};

exports.imageDataWidth = function(image) {
    return image.width;
};

exports.imageDataHeight = function(image) {
    return image.height;
};

exports.imageDataBuffer = function(image) {
    return image.data;
};

exports.getImageData = function(ctx) {
    return function(x) {
        return function(y) {
            return function(w) {
                return function(h) {
                    return function() {
                        return ctx.getImageData(x, y, w, h);
                    };
                };
            };
        };
    };
};

exports.putImageDataFull = function(ctx) {
    return function(image_data) {
        return function(x) {
            return function(y) {
                return function(dx) {
                    return function(dy) {
                        return function(dw) {
                            return function(dh) {
                                return function() {
                                    ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

exports.putImageData = function(ctx) {
    return function(image_data) {
        return function(x) {
            return function(y) {
                return function() {
                    ctx.putImageData(image_data, x, y);
                };
            };
        };
    };
};

exports.createImageData = function(ctx) {
    return function(sw) {
        return function(sh) {
            return function() {
                return ctx.createImageData(sw, sh);
            };
        };
    };
};

exports.createImageDataCopy = function(ctx) {
    return function(image_data) {
        return function() {
            return ctx.createImageData(image_data);
        };
    };
};

exports.drawImage = function(ctx) {
    return function(image_source) {
        return function(dx) {
            return function(dy) {
                return function() {
                    ctx.drawImage(image_source, dx, dy);
                };
            };
        };
    };
};

exports.drawImageScale = function(ctx) {
    return function(image_source) {
        return function(dx) {
            return function(dy) {
                return function(dWidth) {
                    return function(dHeight) {
                        return function() {
                            ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                        };
                    };
                };
            };
        };
    };
};

exports.drawImageFull = function(ctx) {
    return function(image_source) {
        return function(sx) {
            return function(sy) {
                return function(sWidth) {
                    return function(sHeight) {
                        return function(dx) {
                            return function(dy) {
                                return function(dWidth) {
                                    return function(dHeight) {
                                        return function() {
                                            ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

exports.createPatternImpl = function(ctx) {
    return function(img) {
        return function(repeat) {
            return function() {
                return ctx.createPattern(img, repeat);
            };
        };
    };
};

exports.setPatternFillStyle = function(ctx) {
    return function(pattern) {
        return function() {
            ctx.fillStyle = pattern;
        };
    };
};

exports.createLinearGradient = function(ctx) {
    return function(linearGradient) {
        return function() {
            return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
        };
    };
};

exports.createRadialGradient = function(ctx) {
    return function(radialGradient) {
        return function() {
            return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
        };
    };
};

exports.addColorStop = function(gradient) {
    return function(stop) {
        return function(color) {
            return function() {
                gradient.addColorStop(stop, color);
            };
        };
    };
};

exports.setGradientFillStyle = function(ctx) {
    return function(gradient) {
        return function() {
            ctx.fillStyle = gradient;
        };
    };
};

exports.quadraticCurveTo = function(ctx) {
    return function(qCurve) {
        return function() {
            ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
        };
    };
};

exports.bezierCurveTo = function(ctx) {
    return function(bCurve) {
        return function() {
            ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
        };
    };
};

},{}],332:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception_Unsafe = require("../Effect.Exception.Unsafe/index.js");
var AlignLeft = (function () {
    function AlignLeft() {

    };
    AlignLeft.value = new AlignLeft();
    return AlignLeft;
})();
var AlignRight = (function () {
    function AlignRight() {

    };
    AlignRight.value = new AlignRight();
    return AlignRight;
})();
var AlignCenter = (function () {
    function AlignCenter() {

    };
    AlignCenter.value = new AlignCenter();
    return AlignCenter;
})();
var AlignStart = (function () {
    function AlignStart() {

    };
    AlignStart.value = new AlignStart();
    return AlignStart;
})();
var AlignEnd = (function () {
    function AlignEnd() {

    };
    AlignEnd.value = new AlignEnd();
    return AlignEnd;
})();
var Repeat = (function () {
    function Repeat() {

    };
    Repeat.value = new Repeat();
    return Repeat;
})();
var RepeatX = (function () {
    function RepeatX() {

    };
    RepeatX.value = new RepeatX();
    return RepeatX;
})();
var RepeatY = (function () {
    function RepeatY() {

    };
    RepeatY.value = new RepeatY();
    return RepeatY;
})();
var NoRepeat = (function () {
    function NoRepeat() {

    };
    NoRepeat.value = new NoRepeat();
    return NoRepeat;
})();
var BevelJoin = (function () {
    function BevelJoin() {

    };
    BevelJoin.value = new BevelJoin();
    return BevelJoin;
})();
var RoundJoin = (function () {
    function RoundJoin() {

    };
    RoundJoin.value = new RoundJoin();
    return RoundJoin;
})();
var MiterJoin = (function () {
    function MiterJoin() {

    };
    MiterJoin.value = new MiterJoin();
    return MiterJoin;
})();
var Round = (function () {
    function Round() {

    };
    Round.value = new Round();
    return Round;
})();
var Square = (function () {
    function Square() {

    };
    Square.value = new Square();
    return Square;
})();
var Butt = (function () {
    function Butt() {

    };
    Butt.value = new Butt();
    return Butt;
})();
var SourceOver = (function () {
    function SourceOver() {

    };
    SourceOver.value = new SourceOver();
    return SourceOver;
})();
var SourceIn = (function () {
    function SourceIn() {

    };
    SourceIn.value = new SourceIn();
    return SourceIn;
})();
var SourceOut = (function () {
    function SourceOut() {

    };
    SourceOut.value = new SourceOut();
    return SourceOut;
})();
var SourceAtop = (function () {
    function SourceAtop() {

    };
    SourceAtop.value = new SourceAtop();
    return SourceAtop;
})();
var DestinationOver = (function () {
    function DestinationOver() {

    };
    DestinationOver.value = new DestinationOver();
    return DestinationOver;
})();
var DestinationIn = (function () {
    function DestinationIn() {

    };
    DestinationIn.value = new DestinationIn();
    return DestinationIn;
})();
var DestinationOut = (function () {
    function DestinationOut() {

    };
    DestinationOut.value = new DestinationOut();
    return DestinationOut;
})();
var DestinationAtop = (function () {
    function DestinationAtop() {

    };
    DestinationAtop.value = new DestinationAtop();
    return DestinationAtop;
})();
var Lighter = (function () {
    function Lighter() {

    };
    Lighter.value = new Lighter();
    return Lighter;
})();
var Copy = (function () {
    function Copy() {

    };
    Copy.value = new Copy();
    return Copy;
})();
var Xor = (function () {
    function Xor() {

    };
    Xor.value = new Xor();
    return Xor;
})();
var Multiply = (function () {
    function Multiply() {

    };
    Multiply.value = new Multiply();
    return Multiply;
})();
var Screen = (function () {
    function Screen() {

    };
    Screen.value = new Screen();
    return Screen;
})();
var Overlay = (function () {
    function Overlay() {

    };
    Overlay.value = new Overlay();
    return Overlay;
})();
var Darken = (function () {
    function Darken() {

    };
    Darken.value = new Darken();
    return Darken;
})();
var Lighten = (function () {
    function Lighten() {

    };
    Lighten.value = new Lighten();
    return Lighten;
})();
var ColorDodge = (function () {
    function ColorDodge() {

    };
    ColorDodge.value = new ColorDodge();
    return ColorDodge;
})();
var ColorBurn = (function () {
    function ColorBurn() {

    };
    ColorBurn.value = new ColorBurn();
    return ColorBurn;
})();
var HardLight = (function () {
    function HardLight() {

    };
    HardLight.value = new HardLight();
    return HardLight;
})();
var SoftLight = (function () {
    function SoftLight() {

    };
    SoftLight.value = new SoftLight();
    return SoftLight;
})();
var Difference = (function () {
    function Difference() {

    };
    Difference.value = new Difference();
    return Difference;
})();
var Exclusion = (function () {
    function Exclusion() {

    };
    Exclusion.value = new Exclusion();
    return Exclusion;
})();
var Hue = (function () {
    function Hue() {

    };
    Hue.value = new Hue();
    return Hue;
})();
var Saturation = (function () {
    function Saturation() {

    };
    Saturation.value = new Saturation();
    return Saturation;
})();
var Color = (function () {
    function Color() {

    };
    Color.value = new Color();
    return Color;
})();
var Luminosity = (function () {
    function Luminosity() {

    };
    Luminosity.value = new Luminosity();
    return Luminosity;
})();
var withContext = function (ctx) {
    return function (action) {
        return function __do() {
            var v = $foreign.save(ctx)();
            var v1 = action();
            var v2 = $foreign.restore(ctx)();
            return v1;
        };
    };
};
var tryLoadImage = function (path) {
    return function (k) {
        return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($40) {
            return k(Data_Maybe.Just.create($40));
        });
    };
};
var textAlign = function (ctx) {
    var unsafeParseTextAlign = function (v) {
        if (v === "left") {
            return AlignLeft.value;
        };
        if (v === "right") {
            return AlignRight.value;
        };
        if (v === "center") {
            return AlignCenter.value;
        };
        if (v === "start") {
            return AlignStart.value;
        };
        if (v === "end") {
            return AlignEnd.value;
        };
        return Effect_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
    };
    return Data_Functor.map(Effect.functorEffect)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
};
var strokePath = function (ctx) {
    return function (path) {
        return function __do() {
            var v = $foreign.beginPath(ctx)();
            var v1 = path();
            var v2 = $foreign.stroke(ctx)();
            return v1;
        };
    };
};
var showTextAlign = new Data_Show.Show(function (v) {
    if (v instanceof AlignLeft) {
        return "AlignLeft";
    };
    if (v instanceof AlignRight) {
        return "AlignRight";
    };
    if (v instanceof AlignCenter) {
        return "AlignCenter";
    };
    if (v instanceof AlignStart) {
        return "AlignStart";
    };
    if (v instanceof AlignEnd) {
        return "AlignEnd";
    };
    throw new Error("Failed pattern match at Graphics.Canvas (line 489, column 1 - line 489, column 41): " + [ v.constructor.name ]);
});
var showPatternRepeat = new Data_Show.Show(function (v) {
    if (v instanceof Repeat) {
        return "Repeat";
    };
    if (v instanceof RepeatX) {
        return "RepeatX";
    };
    if (v instanceof RepeatY) {
        return "RepeatY";
    };
    if (v instanceof NoRepeat) {
        return "NoRepeat";
    };
    throw new Error("Failed pattern match at Graphics.Canvas (line 599, column 1 - line 599, column 49): " + [ v.constructor.name ]);
});
var showComposite = new Data_Show.Show(function (v) {
    if (v instanceof SourceOver) {
        return "SourceOver";
    };
    if (v instanceof SourceIn) {
        return "SourceIn";
    };
    if (v instanceof SourceOut) {
        return "SourceOut";
    };
    if (v instanceof SourceAtop) {
        return "SourceAtop";
    };
    if (v instanceof DestinationOver) {
        return "DestinationOver";
    };
    if (v instanceof DestinationIn) {
        return "DestinationIn";
    };
    if (v instanceof DestinationOut) {
        return "DestinationOut";
    };
    if (v instanceof DestinationAtop) {
        return "DestinationAtop";
    };
    if (v instanceof Lighter) {
        return "Lighter";
    };
    if (v instanceof Copy) {
        return "Copy";
    };
    if (v instanceof Xor) {
        return "Xor";
    };
    if (v instanceof Multiply) {
        return "Multiply";
    };
    if (v instanceof Screen) {
        return "Screen";
    };
    if (v instanceof Overlay) {
        return "Overlay";
    };
    if (v instanceof Darken) {
        return "Darken";
    };
    if (v instanceof Lighten) {
        return "Lighten";
    };
    if (v instanceof ColorDodge) {
        return "ColorDodge";
    };
    if (v instanceof ColorBurn) {
        return "ColorBurn";
    };
    if (v instanceof HardLight) {
        return "HardLight";
    };
    if (v instanceof SoftLight) {
        return "SoftLight";
    };
    if (v instanceof Difference) {
        return "Difference";
    };
    if (v instanceof Exclusion) {
        return "Exclusion";
    };
    if (v instanceof Hue) {
        return "Hue";
    };
    if (v instanceof Saturation) {
        return "Saturation";
    };
    if (v instanceof Color) {
        return "Color";
    };
    if (v instanceof Luminosity) {
        return "Luminosity";
    };
    throw new Error("Failed pattern match at Graphics.Canvas (line 284, column 1 - line 284, column 41): " + [ v.constructor.name ]);
});
var setTextAlign = function (ctx) {
    return function (textalign) {
        var toString = function (v) {
            if (v instanceof AlignLeft) {
                return "left";
            };
            if (v instanceof AlignRight) {
                return "right";
            };
            if (v instanceof AlignCenter) {
                return "center";
            };
            if (v instanceof AlignStart) {
                return "start";
            };
            if (v instanceof AlignEnd) {
                return "end";
            };
            throw new Error("Failed pattern match at Graphics.Canvas (line 518, column 5 - line 519, column 5): " + [ v.constructor.name ]);
        };
        return $foreign.setTextAlignImpl(ctx)(toString(textalign));
    };
};
var setLineJoin = function (context) {
    return function (v) {
        if (v instanceof BevelJoin) {
            return $foreign.setLineJoinImpl(context)("bevel");
        };
        if (v instanceof RoundJoin) {
            return $foreign.setLineJoinImpl(context)("round");
        };
        if (v instanceof MiterJoin) {
            return $foreign.setLineJoinImpl(context)("miter");
        };
        throw new Error("Failed pattern match at Graphics.Canvas (line 247, column 1 - line 247, column 52): " + [ context.constructor.name, v.constructor.name ]);
    };
};
var setLineCap = function (context) {
    return function (v) {
        if (v instanceof Round) {
            return $foreign.setLineCapImpl(context)("round");
        };
        if (v instanceof Square) {
            return $foreign.setLineCapImpl(context)("square");
        };
        if (v instanceof Butt) {
            return $foreign.setLineCapImpl(context)("butt");
        };
        throw new Error("Failed pattern match at Graphics.Canvas (line 234, column 1 - line 234, column 50): " + [ context.constructor.name, v.constructor.name ]);
    };
};
var setGlobalCompositeOperation = function (ctx) {
    return function (composite) {
        var toString = function (v) {
            if (v instanceof SourceOver) {
                return "source-over";
            };
            if (v instanceof SourceIn) {
                return "source-in";
            };
            if (v instanceof SourceOut) {
                return "source-out";
            };
            if (v instanceof SourceAtop) {
                return "source-atop";
            };
            if (v instanceof DestinationOver) {
                return "destination-over";
            };
            if (v instanceof DestinationIn) {
                return "destination-in";
            };
            if (v instanceof DestinationOut) {
                return "destination-out";
            };
            if (v instanceof DestinationAtop) {
                return "destination-atop";
            };
            if (v instanceof Lighter) {
                return "lighter";
            };
            if (v instanceof Copy) {
                return "copy";
            };
            if (v instanceof Xor) {
                return "xor";
            };
            if (v instanceof Multiply) {
                return "multiply";
            };
            if (v instanceof Screen) {
                return "screen";
            };
            if (v instanceof Overlay) {
                return "overlay";
            };
            if (v instanceof Darken) {
                return "darken";
            };
            if (v instanceof Lighten) {
                return "lighten";
            };
            if (v instanceof ColorDodge) {
                return "color-dodge";
            };
            if (v instanceof ColorBurn) {
                return "color-burn";
            };
            if (v instanceof HardLight) {
                return "hard-light";
            };
            if (v instanceof SoftLight) {
                return "soft-light";
            };
            if (v instanceof Difference) {
                return "difference";
            };
            if (v instanceof Exclusion) {
                return "exclusion";
            };
            if (v instanceof Hue) {
                return "hue";
            };
            if (v instanceof Saturation) {
                return "saturation";
            };
            if (v instanceof Color) {
                return "color";
            };
            if (v instanceof Luminosity) {
                return "luminosity";
            };
            throw new Error("Failed pattern match at Graphics.Canvas (line 318, column 5 - line 319, column 5): " + [ v.constructor.name ]);
        };
        return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
    };
};
var setCanvasDimensions = function (ce) {
    return function (d) {
        return Control_Apply.applySecond(Effect.applyEffect)($foreign.setCanvasHeight(ce)(d.height))($foreign.setCanvasWidth(ce)(d.width));
    };
};
var getCanvasElementById = function (elId) {
    return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
};
var getCanvasDimensions = function (ce) {
    return function __do() {
        var v = $foreign.getCanvasWidth(ce)();
        var v1 = $foreign.getCanvasHeight(ce)();
        return {
            width: v,
            height: v1
        };
    };
};
var fillPath = function (ctx) {
    return function (path) {
        return function __do() {
            var v = $foreign.beginPath(ctx)();
            var v1 = path();
            var v2 = $foreign.fill(ctx)();
            return v1;
        };
    };
};
var eqLineCap = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Round && y instanceof Round) {
            return true;
        };
        if (x instanceof Square && y instanceof Square) {
            return true;
        };
        if (x instanceof Butt && y instanceof Butt) {
            return true;
        };
        return false;
    };
});
var createPattern = function (context) {
    return function (img) {
        return function (repeat) {
            var toString = function (v) {
                if (v instanceof Repeat) {
                    return "repeat";
                };
                if (v instanceof RepeatX) {
                    return "repeat-x";
                };
                if (v instanceof RepeatY) {
                    return "repeat-y";
                };
                if (v instanceof NoRepeat) {
                    return "no-repeat";
                };
                throw new Error("Failed pattern match at Graphics.Canvas (line 611, column 5 - line 612, column 5): " + [ v.constructor.name ]);
            };
            return $foreign.createPatternImpl(context)(img)(toString(repeat));
        };
    };
};
module.exports = {
    SourceOver: SourceOver,
    SourceIn: SourceIn,
    SourceOut: SourceOut,
    SourceAtop: SourceAtop,
    DestinationOver: DestinationOver,
    DestinationIn: DestinationIn,
    DestinationOut: DestinationOut,
    DestinationAtop: DestinationAtop,
    Lighter: Lighter,
    Copy: Copy,
    Xor: Xor,
    Multiply: Multiply,
    Screen: Screen,
    Overlay: Overlay,
    Darken: Darken,
    Lighten: Lighten,
    ColorDodge: ColorDodge,
    ColorBurn: ColorBurn,
    HardLight: HardLight,
    SoftLight: SoftLight,
    Difference: Difference,
    Exclusion: Exclusion,
    Hue: Hue,
    Saturation: Saturation,
    Color: Color,
    Luminosity: Luminosity,
    Round: Round,
    Square: Square,
    Butt: Butt,
    BevelJoin: BevelJoin,
    RoundJoin: RoundJoin,
    MiterJoin: MiterJoin,
    AlignLeft: AlignLeft,
    AlignRight: AlignRight,
    AlignCenter: AlignCenter,
    AlignStart: AlignStart,
    AlignEnd: AlignEnd,
    Repeat: Repeat,
    RepeatX: RepeatX,
    RepeatY: RepeatY,
    NoRepeat: NoRepeat,
    getCanvasElementById: getCanvasElementById,
    getCanvasDimensions: getCanvasDimensions,
    setCanvasDimensions: setCanvasDimensions,
    setLineCap: setLineCap,
    setLineJoin: setLineJoin,
    setGlobalCompositeOperation: setGlobalCompositeOperation,
    strokePath: strokePath,
    fillPath: fillPath,
    textAlign: textAlign,
    setTextAlign: setTextAlign,
    withContext: withContext,
    tryLoadImage: tryLoadImage,
    createPattern: createPattern,
    eqLineCap: eqLineCap,
    showComposite: showComposite,
    showTextAlign: showTextAlign,
    showPatternRepeat: showPatternRepeat,
    getContext2D: $foreign.getContext2D,
    getCanvasWidth: $foreign.getCanvasWidth,
    setCanvasWidth: $foreign.setCanvasWidth,
    getCanvasHeight: $foreign.getCanvasHeight,
    setCanvasHeight: $foreign.setCanvasHeight,
    canvasToDataURL: $foreign.canvasToDataURL,
    setLineWidth: $foreign.setLineWidth,
    setLineDash: $foreign.setLineDash,
    setFillStyle: $foreign.setFillStyle,
    setStrokeStyle: $foreign.setStrokeStyle,
    setShadowBlur: $foreign.setShadowBlur,
    setShadowOffsetX: $foreign.setShadowOffsetX,
    setShadowOffsetY: $foreign.setShadowOffsetY,
    setShadowColor: $foreign.setShadowColor,
    setMiterLimit: $foreign.setMiterLimit,
    setGlobalAlpha: $foreign.setGlobalAlpha,
    beginPath: $foreign.beginPath,
    stroke: $foreign.stroke,
    fill: $foreign.fill,
    clip: $foreign.clip,
    lineTo: $foreign.lineTo,
    moveTo: $foreign.moveTo,
    closePath: $foreign.closePath,
    arc: $foreign.arc,
    rect: $foreign.rect,
    fillRect: $foreign.fillRect,
    strokeRect: $foreign.strokeRect,
    clearRect: $foreign.clearRect,
    scale: $foreign.scale,
    rotate: $foreign.rotate,
    translate: $foreign.translate,
    transform: $foreign.transform,
    setTransform: $foreign.setTransform,
    font: $foreign.font,
    setFont: $foreign.setFont,
    fillText: $foreign.fillText,
    strokeText: $foreign.strokeText,
    measureText: $foreign.measureText,
    save: $foreign.save,
    restore: $foreign.restore,
    getImageData: $foreign.getImageData,
    putImageData: $foreign.putImageData,
    putImageDataFull: $foreign.putImageDataFull,
    createImageData: $foreign.createImageData,
    createImageDataCopy: $foreign.createImageDataCopy,
    imageDataWidth: $foreign.imageDataWidth,
    imageDataHeight: $foreign.imageDataHeight,
    imageDataBuffer: $foreign.imageDataBuffer,
    canvasElementToImageSource: $foreign.canvasElementToImageSource,
    drawImage: $foreign.drawImage,
    drawImageScale: $foreign.drawImageScale,
    drawImageFull: $foreign.drawImageFull,
    setPatternFillStyle: $foreign.setPatternFillStyle,
    createLinearGradient: $foreign.createLinearGradient,
    createRadialGradient: $foreign.createRadialGradient,
    addColorStop: $foreign.addColorStop,
    setGradientFillStyle: $foreign.setGradientFillStyle,
    quadraticCurveTo: $foreign.quadraticCurveTo,
    bezierCurveTo: $foreign.bezierCurveTo
};

},{"../Control.Apply/index.js":31,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Show/index.js":235,"../Effect.Exception.Unsafe/index.js":282,"../Effect/index.js":294,"./foreign.js":331}],333:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var unsubscribe = function (sid) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v.subscriptions)))(function (v1) {
                return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_Query_EventSource.finalize)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(v1));
            });
        });
    };
};
var queueOrRun = function (ref) {
    return function (au) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return au;
            };
            if (v instanceof Data_Maybe.Just) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 195, column 33 - line 197, column 54): " + [ v.constructor.name ]);
        });
    };
};
var handleLifecycle = function (lchs) {
    return function (f) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
            initializers: Data_List_Types.Nil.value,
            finalizers: Data_List_Types.Nil.value
        })(lchs)))(function () {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (v) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v1) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v1.finalizers))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v1.initializers))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v);
                        });
                    });
                });
            });
        });
    };
};
var fresh = function (f) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                return {
                    state: i + 1 | 0,
                    value: f(i)
                };
            })(v.fresh));
        });
    };
};
var evalQ = function (render) {
    return function (ref) {
        return function (q) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
            });
        };
    };
};
var evalM = function (render) {
    return function (initRef) {
        return function (v) {
            var evalChildQuery = function (ref) {
                return function (cqb) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                        return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                            var evalChild = function (v3) {
                                return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (v4) {
                                    return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                        return evalQ(render)(ds.selfRef)(v2.value1);
                                    })(v4);
                                }));
                            };
                            return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                        })(cqb);
                    });
                };
            };
            var go = function (ref) {
                return function (v1) {
                    if (v1 instanceof Halogen_Query_HalogenM.State) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            var v3 = v1.value0(v2.state);
                            if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                            };
                            if (Data_Boolean.otherwise) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                    component: v2.component,
                                    state: v3.value1,
                                    refs: v2.refs,
                                    children: v2.children,
                                    childrenIn: v2.childrenIn,
                                    childrenOut: v2.childrenOut,
                                    selfRef: v2.selfRef,
                                    handlerRef: v2.handlerRef,
                                    pendingQueries: v2.pendingQueries,
                                    pendingOuts: v2.pendingOuts,
                                    pendingHandlers: v2.pendingHandlers,
                                    rendering: v2.rendering,
                                    fresh: v2.fresh,
                                    subscriptions: v2.subscriptions,
                                    forks: v2.forks,
                                    lifecycleHandlers: v2.lifecycleHandlers
                                })(ref)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 85, column 7 - line 91, column 21): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (v2) {
                            var v3 = v1.value0(v2);
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v4) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Effect_Aff.bindAff)(v3)(function (v5) {
                                    var done = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v4.subscriptions)))(function (v6) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordSubscriptionId)(v2)))(v4.subscriptions)))(function () {
                                            return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(v2))(v6))(Halogen_Query_EventSource.finalize(v5.finalizer));
                                        });
                                    });
                                    var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Coroutine["await"](Effect_Aff.monadAff))(function (v6) {
                                        return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v4.subscriptions))))(function (v7) {
                                            return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(v2))(v7))(new Data_Maybe.Just(true)))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalF(render)(ref)(new Halogen_Query_Input.Action(v6)))))(function (v8) {
                                                return consumer;
                                            }));
                                        });
                                    });
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(v2)(done)))(v4.subscriptions)))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.pullFrom(Effect_Aff.monadRecAff)(consumer)(v5.producer)))(function () {
                                            return Halogen_Query_EventSource.finalize(done);
                                        });
                                    });
                                })))(function (v5) {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(v2));
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(unsubscribe(v1.value0)(ref))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                        return v1.value0;
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                        return evalChildQuery(ref)(v1.value0);
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(v3(v1.value0)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Par) {
                        return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp(function ($111) {
                            return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(evalM(render)(ref)($111));
                        })(v1.value0)));
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v3) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (v4) {
                                    return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                        Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(v2))(v3.forks)();
                                        return Effect_Ref.write(true)(v4)();
                                    }))(evalM(render)(ref)(v1.value0))))(function (v5) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(v4))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(v2)(v5))(v3.forks))))(function () {
                                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(v2));
                                        });
                                    });
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(v3)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                        });
                    };
                    throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 82, column 12 - line 146, column 33): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
        };
    };
};
var evalF = function (render) {
    return function (ref) {
        return function (v) {
            if (v instanceof Halogen_Query_Input.RefUpdate) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                    return {
                        component: st.component,
                        state: st.state,
                        refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                        children: st.children,
                        childrenIn: st.childrenIn,
                        childrenOut: st.childrenOut,
                        selfRef: st.selfRef,
                        handlerRef: st.handlerRef,
                        pendingQueries: st.pendingQueries,
                        pendingOuts: st.pendingOuts,
                        pendingHandlers: st.pendingHandlers,
                        rendering: st.rendering,
                        fresh: st.fresh,
                        subscriptions: st.subscriptions,
                        forks: st.forks,
                        lifecycleHandlers: st.lifecycleHandlers
                    };
                })));
            };
            if (v instanceof Halogen_Query_Input.Action) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                    return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                });
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 51, column 20 - line 57, column 62): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    evalF: evalF,
    evalQ: evalQ,
    evalM: evalM,
    handleLifecycle: handleLifecycle,
    queueOrRun: queueOrRun
};

},{"../Control.Applicative.Free/index.js":28,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Coroutine/index.js":38,"../Control.Monad.Fork.Class/index.js":47,"../Control.Monad.Free.Trans/index.js":48,"../Control.Monad.Free/index.js":49,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad/index.js":65,"../Control.Parallel.Class/index.js":68,"../Control.Parallel/index.js":69,"../Data.Boolean/index.js":107,"../Data.Coyoneda/index.js":119,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Unit/index.js":266,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Exception/index.js":284,"../Effect.Ref/index.js":288,"../Effect/index.js":294,"../Halogen.Aff.Driver.State/index.js":334,"../Halogen.Query.ChildQuery/index.js":346,"../Halogen.Query.EventSource/index.js":347,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Query.HalogenQ/index.js":349,"../Halogen.Query.Input/index.js":350,"../Unsafe.Reference/index.js":407}],334:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var DriverStateRef = function (x) {
    return x;
};
var DriverState = function (x) {
    return x;
};
var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX_ = function (dictApplicative) {
    return function (f) {
        return unDriverStateX(function (st) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
        });
    };
};
var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX = function (dictFunctor) {
    return function (f) {
        return unDriverStateX(function (st) {
            return mkRenderStateX(f(st.rendering));
        });
    };
};
var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
var mapDriverState = function (f) {
    return function (v) {
        return f(v);
    };
};
var initDriverState = function (component) {
    return function (input) {
        return function (handler) {
            return function (lchs) {
                return function __do() {
                    var v = Effect_Ref["new"]({})();
                    var v1 = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var v2 = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var v3 = Effect_Ref["new"](handler)();
                    var v4 = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var v5 = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var v6 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                    var v7 = Effect_Ref["new"](1)();
                    var v8 = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                    var v9 = Effect_Ref["new"](Data_Map_Internal.empty)();
                    var ds = {
                        component: component,
                        state: component.initialState(input),
                        refs: Data_Map_Internal.empty,
                        children: Halogen_Data_Slot.empty,
                        childrenIn: v1,
                        childrenOut: v2,
                        selfRef: v,
                        handlerRef: v3,
                        pendingQueries: v4,
                        pendingOuts: v5,
                        pendingHandlers: v6,
                        rendering: Data_Maybe.Nothing.value,
                        fresh: v7,
                        subscriptions: v8,
                        forks: v9,
                        lifecycleHandlers: lchs
                    };
                    Effect_Ref.write(ds)(v)();
                    return mkDriverStateXRef(v);
                };
            };
        };
    };
};
module.exports = {
    DriverState: DriverState,
    mapDriverState: mapDriverState,
    DriverStateRef: DriverStateRef,
    unDriverStateX: unDriverStateX,
    mkDriverStateXRef: mkDriverStateXRef,
    renderStateX: renderStateX,
    renderStateX_: renderStateX_,
    unRenderStateX: unRenderStateX,
    initDriverState: initDriverState
};

},{"../Data.Foldable/index.js":138,"../Data.List.Types/index.js":192,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Effect.Ref/index.js":288,"../Halogen.Data.Slot/index.js":339,"../Unsafe.Coerce/index.js":405}],335:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_Eval = require("../Halogen.Aff.Driver.Eval/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var newLifecycleHandlers = Effect_Ref["new"]({
    initializers: Data_List_Types.Nil.value,
    finalizers: Data_List_Types.Nil.value
});
var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var handlePending = function (ref) {
    return function __do() {
        var v = Effect_Ref.read(ref)();
        Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v)(function ($78) {
            return handleAff(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_List.reverse($78)));
        })();
    };
};
var cleanupSubscriptionsAndForks = function (v) {
    return function __do() {
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($79) {
            return handleAff(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(function ($80) {
                return Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Halogen_Query_EventSource.finalize($80));
            })($79));
        }))(Effect_Ref.read(v.subscriptions))();
        Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(function ($81) {
            return handleAff(Effect_Aff.killFiber(Effect_Exception.error("finalized"))($81));
        }))(Effect_Ref.read(v.forks))();
        return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
    };
};
var runUI = function (renderSpec) {
    return function (component) {
        return function (i) {
            var subscribe = function (fresh) {
                return function (ref) {
                    return function (consumer) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                var v1 = Effect_Ref.read(fresh)();
                                Effect_Ref.modify_(function (v2) {
                                    return v2 + 1 | 0;
                                })(fresh)();
                                Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(v1)(v))(ref)();
                                return v1;
                            }))(function (v1) {
                                var producer = Control_Coroutine.producer(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)))(Data_Either.Left.create))(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_AVar.take(v))));
                                return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.connect(Effect_Aff.monadRecAff)(Effect_Aff.parallelAff)(producer)(consumer)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(v1))(ref)))(function () {
                                        return Effect_Aff_AVar.kill(Effect_Exception.error("ended"))(v);
                                    });
                                })));
                            });
                        });
                    };
                };
            };
            var rootHandler = function (ref) {
                return function (message) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                        return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map_Internal.functorMap)(Effect_Aff_AVar.put(message))(v));
                    });
                };
            };
            var squashChildInitializers = function (lchs) {
                return function (preInits) {
                    return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                        var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                        return Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                            handlePending(st.pendingQueries)();
                                            return handlePending(st.pendingOuts)();
                                        });
                                    });
                                }), preInits),
                                finalizers: handlers.finalizers
                            };
                        })(lchs);
                    });
                };
            };
            var runComponent = function (lchs) {
                return function (handler) {
                    return function (j) {
                        return Halogen_Component.unComponent(function (c) {
                            return function __do() {
                                var v = newLifecycleHandlers();
                                var v1 = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(v)();
                                var v2 = Effect_Ref.read(lchs)();
                                Effect_Ref.write({
                                    initializers: Data_List_Types.Nil.value,
                                    finalizers: v2.finalizers
                                })(lchs)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX(function ($82) {
                                    return render(lchs)((function (v3) {
                                        return v3.selfRef;
                                    })($82));
                                }))(Effect_Ref.read(v1))();
                                Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(v2.initializers))(Effect_Ref.read(v1))();
                                return v1;
                            };
                        });
                    };
                };
            };
            var renderChild = function (lchs) {
                return function (handler) {
                    return function (childrenInRef) {
                        return function (childrenOutRef) {
                            return Halogen_Component.unComponentSlot(function (slot) {
                                return function __do() {
                                    var v = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                    var v1 = (function () {
                                        if (v instanceof Data_Maybe.Just) {
                                            Effect_Ref.write(v.value0.value1)(childrenInRef)();
                                            var v1 = Effect_Ref.read(v.value0.value0)();
                                            Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                return function __do() {
                                                    Data_Function.flip(Effect_Ref.write)(st.handlerRef)(function ($83) {
                                                        return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler)(slot.output($83));
                                                    })();
                                                    return handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](slot.input)))();
                                                };
                                            })(v1)();
                                            return v.value0.value0;
                                        };
                                        if (v instanceof Data_Maybe.Nothing) {
                                            if (slot.input instanceof Halogen_Query_HalogenQ.Receive) {
                                                return runComponent(lchs)(function ($84) {
                                                    return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler)(slot.output($84));
                                                })(slot.input.value0)(slot.component)();
                                            };
                                            return Effect_Exception["throw"]("Halogen internal error: slot input was not a Receive query")();
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 236, column 14 - line 250, column 7): " + [ v.constructor.name ]);
                                    })();
                                    var v2 = Data_Functor.map(Effect.functorEffect)(function ($85) {
                                        return Data_Maybe.isJust(slot.get($85));
                                    })(Effect_Ref.read(childrenOutRef))();
                                    Control_Applicative.when(Effect.applicativeEffect)(v2)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                    Effect_Ref.modify_(slot.set(v1))(childrenOutRef)();
                                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v3) {
                                        if (v3 instanceof Data_Maybe.Nothing) {
                                            return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                        };
                                        if (v3 instanceof Data_Maybe.Just) {
                                            return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v3.value0));
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 254, column 37 - line 256, column 50): " + [ v3.constructor.name ]);
                                    }))();
                                };
                            });
                        };
                    };
                };
            };
            var render = function (lchs) {
                return function ($$var) {
                    return function __do() {
                        var v = Effect_Ref.read($$var)();
                        var v1 = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                        Control_Applicative.when(Effect.applicativeEffect)(v1)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                        Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                        Effect_Ref.write(v.children)(v.childrenIn)();
                        var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                        var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                        var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                        var handler = function ($86) {
                            return Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers)(Data_Functor["void"](Effect_Aff.functorAff)(Halogen_Aff_Driver_Eval.evalF(render)(selfRef)($86)));
                        };
                        var childHandler = function ($87) {
                            return Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries)(handler(Halogen_Query_Input.Action.create($87)));
                        };
                        var v2 = renderSpec.render(function ($88) {
                            return handleAff(handler($88));
                        })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                        var v3 = Effect_Ref.read(v.childrenOut)();
                        var v4 = Effect_Ref.read(v.childrenIn)();
                        Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(v4)(function (v5) {
                            return function __do() {
                                var v6 = Effect_Ref.read(v5)();
                                Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(v6)();
                                return finalize(lchs)(v6)();
                            };
                        })();
                        Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                            return {
                                component: ds$prime.component,
                                state: ds$prime.state,
                                refs: ds$prime.refs,
                                children: v3,
                                childrenIn: ds$prime.childrenIn,
                                childrenOut: ds$prime.childrenOut,
                                selfRef: ds$prime.selfRef,
                                handlerRef: ds$prime.handlerRef,
                                pendingQueries: ds$prime.pendingQueries,
                                pendingOuts: ds$prime.pendingOuts,
                                pendingHandlers: ds$prime.pendingHandlers,
                                rendering: new Data_Maybe.Just(v2),
                                fresh: ds$prime.fresh,
                                subscriptions: ds$prime.subscriptions,
                                forks: ds$prime.forks,
                                lifecycleHandlers: ds$prime.lifecycleHandlers
                            };
                        }))();
                        return Control_Applicative.when(Effect.applicativeEffect)(v1)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v5) {
                            return function __do() {
                                var v6 = Effect_Ref.read(pendingHandlers)();
                                Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($89) {
                                    return handleAff(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_List.reverse($89)));
                                })(v6)();
                                var v7 = Effect_Ref.read(pendingHandlers)();
                                var $68 = Data_Maybe.maybe(false)(Data_List["null"])(v7);
                                if ($68) {
                                    return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                };
                                return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                            };
                        }))();
                    };
                };
            };
            var finalize = function (lchs) {
                return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                    return function __do() {
                        cleanupSubscriptionsAndForks(st)();
                        var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                        Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: handlers.initializers,
                                finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                            };
                        })(lchs)();
                        return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                            return function __do() {
                                var v1 = Effect_Ref.read(v)();
                                return finalize(lchs)(v1)();
                            };
                        })();
                    };
                });
            };
            var evalDriver = function (disposed) {
                return function (ref) {
                    return function (q) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                            if (v) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                            };
                            return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                        });
                    };
                };
            };
            var dispose = function (disposed) {
                return function (lchs) {
                    return function (dsx) {
                        return function (subsRef) {
                            return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                                var v = Effect_Ref.read(disposed)();
                                if (v) {
                                    return Data_Unit.unit;
                                };
                                Effect_Ref.write(true)(disposed)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(function ($90) {
                                    return Effect_Aff.launchAff_(Effect_Aff_AVar.kill(Effect_Exception.error("disposed"))($90));
                                }))(Effect_Ref.read(subsRef))();
                                finalize(lchs)(dsx)();
                                return Halogen_Aff_Driver_State.unDriverStateX(function ($91) {
                                    return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(renderSpec.dispose)((function (v1) {
                                        return v1.rendering;
                                    })($91));
                                })(dsx)();
                            });
                        };
                    };
                };
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (v) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (v1) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (v2) {
                        return Halogen_Aff_Driver_Eval.handleLifecycle(v)(function __do() {
                            var v3 = Effect_Ref["new"](Data_Map_Internal.empty)();
                            var v4 = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(v)(rootHandler(v3))(i)(component))();
                            return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                return Control_Applicative.pure(Effect.applicativeEffect)({
                                    query: evalDriver(v2)(st.selfRef),
                                    subscribe: subscribe(v1)(v3),
                                    dispose: dispose(v2)(v)(v4)(v3)
                                });
                            })(v4)();
                        });
                    });
                });
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Coroutine/index.js":38,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Fork.Class/index.js":47,"../Control.Monad.Rec.Class/index.js":55,"../Control.Parallel/index.js":69,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Unit/index.js":266,"../Effect.Aff.AVar/index.js":273,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Console/index.js":281,"../Effect.Exception/index.js":284,"../Effect.Ref/index.js":288,"../Effect/index.js":294,"../Halogen.Aff.Driver.Eval/index.js":333,"../Halogen.Aff.Driver.State/index.js":334,"../Halogen.Component/index.js":337,"../Halogen.Data.Slot/index.js":339,"../Halogen.Query.EventSource/index.js":347,"../Halogen.Query.HalogenQ/index.js":349,"../Halogen.Query.Input/index.js":350}],336:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_DOM_ParentNode = require("../Web.DOM.ParentNode/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var selectElement = function (query) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(function ($12) {
        return Web_DOM_ParentNode.querySelector(query)(Web_HTML_HTMLDocument.toParentNode($12));
    })(Web_HTML_Window.document))(Web_HTML.window)))(function (v) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(v));
    });
};
var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var awaitLoad = Effect_Aff.makeAff(function (callback) {
    return function __do() {
        var v = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
        if (v instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
            var v1 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
            var v2 = Web_Event_EventTarget.eventListener(function (v2) {
                return callback(new Data_Either.Right(Data_Unit.unit));
            })();
            Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(v2)(false)(v1)();
            return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(v2)(false)(v1));
        };
        callback(new Data_Either.Right(Data_Unit.unit))();
        return Effect_Aff.nonCanceler;
    };
});
var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
    return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (v) {
        return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(v);
    });
});
module.exports = {
    awaitLoad: awaitLoad,
    awaitBody: awaitBody,
    selectElement: selectElement,
    runHalogenAff: runHalogenAff
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Error.Class/index.js":44,"../Data.Either/index.js":129,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Unit/index.js":266,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Exception/index.js":284,"../Effect/index.js":294,"../Web.DOM.ParentNode/index.js":420,"../Web.Event.EventTarget/index.js":427,"../Web.HTML.Event.EventTypes/index.js":431,"../Web.HTML.HTMLDocument.ReadyState/index.js":433,"../Web.HTML.HTMLDocument/index.js":435,"../Web.HTML.HTMLElement/index.js":437,"../Web.HTML.Window/index.js":446,"../Web.HTML/index.js":448}],337:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ComponentSlot = (function () {
    function ComponentSlot(value0) {
        this.value0 = value0;
    };
    ComponentSlot.create = function (value0) {
        return new ComponentSlot(value0);
    };
    return ComponentSlot;
})();
var ThunkSlot = (function () {
    function ThunkSlot(value0) {
        this.value0 = value0;
    };
    ThunkSlot.create = function (value0) {
        return new ThunkSlot(value0);
    };
    return ThunkSlot;
})();
var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
var unComponent = Unsafe_Coerce.unsafeCoerce;
var mkEval = function (args) {
    return function (v) {
        if (v instanceof Halogen_Query_HalogenQ.Initialize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Finalize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Receive) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Action) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Query) {
            return Data_Coyoneda.unCoyoneda(function (g) {
                return function ($28) {
                    return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g))(args.handleQuery($28));
                };
            })(v.value0);
        };
        throw new Error("Failed pattern match at Halogen.Component (line 172, column 15 - line 182, column 70): " + [ v.constructor.name ]);
    };
};
var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
var mkComponent = Unsafe_Coerce.unsafeCoerce;
var hoistSlot = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return function (v) {
                if (v instanceof ComponentSlot) {
                    return unComponentSlot(function (slot) {
                        return ComponentSlot.create(mkComponentSlot({
                            get: slot.get,
                            pop: slot.pop,
                            set: slot.set,
                            component: hoist(dictBifunctor)(dictFunctor)(nat)(slot.component),
                            input: slot.input,
                            output: slot.output
                        }));
                    })(v.value0);
                };
                if (v instanceof ThunkSlot) {
                    return ThunkSlot.create(Halogen_VDom_Thunk.hoist(Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat)))(v.value0));
                };
                throw new Error("Failed pattern match at Halogen.Component (line 271, column 17 - line 276, column 52): " + [ v.constructor.name ]);
            };
        };
    };
};
var hoist = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return unComponent(function (c) {
                return mkComponent({
                    initialState: c.initialState,
                    render: function ($29) {
                        return Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat))(c.render($29));
                    },
                    "eval": function ($30) {
                        return Halogen_Query_HalogenM.hoist(dictFunctor)(nat)(c["eval"]($30));
                    }
                });
            });
        };
    };
};
var functorComponentSlotBox = new Data_Functor.Functor(function (f) {
    return unComponentSlot(function (slot) {
        return mkComponentSlot({
            get: slot.get,
            pop: slot.pop,
            set: slot.set,
            component: slot.component,
            input: slot.input,
            output: Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(slot.output)
        });
    });
});
var functorComponentSlot = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof ComponentSlot) {
                return new ComponentSlot(Data_Functor.map(functorComponentSlotBox)(f)(v.value0));
            };
            if (v instanceof ThunkSlot) {
                return new ThunkSlot(Halogen_VDom_Thunk.mapThunk(function ($31) {
                    return Data_Newtype.under(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.Wrap)(Data_Functor.map(Data_Bifunctor_Wrap.functorWrap(dictBifunctor))(f))(Data_Bifunctor.lmap(dictBifunctor)(Data_Functor.map(functorComponentSlot(dictBifunctor))(f))($31));
                })(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.Component (line 200, column 11 - line 202, column 94): " + [ v.constructor.name ]);
        };
    });
};
var defaultEval = {
    handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
    handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
    receive: Data_Function["const"](Data_Maybe.Nothing.value),
    initialize: Data_Maybe.Nothing.value,
    finalize: Data_Maybe.Nothing.value
};
var componentSlot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (comp) {
                        return function (input) {
                            return function (output) {
                                return mkComponentSlot({
                                    get: Halogen_Data_Slot.lookup(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    pop: Halogen_Data_Slot.pop(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    set: Halogen_Data_Slot.insert(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    component: comp,
                                    input: new Halogen_Query_HalogenQ.Receive(input, Data_Unit.unit),
                                    output: output
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    mkComponent: mkComponent,
    unComponent: unComponent,
    hoist: hoist,
    mkEval: mkEval,
    defaultEval: defaultEval,
    ComponentSlot: ComponentSlot,
    ThunkSlot: ThunkSlot,
    componentSlot: componentSlot,
    mkComponentSlot: mkComponentSlot,
    unComponentSlot: unComponentSlot,
    hoistSlot: hoistSlot,
    functorComponentSlotBox: functorComponentSlotBox,
    functorComponentSlot: functorComponentSlot
};

},{"../Control.Applicative/index.js":29,"../Data.Bifunctor.Wrap/index.js":104,"../Data.Bifunctor/index.js":105,"../Data.Coyoneda/index.js":119,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Unit/index.js":266,"../Halogen.Data.Slot/index.js":339,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Query.HalogenQ/index.js":349,"../Halogen.VDom.Thunk/index.js":357,"../Unsafe.Coerce/index.js":405}],338:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var OrdBox = (function () {
    function OrdBox(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    OrdBox.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new OrdBox(value0, value1, value2);
            };
        };
    };
    return OrdBox;
})();
var unOrdBox = function (v) {
    return v.value2;
};
var mkOrdBox = function (dictOrd) {
    return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
};
var eqOrdBox = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0(v.value2)(v1.value2);
    };
});
var ordOrdBox = new Data_Ord.Ord(function () {
    return eqOrdBox;
}, function (v) {
    return function (v1) {
        return v.value1(v.value2)(v1.value2);
    };
});
module.exports = {
    mkOrdBox: mkOrdBox,
    unOrdBox: unOrdBox,
    eqOrdBox: eqOrdBox,
    ordOrdBox: ordOrdBox
};

},{"../Data.Eq/index.js":133,"../Data.Ord/index.js":214}],339:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_Data_OrdBox = require("../Halogen.Data.OrdBox/index.js");
var SlotStorage = function (x) {
    return x;
};
var slots = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (v) {
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(sym);
                    var go = function (v1) {
                        return function (val) {
                            if (key === v1.value0) {
                                return Data_Map_Internal.singleton(Halogen_Data_OrdBox.unOrdBox(v1.value1))(val);
                            };
                            if (Data_Boolean.otherwise) {
                                return Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd));
                            };
                            throw new Error("Failed pattern match at Halogen.Data.Slot (line 101, column 3 - line 103, column 25): " + [ v1.constructor.name, val.constructor.name ]);
                        };
                    };
                    return Data_Map_Internal.foldSubmap(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(Data_Map_Internal.monoidMap(dictOrd))(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(go)(v);
                };
            };
        };
    };
};
var pop = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var lookup = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var insert = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (val) {
                        return function (v) {
                            return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                        };
                    };
                };
            };
        };
    };
};
var foreachSlot = function (dictApplicative) {
    return function (v) {
        return function (k) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                return k($37);
            })(v);
        };
    };
};
var empty = Data_Map_Internal.empty;
module.exports = {
    empty: empty,
    lookup: lookup,
    insert: insert,
    pop: pop,
    slots: slots,
    foreachSlot: foreachSlot
};

},{"../Data.Boolean/index.js":107,"../Data.Foldable/index.js":138,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Symbol/index.js":250,"../Data.Tuple/index.js":260,"../Halogen.Data.OrdBox/index.js":338}],340:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var CSS_Render = require("../CSS.Render/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var stylesheet = function (css) {
    var content = Data_Maybe.fromMaybe("")(CSS_Render.renderedSheet(CSS_Render.render(css)));
    return Halogen_HTML_Elements.style([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropMediaType)("text/css") ])([ Halogen_HTML_Core.text(content) ]);
};
var style = (function () {
    var toString = function ($4) {
        return Data_String_Common.joinWith("; ")(Foreign_Object.foldMap(Data_Monoid.monoidArray)(function (key) {
            return function (val) {
                return [ key + (": " + val) ];
            };
        })($4));
    };
    var rights = Data_Array.concatMap(Data_Foldable.foldMap(Data_Either.foldableEither)(Data_Monoid.monoidArray)(Data_Array.singleton));
    var property = function (v) {
        if (v instanceof CSS_Stylesheet.Property) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
        };
        return Data_Maybe.Nothing.value;
    };
    var rules = function (rs) {
        var properties = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapMaybe(property)(rs))(function ($5) {
            return rights(CSS_Render.collect($5));
        });
        return Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(properties);
    };
    return function ($6) {
        return Halogen_HTML_Properties.attr("style")(toString(rules(CSS_Stylesheet.runS($6))));
    };
})();
module.exports = {
    style: style,
    stylesheet: stylesheet
};

},{"../CSS.Render/index.js":17,"../CSS.Stylesheet/index.js":21,"../Control.Bind/index.js":35,"../Data.Array/index.js":98,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.String.Common/index.js":241,"../Data.Tuple/index.js":260,"../Foreign.Object/index.js":311,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Properties/index.js":344}],341:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var DOM_HTML_Indexed_ButtonType = require("../DOM.HTML.Indexed.ButtonType/index.js");
var DOM_HTML_Indexed_CrossOriginValue = require("../DOM.HTML.Indexed.CrossOriginValue/index.js");
var DOM_HTML_Indexed_DirValue = require("../DOM.HTML.Indexed.DirValue/index.js");
var DOM_HTML_Indexed_FormMethod = require("../DOM.HTML.Indexed.FormMethod/index.js");
var DOM_HTML_Indexed_InputAcceptType = require("../DOM.HTML.Indexed.InputAcceptType/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var DOM_HTML_Indexed_KindValue = require("../DOM.HTML.Indexed.KindValue/index.js");
var DOM_HTML_Indexed_MenuType = require("../DOM.HTML.Indexed.MenuType/index.js");
var DOM_HTML_Indexed_MenuitemType = require("../DOM.HTML.Indexed.MenuitemType/index.js");
var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");
var DOM_HTML_Indexed_OrderedListType = require("../DOM.HTML.Indexed.OrderedListType/index.js");
var DOM_HTML_Indexed_PreloadValue = require("../DOM.HTML.Indexed.PreloadValue/index.js");
var DOM_HTML_Indexed_ScopeValue = require("../DOM.HTML.Indexed.ScopeValue/index.js");
var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");
var DOM_HTML_Indexed_WrapValue = require("../DOM.HTML.Indexed.WrapValue/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var PropName = function (x) {
    return x;
};
var HTML = function (x) {
    return x;
};
var ClassName = function (x) {
    return x;
};
var AttrName = function (x) {
    return x;
};
var IsProp = function (toPropValue) {
    this.toPropValue = toPropValue;
};
var widget = function ($30) {
    return HTML(Halogen_VDom_Types.Widget.create($30));
};
var toPropValue = function (dict) {
    return dict.toPropValue;
};
var text = function ($31) {
    return HTML(Halogen_VDom_Types.Text.create($31));
};
var semigroupClassName = Data_Semigroup.semigroupString;
var ref = function (f) {
    return Halogen_VDom_DOM_Prop.Ref.create(function ($32) {
        return f((function (v) {
            if (v instanceof Halogen_VDom_DOM_Prop.Created) {
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Halogen.HTML.Core (line 104, column 21 - line 106, column 23): " + [ v.constructor.name ]);
        })($32));
    });
};
var prop = function (dictIsProp) {
    return function (v) {
        return function ($33) {
            return Halogen_VDom_DOM_Prop.Property.create(v)(toPropValue(dictIsProp)($33));
        };
    };
};
var ordPropName = Data_Ord.ordString;
var ordClassName = Data_Ord.ordString;
var ordAttrName = Data_Ord.ordString;
var newtypePropName = new Data_Newtype.Newtype(function (n) {
    return n;
}, PropName);
var newtypeHTML = new Data_Newtype.Newtype(function (n) {
    return n;
}, HTML);
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            return Halogen_VDom_Types.renderWidget(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))))(function ($34) {
                return Data_Newtype.un(newtypeHTML)(HTML)(g($34));
            })(v);
        };
    };
};
var newtypeClassName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ClassName);
var newtypeAttrName = new Data_Newtype.Newtype(function (n) {
    return n;
}, AttrName);
var keyed = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Keyed(ns, name, props, children);
            };
        };
    };
};
var isPropWrapValue = new IsProp(function ($35) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_WrapValue.renderWrapValue($35));
});
var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
var isPropStepValue = new IsProp(function ($36) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_StepValue.renderStepValue($36));
});
var isPropScopeValue = new IsProp(function ($37) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ScopeValue.renderScopeValue($37));
});
var isPropPreloadValue = new IsProp(function ($38) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_PreloadValue.renderPreloadValue($38));
});
var isPropOrderedListType = new IsProp(function ($39) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OrderedListType.renderOrderedListType($39));
});
var isPropOnOff = new IsProp(function ($40) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OnOff.renderOnOff($40));
});
var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
var isPropMenuitemType = new IsProp(function ($41) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuitemType.renderMenuitemType($41));
});
var isPropMenuType = new IsProp(function ($42) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuType.renderMenuType($42));
});
var isPropMediaType = new IsProp(function ($43) {
    return Halogen_VDom_DOM_Prop.propFromString(Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)($43));
});
var isPropKindValue = new IsProp(function ($44) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_KindValue.renderKindValue($44));
});
var isPropInt = new IsProp(Halogen_VDom_DOM_Prop.propFromInt);
var isPropInputType = new IsProp(function ($45) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($45));
});
var isPropInputAcceptType = new IsProp(function ($46) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputAcceptType.renderInputAcceptType($46));
});
var isPropFormMethod = new IsProp(function ($47) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_FormMethod.renderFormMethod($47));
});
var isPropDirValue = new IsProp(function ($48) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_DirValue.renderDirValue($48));
});
var isPropCrossOriginValue = new IsProp(function ($49) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_CrossOriginValue.renderCrossOriginValue($49));
});
var isPropButtonType = new IsProp(function ($50) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($50));
});
var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
var handler = Halogen_VDom_DOM_Prop.Handler.create;
var eqPropName = Data_Eq.eqString;
var eqClassName = Data_Eq.eqString;
var eqAttrName = Data_Eq.eqString;
var element = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Elem(ns, name, props, children);
            };
        };
    };
};
var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(g))))(f)(v);
        };
    };
});
var functorHTML = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorHTML));
var attr = function (ns) {
    return function (v) {
        return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
    };
};
module.exports = {
    HTML: HTML,
    renderWidget: renderWidget,
    widget: widget,
    text: text,
    element: element,
    keyed: keyed,
    prop: prop,
    attr: attr,
    handler: handler,
    ref: ref,
    IsProp: IsProp,
    toPropValue: toPropValue,
    PropName: PropName,
    AttrName: AttrName,
    ClassName: ClassName,
    newtypeHTML: newtypeHTML,
    bifunctorHTML: bifunctorHTML,
    functorHTML: functorHTML,
    isPropString: isPropString,
    isPropInt: isPropInt,
    isPropNumber: isPropNumber,
    isPropBoolean: isPropBoolean,
    isPropMediaType: isPropMediaType,
    isPropButtonType: isPropButtonType,
    isPropCrossOriginValue: isPropCrossOriginValue,
    isPropDirValue: isPropDirValue,
    isPropFormMethod: isPropFormMethod,
    isPropInputType: isPropInputType,
    isPropKindValue: isPropKindValue,
    isPropMenuitemType: isPropMenuitemType,
    isPropMenuType: isPropMenuType,
    isPropOnOff: isPropOnOff,
    isPropOrderedListType: isPropOrderedListType,
    isPropPreloadValue: isPropPreloadValue,
    isPropScopeValue: isPropScopeValue,
    isPropStepValue: isPropStepValue,
    isPropWrapValue: isPropWrapValue,
    isPropInputAcceptType: isPropInputAcceptType,
    newtypePropName: newtypePropName,
    eqPropName: eqPropName,
    ordPropName: ordPropName,
    newtypeAttrName: newtypeAttrName,
    eqAttrName: eqAttrName,
    ordAttrName: ordAttrName,
    newtypeClassName: newtypeClassName,
    eqClassName: eqClassName,
    ordClassName: ordClassName,
    semigroupClassName: semigroupClassName
};

},{"../DOM.HTML.Indexed.ButtonType/index.js":72,"../DOM.HTML.Indexed.CrossOriginValue/index.js":73,"../DOM.HTML.Indexed.DirValue/index.js":74,"../DOM.HTML.Indexed.FormMethod/index.js":75,"../DOM.HTML.Indexed.InputAcceptType/index.js":76,"../DOM.HTML.Indexed.InputType/index.js":77,"../DOM.HTML.Indexed.KindValue/index.js":78,"../DOM.HTML.Indexed.MenuType/index.js":79,"../DOM.HTML.Indexed.MenuitemType/index.js":80,"../DOM.HTML.Indexed.OnOff/index.js":81,"../DOM.HTML.Indexed.OrderedListType/index.js":82,"../DOM.HTML.Indexed.PreloadValue/index.js":83,"../DOM.HTML.Indexed.ScopeValue/index.js":84,"../DOM.HTML.Indexed.StepValue/index.js":85,"../DOM.HTML.Indexed.WrapValue/index.js":86,"../Data.Bifunctor/index.js":105,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.MediaType/index.js":199,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Halogen.Query.Input/index.js":350,"../Halogen.VDom.DOM.Prop/index.js":353,"../Halogen.VDom.Types/index.js":358}],342:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var withKeys_ = function (ctor) {
    return function (children) {
        var v = ctor([  ]);
        if (v instanceof Halogen_VDom_Types.Elem) {
            return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
        };
        return v;
    };
};
var withKeys = function (ctor) {
    return function (props) {
        return function (children) {
            var v = ctor(props)([  ]);
            if (v instanceof Halogen_VDom_Types.Elem) {
                return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
            };
            return v;
        };
    };
};
var keyedNS = function ($12) {
    return Halogen_HTML_Core.keyed(Control_Applicative.pure(Data_Maybe.applicativeMaybe)($12));
};
var keyed = Halogen_HTML_Core.keyed(Data_Maybe.Nothing.value);
var elementNS = function ($13) {
    return Halogen_HTML_Core.element(Control_Applicative.pure(Data_Maybe.applicativeMaybe)($13));
};
var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
var em = element("em");
var em_ = em([  ]);
var embed = element("embed");
var embed_ = embed([  ]);
var fieldset = element("fieldset");
var fieldset_ = fieldset([  ]);
var figcaption = element("figcaption");
var figcaption_ = figcaption([  ]);
var figure = element("figure");
var figure_ = figure([  ]);
var footer = element("footer");
var footer_ = footer([  ]);
var form = element("form");
var form_ = form([  ]);
var h1 = element("h1");
var h1_ = h1([  ]);
var h2 = element("h2");
var h2_ = h2([  ]);
var h3 = element("h3");
var h3_ = h3([  ]);
var h4 = element("h4");
var h4_ = h4([  ]);
var h5 = element("h5");
var h5_ = h5([  ]);
var h6 = element("h6");
var h6_ = h6([  ]);
var head = element("head");
var head_ = head([  ]);
var header = element("header");
var header_ = header([  ]);
var hr = function (props) {
    return element("hr")(props)([  ]);
};
var hr_ = hr([  ]);
var html = element("html");
var html_ = html([  ]);
var i = element("i");
var i_ = i([  ]);
var iframe = function (props) {
    return element("iframe")(props)([  ]);
};
var img = function (props) {
    return element("img")(props)([  ]);
};
var input = function (props) {
    return element("input")(props)([  ]);
};
var ins = element("ins");
var ins_ = ins([  ]);
var kbd = element("kbd");
var kbd_ = kbd([  ]);
var label = element("label");
var label_ = label([  ]);
var legend = element("legend");
var legend_ = legend([  ]);
var li = element("li");
var li_ = li([  ]);
var link = function (props) {
    return element("link")(props)([  ]);
};
var main = element("main");
var main_ = main([  ]);
var map = element("map");
var map_ = map([  ]);
var mark = element("mark");
var mark_ = mark([  ]);
var menu = element("menu");
var menu_ = menu([  ]);
var menuitem = element("menuitem");
var menuitem_ = menuitem([  ]);
var meta = function (props) {
    return element("meta")(props)([  ]);
};
var meter = element("meter");
var meter_ = meter([  ]);
var nav = element("nav");
var nav_ = nav([  ]);
var noscript = element("noscript");
var noscript_ = noscript([  ]);
var object = element("object");
var object_ = object([  ]);
var ol = element("ol");
var ol_ = ol([  ]);
var optgroup = element("optgroup");
var optgroup_ = optgroup([  ]);
var option = element("option");
var option_ = option([  ]);
var output = element("output");
var output_ = output([  ]);
var p = element("p");
var p_ = p([  ]);
var param = function (props) {
    return element("param")(props)([  ]);
};
var pre = element("pre");
var pre_ = pre([  ]);
var progress = element("progress");
var progress_ = progress([  ]);
var q = element("q");
var q_ = q([  ]);
var rp = element("rp");
var rp_ = rp([  ]);
var rt = element("rt");
var rt_ = rt([  ]);
var ruby = element("ruby");
var ruby_ = ruby([  ]);
var samp = element("samp");
var samp_ = samp([  ]);
var script = element("script");
var script_ = script([  ]);
var section = element("section");
var section_ = section([  ]);
var select = element("select");
var select_ = select([  ]);
var small = element("small");
var small_ = small([  ]);
var source = function (props) {
    return element("source")(props)([  ]);
};
var span = element("span");
var span_ = span([  ]);
var strong = element("strong");
var strong_ = strong([  ]);
var style = element("style");
var style_ = style([  ]);
var sub = element("sub");
var sub_ = sub([  ]);
var summary = element("summary");
var summary_ = summary([  ]);
var sup = element("sup");
var sup_ = sup([  ]);
var table = element("table");
var table_ = table([  ]);
var tbody = element("tbody");
var tbody_ = tbody([  ]);
var td = element("td");
var td_ = td([  ]);
var textarea = function (es) {
    return element("textarea")(es)([  ]);
};
var tfoot = element("tfoot");
var tfoot_ = tfoot([  ]);
var th = element("th");
var th_ = th([  ]);
var thead = element("thead");
var thead_ = thead([  ]);
var time = element("time");
var time_ = time([  ]);
var title = element("title");
var title_ = title([  ]);
var tr = element("tr");
var tr_ = tr([  ]);
var track = function (props) {
    return element("track")(props)([  ]);
};
var u = element("u");
var u_ = u([  ]);
var ul = element("ul");
var ul_ = ul([  ]);
var $$var = element("var");
var var_ = $$var([  ]);
var video = element("video");
var video_ = video([  ]);
var wbr = function (props) {
    return element("wbr")(props)([  ]);
};
var dt = element("dt");
var dt_ = dt([  ]);
var dl = element("dl");
var dl_ = dl([  ]);
var div = element("div");
var div_ = div([  ]);
var dialog = element("dialog");
var dialog_ = dialog([  ]);
var dfn = element("dfn");
var dfn_ = dfn([  ]);
var details = element("details");
var details_ = details([  ]);
var del = element("del");
var del_ = del([  ]);
var dd = element("dd");
var dd_ = dd([  ]);
var datalist = element("datalist");
var datalist_ = datalist([  ]);
var command = function (props) {
    return element("command")(props)([  ]);
};
var colgroup = element("colgroup");
var colgroup_ = colgroup([  ]);
var col = function (props) {
    return element("col")(props)([  ]);
};
var code = element("code");
var code_ = code([  ]);
var cite = element("cite");
var cite_ = cite([  ]);
var caption = element("caption");
var caption_ = caption([  ]);
var canvas = function (props) {
    return element("canvas")(props)([  ]);
};
var button = element("button");
var button_ = button([  ]);
var br = function (props) {
    return element("br")(props)([  ]);
};
var br_ = br([  ]);
var body = element("body");
var body_ = body([  ]);
var blockquote = element("blockquote");
var blockquote_ = blockquote([  ]);
var bdo = element("bdo");
var bdo_ = bdo([  ]);
var bdi = element("bdi");
var bdi_ = bdi([  ]);
var base = function (props) {
    return element("base")(props)([  ]);
};
var b = element("b");
var b_ = b([  ]);
var audio = element("audio");
var audio_ = audio([  ]);
var aside = element("aside");
var aside_ = aside([  ]);
var article = element("article");
var article_ = article([  ]);
var area = function (props) {
    return element("area")(props)([  ]);
};
var address = element("address");
var address_ = address([  ]);
var abbr = element("abbr");
var abbr_ = abbr([  ]);
var a = element("a");
var a_ = a([  ]);
module.exports = {
    element: element,
    elementNS: elementNS,
    keyed: keyed,
    keyedNS: keyedNS,
    withKeys: withKeys,
    withKeys_: withKeys_,
    a: a,
    a_: a_,
    abbr: abbr,
    abbr_: abbr_,
    address: address,
    address_: address_,
    area: area,
    article: article,
    article_: article_,
    aside: aside,
    aside_: aside_,
    audio: audio,
    audio_: audio_,
    b: b,
    b_: b_,
    base: base,
    bdi: bdi,
    bdi_: bdi_,
    bdo: bdo,
    bdo_: bdo_,
    blockquote: blockquote,
    blockquote_: blockquote_,
    body: body,
    body_: body_,
    br: br,
    br_: br_,
    button: button,
    button_: button_,
    canvas: canvas,
    caption: caption,
    caption_: caption_,
    cite: cite,
    cite_: cite_,
    code: code,
    code_: code_,
    col: col,
    colgroup: colgroup,
    colgroup_: colgroup_,
    command: command,
    datalist: datalist,
    datalist_: datalist_,
    dd: dd,
    dd_: dd_,
    del: del,
    del_: del_,
    details: details,
    details_: details_,
    dfn: dfn,
    dfn_: dfn_,
    dialog: dialog,
    dialog_: dialog_,
    div: div,
    div_: div_,
    dl: dl,
    dl_: dl_,
    dt: dt,
    dt_: dt_,
    em: em,
    em_: em_,
    embed: embed,
    embed_: embed_,
    fieldset: fieldset,
    fieldset_: fieldset_,
    figcaption: figcaption,
    figcaption_: figcaption_,
    figure: figure,
    figure_: figure_,
    footer: footer,
    footer_: footer_,
    form: form,
    form_: form_,
    h1: h1,
    h1_: h1_,
    h2: h2,
    h2_: h2_,
    h3: h3,
    h3_: h3_,
    h4: h4,
    h4_: h4_,
    h5: h5,
    h5_: h5_,
    h6: h6,
    h6_: h6_,
    head: head,
    head_: head_,
    header: header,
    header_: header_,
    hr: hr,
    hr_: hr_,
    html: html,
    html_: html_,
    i: i,
    i_: i_,
    iframe: iframe,
    img: img,
    input: input,
    ins: ins,
    ins_: ins_,
    kbd: kbd,
    kbd_: kbd_,
    label: label,
    label_: label_,
    legend: legend,
    legend_: legend_,
    li: li,
    li_: li_,
    link: link,
    main: main,
    main_: main_,
    map: map,
    map_: map_,
    mark: mark,
    mark_: mark_,
    menu: menu,
    menu_: menu_,
    menuitem: menuitem,
    menuitem_: menuitem_,
    meta: meta,
    meter: meter,
    meter_: meter_,
    nav: nav,
    nav_: nav_,
    noscript: noscript,
    noscript_: noscript_,
    object: object,
    object_: object_,
    ol: ol,
    ol_: ol_,
    optgroup: optgroup,
    optgroup_: optgroup_,
    option: option,
    option_: option_,
    output: output,
    output_: output_,
    p: p,
    p_: p_,
    param: param,
    pre: pre,
    pre_: pre_,
    progress: progress,
    progress_: progress_,
    q: q,
    q_: q_,
    rp: rp,
    rp_: rp_,
    rt: rt,
    rt_: rt_,
    ruby: ruby,
    ruby_: ruby_,
    samp: samp,
    samp_: samp_,
    script: script,
    script_: script_,
    section: section,
    section_: section_,
    select: select,
    select_: select_,
    small: small,
    small_: small_,
    source: source,
    span: span,
    span_: span_,
    strong: strong,
    strong_: strong_,
    style: style,
    style_: style_,
    sub: sub,
    sub_: sub_,
    summary: summary,
    summary_: summary_,
    sup: sup,
    sup_: sup_,
    table: table,
    table_: table_,
    tbody: tbody,
    tbody_: tbody_,
    td: td,
    td_: td_,
    textarea: textarea,
    tfoot: tfoot,
    tfoot_: tfoot_,
    th: th,
    th_: th_,
    thead: thead,
    thead_: thead_,
    time: time,
    time_: time_,
    title: title,
    title_: title_,
    tr: tr,
    tr_: tr_,
    track: track,
    u: u,
    u_: u_,
    ul: ul,
    ul_: ul_,
    "var": $$var,
    var_: var_,
    video: video,
    video_: video_,
    wbr: wbr
};

},{"../Control.Applicative/index.js":29,"../Data.Maybe/index.js":197,"../Halogen.HTML.Core/index.js":341,"../Halogen.VDom.Types/index.js":358}],343:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Index = require("../Foreign.Index/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Clipboard_ClipboardEvent_EventTypes = require("../Web.Clipboard.ClipboardEvent.EventTypes/index.js");
var Web_Event_Event = require("../Web.Event.Event/index.js");
var Web_File_FileList = require("../Web.File.FileList/index.js");
var Web_HTML_Event_DragEvent_EventTypes = require("../Web.HTML.Event.DragEvent.EventTypes/index.js");
var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");
var Web_HTML_HTMLInputElement = require("../Web.HTML.HTMLInputElement/index.js");
var Web_UIEvent_FocusEvent_EventTypes = require("../Web.UIEvent.FocusEvent.EventTypes/index.js");
var Web_UIEvent_KeyboardEvent_EventTypes = require("../Web.UIEvent.KeyboardEvent.EventTypes/index.js");
var Web_UIEvent_MouseEvent_EventTypes = require("../Web.UIEvent.MouseEvent.EventTypes/index.js");
var Web_UIEvent_WheelEvent_EventTypes = require("../Web.UIEvent.WheelEvent.EventTypes/index.js");
var wheelHandler = Unsafe_Coerce.unsafeCoerce;
var touchHandler = Unsafe_Coerce.unsafeCoerce;
var mouseHandler = Unsafe_Coerce.unsafeCoerce;
var keyHandler = Unsafe_Coerce.unsafeCoerce;
var handler = function (et) {
    return function ($1) {
        return Halogen_HTML_Core.handler(et)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create))($1));
    };
};
var onAbort = handler("abort");
var onChange = handler(Web_HTML_Event_EventTypes.change);
var onClick = function ($2) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.click)(mouseHandler($2));
};
var onDoubleClick = function ($3) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.dblclick)(mouseHandler($3));
};
var onError = handler(Web_HTML_Event_EventTypes.error);
var onFileUpload = function (dictUnfoldable) {
    return function (f) {
        return handler(Web_HTML_Event_EventTypes.change)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.target)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromEventTarget)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(function ($4) {
            return Effect_Unsafe.unsafePerformEffect(Web_HTML_HTMLInputElement.files($4));
        })(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(function ($5) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Web_File_FileList.items(dictUnfoldable)($5));
        })(f)))));
    };
};
var onInput = handler(Web_HTML_Event_EventTypes.input);
var onInvalid = handler(Web_HTML_Event_EventTypes.invalid);
var onKeyDown = function ($6) {
    return handler(Web_UIEvent_KeyboardEvent_EventTypes.keydown)(keyHandler($6));
};
var onKeyUp = function ($7) {
    return handler(Web_UIEvent_KeyboardEvent_EventTypes.keyup)(keyHandler($7));
};
var onLoad = handler(Web_HTML_Event_EventTypes.load);
var onMouseDown = function ($8) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mousedown)(mouseHandler($8));
};
var onMouseEnter = function ($9) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mouseenter)(mouseHandler($9));
};
var onMouseLeave = function ($10) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mouseleave)(mouseHandler($10));
};
var onMouseMove = function ($11) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mousemove)(mouseHandler($11));
};
var onMouseOut = function ($12) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mouseout)(mouseHandler($12));
};
var onMouseOver = function ($13) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mouseover)(mouseHandler($13));
};
var onMouseUp = function ($14) {
    return handler(Web_UIEvent_MouseEvent_EventTypes.mouseup)(mouseHandler($14));
};
var onReset = handler("reset");
var onResize = handler("resize");
var onScroll = handler("scroll");
var onSelect = handler(Web_HTML_Event_EventTypes.select);
var onSubmit = handler("submit");
var onTouchCancel = function ($15) {
    return handler("touchcancel")(touchHandler($15));
};
var onTouchEnd = function ($16) {
    return handler("touchend")(touchHandler($16));
};
var onTouchEnter = function ($17) {
    return handler("touchenter")(touchHandler($17));
};
var onTouchLeave = function ($18) {
    return handler("touchleave")(touchHandler($18));
};
var onTouchMove = function ($19) {
    return handler("touchmove")(touchHandler($19));
};
var onTouchStart = function ($20) {
    return handler("touchstart")(touchHandler($20));
};
var onTransitionEnd = handler("transitionend");
var onWheel = function ($21) {
    return handler(Web_UIEvent_WheelEvent_EventTypes.wheel)(wheelHandler($21));
};
var focusHandler = Unsafe_Coerce.unsafeCoerce;
var onBlur = function ($22) {
    return handler(Web_HTML_Event_EventTypes.blur)(focusHandler($22));
};
var onFocus = function ($23) {
    return handler(Web_UIEvent_FocusEvent_EventTypes.focus)(focusHandler($23));
};
var onFocusIn = function ($24) {
    return handler(Web_UIEvent_FocusEvent_EventTypes.focusin)(focusHandler($24));
};
var onFocusOut = function ($25) {
    return handler(Web_UIEvent_FocusEvent_EventTypes.focusout)(focusHandler($25));
};
var dragHandler = Unsafe_Coerce.unsafeCoerce;
var onDrag = function ($26) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.drag)(dragHandler($26));
};
var onDragEnd = function ($27) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragend)(dragHandler($27));
};
var onDragEnter = function ($28) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragenter)(dragHandler($28));
};
var onDragExit = function ($29) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragexit)(dragHandler($29));
};
var onDragLeave = function ($30) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragleave)(dragHandler($30));
};
var onDragOver = function ($31) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragover)(dragHandler($31));
};
var onDragStart = function ($32) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.dragstart)(dragHandler($32));
};
var onDrop = function ($33) {
    return handler(Web_HTML_Event_DragEvent_EventTypes.drop)(dragHandler($33));
};
var clipboardHandler = Unsafe_Coerce.unsafeCoerce;
var onCopy = function ($34) {
    return handler(Web_Clipboard_ClipboardEvent_EventTypes.copy)(clipboardHandler($34));
};
var onCut = function ($35) {
    return handler(Web_Clipboard_ClipboardEvent_EventTypes.cut)(clipboardHandler($35));
};
var onPaste = function ($36) {
    return handler(Web_Clipboard_ClipboardEvent_EventTypes.paste)(clipboardHandler($36));
};
var addForeignPropHandler = function (key) {
    return function (prop) {
        return function (reader) {
            return function (f) {
                var go = function (a) {
                    return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(prop))(Foreign.unsafeToForeign(a));
                };
                return handler(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
                    return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(f)(Control_Monad_Except.runExcept(go(e)));
                }));
            };
        };
    };
};
var onChecked = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("checked")(Foreign.readBoolean);
var onSelectedIndexChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("selectedIndex")(Foreign.readInt);
var onValueChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("value")(Foreign.readString);
var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString);
module.exports = {
    handler: handler,
    onAbort: onAbort,
    onError: onError,
    onLoad: onLoad,
    onScroll: onScroll,
    onChange: onChange,
    onFileUpload: onFileUpload,
    onInput: onInput,
    onInvalid: onInvalid,
    onReset: onReset,
    onSelect: onSelect,
    onSubmit: onSubmit,
    onTransitionEnd: onTransitionEnd,
    onCopy: onCopy,
    onPaste: onPaste,
    onCut: onCut,
    onClick: onClick,
    onDoubleClick: onDoubleClick,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseMove: onMouseMove,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    onMouseUp: onMouseUp,
    onWheel: onWheel,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onBlur: onBlur,
    onFocus: onFocus,
    onFocusIn: onFocusIn,
    onFocusOut: onFocusOut,
    onDrag: onDrag,
    onDragEnd: onDragEnd,
    onDragExit: onDragExit,
    onDragEnter: onDragEnter,
    onDragLeave: onDragLeave,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onTouchCancel: onTouchCancel,
    onTouchEnd: onTouchEnd,
    onTouchEnter: onTouchEnter,
    onTouchLeave: onTouchLeave,
    onTouchMove: onTouchMove,
    onTouchStart: onTouchStart,
    onResize: onResize,
    onValueChange: onValueChange,
    onValueInput: onValueInput,
    onSelectedIndexChange: onSelectedIndexChange,
    onChecked: onChecked
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.Except/index.js":46,"../Data.Either/index.js":129,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Identity/index.js":166,"../Data.Maybe/index.js":197,"../Effect.Unsafe/index.js":292,"../Foreign.Index/index.js":303,"../Foreign/index.js":313,"../Halogen.HTML.Core/index.js":341,"../Halogen.Query.Input/index.js":350,"../Unsafe.Coerce/index.js":405,"../Web.Clipboard.ClipboardEvent.EventTypes/index.js":409,"../Web.Event.Event/index.js":424,"../Web.File.FileList/index.js":429,"../Web.HTML.Event.DragEvent.EventTypes/index.js":430,"../Web.HTML.Event.EventTypes/index.js":431,"../Web.HTML.HTMLInputElement/index.js":439,"../Web.UIEvent.FocusEvent.EventTypes/index.js":451,"../Web.UIEvent.KeyboardEvent.EventTypes/index.js":452,"../Web.UIEvent.MouseEvent.EventTypes/index.js":453,"../Web.UIEvent.WheelEvent.EventTypes/index.js":454}],344:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var IProp = function (x) {
    return x;
};
var ref = (function () {
    var go = function (p) {
        return function (mel) {
            return new Data_Maybe.Just(new Halogen_Query_Input.RefUpdate(p, mel));
        };
    };
    return function ($11) {
        return Halogen_HTML_Core.ref(go($11));
    };
})();
var prop = function (dictIsProp) {
    return Halogen_HTML_Core.prop(dictIsProp);
};
var readOnly = prop(Halogen_HTML_Core.isPropBoolean)("readOnly");
var rel = prop(Halogen_HTML_Core.isPropString)("rel");
var required = prop(Halogen_HTML_Core.isPropBoolean)("required");
var rowSpan = prop(Halogen_HTML_Core.isPropInt)("rowSpan");
var rows = prop(Halogen_HTML_Core.isPropInt)("rows");
var selected = prop(Halogen_HTML_Core.isPropBoolean)("selected");
var selectedIndex = prop(Halogen_HTML_Core.isPropInt)("selectedIndex");
var spellcheck = prop(Halogen_HTML_Core.isPropBoolean)("spellcheck");
var src = prop(Halogen_HTML_Core.isPropString)("src");
var step = prop(Halogen_HTML_Core.isPropStepValue)("step");
var tabIndex = prop(Halogen_HTML_Core.isPropInt)("tabIndex");
var target = prop(Halogen_HTML_Core.isPropString)("target");
var title = prop(Halogen_HTML_Core.isPropString)("title");
var type_ = function (dictIsProp) {
    return prop(dictIsProp)("type");
};
var value = prop(Halogen_HTML_Core.isPropString)("value");
var width = prop(Halogen_HTML_Core.isPropInt)("width");
var preload = prop(Halogen_HTML_Core.isPropPreloadValue)("preload");
var poster = prop(Halogen_HTML_Core.isPropString)("poster");
var placeholder = prop(Halogen_HTML_Core.isPropString)("placeholder");
var pattern = prop(Halogen_HTML_Core.isPropString)("pattern");
var noValidate = prop(Halogen_HTML_Core.isPropBoolean)("noValidate");
var newtypeIProp = new Data_Newtype.Newtype(function (n) {
    return n;
}, IProp);
var name = prop(Halogen_HTML_Core.isPropString)("name");
var muted = prop(Halogen_HTML_Core.isPropBoolean)("muted");
var multiple = prop(Halogen_HTML_Core.isPropBoolean)("multiple");
var min = prop(Halogen_HTML_Core.isPropNumber)("min");
var method = prop(Halogen_HTML_Core.isPropFormMethod)("method");
var max = prop(Halogen_HTML_Core.isPropNumber)("max");
var loop = prop(Halogen_HTML_Core.isPropBoolean)("loop");
var id_ = prop(Halogen_HTML_Core.isPropString)("id");
var href = prop(Halogen_HTML_Core.isPropString)("href");
var height = prop(Halogen_HTML_Core.isPropInt)("height");
var functorIProp = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))(m);
    };
});
var $$for = prop(Halogen_HTML_Core.isPropString)("htmlFor");
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var enctype = prop(Halogen_HTML_Core.isPropMediaType)("enctype");
var draggable = prop(Halogen_HTML_Core.isPropBoolean)("draggable");
var download = prop(Halogen_HTML_Core.isPropString)("download");
var disabled = prop(Halogen_HTML_Core.isPropBoolean)("disabled");
var enabled = function ($12) {
    return disabled(!$12);
};
var controls = prop(Halogen_HTML_Core.isPropBoolean)("controls");
var cols = prop(Halogen_HTML_Core.isPropInt)("cols");
var colSpan = prop(Halogen_HTML_Core.isPropInt)("colSpan");
var classes = function ($13) {
    return prop(Halogen_HTML_Core.isPropString)("className")(Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName))($13)));
};
var class_ = function ($14) {
    return prop(Halogen_HTML_Core.isPropString)("className")(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName)($14));
};
var checked = prop(Halogen_HTML_Core.isPropBoolean)("checked");
var charset = prop(Halogen_HTML_Core.isPropString)("charset");
var autoplay = prop(Halogen_HTML_Core.isPropBoolean)("autoplay");
var autofocus = prop(Halogen_HTML_Core.isPropBoolean)("autofocus");
var autocomplete = function ($15) {
    return prop(Halogen_HTML_Core.isPropOnOff)("autocomplete")((function (b) {
        if (b) {
            return DOM_HTML_Indexed_OnOff.On.value;
        };
        return DOM_HTML_Indexed_OnOff.Off.value;
    })($15));
};
var attrNS = function ($16) {
    return Halogen_HTML_Core.attr(Control_Applicative.pure(Data_Maybe.applicativeMaybe)($16));
};
var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
var list = attr("list");
var alt = prop(Halogen_HTML_Core.isPropString)("alt");
var action = prop(Halogen_HTML_Core.isPropString)("action");
var accept = prop(Halogen_HTML_Core.isPropInputAcceptType)("accept");
module.exports = {
    IProp: IProp,
    prop: prop,
    attr: attr,
    attrNS: attrNS,
    ref: ref,
    expand: expand,
    alt: alt,
    charset: charset,
    class_: class_,
    classes: classes,
    cols: cols,
    rows: rows,
    colSpan: colSpan,
    rowSpan: rowSpan,
    "for": $$for,
    height: height,
    width: width,
    href: href,
    id_: id_,
    name: name,
    rel: rel,
    src: src,
    target: target,
    title: title,
    download: download,
    method: method,
    action: action,
    enctype: enctype,
    noValidate: noValidate,
    type_: type_,
    value: value,
    min: min,
    max: max,
    step: step,
    disabled: disabled,
    enabled: enabled,
    required: required,
    readOnly: readOnly,
    spellcheck: spellcheck,
    checked: checked,
    selected: selected,
    selectedIndex: selectedIndex,
    placeholder: placeholder,
    autocomplete: autocomplete,
    list: list,
    autofocus: autofocus,
    multiple: multiple,
    pattern: pattern,
    accept: accept,
    autoplay: autoplay,
    controls: controls,
    loop: loop,
    muted: muted,
    poster: poster,
    preload: preload,
    draggable: draggable,
    tabIndex: tabIndex,
    newtypeIProp: newtypeIProp,
    functorIProp: functorIProp
};

},{"../Control.Applicative/index.js":29,"../DOM.HTML.Indexed.OnOff/index.js":81,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.String.Common/index.js":241,"../Halogen.HTML.Core/index.js":341,"../Halogen.Query.Input/index.js":350,"../Halogen.VDom.DOM.Prop/index.js":353,"../Unsafe.Coerce/index.js":405}],345:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var slot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (component) {
                        return function (input) {
                            return function (outputQuery) {
                                return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot(dictCons)(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(outputQuery)));
                            };
                        };
                    };
                };
            };
        };
    };
};
var memoized = function (eqFn) {
    return function (f) {
        return function (a) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunked(eqFn)(f)(a)));
        };
    };
};
var lazy3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk3(f, a, b, c)));
            };
        };
    };
};
var lazy2 = function (f) {
    return function (a) {
        return function (b) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk2(f, a, b)));
        };
    };
};
var lazy = function (f) {
    return function (a) {
        return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk1(f, a)));
    };
};
var fromPlainHTML = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    fromPlainHTML: fromPlainHTML,
    slot: slot,
    memoized: memoized
};

},{"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.VDom.Thunk/index.js":357,"../Unsafe.Coerce/index.js":405}],346:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ChildQuery = (function () {
    function ChildQuery(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ChildQuery.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ChildQuery(value0, value1, value2);
            };
        };
    };
    return ChildQuery;
})();
var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var functorChildQuery = new Data_Functor.Functor(function (f) {
    return unChildQueryBox(function (v) {
        return mkChildQueryBox(new ChildQuery(function (dictApplicative) {
            return v.value0(dictApplicative);
        }, v.value1, function ($6) {
            return f(v.value2($6));
        }));
    });
});
module.exports = {
    ChildQuery: ChildQuery,
    mkChildQueryBox: mkChildQueryBox,
    unChildQueryBox: unChildQueryBox,
    functorChildQuery: functorChildQuery
};

},{"../Data.Functor/index.js":156,"../Unsafe.Coerce/index.js":405}],347:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Finalizer = function (x) {
    return x;
};
var EventSource = function (x) {
    return x;
};
var Emitter = function (x) {
    return x;
};
var semigroupFinalizer = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var newtypeEventSource = new Data_Newtype.Newtype(function (n) {
    return n;
}, EventSource);
var monoidFinalizer = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFinalizer(dictApplicative.Apply0());
    }, Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
};
var hoistFinalizer = function (nat) {
    return function (v) {
        return nat(v);
    };
};
var hoistEmitter = function (nat) {
    return function (v) {
        return function ($43) {
            return nat(v($43));
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.hoistFreeT(Control_Coroutine.functorEmit)(dictFunctor)(nat)(e.producer),
                    finalizer: hoistFinalizer(nat)(e.finalizer)
                };
            })(nat(v)));
        };
    };
};
var functorEventSource = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.interpret(Control_Coroutine.functorEmit)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine.bifunctorEmit)(f))(e.producer),
                    finalizer: e.finalizer
                };
            })(v));
        };
    });
};
var finalize = function (v) {
    return v;
};
var emit = function (v) {
    return function (a) {
        return v(new Data_Either.Left(a));
    };
};
var close = function (v) {
    return v(new Data_Either.Right(Data_Unit.unit));
};
var affEventSource = function (dictMonadAff) {
    return function (recv) {
        return EventSource(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v1) {
                var producer = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Function.flip(Effect_Aff_AVar.put)(v1))(recv(Data_Function.flip(Effect_Aff_AVar.put)(v))))))(function () {
                    return Control_Coroutine.producer((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff_AVar.take(v)));
                });
                var finalizer = Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.attempt(Effect_Aff_AVar.take(v1))))(function (v2) {
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                    };
                    if (v2 instanceof Data_Either.Right) {
                        return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.kill(Effect_Exception.error("finalized"))(v1))(function () {
                            return finalize(v2.value0);
                        }));
                    };
                    throw new Error("Failed pattern match at Halogen.Query.EventSource (line 71, column 51 - line 75, column 21): " + [ v2.constructor.name ]);
                });
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    producer: producer,
                    finalizer: finalizer
                });
            });
        })));
    };
};
var effectEventSource = function (dictMonadAff) {
    return function ($44) {
        return affEventSource(dictMonadAff)(Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(hoistEmitter(Effect_Aff.launchAff_))(function ($45) {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(hoistFinalizer(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)))($45));
        })($44));
    };
};
var eventListenerEventSource = function (dictMonadAff) {
    return function (eventType) {
        return function (target) {
            return function (f) {
                return effectEventSource(dictMonadAff)(function (emitter) {
                    return function __do() {
                        var v = Web_Event_EventTarget.eventListener(function ($46) {
                            return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(emit(emitter))(f($46));
                        })();
                        Web_Event_EventTarget.addEventListener(eventType)(v)(false)(target)();
                        return Web_Event_EventTarget.removeEventListener(eventType)(v)(false)(target);
                    };
                });
            };
        };
    };
};
module.exports = {
    EventSource: EventSource,
    hoist: hoist,
    affEventSource: affEventSource,
    effectEventSource: effectEventSource,
    eventListenerEventSource: eventListenerEventSource,
    Emitter: Emitter,
    emit: emit,
    close: close,
    hoistEmitter: hoistEmitter,
    Finalizer: Finalizer,
    finalize: finalize,
    hoistFinalizer: hoistFinalizer,
    newtypeEventSource: newtypeEventSource,
    functorEventSource: functorEventSource,
    semigroupFinalizer: semigroupFinalizer,
    monoidFinalizer: monoidFinalizer
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Coroutine/index.js":38,"../Control.Monad.Free.Trans/index.js":48,"../Control.Monad.Trans.Class/index.js":61,"../Data.Bifunctor/index.js":105,"../Data.Either/index.js":129,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Profunctor/index.js":222,"../Data.Semigroup/index.js":230,"../Data.Unit/index.js":266,"../Effect.Aff.AVar/index.js":273,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Exception/index.js":284,"../Effect/index.js":294,"../Web.Event.EventTarget/index.js":427}],348:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var SubscriptionId = function (x) {
    return x;
};
var ForkId = function (x) {
    return x;
};
var State = (function () {
    function State(value0) {
        this.value0 = value0;
    };
    State.create = function (value0) {
        return new State(value0);
    };
    return State;
})();
var Subscribe = (function () {
    function Subscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Subscribe.create = function (value0) {
        return function (value1) {
            return new Subscribe(value0, value1);
        };
    };
    return Subscribe;
})();
var Unsubscribe = (function () {
    function Unsubscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Unsubscribe.create = function (value0) {
        return function (value1) {
            return new Unsubscribe(value0, value1);
        };
    };
    return Unsubscribe;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var ChildQuery = (function () {
    function ChildQuery(value0) {
        this.value0 = value0;
    };
    ChildQuery.create = function (value0) {
        return new ChildQuery(value0);
    };
    return ChildQuery;
})();
var Raise = (function () {
    function Raise(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Raise.create = function (value0) {
        return function (value1) {
            return new Raise(value0, value1);
        };
    };
    return Raise;
})();
var Par = (function () {
    function Par(value0) {
        this.value0 = value0;
    };
    Par.create = function (value0) {
        return new Par(value0);
    };
    return Par;
})();
var Fork = (function () {
    function Fork(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fork.create = function (value0) {
        return function (value1) {
            return new Fork(value0, value1);
        };
    };
    return Fork;
})();
var Kill = (function () {
    function Kill(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Kill.create = function (value0) {
        return function (value1) {
            return new Kill(value0, value1);
        };
    };
    return Kill;
})();
var GetRef = (function () {
    function GetRef(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    GetRef.create = function (value0) {
        return function (value1) {
            return new GetRef(value0, value1);
        };
    };
    return GetRef;
})();
var HalogenAp = function (x) {
    return x;
};
var HalogenM = function (x) {
    return x;
};
var unsubscribe = function (sid) {
    return HalogenM(Control_Monad_Free.liftF(new Unsubscribe(sid, Data_Unit.unit)));
};
var subscribe$prime = function (esc) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(esc, Data_Function["const"](Data_Unit.unit))));
};
var subscribe = function (es) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(function (v) {
        return es;
    }, Control_Category.identity(Control_Category.categoryFn))));
};
var semigroupHalogenM = function (dictSemigroup) {
    return Control_Monad_Free.semigroupFree(dictSemigroup);
};
var raise = function (o) {
    return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
};
var queryAll = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (q) {
                    var catMapMaybes = function (dictOrd1) {
                        return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (k) {
                            return function (v) {
                                return function (acc) {
                                    return Data_Maybe.maybe(acc)(Data_Function.flip(Data_Map_Internal.insert(dictOrd1)(k))(acc))(v);
                                };
                            };
                        })(Data_Map_Internal.empty);
                    };
                    return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                        return function (k) {
                            return function ($131) {
                                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(catMapMaybes(dictOrd))(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(dictApplicative)(k)(Halogen_Data_Slot.slots(dictCons)(dictIsSymbol)(dictOrd)(label)($131)));
                            };
                        };
                    }, q, Control_Category.identity(Control_Category.categoryFn))))));
                };
            };
        };
    };
};
var query = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (q) {
                        return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            return function (k) {
                                return function ($132) {
                                    return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k)(Halogen_Data_Slot.lookup(dictCons)(dictIsSymbol)(dictOrd)(label)(p)($132));
                                };
                            };
                        }, q, Control_Category.identity(Control_Category.categoryFn))))));
                    };
                };
            };
        };
    };
};
var ordSubscriptionId = Data_Ord.ordInt;
var ordForkId = Data_Ord.ordInt;
var newtypeHalogenAp = new Data_Newtype.Newtype(function (n) {
    return n;
}, HalogenAp);
var monoidHalogenM = function (dictMonoid) {
    return Control_Monad_Free.monoidFree(dictMonoid);
};
var monadTransHalogenM = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($133) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create($133)));
    };
});
var monadHalogenM = Control_Monad_Free.freeMonad;
var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
    return monadHalogenM;
}, function ($134) {
    return HalogenM(Control_Monad_Free.liftF(State.create($134)));
});
var monadTellHalogenM = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadHalogenM;
    }, function ($135) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Writer_Class.tell(dictMonadTell)($135))));
    });
};
var monadThrowHalogenM = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadHalogenM;
    }, function ($136) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Error_Class.throwError(dictMonadThrow)($136))));
    });
};
var monadEffectHalogenM = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadHalogenM;
    }, function ($137) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create(Effect_Class.liftEffect(dictMonadEffect)($137))));
    });
};
var monadAskHalogenM = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadHalogenM;
    }, HalogenM(Control_Monad_Free.liftF(new Lift(Control_Monad_Reader_Class.ask(dictMonadAsk)))));
};
var monadAffHalogenM = function (dictMonadAff) {
    return new Effect_Aff_Class.MonadAff(function () {
        return monadEffectHalogenM(dictMonadAff.MonadEffect0());
    }, function ($138) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create(Effect_Aff_Class.liftAff(dictMonadAff)($138))));
    });
};
var mapOutput = function (f) {
    return function (v) {
        var go = function (v1) {
            if (v1 instanceof State) {
                return new State(v1.value0);
            };
            if (v1 instanceof Subscribe) {
                return new Subscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Unsubscribe) {
                return new Unsubscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Lift) {
                return new Lift(v1.value0);
            };
            if (v1 instanceof ChildQuery) {
                return new ChildQuery(v1.value0);
            };
            if (v1 instanceof Raise) {
                return new Raise(f(v1.value0), v1.value1);
            };
            if (v1 instanceof Par) {
                return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapOutput(f)))(v1.value0));
            };
            if (v1 instanceof Fork) {
                return new Fork(mapOutput(f)(v1.value0), v1.value1);
            };
            if (v1 instanceof Kill) {
                return new Kill(v1.value0, v1.value1);
            };
            if (v1 instanceof GetRef) {
                return new GetRef(v1.value0, v1.value1);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 260, column 8 - line 270, column 29): " + [ v1.constructor.name ]);
        };
        return Control_Monad_Free.hoistFree(go)(v);
    };
};
var mapAction = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe(function ($139) {
                        return Data_Functor.map(Halogen_Query_EventSource.functorEventSource(dictFunctor))(f)(v1.value0($139));
                    }, v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapAction(dictFunctor)(f)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(mapAction(dictFunctor)(f)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 240, column 8 - line 250, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var kill = function (fid) {
    return HalogenM(Control_Monad_Free.liftF(new Kill(fid, Data_Unit.unit)));
};
var imapState = function (f) {
    return function (f$prime) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(function ($140) {
                        return Data_Functor.map(Data_Tuple.functorTuple)(f)(v1.value0(f$prime($140)));
                    });
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(imapState(f)(f$prime)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(imapState(f)(f$prime)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 219, column 8 - line 229, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe(function ($141) {
                        return Halogen_Query_EventSource.hoist(dictFunctor)(nat)(v1.value0($141));
                    }, v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(nat(v1.value0));
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(hoist(dictFunctor)(nat)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(hoist(dictFunctor)(nat)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 281, column 8 - line 291, column 28): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var getRef = function (p) {
    return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.identity(Control_Category.categoryFn))));
};
var functorHalogenM = Control_Monad_Free.freeFunctor;
var functorHalogenAp = Control_Applicative_Free.functorFreeAp;
var functorHalogenF = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof State) {
                return new State(function ($142) {
                    return Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(f)(v.value0($142));
                });
            };
            if (v instanceof Subscribe) {
                return new Subscribe(v.value0, function ($143) {
                    return f(v.value1($143));
                });
            };
            if (v instanceof Unsubscribe) {
                return new Unsubscribe(v.value0, f(v.value1));
            };
            if (v instanceof Lift) {
                return new Lift(Data_Functor.map(dictFunctor)(f)(v.value0));
            };
            if (v instanceof ChildQuery) {
                return new ChildQuery(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(f)(v.value0));
            };
            if (v instanceof Raise) {
                return new Raise(v.value0, f(v.value1));
            };
            if (v instanceof Par) {
                return new Par(Data_Functor.map(functorHalogenAp)(f)(v.value0));
            };
            if (v instanceof Fork) {
                return new Fork(v.value0, function ($144) {
                    return f(v.value1($144));
                });
            };
            if (v instanceof Kill) {
                return new Kill(v.value0, f(v.value1));
            };
            if (v instanceof GetRef) {
                return new GetRef(v.value0, function ($145) {
                    return f(v.value1($145));
                });
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 47, column 11 - line 57, column 37): " + [ v.constructor.name ]);
        };
    });
};
var fork = function (hmu) {
    return HalogenM(Control_Monad_Free.liftF(new Fork(hmu, Control_Category.identity(Control_Category.categoryFn))));
};
var eqSubscriptionId = Data_Eq.eqInt;
var eqForkId = Data_Eq.eqInt;
var bindHalogenM = Control_Monad_Free.freeBind;
var applyHalogenM = Control_Monad_Free.freeApply;
var applyHalogenAp = Control_Applicative_Free.applyFreeAp;
var applicativeHalogenM = Control_Monad_Free.freeApplicative;
var monadRecHalogenM = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadHalogenM;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(bindHalogenM)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(monadRecHalogenM)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeHalogenM)(v.value0);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 84, column 26 - line 86, column 21): " + [ v.constructor.name ]);
        });
    };
});
var applicativeHalogenAp = Control_Applicative_Free.applicativeFreeAp;
var parallelHalogenM = new Control_Parallel_Class.Parallel(function () {
    return applicativeHalogenAp;
}, function () {
    return monadHalogenM;
}, function ($146) {
    return HalogenAp(Control_Applicative_Free.liftFreeAp($146));
}, function ($147) {
    return HalogenM(Control_Monad_Free.liftF(Par.create($147)));
});
module.exports = {
    State: State,
    Subscribe: Subscribe,
    Unsubscribe: Unsubscribe,
    Lift: Lift,
    ChildQuery: ChildQuery,
    Raise: Raise,
    Par: Par,
    Fork: Fork,
    Kill: Kill,
    GetRef: GetRef,
    HalogenM: HalogenM,
    HalogenAp: HalogenAp,
    raise: raise,
    query: query,
    queryAll: queryAll,
    SubscriptionId: SubscriptionId,
    subscribe: subscribe,
    "subscribe'": subscribe$prime,
    unsubscribe: unsubscribe,
    ForkId: ForkId,
    fork: fork,
    kill: kill,
    getRef: getRef,
    imapState: imapState,
    mapAction: mapAction,
    mapOutput: mapOutput,
    hoist: hoist,
    functorHalogenF: functorHalogenF,
    functorHalogenM: functorHalogenM,
    applyHalogenM: applyHalogenM,
    applicativeHalogenM: applicativeHalogenM,
    bindHalogenM: bindHalogenM,
    monadHalogenM: monadHalogenM,
    semigroupHalogenM: semigroupHalogenM,
    monoidHalogenM: monoidHalogenM,
    monadEffectHalogenM: monadEffectHalogenM,
    monadAffHalogenM: monadAffHalogenM,
    parallelHalogenM: parallelHalogenM,
    monadTransHalogenM: monadTransHalogenM,
    monadRecHalogenM: monadRecHalogenM,
    monadStateHalogenM: monadStateHalogenM,
    monadAskHalogenM: monadAskHalogenM,
    monadTellHalogenM: monadTellHalogenM,
    monadThrowHalogenM: monadThrowHalogenM,
    newtypeHalogenAp: newtypeHalogenAp,
    functorHalogenAp: functorHalogenAp,
    applyHalogenAp: applyHalogenAp,
    applicativeHalogenAp: applicativeHalogenAp,
    eqSubscriptionId: eqSubscriptionId,
    ordSubscriptionId: ordSubscriptionId,
    eqForkId: eqForkId,
    ordForkId: ordForkId
};

},{"../Control.Applicative.Free/index.js":28,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Free/index.js":49,"../Control.Monad.Reader.Class/index.js":53,"../Control.Monad.Rec.Class/index.js":55,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.Trans.Class/index.js":61,"../Control.Monad.Writer.Class/index.js":62,"../Control.Parallel.Class/index.js":68,"../Data.Bifunctor/index.js":105,"../Data.Eq/index.js":133,"../Data.FoldableWithIndex/index.js":139,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Effect.Aff.Class/index.js":274,"../Effect.Class/index.js":279,"../Halogen.Data.Slot/index.js":339,"../Halogen.Query.ChildQuery/index.js":346,"../Halogen.Query.EventSource/index.js":347}],349:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Initialize = (function () {
    function Initialize(value0) {
        this.value0 = value0;
    };
    Initialize.create = function (value0) {
        return new Initialize(value0);
    };
    return Initialize;
})();
var Finalize = (function () {
    function Finalize(value0) {
        this.value0 = value0;
    };
    Finalize.create = function (value0) {
        return new Finalize(value0);
    };
    return Finalize;
})();
var Receive = (function () {
    function Receive(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Receive.create = function (value0) {
        return function (value1) {
            return new Receive(value0, value1);
        };
    };
    return Receive;
})();
var Action = (function () {
    function Action(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Action.create = function (value0) {
        return function (value1) {
            return new Action(value0, value1);
        };
    };
    return Action;
})();
var Query = (function () {
    function Query(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Query.create = function (value0) {
        return function (value1) {
            return new Query(value0, value1);
        };
    };
    return Query;
})();
var functorHalogenQ = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Initialize) {
            return new Initialize(f(m.value0));
        };
        if (m instanceof Finalize) {
            return new Finalize(f(m.value0));
        };
        if (m instanceof Receive) {
            return new Receive(m.value0, f(m.value1));
        };
        if (m instanceof Action) {
            return new Action(m.value0, f(m.value1));
        };
        if (m instanceof Query) {
            return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(f)(m.value0), Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
        };
        throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 23, column 8 - line 23, column 72): " + [ m.constructor.name ]);
    };
});
var bifunctorHalogenQ = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Initialize) {
                return new Initialize(g(v.value0));
            };
            if (v instanceof Finalize) {
                return new Finalize(g(v.value0));
            };
            if (v instanceof Receive) {
                return new Receive(f(v.value0), g(v.value1));
            };
            if (v instanceof Action) {
                return new Action(v.value0, g(v.value1));
            };
            if (v instanceof Query) {
                return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(g)(v.value0), Data_Functor.map(Data_Functor.functorFn)(g)(v.value1));
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 16, column 15 - line 21, column 45): " + [ v.constructor.name ]);
        };
    };
});
module.exports = {
    Initialize: Initialize,
    Finalize: Finalize,
    Receive: Receive,
    Action: Action,
    Query: Query,
    bifunctorHalogenQ: bifunctorHalogenQ,
    functorHalogenQ: functorHalogenQ
};

},{"../Data.Bifunctor/index.js":105,"../Data.Coyoneda/index.js":119,"../Data.Functor/index.js":156}],350:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var RefLabel = function (x) {
    return x;
};
var RefUpdate = (function () {
    function RefUpdate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RefUpdate.create = function (value0) {
        return function (value1) {
            return new RefUpdate(value0, value1);
        };
    };
    return RefUpdate;
})();
var Action = (function () {
    function Action(value0) {
        this.value0 = value0;
    };
    Action.create = function (value0) {
        return new Action(value0);
    };
    return Action;
})();
var ordRefLabel = Data_Ord.ordString;
var newtypeRefLabel = new Data_Newtype.Newtype(function (n) {
    return n;
}, RefLabel);
var functorInput = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof RefUpdate) {
            return new RefUpdate(m.value0, m.value1);
        };
        if (m instanceof Action) {
            return new Action(f(m.value0));
        };
        throw new Error("Failed pattern match at Halogen.Query.Input (line 19, column 8 - line 19, column 41): " + [ m.constructor.name ]);
    };
});
var eqRefLabel = Data_Eq.eqString;
module.exports = {
    RefLabel: RefLabel,
    RefUpdate: RefUpdate,
    Action: Action,
    newtypeRefLabel: newtypeRefLabel,
    eqRefLabel: eqRefLabel,
    ordRefLabel: ordRefLabel,
    functorInput: functorInput
};

},{"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214}],351:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var tell = function (act) {
    return act(Data_Unit.unit);
};
var request = function (req) {
    return req(Control_Category.identity(Control_Category.categoryFn));
};
var getHTMLElementRef = function ($1) {
    return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (v) {
        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(v);
    })(Halogen_Query_HalogenM.getRef($1));
};
module.exports = {
    tell: tell,
    request: request,
    getHTMLElementRef: getHTMLElementRef
};

},{"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Unit/index.js":266,"../Halogen.Query.HalogenM/index.js":348,"../Web.HTML.HTMLElement/index.js":437}],352:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var wasValidated = "was-validated";
var wAuto = "w-auto";
var w75 = "w-75";
var w50 = "w-50";
var w25 = "w-25";
var w100 = "w-100";
var visible = "visible";
var validTooltip = "valid-tooltip";
var validFeedback = "valid-feedback";
var tooltipInner = "tooltip-inner";
var tooltip = "tooltip";
var theadLight = "thead-light";
var theadDark = "thead-dark";
var textWhite50 = "text-white-50";
var textWhite = "text-white";
var textWarning = "text-warning";
var textUppercase = "text-uppercase";
var textTruncate = "text-truncate";
var textSuccess = "text-success";
var textSecondary = "text-secondary";
var textRight = "text-right";
var textPrimary = "text-primary";
var textNowrap = "text-nowrap";
var textMuted = "text-muted";
var textMonospace = "text-monospace";
var textLowercase = "text-lowercase";
var textLight = "text-light";
var textLeft = "text-left";
var textJustify = "text-justify";
var textInfo = "text-info";
var textHide = "text-hide";
var textDark = "text-dark";
var textDanger = "text-danger";
var textCenter = "text-center";
var textCapitalize = "text-capitalize";
var textBody = "text-body";
var textBlack50 = "text-black-50";
var tableWarning = "table-warning";
var tableSuccess = "table-success";
var tableStriped = "table-striped";
var tableSm = "table-sm";
var tableSecondary = "table-secondary";
var tableResponsive = "table-responsive";
var tablePrimary = "table-primary";
var tableLight = "table-light";
var tableInfo = "table-info";
var tableHover = "table-hover";
var tableDark = "table-dark";
var tableDanger = "table-danger";
var tableBorderless = "table-borderless";
var tableBordered = "table-bordered";
var tableActive = "table-active";
var table = "table";
var tabPane = "tab-pane";
var tabContent = "tab-content";
var srOnlyFocusable = "sr-only-focusable";
var srOnly = "sr-only";
var spinnerGrowSm = "spinner-grow-sm";
var spinnerGrow = "spinner-grow";
var spinnerBorderSm = "spinner-border-sm";
var spinnerBorder = "spinner-border";
var small = "small";
var show = "show";
var shadowSm = "shadow-sm";
var shadowNone = "shadow-none";
var shadowLg = "shadow-lg";
var shadow = "shadow";
var row = "row";
var roundedTop = "rounded-top";
var roundedRight = "rounded-right";
var roundedLeft = "rounded-left";
var roundedCircle = "rounded-circle";
var roundedBottom = "rounded-bottom";
var rounded0 = "rounded-0";
var rounded = "rounded";
var py5 = "py-5";
var py4 = "py-4";
var py3 = "py-3";
var py2 = "py-2";
var py1 = "py-1";
var py0 = "py-0";
var px5 = "px-5";
var px4 = "px-4";
var px3 = "px-3";
var px2 = "px-2";
var px1 = "px-1";
var px0 = "px-0";
var pt5 = "pt-5";
var pt4 = "pt-4";
var pt3 = "pt-3";
var pt2 = "pt-2";
var pt1 = "pt-1";
var pt0 = "pt-0";
var progressBarStriped = "progress-bar-striped";
var progressBarAnimated = "progress-bar-animated";
var progressBar = "progress-bar";
var progress = "progress";
var preScrollable = "pre-scrollable";
var pr5 = "pr-5";
var pr4 = "pr-4";
var pr3 = "pr-3";
var pr2 = "pr-2";
var pr1 = "pr-1";
var pr0 = "pr-0";
var positionSticky = "position-sticky";
var positionStatic = "position-static";
var positionRelative = "position-relative";
var positionFixed = "position-fixed";
var positionAbsolute = "position-absolute";
var popoverHeader = "popover-header";
var popoverBody = "popover-body";
var popover = "popover";
var pl5 = "pl-5";
var pl4 = "pl-4";
var pl3 = "pl-3";
var pl2 = "pl-2";
var pl1 = "pl-1";
var pl0 = "pl-0";
var pb5 = "pb-5";
var pb4 = "pb-4";
var pb3 = "pb-3";
var pb2 = "pb-2";
var pb1 = "pb-1";
var pb0 = "pb-0";
var paginationSm = "pagination-sm";
var paginationLg = "pagination-lg";
var pagination = "pagination";
var pageLink = "page-link";
var pageItem = "page-item";
var p5 = "p-5";
var p4 = "p-4";
var p3 = "p-3";
var p2 = "p-2";
var p1 = "p-1";
var p0 = "p-0";
var orderLast = "order-last";
var orderFirst = "order-first";
var order9 = "order-9";
var order8 = "order-8";
var order7 = "order-7";
var order6 = "order-6";
var order5 = "order-5";
var order4 = "order-4";
var order3 = "order-3";
var order2 = "order-2";
var order12 = "order-12";
var order11 = "order-11";
var order10 = "order-10";
var order1 = "order-1";
var order0 = "order-0";
var offsetMd9 = "offset-md-9";
var offsetMd8 = "offset-md-8";
var offsetMd7 = "offset-md-7";
var offsetMd6 = "offset-md-6";
var offsetMd5 = "offset-md-5";
var offsetMd4 = "offset-md-4";
var offsetMd3 = "offset-md-3";
var offsetMd2 = "offset-md-2";
var offsetMd11 = "offset-md-11";
var offsetMd10 = "offset-md-10";
var offsetMd1 = "offset-md-1";
var offset9 = "offset-9";
var offset8 = "offset-8";
var offset7 = "offset-7";
var offset6 = "offset-6";
var offset5 = "offset-5";
var offset4 = "offset-4";
var offset3 = "offset-3";
var offset2 = "offset-2";
var offset11 = "offset-11";
var offset10 = "offset-10";
var offset1 = "offset-1";
var noGutters = "no-gutters";
var navbarTogglerIcon = "navbar-toggler-icon";
var navbarToggler = "navbar-toggler";
var navbarText = "navbar-text";
var navbarNav = "navbar-nav";
var navbarLight = "navbar-light";
var navbarExpandXl = "navbar-expand-xl";
var navbarExpandSm = "navbar-expand-sm";
var navbarExpandMd = "navbar-expand-md";
var navbarExpandLg = "navbar-expand-lg";
var navbarExpand = "navbar-expand";
var navbarDark = "navbar-dark";
var navbarCollapse = "navbar-collapse";
var navbarBrand = "navbar-brand";
var navbar = "navbar";
var navTabs = "nav-tabs";
var navPills = "nav-pills";
var navLink = "nav-link";
var navJustified = "nav-justified";
var navItem = "nav-item";
var navFill = "nav-fill";
var nav = "nav";
var myAuto = "my-auto";
var my5 = "my-5";
var my4 = "my-4";
var my3 = "my-3";
var my2 = "my-2";
var my1 = "my-1";
var my0 = "my-0";
var mxAuto = "mx-auto";
var mx5 = "mx-5";
var mx4 = "mx-4";
var mx3 = "mx-3";
var mx2 = "mx-2";
var mx1 = "mx-1";
var mx0 = "mx-0";
var mw100 = "mw-100";
var mtAuto = "mt-auto";
var mt5 = "mt-5";
var mt4 = "mt-4";
var mt3 = "mt-3";
var mt2 = "mt-2";
var mt1 = "mt-1";
var mt0 = "mt-0";
var mrAuto = "mr-auto";
var mr5 = "mr-5";
var mr4 = "mr-4";
var mr3 = "mr-3";
var mr2 = "mr-2";
var mr1 = "mr-1";
var mr0 = "mr-0";
var modalTitle = "modal-title";
var modalScrollbarMeasure = "modal-scrollbar-measure";
var modalOpen = "modal-open";
var modalHeader = "modal-header";
var modalFooter = "modal-footer";
var modalDialogCentered = "modal-dialog-centered";
var modalDialog = "modal-dialog";
var modalContent = "modal-content";
var modalBody = "modal-body";
var modalBackdrop = "modal-backdrop";
var modal = "modal";
var mlAuto = "ml-auto";
var ml5 = "ml-5";
var ml4 = "ml-4";
var ml3 = "ml-3";
var ml2 = "ml-2";
var ml1 = "ml-1";
var ml0 = "ml-0";
var mh100 = "mh-100";
var mediaBody = "media-body";
var media = "media";
var mbAuto = "mb-auto";
var mb5 = "mb-5";
var mb4 = "mb-4";
var mb3 = "mb-3";
var mb2 = "mb-2";
var mb1 = "mb-1";
var mb0 = "mb-0";
var mark = "mark";
var mAuto = "m-auto";
var m5 = "m-5";
var m4 = "m-4";
var m3 = "m-3";
var m2 = "m-2";
var m1 = "m-1";
var m0 = "m-0";
var listUnstyled = "list-unstyled";
var listInlineItem = "list-inline-item";
var listInline = "list-inline";
var listGroupItemWarning = "list-group-item-warning";
var listGroupItemSuccess = "list-group-item-success";
var listGroupItemSecondary = "list-group-item-secondary";
var listGroupItemPrimary = "list-group-item-primary";
var listGroupItemLight = "list-group-item-light";
var listGroupItemInfo = "list-group-item-info";
var listGroupItemDark = "list-group-item-dark";
var listGroupItemDanger = "list-group-item-danger";
var listGroupItemAction = "list-group-item-action";
var listGroupItem = "list-group-item";
var listGroupFlush = "list-group-flush";
var listGroup = "list-group";
var lead = "lead";
var justifyContentStart = "justify-content-start";
var justifyContentEnd = "justify-content-end";
var justifyContentCenter = "justify-content-center";
var justifyContentBetween = "justify-content-between";
var justifyContentAround = "justify-content-around";
var jumbotronFluid = "jumbotron-fluid";
var jumbotron = "jumbotron";
var isValid = "is-valid";
var isInvalid = "is-invalid";
var invisible = "invisible";
var invalidTooltip = "invalid-tooltip";
var invalidFeedback = "invalid-feedback";
var inputGroupText = "input-group-text";
var inputGroupSm = "input-group-sm";
var inputGroupPrepend = "input-group-prepend";
var inputGroupLg = "input-group-lg";
var inputGroupAppend = "input-group-append";
var inputGroup = "input-group";
var initialism = "initialism";
var imgThumbnail = "img-thumbnail";
var imgFluid = "img-fluid";
var hAuto = "h-auto";
var h75 = "h-75";
var h6 = "h6";
var h50 = "h-50";
var h5 = "h5";
var h4 = "h4";
var h3 = "h3";
var h25 = "h-25";
var h2 = "h2";
var h100 = "h-100";
var h1 = "h1";
var formText = "form-text";
var formRow = "form-row";
var formInline = "form-inline";
var formGroup = "form-group";
var formControlSm = "form-control-sm";
var formControlRange = "form-control-range";
var formControlPlaintext = "form-control-plaintext";
var formControlLg = "form-control-lg";
var formControlFile = "form-control-file";
var formControl = "form-control";
var formCheckLabel = "form-check-label";
var formCheckInput = "form-check-input";
var formCheckInline = "form-check-inline";
var formCheck = "form-check";
var fontWeightNormal = "font-weight-normal";
var fontWeightLight = "font-weight-light";
var fontWeightBold = "font-weight-bold";
var fontItalic = "font-italic";
var focus = "focus";
var floatRight = "float-right";
var floatNone = "float-none";
var floatLeft = "float-left";
var flexWrapReverse = "flex-wrap-reverse";
var flexWrap = "flex-wrap";
var flexShrink1 = "flex-shrink-1";
var flexShrink0 = "flex-shrink-0";
var flexRowReverse = "flex-row-reverse";
var flexRow = "flex-row";
var flexNowrap = "flex-nowrap";
var flexGrow1 = "flex-grow-1";
var flexGrow0 = "flex-grow-0";
var flexFill = "flex-fill";
var flexColumnReverse = "flex-column-reverse";
var flexColumn = "flex-column";
var fixedTop = "fixed-top";
var fixedBottom = "fixed-bottom";
var figureImg = "figure-img";
var figureCaption = "figure-caption";
var figure = "figure";
var fade = "fade";
var embedResponsiveItem = "embed-responsive-item";
var embedResponsive4by3 = "embed-responsive-4by3";
var embedResponsive21by9 = "embed-responsive-21by9";
var embedResponsive1by1 = "embed-responsive-1by1";
var embedResponsive16by9 = "embed-responsive-16by9";
var embedResponsive = "embed-responsive";
var dropup = "dropup";
var dropright = "dropright";
var dropleft = "dropleft";
var dropdownToggleSplit = "dropdown-toggle-split";
var dropdownToggle = "dropdown-toggle";
var dropdownMenuRight = "dropdown-menu-right";
var dropdownMenu = "dropdown-menu";
var dropdownItemText = "dropdown-item-text";
var dropdownItem = "dropdown-item";
var dropdownHeader = "dropdown-header";
var dropdownDivider = "dropdown-divider";
var dropdown = "dropdown";
var display4 = "display-4";
var display3 = "display-3";
var display2 = "display-2";
var display1 = "display-1";
var disabled = "disabled";
var dTableRow = "d-table-row";
var dTableCell = "d-table-cell";
var dTable = "d-table";
var dNone = "d-none";
var dInlineFlex = "d-inline-flex";
var dInlineBlock = "d-inline-block";
var dInline = "d-inline";
var dFlex = "d-flex";
var dBlock = "d-block";
var customSelectSm = "custom-select-sm";
var customSelectLg = "custom-select-lg";
var customSelect = "custom-select";
var customRange = "custom-range";
var customRadio = "custom-radio";
var customFileLabel = "custom-file-label";
var customFileInput = "custom-file-input";
var customFile = "custom-file";
var customControlLabel = "custom-control-label";
var customControlInput = "custom-control-input";
var customControlInline = "custom-control-inline";
var customControl = "custom-control";
var customCheckbox = "custom-checkbox";
var containerFluid = "container-fluid";
var container = "container";
var collapsing = "collapsing";
var collapse = "collapse";
var colXlAuto = "col-xl-auto";
var colXl9 = "col-xl-9";
var colXl8 = "col-xl-8";
var colXl7 = "col-xl-7";
var colXl6 = "col-xl-6";
var colXl5 = "col-xl-5";
var colXl4 = "col-xl-4";
var colXl3 = "col-xl-3";
var colXl2 = "col-xl-2";
var colXl12 = "col-xl-12";
var colXl11 = "col-xl-11";
var colXl10 = "col-xl-10";
var colXl1 = "col-xl-1";
var colXl = "col-xl";
var colSmAuto = "col-sm-auto";
var colSm9 = "col-sm-9";
var colSm8 = "col-sm-8";
var colSm7 = "col-sm-7";
var colSm6 = "col-sm-6";
var colSm5 = "col-sm-5";
var colSm4 = "col-sm-4";
var colSm3 = "col-sm-3";
var colSm2 = "col-sm-2";
var colSm12 = "col-sm-12";
var colSm11 = "col-sm-11";
var colSm10 = "col-sm-10";
var colSm1 = "col-sm-1";
var colSm = "col-sm";
var colMdAuto = "col-md-auto";
var colMd9 = "col-md-9";
var colMd8 = "col-md-8";
var colMd7 = "col-md-7";
var colMd6 = "col-md-6";
var colMd5 = "col-md-5";
var colMd4 = "col-md-4";
var colMd3 = "col-md-3";
var colMd2 = "col-md-2";
var colMd12 = "col-md-12";
var colMd11 = "col-md-11";
var colMd10 = "col-md-10";
var colMd1 = "col-md-1";
var colMd = "col-md";
var colLgAuto = "col-lg-auto";
var colLg9 = "col-lg-9";
var colLg8 = "col-lg-8";
var colLg7 = "col-lg-7";
var colLg6 = "col-lg-6";
var colLg5 = "col-lg-5";
var colLg4 = "col-lg-4";
var colLg3 = "col-lg-3";
var colLg2 = "col-lg-2";
var colLg12 = "col-lg-12";
var colLg11 = "col-lg-11";
var colLg10 = "col-lg-10";
var colLg1 = "col-lg-1";
var colLg = "col-lg";
var colFormLabelSm = "col-form-label-sm";
var colFormLabelLg = "col-form-label-lg";
var colFormLabel = "col-form-label";
var colAuto = "col-auto";
var col9 = "col-9";
var col8 = "col-8";
var col7 = "col-7";
var col6 = "col-6";
var col5 = "col-5";
var col4 = "col-4";
var col3 = "col-3";
var col2 = "col-2";
var col12 = "col-12";
var col11 = "col-11";
var col10 = "col-10";
var col1 = "col-1";
var col = "col";
var close = "close";
var clearfix = "clearfix";
var carouselItemRight = "carousel-item-right";
var carouselItemPrev = "carousel-item-prev";
var carouselItemNext = "carousel-item-next";
var carouselItemLeft = "carousel-item-left";
var carouselItem = "carousel-item";
var carouselInner = "carousel-inner";
var carouselIndicators = "carousel-indicators";
var carouselFade = "carousel-fade";
var carouselControlPrevIcon = "carousel-control-prev-icon";
var carouselControlPrev = "carousel-control-prev";
var carouselControlNextIcon = "carousel-control-next-icon";
var carouselControlNext = "carousel-control-next";
var carouselCaption = "carousel-caption";
var carousel = "carousel";
var cardTitle = "card-title";
var cardText = "card-text";
var cardSubtitle = "card-subtitle";
var cardLink = "card-link";
var cardImgTop = "card-img-top";
var cardImgOverlay = "card-img-overlay";
var cardImgBottom = "card-img-bottom";
var cardImg = "card-img";
var cardHeaderTabs = "card-header-tabs";
var cardHeaderPills = "card-header-pills";
var cardHeader = "card-header";
var cardGroup = "card-group";
var cardFooter = "card-footer";
var cardDeck = "card-deck";
var cardColumns = "card-columns";
var cardBody = "card-body";
var card = "card";
var btnWarning = "btn-warning";
var btnToolbar = "btn-toolbar";
var btnSuccess = "btn-success";
var btnSm = "btn-sm";
var btnSecondary = "btn-secondary";
var btnPrimary = "btn-primary";
var btnOutlineWarning = "btn-outline-warning";
var btnOutlineSuccess = "btn-outline-success";
var btnOutlineSecondary = "btn-outline-secondary";
var btnOutlinePrimary = "btn-outline-primary";
var btnOutlineLight = "btn-outline-light";
var btnOutlineInfo = "btn-outline-info";
var btnOutlineDark = "btn-outline-dark";
var btnOutlineDanger = "btn-outline-danger";
var btnLink = "btn-link";
var btnLight = "btn-light";
var btnLg = "btn-lg";
var btnInfo = "btn-info";
var btnGroupVertical = "btn-group-vertical";
var btnGroupToggle = "btn-group-toggle";
var btnGroupSm = "btn-group-sm";
var btnGroupLg = "btn-group-lg";
var btnGroup = "btn-group";
var btnDark = "btn-dark";
var btnDanger = "btn-danger";
var btnBlock = "btn-block";
var btn = "btn";
var bsTooltipTop = "bs-tooltip-top";
var bsTooltipRight = "bs-tooltip-right";
var bsTooltipLeft = "bs-tooltip-left";
var bsTooltipBottom = "bs-tooltip-bottom";
var bsTooltipAuto = "bs-tooltip-auto";
var bsPopoverTop = "bs-popover-top";
var bsPopoverRight = "bs-popover-right";
var bsPopoverLeft = "bs-popover-left";
var bsPopoverBottom = "bs-popover-bottom";
var bsPopoverAuto = "bs-popover-auto";
var breadcrumbItem = "breadcrumb-item";
var breadcrumb = "breadcrumb";
var borderWhite = "border-white";
var borderWarning = "border-warning";
var borderTop0 = "border-top-0";
var borderTop = "border-top";
var borderSuccess = "border-success";
var borderSecondary = "border-secondary";
var borderRight0 = "border-right-0";
var borderRight = "border-right";
var borderPrimary = "border-primary";
var borderLight = "border-light";
var borderLeft0 = "border-left-0";
var borderLeft = "border-left";
var borderInfo = "border-info";
var borderDark = "border-dark";
var borderDanger = "border-danger";
var borderBottom0 = "border-bottom-0";
var borderBottom = "border-bottom";
var border0 = "border-0";
var border = "border";
var blockquoteFooter = "blockquote-footer";
var blockquote = "blockquote";
var bgWhite = "bg-white";
var bgWarning = "bg-warning";
var bgTransparent = "bg-transparent";
var bgSuccess = "bg-success";
var bgSecondary = "bg-secondary";
var bgPrimary = "bg-primary";
var bgLight = "bg-light";
var bgInfo = "bg-info";
var bgDark = "bg-dark";
var bgDanger = "bg-danger";
var badgeWarning = "badge-warning";
var badgeSuccess = "badge-success";
var badgeSecondary = "badge-secondary";
var badgePrimary = "badge-primary";
var badgePill = "badge-pill";
var badgeLight = "badge-light";
var badgeInfo = "badge-info";
var badgeDark = "badge-dark";
var badgeDanger = "badge-danger";
var badge = "badge";
var arrow = "arrow";
var alignTop = "align-top";
var alignTextTop = "align-text-top";
var alignTextBottom = "align-text-bottom";
var alignSelfStretch = "align-self-stretch";
var alignSelfStart = "align-self-start";
var alignSelfEnd = "align-self-end";
var alignSelfCenter = "align-self-center";
var alignSelfBaseline = "align-self-baseline";
var alignSelfAuto = "align-self-auto";
var alignMiddle = "align-middle";
var alignItemsStretch = "align-items-stretch";
var alignItemsStart = "align-items-start";
var alignItemsEnd = "align-items-end";
var alignItemsCenter = "align-items-center";
var alignItemsBaseline = "align-items-baseline";
var alignContentStretch = "align-content-stretch";
var alignContentStart = "align-content-start";
var alignContentEnd = "align-content-end";
var alignContentCenter = "align-content-center";
var alignContentBetween = "align-content-between";
var alignContentAround = "align-content-around";
var alignBottom = "align-bottom";
var alignBaseline = "align-baseline";
var alertWarning = "alert-warning";
var alertSuccess = "alert-success";
var alertSecondary = "alert-secondary";
var alertPrimary = "alert-primary";
var alertLink = "alert-link";
var alertLight = "alert-light";
var alertInfo = "alert-info";
var alertHeading = "alert-heading";
var alertDismissible = "alert-dismissible";
var alertDark = "alert-dark";
var alertDanger = "alert-danger";
var alert = "alert";
var active = "active";
var accordion = "accordion";
module.exports = {
    accordion: accordion,
    active: active,
    alert: alert,
    alertDanger: alertDanger,
    alertDark: alertDark,
    alertDismissible: alertDismissible,
    alertHeading: alertHeading,
    alertInfo: alertInfo,
    alertLight: alertLight,
    alertLink: alertLink,
    alertPrimary: alertPrimary,
    alertSecondary: alertSecondary,
    alertSuccess: alertSuccess,
    alertWarning: alertWarning,
    alignBaseline: alignBaseline,
    alignBottom: alignBottom,
    alignContentAround: alignContentAround,
    alignContentBetween: alignContentBetween,
    alignContentCenter: alignContentCenter,
    alignContentEnd: alignContentEnd,
    alignContentStart: alignContentStart,
    alignContentStretch: alignContentStretch,
    alignItemsBaseline: alignItemsBaseline,
    alignItemsCenter: alignItemsCenter,
    alignItemsEnd: alignItemsEnd,
    alignItemsStart: alignItemsStart,
    alignItemsStretch: alignItemsStretch,
    alignMiddle: alignMiddle,
    alignSelfAuto: alignSelfAuto,
    alignSelfBaseline: alignSelfBaseline,
    alignSelfCenter: alignSelfCenter,
    alignSelfEnd: alignSelfEnd,
    alignSelfStart: alignSelfStart,
    alignSelfStretch: alignSelfStretch,
    alignTextBottom: alignTextBottom,
    alignTextTop: alignTextTop,
    alignTop: alignTop,
    arrow: arrow,
    badge: badge,
    badgeDanger: badgeDanger,
    badgeDark: badgeDark,
    badgeInfo: badgeInfo,
    badgeLight: badgeLight,
    badgePill: badgePill,
    badgePrimary: badgePrimary,
    badgeSecondary: badgeSecondary,
    badgeSuccess: badgeSuccess,
    badgeWarning: badgeWarning,
    bgDanger: bgDanger,
    bgDark: bgDark,
    bgInfo: bgInfo,
    bgLight: bgLight,
    bgPrimary: bgPrimary,
    bgSecondary: bgSecondary,
    bgSuccess: bgSuccess,
    bgTransparent: bgTransparent,
    bgWarning: bgWarning,
    bgWhite: bgWhite,
    blockquote: blockquote,
    blockquoteFooter: blockquoteFooter,
    border: border,
    border0: border0,
    borderBottom: borderBottom,
    borderBottom0: borderBottom0,
    borderDanger: borderDanger,
    borderDark: borderDark,
    borderInfo: borderInfo,
    borderLeft: borderLeft,
    borderLeft0: borderLeft0,
    borderLight: borderLight,
    borderPrimary: borderPrimary,
    borderRight: borderRight,
    borderRight0: borderRight0,
    borderSecondary: borderSecondary,
    borderSuccess: borderSuccess,
    borderTop: borderTop,
    borderTop0: borderTop0,
    borderWarning: borderWarning,
    borderWhite: borderWhite,
    breadcrumb: breadcrumb,
    breadcrumbItem: breadcrumbItem,
    bsPopoverAuto: bsPopoverAuto,
    bsPopoverBottom: bsPopoverBottom,
    bsPopoverLeft: bsPopoverLeft,
    bsPopoverRight: bsPopoverRight,
    bsPopoverTop: bsPopoverTop,
    bsTooltipAuto: bsTooltipAuto,
    bsTooltipBottom: bsTooltipBottom,
    bsTooltipLeft: bsTooltipLeft,
    bsTooltipRight: bsTooltipRight,
    bsTooltipTop: bsTooltipTop,
    btn: btn,
    btnBlock: btnBlock,
    btnDanger: btnDanger,
    btnDark: btnDark,
    btnGroup: btnGroup,
    btnGroupLg: btnGroupLg,
    btnGroupSm: btnGroupSm,
    btnGroupToggle: btnGroupToggle,
    btnGroupVertical: btnGroupVertical,
    btnInfo: btnInfo,
    btnLg: btnLg,
    btnLight: btnLight,
    btnLink: btnLink,
    btnOutlineDanger: btnOutlineDanger,
    btnOutlineDark: btnOutlineDark,
    btnOutlineInfo: btnOutlineInfo,
    btnOutlineLight: btnOutlineLight,
    btnOutlinePrimary: btnOutlinePrimary,
    btnOutlineSecondary: btnOutlineSecondary,
    btnOutlineSuccess: btnOutlineSuccess,
    btnOutlineWarning: btnOutlineWarning,
    btnPrimary: btnPrimary,
    btnSecondary: btnSecondary,
    btnSm: btnSm,
    btnSuccess: btnSuccess,
    btnToolbar: btnToolbar,
    btnWarning: btnWarning,
    card: card,
    cardBody: cardBody,
    cardColumns: cardColumns,
    cardDeck: cardDeck,
    cardFooter: cardFooter,
    cardGroup: cardGroup,
    cardHeader: cardHeader,
    cardHeaderPills: cardHeaderPills,
    cardHeaderTabs: cardHeaderTabs,
    cardImg: cardImg,
    cardImgBottom: cardImgBottom,
    cardImgOverlay: cardImgOverlay,
    cardImgTop: cardImgTop,
    cardLink: cardLink,
    cardSubtitle: cardSubtitle,
    cardText: cardText,
    cardTitle: cardTitle,
    carousel: carousel,
    carouselCaption: carouselCaption,
    carouselControlNext: carouselControlNext,
    carouselControlNextIcon: carouselControlNextIcon,
    carouselControlPrev: carouselControlPrev,
    carouselControlPrevIcon: carouselControlPrevIcon,
    carouselFade: carouselFade,
    carouselIndicators: carouselIndicators,
    carouselInner: carouselInner,
    carouselItem: carouselItem,
    carouselItemLeft: carouselItemLeft,
    carouselItemNext: carouselItemNext,
    carouselItemPrev: carouselItemPrev,
    carouselItemRight: carouselItemRight,
    clearfix: clearfix,
    close: close,
    col: col,
    col1: col1,
    col10: col10,
    col11: col11,
    col12: col12,
    col2: col2,
    col3: col3,
    col4: col4,
    col5: col5,
    col6: col6,
    col7: col7,
    col8: col8,
    col9: col9,
    colAuto: colAuto,
    colFormLabel: colFormLabel,
    colFormLabelLg: colFormLabelLg,
    colFormLabelSm: colFormLabelSm,
    colLg: colLg,
    colLg1: colLg1,
    colLg10: colLg10,
    colLg11: colLg11,
    colLg12: colLg12,
    colLg2: colLg2,
    colLg3: colLg3,
    colLg4: colLg4,
    colLg5: colLg5,
    colLg6: colLg6,
    colLg7: colLg7,
    colLg8: colLg8,
    colLg9: colLg9,
    colLgAuto: colLgAuto,
    colMd: colMd,
    colMd1: colMd1,
    colMd10: colMd10,
    colMd11: colMd11,
    colMd12: colMd12,
    colMd2: colMd2,
    colMd3: colMd3,
    colMd4: colMd4,
    colMd5: colMd5,
    colMd6: colMd6,
    colMd7: colMd7,
    colMd8: colMd8,
    colMd9: colMd9,
    colMdAuto: colMdAuto,
    colSm: colSm,
    colSm1: colSm1,
    colSm10: colSm10,
    colSm11: colSm11,
    colSm12: colSm12,
    colSm2: colSm2,
    colSm3: colSm3,
    colSm4: colSm4,
    colSm5: colSm5,
    colSm6: colSm6,
    colSm7: colSm7,
    colSm8: colSm8,
    colSm9: colSm9,
    colSmAuto: colSmAuto,
    colXl: colXl,
    colXl1: colXl1,
    colXl10: colXl10,
    colXl11: colXl11,
    colXl12: colXl12,
    colXl2: colXl2,
    colXl3: colXl3,
    colXl4: colXl4,
    colXl5: colXl5,
    colXl6: colXl6,
    colXl7: colXl7,
    colXl8: colXl8,
    colXl9: colXl9,
    colXlAuto: colXlAuto,
    collapse: collapse,
    collapsing: collapsing,
    container: container,
    containerFluid: containerFluid,
    customCheckbox: customCheckbox,
    customControl: customControl,
    customControlInline: customControlInline,
    customControlInput: customControlInput,
    customControlLabel: customControlLabel,
    customFile: customFile,
    customFileInput: customFileInput,
    customFileLabel: customFileLabel,
    customRadio: customRadio,
    customRange: customRange,
    customSelect: customSelect,
    customSelectLg: customSelectLg,
    customSelectSm: customSelectSm,
    dBlock: dBlock,
    dFlex: dFlex,
    dInline: dInline,
    dInlineBlock: dInlineBlock,
    dInlineFlex: dInlineFlex,
    dNone: dNone,
    dTable: dTable,
    dTableCell: dTableCell,
    dTableRow: dTableRow,
    disabled: disabled,
    display1: display1,
    display2: display2,
    display3: display3,
    display4: display4,
    dropdown: dropdown,
    dropdownDivider: dropdownDivider,
    dropdownHeader: dropdownHeader,
    dropdownItem: dropdownItem,
    dropdownItemText: dropdownItemText,
    dropdownMenu: dropdownMenu,
    dropdownMenuRight: dropdownMenuRight,
    dropdownToggle: dropdownToggle,
    dropdownToggleSplit: dropdownToggleSplit,
    dropleft: dropleft,
    dropright: dropright,
    dropup: dropup,
    embedResponsive: embedResponsive,
    embedResponsive16by9: embedResponsive16by9,
    embedResponsive1by1: embedResponsive1by1,
    embedResponsive21by9: embedResponsive21by9,
    embedResponsive4by3: embedResponsive4by3,
    embedResponsiveItem: embedResponsiveItem,
    fade: fade,
    figure: figure,
    figureCaption: figureCaption,
    figureImg: figureImg,
    fixedBottom: fixedBottom,
    fixedTop: fixedTop,
    flexColumn: flexColumn,
    flexColumnReverse: flexColumnReverse,
    flexFill: flexFill,
    flexGrow0: flexGrow0,
    flexGrow1: flexGrow1,
    flexNowrap: flexNowrap,
    flexRow: flexRow,
    flexRowReverse: flexRowReverse,
    flexShrink0: flexShrink0,
    flexShrink1: flexShrink1,
    flexWrap: flexWrap,
    flexWrapReverse: flexWrapReverse,
    floatLeft: floatLeft,
    floatNone: floatNone,
    floatRight: floatRight,
    focus: focus,
    fontItalic: fontItalic,
    fontWeightBold: fontWeightBold,
    fontWeightLight: fontWeightLight,
    fontWeightNormal: fontWeightNormal,
    formCheck: formCheck,
    formCheckInline: formCheckInline,
    formCheckInput: formCheckInput,
    formCheckLabel: formCheckLabel,
    formControl: formControl,
    formControlFile: formControlFile,
    formControlLg: formControlLg,
    formControlPlaintext: formControlPlaintext,
    formControlRange: formControlRange,
    formControlSm: formControlSm,
    formGroup: formGroup,
    formInline: formInline,
    formRow: formRow,
    formText: formText,
    h100: h100,
    h25: h25,
    h50: h50,
    h75: h75,
    hAuto: hAuto,
    h1: h1,
    h2: h2,
    h3: h3,
    h4: h4,
    h5: h5,
    h6: h6,
    imgFluid: imgFluid,
    imgThumbnail: imgThumbnail,
    initialism: initialism,
    inputGroup: inputGroup,
    inputGroupAppend: inputGroupAppend,
    inputGroupLg: inputGroupLg,
    inputGroupPrepend: inputGroupPrepend,
    inputGroupSm: inputGroupSm,
    inputGroupText: inputGroupText,
    invalidFeedback: invalidFeedback,
    invalidTooltip: invalidTooltip,
    invisible: invisible,
    isInvalid: isInvalid,
    isValid: isValid,
    jumbotron: jumbotron,
    jumbotronFluid: jumbotronFluid,
    justifyContentAround: justifyContentAround,
    justifyContentBetween: justifyContentBetween,
    justifyContentCenter: justifyContentCenter,
    justifyContentEnd: justifyContentEnd,
    justifyContentStart: justifyContentStart,
    lead: lead,
    listGroup: listGroup,
    listGroupFlush: listGroupFlush,
    listGroupItem: listGroupItem,
    listGroupItemAction: listGroupItemAction,
    listGroupItemDanger: listGroupItemDanger,
    listGroupItemDark: listGroupItemDark,
    listGroupItemInfo: listGroupItemInfo,
    listGroupItemLight: listGroupItemLight,
    listGroupItemPrimary: listGroupItemPrimary,
    listGroupItemSecondary: listGroupItemSecondary,
    listGroupItemSuccess: listGroupItemSuccess,
    listGroupItemWarning: listGroupItemWarning,
    listInline: listInline,
    listInlineItem: listInlineItem,
    listUnstyled: listUnstyled,
    m0: m0,
    m1: m1,
    m2: m2,
    m3: m3,
    m4: m4,
    m5: m5,
    mAuto: mAuto,
    mark: mark,
    mb0: mb0,
    mb1: mb1,
    mb2: mb2,
    mb3: mb3,
    mb4: mb4,
    mb5: mb5,
    mbAuto: mbAuto,
    media: media,
    mediaBody: mediaBody,
    mh100: mh100,
    ml0: ml0,
    ml1: ml1,
    ml2: ml2,
    ml3: ml3,
    ml4: ml4,
    ml5: ml5,
    mlAuto: mlAuto,
    modal: modal,
    modalBackdrop: modalBackdrop,
    modalBody: modalBody,
    modalContent: modalContent,
    modalDialog: modalDialog,
    modalDialogCentered: modalDialogCentered,
    modalFooter: modalFooter,
    modalHeader: modalHeader,
    modalOpen: modalOpen,
    modalScrollbarMeasure: modalScrollbarMeasure,
    modalTitle: modalTitle,
    mr0: mr0,
    mr1: mr1,
    mr2: mr2,
    mr3: mr3,
    mr4: mr4,
    mr5: mr5,
    mrAuto: mrAuto,
    mt0: mt0,
    mt1: mt1,
    mt2: mt2,
    mt3: mt3,
    mt4: mt4,
    mt5: mt5,
    mtAuto: mtAuto,
    mw100: mw100,
    mx0: mx0,
    mx1: mx1,
    mx2: mx2,
    mx3: mx3,
    mx4: mx4,
    mx5: mx5,
    mxAuto: mxAuto,
    my0: my0,
    my1: my1,
    my2: my2,
    my3: my3,
    my4: my4,
    my5: my5,
    myAuto: myAuto,
    nav: nav,
    navFill: navFill,
    navItem: navItem,
    navJustified: navJustified,
    navLink: navLink,
    navPills: navPills,
    navTabs: navTabs,
    navbar: navbar,
    navbarBrand: navbarBrand,
    navbarCollapse: navbarCollapse,
    navbarDark: navbarDark,
    navbarExpand: navbarExpand,
    navbarExpandSm: navbarExpandSm,
    navbarExpandMd: navbarExpandMd,
    navbarExpandLg: navbarExpandLg,
    navbarExpandXl: navbarExpandXl,
    navbarLight: navbarLight,
    navbarNav: navbarNav,
    navbarText: navbarText,
    navbarToggler: navbarToggler,
    navbarTogglerIcon: navbarTogglerIcon,
    noGutters: noGutters,
    offset1: offset1,
    offset10: offset10,
    offset11: offset11,
    offset2: offset2,
    offset3: offset3,
    offset4: offset4,
    offset5: offset5,
    offset6: offset6,
    offset7: offset7,
    offset8: offset8,
    offset9: offset9,
    offsetMd1: offsetMd1,
    offsetMd10: offsetMd10,
    offsetMd11: offsetMd11,
    offsetMd2: offsetMd2,
    offsetMd3: offsetMd3,
    offsetMd4: offsetMd4,
    offsetMd5: offsetMd5,
    offsetMd6: offsetMd6,
    offsetMd7: offsetMd7,
    offsetMd8: offsetMd8,
    offsetMd9: offsetMd9,
    order0: order0,
    order1: order1,
    order10: order10,
    order11: order11,
    order12: order12,
    order2: order2,
    order3: order3,
    order4: order4,
    order5: order5,
    order6: order6,
    order7: order7,
    order8: order8,
    order9: order9,
    orderFirst: orderFirst,
    orderLast: orderLast,
    p0: p0,
    p1: p1,
    p2: p2,
    p3: p3,
    p4: p4,
    p5: p5,
    pageItem: pageItem,
    pageLink: pageLink,
    pagination: pagination,
    paginationLg: paginationLg,
    paginationSm: paginationSm,
    pb0: pb0,
    pb1: pb1,
    pb2: pb2,
    pb3: pb3,
    pb4: pb4,
    pb5: pb5,
    pl0: pl0,
    pl1: pl1,
    pl2: pl2,
    pl3: pl3,
    pl4: pl4,
    pl5: pl5,
    popover: popover,
    popoverBody: popoverBody,
    popoverHeader: popoverHeader,
    positionAbsolute: positionAbsolute,
    positionFixed: positionFixed,
    positionRelative: positionRelative,
    positionStatic: positionStatic,
    positionSticky: positionSticky,
    pr0: pr0,
    pr1: pr1,
    pr2: pr2,
    pr3: pr3,
    pr4: pr4,
    pr5: pr5,
    preScrollable: preScrollable,
    progress: progress,
    progressBar: progressBar,
    progressBarAnimated: progressBarAnimated,
    progressBarStriped: progressBarStriped,
    pt0: pt0,
    pt1: pt1,
    pt2: pt2,
    pt3: pt3,
    pt4: pt4,
    pt5: pt5,
    px0: px0,
    px1: px1,
    px2: px2,
    px3: px3,
    px4: px4,
    px5: px5,
    py0: py0,
    py1: py1,
    py2: py2,
    py3: py3,
    py4: py4,
    py5: py5,
    rounded: rounded,
    rounded0: rounded0,
    roundedBottom: roundedBottom,
    roundedCircle: roundedCircle,
    roundedLeft: roundedLeft,
    roundedRight: roundedRight,
    roundedTop: roundedTop,
    row: row,
    shadow: shadow,
    shadowLg: shadowLg,
    shadowNone: shadowNone,
    shadowSm: shadowSm,
    show: show,
    small: small,
    spinnerBorder: spinnerBorder,
    spinnerBorderSm: spinnerBorderSm,
    spinnerGrow: spinnerGrow,
    spinnerGrowSm: spinnerGrowSm,
    srOnly: srOnly,
    srOnlyFocusable: srOnlyFocusable,
    tabContent: tabContent,
    tabPane: tabPane,
    table: table,
    tableActive: tableActive,
    tableBordered: tableBordered,
    tableBorderless: tableBorderless,
    tableDanger: tableDanger,
    tableDark: tableDark,
    tableHover: tableHover,
    tableInfo: tableInfo,
    tableLight: tableLight,
    tablePrimary: tablePrimary,
    tableResponsive: tableResponsive,
    tableSecondary: tableSecondary,
    tableSm: tableSm,
    tableStriped: tableStriped,
    tableSuccess: tableSuccess,
    tableWarning: tableWarning,
    textBlack50: textBlack50,
    textBody: textBody,
    textCapitalize: textCapitalize,
    textCenter: textCenter,
    textDanger: textDanger,
    textDark: textDark,
    textHide: textHide,
    textInfo: textInfo,
    textJustify: textJustify,
    textLeft: textLeft,
    textLight: textLight,
    textLowercase: textLowercase,
    textMonospace: textMonospace,
    textMuted: textMuted,
    textNowrap: textNowrap,
    textPrimary: textPrimary,
    textRight: textRight,
    textSecondary: textSecondary,
    textSuccess: textSuccess,
    textTruncate: textTruncate,
    textUppercase: textUppercase,
    textWarning: textWarning,
    textWhite: textWhite,
    textWhite50: textWhite50,
    theadDark: theadDark,
    theadLight: theadLight,
    tooltip: tooltip,
    tooltipInner: tooltipInner,
    validFeedback: validFeedback,
    validTooltip: validTooltip,
    visible: visible,
    w100: w100,
    w25: w25,
    w50: w50,
    w75: w75,
    wAuto: wAuto,
    wasValidated: wasValidated
};

},{}],353:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Created = (function () {
    function Created(value0) {
        this.value0 = value0;
    };
    Created.create = function (value0) {
        return new Created(value0);
    };
    return Created;
})();
var Removed = (function () {
    function Removed(value0) {
        this.value0 = value0;
    };
    Removed.create = function (value0) {
        return new Removed(value0);
    };
    return Removed;
})();
var Attribute = (function () {
    function Attribute(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Attribute.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Attribute(value0, value1, value2);
            };
        };
    };
    return Attribute;
})();
var Property = (function () {
    function Property(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Property.create = function (value0) {
        return function (value1) {
            return new Property(value0, value1);
        };
    };
    return Property;
})();
var Handler = (function () {
    function Handler(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Handler.create = function (value0) {
        return function (value1) {
            return new Handler(value0, value1);
        };
    };
    return Handler;
})();
var Ref = (function () {
    function Ref(value0) {
        this.value0 = value0;
    };
    Ref.create = function (value0) {
        return new Ref(value0);
    };
    return Ref;
})();
var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
var setProperty = Halogen_VDom_Util.unsafeSetAny;
var removeProperty = function (key, el) {
    var v = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
    if (v === "string") {
        return Halogen_VDom_Util.unsafeSetAny(key, "", el);
    };
    if (key === "rowSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    if (key === "colSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
};
var propToStrKey = function (v) {
    if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
        return "attr/" + (v.value0.value0 + (":" + v.value1));
    };
    if (v instanceof Attribute) {
        return "attr/:" + v.value1;
    };
    if (v instanceof Property) {
        return "prop/" + v.value0;
    };
    if (v instanceof Handler) {
        return "handler/" + v.value0;
    };
    if (v instanceof Ref) {
        return "ref";
    };
    throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 189, column 1): " + [ v.constructor.name ]);
};
var propFromString = Unsafe_Coerce.unsafeCoerce;
var propFromNumber = Unsafe_Coerce.unsafeCoerce;
var propFromInt = Unsafe_Coerce.unsafeCoerce;
var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
var functorProp = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Handler) {
            return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
        };
        if (v instanceof Ref) {
            return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
        };
        return v;
    };
});
var functorElemRef = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Created) {
            return new Created(f(v.value0));
        };
        if (v instanceof Removed) {
            return new Removed(f(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 49, column 1 - line 49, column 42): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var buildProp = function (emit) {
    return function (el) {
        var removeProp = function (prevEvents) {
            return function (v, v1) {
                if (v1 instanceof Attribute) {
                    return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                };
                if (v1 instanceof Property) {
                    return removeProperty(v1.value0, el);
                };
                if (v1 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                    return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                };
                if (v1 instanceof Ref) {
                    return Data_Unit.unit;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
            };
        };
        var mbEmit = function (v) {
            if (v instanceof Data_Maybe.Just) {
                return emit(v.value0)();
            };
            return Data_Unit.unit;
        };
        var haltProp = function (state) {
            var v = Foreign_Object.lookup("ref")(state.props);
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                return mbEmit(v.value0.value0(new Removed(el)));
            };
            return Data_Unit.unit;
        };
        var diffProp = function (prevEvents, events) {
            return function (v, v1, v11, v2) {
                if (v11 instanceof Attribute && v2 instanceof Attribute) {
                    var $61 = v11.value2 === v2.value2;
                    if ($61) {
                        return v2;
                    };
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v11 instanceof Property && v2 instanceof Property) {
                    var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                    if (v4) {
                        return v2;
                    };
                    if (v2.value0 === "value") {
                        var elVal = unsafeGetProperty("value", el);
                        var $70 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                        if ($70) {
                            return v2;
                        };
                        setProperty(v2.value0, v2.value1, el);
                        return v2;
                    };
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v11 instanceof Handler && v2 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                    Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                    return v2;
                };
                return v2;
            };
        };
        var applyProp = function (events) {
            return function (v, v1, v2) {
                if (v2 instanceof Attribute) {
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v2 instanceof Property) {
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v2 instanceof Handler) {
                    var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                    if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                        Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                        return v2;
                    };
                    var v4 = Effect_Ref["new"](v2.value1)();
                    var v5 = Web_Event_EventTarget.eventListener(function (ev) {
                        return function __do() {
                            var v5 = Effect_Ref.read(v4)();
                            return mbEmit(v5(ev));
                        };
                    })();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(v5, v4), events);
                    Halogen_VDom_Util.addEventListener(v2.value0, v5, el);
                    return v2;
                };
                if (v2 instanceof Ref) {
                    mbEmit(v2.value0(new Created(el)));
                    return v2;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
            };
        };
        var patchProp = function (state, ps2) {
            var v = Halogen_VDom_Util.newMutMap();
            var onThis = removeProp(state.events);
            var onThese = diffProp(state.events, v);
            var onThat = applyProp(v);
            var v1 = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
            var nextState = {
                events: Halogen_VDom_Util.unsafeFreeze(v),
                props: v1
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
        };
        var renderProp = function (ps1) {
            var v = Halogen_VDom_Util.newMutMap();
            var v1 = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(v));
            var state = {
                events: Halogen_VDom_Util.unsafeFreeze(v),
                props: v1
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
        };
        return renderProp;
    };
};
module.exports = {
    Attribute: Attribute,
    Property: Property,
    Handler: Handler,
    Ref: Ref,
    Created: Created,
    Removed: Removed,
    propFromString: propFromString,
    propFromBoolean: propFromBoolean,
    propFromInt: propFromInt,
    propFromNumber: propFromNumber,
    buildProp: buildProp,
    functorProp: functorProp,
    functorElemRef: functorElemRef
};

},{"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Effect.Ref/index.js":288,"../Foreign.Object/index.js":311,"../Foreign/index.js":313,"../Halogen.VDom.Machine/index.js":356,"../Halogen.VDom.Util/index.js":360,"../Unsafe.Coerce/index.js":405,"../Web.Event.EventTarget/index.js":427}],354:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var VDomSpec = function (x) {
    return x;
};
var haltWidget = function (v) {
    return Halogen_VDom_Machine.halt(v.widget);
};
var patchWidget = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Widget) {
        var v = Halogen_VDom_Machine.step(state.widget, vdom.value0);
        var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
                build: state.build,
                widget: v
            }, patchWidget, haltWidget));
        })(v);
        return res$prime;
    };
    haltWidget(state);
    return state.build(vdom);
};
var haltText = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    return Halogen_VDom_Util.removeChild(v.node, v1);
};
var patchText = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Text) {
        if (state.value === vdom.value0) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
        };
        if (Data_Boolean.otherwise) {
            var nextState = {
                build: state.build,
                node: state.node,
                value: vdom.value0
            };
            Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
        };
    };
    haltText(state);
    return state.build(vdom);
};
var haltKeyed = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, v1);
    Halogen_VDom_Util.forInE(v.children, function (v2, s) {
        return Halogen_VDom_Machine.halt(s);
    });
    return Halogen_VDom_Machine.halt(v.attrs);
};
var haltElem = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, v1);
    Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
    return Halogen_VDom_Machine.halt(v.attrs);
};
var eqElemSpec = function (ns1, v, ns2, v1) {
    var $84 = v === v1;
    if ($84) {
        if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
            return true;
        };
        if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
            return true;
        };
        return false;
    };
    return false;
};
var patchElem = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        var v1 = Data_Array.length(state.children);
        if (v1 === 0 && v === 0) {
            var v2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: v2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
        };
        var onThis = function (ix, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (ix, s, v2) {
            var v3 = Halogen_VDom_Machine.step(s, v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), state.node);
            return v3;
        };
        var onThat = function (ix, v2) {
            var v3 = state.build(v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), state.node);
            return v3;
        };
        var v2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
        var v3 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: v3,
            ns: vdom.value0,
            name: vdom.value1,
            children: v2
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
    };
    haltElem(state);
    return state.build(vdom);
};
var patchKeyed = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        if (state.length === 0 && v === 0) {
            var v2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: v2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children,
                length: 0
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
        };
        var onThis = function (v2, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (v2, ix$prime, s, v3) {
            var v5 = Halogen_VDom_Machine.step(s, v3.value1);
            Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(v5), state.node);
            return v5;
        };
        var onThat = function (v2, ix, v3) {
            var v5 = state.build(v3.value1);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v5), state.node);
            return v5;
        };
        var v2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
        var v3 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: v3,
            ns: vdom.value0,
            name: vdom.value1,
            children: v2,
            length: v
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
    };
    haltKeyed(state);
    return state.build(vdom);
};
var buildWidget = function (v, build, w) {
    var v1 = v.buildWidget(v)(w);
    var res$prime = Halogen_VDom_Machine.unStep(function (v2) {
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v2.value0, {
            build: build,
            widget: v1
        }, patchWidget, haltWidget));
    })(v1);
    return res$prime;
};
var buildText = function (v, build, s) {
    var v1 = Halogen_VDom_Util.createTextNode(s, v.document);
    var state = {
        build: build,
        node: v1,
        value: s
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1, state, patchText, haltText));
};
var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
    var v1 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(v1);
    var onChild = function (k, ix, v2) {
        var v3 = build(v2.value1);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), node);
        return v3;
    };
    var v2 = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
    var v3 = v.buildAttributes(v1)(as1);
    var state = {
        build: build,
        node: node,
        attrs: v3,
        ns: ns1,
        name: name1,
        children: v2,
        length: Data_Array.length(ch1)
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
};
var buildElem = function (v, build, ns1, name1, as1, ch1) {
    var v1 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(v1);
    var onChild = function (ix, child) {
        var v2 = build(child);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v2), node);
        return v2;
    };
    var v2 = Halogen_VDom_Util.forE(ch1, onChild);
    var v3 = v.buildAttributes(v1)(as1);
    var state = {
        build: build,
        node: node,
        attrs: v3,
        ns: ns1,
        name: name1,
        children: v2
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
};
var buildVDom = function (spec) {
    var build = function (v) {
        if (v instanceof Halogen_VDom_Types.Text) {
            return buildText(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Elem) {
            return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Keyed) {
            return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Widget) {
            return buildWidget(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Grafted) {
            return build(Halogen_VDom_Types.runGraft(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
    };
    return build;
};
module.exports = {
    VDomSpec: VDomSpec,
    buildVDom: buildVDom,
    buildText: buildText,
    buildElem: buildElem,
    buildKeyed: buildKeyed,
    buildWidget: buildWidget
};

},{"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Data.Tuple/index.js":260,"../Halogen.VDom.Machine/index.js":356,"../Halogen.VDom.Types/index.js":358,"../Halogen.VDom.Util/index.js":360,"../Web.DOM.Element/index.js":413}],355:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver = require("../Halogen.Aff.Driver/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var RenderState = function (x) {
    return x;
};
var substInParent = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
            };
            if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
            };
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
    };
};
var removeChild = function (v) {
    return function __do() {
        var v1 = Web_DOM_Node.parentNode(v.node)();
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
            return Web_DOM_Node.removeChild(v.node)(pn);
        })(v1)();
    };
};
var mkSpec = function (handler) {
    return function (renderChildRef) {
        return function (document) {
            var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                return v.node;
            });
            var done = function (st) {
                if (st instanceof Data_Maybe.Just) {
                    return Halogen_VDom_Machine.halt(st.value0);
                };
                return Data_Unit.unit;
            };
            var buildWidget = function (spec) {
                var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeHTML))(spec);
                var renderComponentSlot = function (cs) {
                    var v = Effect_Ref.read(renderChildRef)();
                    var v1 = v(cs)();
                    var node = getNode(v1);
                    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                };
                var render = function (slot) {
                    if (slot instanceof Halogen_Component.ComponentSlot) {
                        return renderComponentSlot(slot.value0);
                    };
                    if (slot instanceof Halogen_Component.ThunkSlot) {
                        var v = buildThunk(slot.value0);
                        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), new Data_Maybe.Just(v), patch, done));
                    };
                    throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                };
                var patch = function (st, slot) {
                    if (st instanceof Data_Maybe.Just) {
                        if (slot instanceof Halogen_Component.ComponentSlot) {
                            Halogen_VDom_Machine.halt(st.value0);
                            return renderComponentSlot(slot.value0);
                        };
                        if (slot instanceof Halogen_Component.ThunkSlot) {
                            var v = Halogen_VDom_Machine.step(st.value0, slot.value0);
                            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), new Data_Maybe.Just(v), patch, done));
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                    };
                    return render(slot);
                };
                return render;
            };
            var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
            return {
                buildWidget: buildWidget,
                buildAttributes: buildAttributes,
                document: document
            };
        };
    };
};
var renderSpec = function (document) {
    return function (container) {
        var render = function (handler) {
            return function (child) {
                return function (v) {
                    return function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return function __do() {
                                var v2 = Effect_Ref["new"](child)();
                                var spec = mkSpec(handler)(v2)(document);
                                var v3 = Halogen_VDom_DOM.buildVDom(spec)(v);
                                var node = Halogen_VDom_Machine.extract(v3);
                                Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                return {
                                    machine: v3,
                                    node: node,
                                    renderChildRef: v2
                                };
                            };
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return function __do() {
                                Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                var v2 = Web_DOM_Node.parentNode(v1.value0.node)();
                                var v3 = Web_DOM_Node.nextSibling(v1.value0.node)();
                                var v4 = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                var newNode = Halogen_VDom_Machine.extract(v4);
                                Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(v3)(v2))();
                                return {
                                    machine: v4,
                                    node: newNode,
                                    renderChildRef: v1.value0.renderChildRef
                                };
                            };
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                    };
                };
            };
        };
        return {
            render: render,
            renderChild: Control_Category.identity(Control_Category.categoryFn),
            removeChild: removeChild,
            dispose: removeChild
        };
    };
};
var runUI = function (component) {
    return function (i) {
        return function (element) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (v) {
                return Halogen_Aff_Driver.runUI(renderSpec(v)(element))(component)(i);
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Unit/index.js":266,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Ref/index.js":288,"../Effect/index.js":294,"../Halogen.Aff.Driver.State/index.js":334,"../Halogen.Aff.Driver/index.js":335,"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.VDom.DOM.Prop/index.js":353,"../Halogen.VDom.DOM/index.js":354,"../Halogen.VDom.Machine/index.js":356,"../Halogen.VDom.Thunk/index.js":357,"../Unsafe.Reference/index.js":407,"../Web.DOM.Node/index.js":417,"../Web.HTML.HTMLDocument/index.js":435,"../Web.HTML.HTMLElement/index.js":437,"../Web.HTML.Window/index.js":446,"../Web.HTML/index.js":448}],356:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Step = (function () {
    function Step(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Step.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Step(value0, value1, value2, value3);
                };
            };
        };
    };
    return Step;
})();
var unStep = Unsafe_Coerce.unsafeCoerce;
var step = function (v, a) {
    return v.value2(v.value1, a);
};
var mkStep = Unsafe_Coerce.unsafeCoerce;
var halt = function (v) {
    return v.value3(v.value1);
};
var extract = unStep(function (v) {
    return v.value0;
});
module.exports = {
    Step: Step,
    mkStep: mkStep,
    unStep: unStep,
    extract: extract,
    step: step,
    halt: halt
};

},{"../Unsafe.Coerce/index.js":405}],357:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Thunk = (function () {
    function Thunk(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Thunk.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Thunk(value0, value1, value2, value3);
                };
            };
        };
    };
    return Thunk;
})();
var unsafeThunkId = Unsafe_Coerce.unsafeCoerce;
var unsafeEqThunk = function (v, v1) {
    return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && Halogen_VDom_Util.refEq(v.value3, v1.value3));
};
var thunk = function (tid, eqFn, f, a) {
    return new Thunk(tid, eqFn, f, a);
};
var thunk1 = function (f, a) {
    return thunk(unsafeThunkId(f), Halogen_VDom_Util.refEq, f, a);
};
var thunk2 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && Halogen_VDom_Util.refEq(a["_2"], b["_2"]);
    };
    return function (f, a, b) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"]);
        }, {
            "_1": a,
            "_2": b
        });
    };
})();
var thunk3 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && (Halogen_VDom_Util.refEq(a["_2"], b["_2"]) && Halogen_VDom_Util.refEq(a["_3"], b["_3"]));
    };
    return function (f, a, b, c) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"])(v["_3"]);
        }, {
            "_1": a,
            "_2": b,
            "_3": c
        });
    };
})();
var thunked = function (eqFn) {
    return function (f) {
        var tid = unsafeThunkId({
            f: f
        });
        var eqFn$prime = Data_Function_Uncurried.mkFn2(eqFn);
        return function (a) {
            return thunk(tid, eqFn$prime, f, a);
        };
    };
};
var runThunk = function (v) {
    return v.value2(v.value3);
};
var mapThunk = function (k) {
    return function (v) {
        return new Thunk(v.value0, v.value1, function ($50) {
            return k(v.value2($50));
        }, v.value3);
    };
};
var hoist = mapThunk;
var functorThunk = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new Thunk(v.value0, v.value1, function ($51) {
                return Data_Functor.map(dictFunctor)(f)(v.value2($51));
            }, v.value3);
        };
    });
};
var buildThunk = function (toVDom) {
    var haltThunk = function (state) {
        return Halogen_VDom_Machine.halt(state.vdom);
    };
    var patchThunk = function (state, t2) {
        var $45 = unsafeEqThunk(state.thunk, t2);
        if ($45) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
        };
        var v = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), {
            vdom: v,
            thunk: t2
        }, patchThunk, haltThunk));
    };
    var renderThunk = function (spec) {
        return function (t) {
            var v = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), {
                thunk: t,
                vdom: v
            }, patchThunk, haltThunk));
        };
    };
    return renderThunk;
};
module.exports = {
    buildThunk: buildThunk,
    runThunk: runThunk,
    hoist: hoist,
    mapThunk: mapThunk,
    thunked: thunked,
    thunk1: thunk1,
    thunk2: thunk2,
    thunk3: thunk3,
    functorThunk: functorThunk
};

},{"../Data.Function.Uncurried/index.js":148,"../Data.Functor/index.js":156,"../Halogen.VDom.DOM/index.js":354,"../Halogen.VDom.Machine/index.js":356,"../Halogen.VDom.Util/index.js":360,"../Unsafe.Coerce/index.js":405}],358:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Namespace = function (x) {
    return x;
};
var ElemName = function (x) {
    return x;
};
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();
var Elem = (function () {
    function Elem(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Elem.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Elem(value0, value1, value2, value3);
                };
            };
        };
    };
    return Elem;
})();
var Keyed = (function () {
    function Keyed(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Keyed.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Keyed(value0, value1, value2, value3);
                };
            };
        };
    };
    return Keyed;
})();
var Widget = (function () {
    function Widget(value0) {
        this.value0 = value0;
    };
    Widget.create = function (value0) {
        return new Widget(value0);
    };
    return Widget;
})();
var Grafted = (function () {
    function Grafted(value0) {
        this.value0 = value0;
    };
    Grafted.create = function (value0) {
        return new Grafted(value0);
    };
    return Grafted;
})();
var Graft = (function () {
    function Graft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Graft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Graft(value0, value1, value2);
            };
        };
    };
    return Graft;
})();
var unGraft = function (f) {
    return function ($58) {
        return f($58);
    };
};
var ordNamespace = Data_Ord.ordString;
var ordElemName = Data_Ord.ordString;
var newtypeNamespace = new Data_Newtype.Newtype(function (n) {
    return n;
}, Namespace);
var newtypeElemName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ElemName);
var graft = Unsafe_Coerce.unsafeCoerce;
var functorGraft = new Data_Functor.Functor(function (g) {
    return unGraft(function (v) {
        return graft(new Graft(v.value0, function ($59) {
            return g(v.value1($59));
        }, v.value2));
    });
});
var functorVDom = new Data_Functor.Functor(function (g) {
    return function (v) {
        if (v instanceof Text) {
            return new Text(v.value0);
        };
        if (v instanceof Grafted) {
            return new Grafted(Data_Functor.map(functorGraft)(g)(v.value0));
        };
        return new Grafted(graft(new Graft(Control_Category.identity(Control_Category.categoryFn), g, v)));
    };
});
var eqNamespace = Data_Eq.eqString;
var eqElemName = Data_Eq.eqString;
var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return unGraft(function (v) {
            return graft(new Graft(function ($60) {
                return f(v.value0($60));
            }, function ($61) {
                return g(v.value1($61));
            }, v.value2));
        });
    };
});
var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Grafted) {
                return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
            };
            return new Grafted(graft(new Graft(f, g, v)));
        };
    };
});
var runGraft = unGraft(function (v) {
    var go = function (v2) {
        if (v2 instanceof Text) {
            return new Text(v2.value0);
        };
        if (v2 instanceof Elem) {
            return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
        };
        if (v2 instanceof Keyed) {
            return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
        };
        if (v2 instanceof Widget) {
            return new Widget(v.value1(v2.value0));
        };
        if (v2 instanceof Grafted) {
            return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
    };
    return go(v.value2);
});
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Elem) {
                return new Elem(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(renderWidget(f)(g))(v.value3));
            };
            if (v instanceof Keyed) {
                return new Keyed(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(renderWidget(f)(g)))(v.value3));
            };
            if (v instanceof Widget) {
                return g(v.value0);
            };
            if (v instanceof Grafted) {
                return renderWidget(f)(g)(runGraft(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.VDom.Types (line 48, column 20 - line 53, column 48): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    Text: Text,
    Elem: Elem,
    Keyed: Keyed,
    Widget: Widget,
    Grafted: Grafted,
    renderWidget: renderWidget,
    Graft: Graft,
    graft: graft,
    unGraft: unGraft,
    runGraft: runGraft,
    ElemName: ElemName,
    Namespace: Namespace,
    functorVDom: functorVDom,
    bifunctorVDom: bifunctorVDom,
    functorGraft: functorGraft,
    bifunctorGraft: bifunctorGraft,
    newtypeElemName: newtypeElemName,
    eqElemName: eqElemName,
    ordElemName: ordElemName,
    newtypeNamespace: newtypeNamespace,
    eqNamespace: eqNamespace,
    ordNamespace: ordNamespace
};

},{"../Control.Category/index.js":36,"../Data.Bifunctor/index.js":105,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Tuple/index.js":260,"../Unsafe.Coerce/index.js":405}],359:[function(require,module,exports){
"use strict";

exports.unsafeGetAny = function (key, obj) {
  return obj[key];
};

exports.unsafeHasAny = function (key, obj) {
  return obj.hasOwnProperty(key);
};

exports.unsafeSetAny = function (key, val, obj) {
    obj[key] = val;
};

exports.unsafeDeleteAny = function (key, obj) {
  delete obj[key];
};

exports.forE = function (a, f) {
  var b = [];
  for (var i = 0; i < a.length; i++) {
    b.push(f(i, a[i]));
  }
  return b;
};

exports.forEachE = function (a, f) {
  for (var i = 0; i < a.length; i++) {
    f(a[i]);
  }
};

exports.forInE = function (o, f) {
  var ks = Object.keys(o);
  for (var i = 0; i < ks.length; i++) {
    var k = ks[i];
    f(k, o[k]);
  }
};

exports.replicateE = function (n, f) {
  for (var i = 0; i < n; i++) {
    f();
  }
};

exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
  var a3 = [];
  var l1 = a1.length;
  var l2 = a2.length;
  var i  = 0;
  while (1) {
    if (i < l1) {
      if (i < l2) {
        a3.push(f1(i, a1[i], a2[i]));
      } else {
        f2(i, a1[i]);
      }
    } else if (i < l2) {
      a3.push(f3(i, a2[i]));
    } else {
      break;
    }
    i++;
  }
  return a3;
};

exports.strMapWithIxE = function (as, fk, f) {
  var o = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    o[k] = f(k, i, a);
  }
  return o;
};

exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
  var o2 = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    if (o1.hasOwnProperty(k)) {
      o2[k] = f1(k, i, o1[k], a);
    } else {
      o2[k] = f3(k, i, a);
    }
  }
  for (var k in o1) {
    if (k in o2) {
      continue;
    }
    f2(k, o1[k]);
  }
  return o2;
};

exports.refEq = function (a, b) {
  return a === b;
};

exports.createTextNode = function (s, doc) {
  return doc.createTextNode(s);
};

exports.setTextContent = function (s, n) {
  n.textContent = s;
};

exports.createElement = function (ns, name, doc) {
  if (ns != null) {
    return doc.createElementNS(ns, name);
  } else {
    return doc.createElement(name)
  }
};

exports.insertChildIx = function (i, a, b) {
  var n = b.childNodes.item(i) || null;
  if (n !== a) {
    b.insertBefore(a, n);
  }
};

exports.removeChild = function (a, b) {
  if (b && a.parentNode === b) {
    b.removeChild(a);
  }
};

exports.parentNode = function (a) {
  return a.parentNode;
};

exports.setAttribute = function (ns, attr, val, el) {
  if (ns != null) {
    el.setAttributeNS(ns, attr, val);
  } else {
    el.setAttribute(attr, val);
  }
};

exports.removeAttribute = function (ns, attr, el) {
  if (ns != null) {
    el.removeAttributeNS(ns, attr);
  } else {
    el.removeAttribute(attr);
  }
};

exports.addEventListener = function (ev, listener, el) {
  el.addEventListener(ev, listener, false);
};

exports.removeEventListener = function (ev, listener, el) {
  el.removeEventListener(ev, listener, false);
};

exports.jsUndefined = void 0;

},{}],360:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeLookup = $foreign.unsafeGetAny;
var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
var pokeMutMap = $foreign.unsafeSetAny;
var newMutMap = Foreign_Object_ST["new"];
var deleteMutMap = $foreign.unsafeDeleteAny;
module.exports = {
    newMutMap: newMutMap,
    pokeMutMap: pokeMutMap,
    deleteMutMap: deleteMutMap,
    unsafeFreeze: unsafeFreeze,
    unsafeLookup: unsafeLookup,
    unsafeGetAny: $foreign.unsafeGetAny,
    unsafeHasAny: $foreign.unsafeHasAny,
    unsafeSetAny: $foreign.unsafeSetAny,
    unsafeDeleteAny: $foreign.unsafeDeleteAny,
    forE: $foreign.forE,
    forEachE: $foreign.forEachE,
    forInE: $foreign.forInE,
    replicateE: $foreign.replicateE,
    diffWithIxE: $foreign.diffWithIxE,
    diffWithKeyAndIxE: $foreign.diffWithKeyAndIxE,
    strMapWithIxE: $foreign.strMapWithIxE,
    refEq: $foreign.refEq,
    createTextNode: $foreign.createTextNode,
    setTextContent: $foreign.setTextContent,
    createElement: $foreign.createElement,
    insertChildIx: $foreign.insertChildIx,
    removeChild: $foreign.removeChild,
    parentNode: $foreign.parentNode,
    setAttribute: $foreign.setAttribute,
    removeAttribute: $foreign.removeAttribute,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    jsUndefined: $foreign.jsUndefined
};

},{"../Foreign.Object.ST/index.js":309,"../Unsafe.Coerce/index.js":405,"./foreign.js":359}],361:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ConstMapping = function (x) {
    return x;
};
var MappingWithIndex = function (mappingWithIndex) {
    this.mappingWithIndex = mappingWithIndex;
};
var Mapping = function (mapping) {
    this.mapping = mapping;
};
var MapVariantWithIndex = function (mapVariantWithIndex) {
    this.mapVariantWithIndex = mapVariantWithIndex;
};
var MapVariantFWithIndex = function (mapVariantFWithIndex) {
    this.mapVariantFWithIndex = mapVariantFWithIndex;
};
var MapRecordWithIndex = function (mapRecordWithIndexBuilder) {
    this.mapRecordWithIndexBuilder = mapRecordWithIndexBuilder;
};
var HMapWithIndex = function (hmapWithIndex) {
    this.hmapWithIndex = hmapWithIndex;
};
var HMap = function (hmap) {
    this.hmap = hmap;
};
var mappingWithIndex = function (dict) {
    return dict.mappingWithIndex;
};
var mappingFunction = new Mapping(function (k) {
    return k;
});
var mapping = function (dict) {
    return dict.mapping;
};
var mapVariantWithIndexNil = new MapVariantWithIndex(function (v) {
    return function (v1) {
        return Data_Variant.case_;
    };
});
var mapVariantWithIndex = function (dict) {
    return dict.mapVariantWithIndex;
};
var mapVariantWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantWithIndex) {
                    return new MapVariantWithIndex(function (v) {
                        return function (fn) {
                            return Data_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function ($65) {
                                return Data_Variant.inj(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(mappingWithIndex(dictMappingWithIndex)(fn)(Data_Symbol.SProxy.value)($65));
                            })(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value)(fn));
                        };
                    });
                };
            };
        };
    };
};
var mapVariantFWithIndexNil = new MapVariantFWithIndex(function (v) {
    return function (v1) {
        return Data_Functor_Variant.case_;
    };
});
var mapVariantFWithIndex = function (dict) {
    return dict.mapVariantFWithIndex;
};
var mapVariantFWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantFWithIndex) {
                    return function (dictFunctor) {
                        return new MapVariantFWithIndex(function (v) {
                            return function (fn) {
                                return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function ($66) {
                                    return Data_Functor_Variant.inj(dictCons1)(dictIsSymbol)(dictFunctor)(Data_Symbol.SProxy.value)(mappingWithIndex(dictMappingWithIndex)(fn)(Data_Symbol.SProxy.value)($66));
                                })(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value)(fn));
                            };
                        });
                    };
                };
            };
        };
    };
};
var mapRecordWithIndexNil = new MapRecordWithIndex(function (v) {
    return function (v1) {
        return Control_Category.identity(Record_Builder.categoryBuilder);
    };
});
var mapRecordWithIndexBuilder = function (dict) {
    return dict.mapRecordWithIndexBuilder;
};
var mapRecordWithIndexCons = function (dictIsSymbol) {
    return function (dictMappingWithIndex) {
        return function (dictMapRecordWithIndex) {
            return function (dictCons) {
                return function (dictCons1) {
                    return new MapRecordWithIndex(function (v) {
                        return function (f) {
                            return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify(dictCons)(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(mappingWithIndex(dictMappingWithIndex)(f)(Data_Symbol.SProxy.value)))(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value)(f));
                        };
                    });
                };
            };
        };
    };
};
var hmapWithIndexVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return new HMapWithIndex(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value));
    };
};
var hmapWithIndexVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return new HMapWithIndex(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value));
    };
};
var hmapWithIndexRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return new HMapWithIndex(function ($67) {
            return Record_Builder.build(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value)($67));
        });
    };
};
var hmapWithIndexApp = function (dictFunctorWithIndex) {
    return function (dictMappingWithIndex) {
        return new HMapWithIndex(function (f) {
            return function (v) {
                return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(mappingWithIndex(dictMappingWithIndex)(f))(v);
            };
        });
    };
};
var hmapWithIndex = function (dict) {
    return dict.hmapWithIndex;
};
var hmapVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return new HMap(function ($68) {
            return mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Data_RowList.RLProxy.value)(ConstMapping($68));
        });
    };
};
var hmapVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return new HMap(function ($69) {
            return mapVariantWithIndex(dictMapVariantWithIndex)(Type_Data_RowList.RLProxy.value)(ConstMapping($69));
        });
    };
};
var hmapTuple = function (dictMapping) {
    return function (dictMapping1) {
        return new HMap(function (fn) {
            return function (v) {
                return new Data_Tuple.Tuple(mapping(dictMapping)(fn)(v.value0), mapping(dictMapping1)(fn)(v.value1));
            };
        });
    };
};
var hmapRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return new HMap(function ($70) {
            return Record_Builder.build(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Data_RowList.RLProxy.value)(ConstMapping($70)));
        });
    };
};
var hmapEither = function (dictMapping) {
    return function (dictMapping1) {
        return new HMap(function (fn) {
            return function (v) {
                if (v instanceof Data_Either.Left) {
                    return new Data_Either.Left(mapping(dictMapping)(fn)(v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return new Data_Either.Right(mapping(dictMapping1)(fn)(v.value0));
                };
                throw new Error("Failed pattern match at Heterogeneous.Mapping (line 119, column 13 - line 121, column 36): " + [ v.constructor.name ]);
            };
        });
    };
};
var hmapApp = function (dictFunctor) {
    return function (dictMapping) {
        return new HMap(function (f) {
            return function (v) {
                return Data_Functor.map(dictFunctor)(mapping(dictMapping)(f))(v);
            };
        });
    };
};
var hmap = function (dict) {
    return dict.hmap;
};
var constMapping = function (dictMapping) {
    return new MappingWithIndex(function (v) {
        return function (v1) {
            return mapping(dictMapping)(v);
        };
    });
};
module.exports = {
    hmap: hmap,
    hmapWithIndex: hmapWithIndex,
    mapRecordWithIndexBuilder: mapRecordWithIndexBuilder,
    mapVariantFWithIndex: mapVariantFWithIndex,
    mapVariantWithIndex: mapVariantWithIndex,
    mapping: mapping,
    mappingWithIndex: mappingWithIndex,
    Mapping: Mapping,
    MappingWithIndex: MappingWithIndex,
    ConstMapping: ConstMapping,
    HMap: HMap,
    HMapWithIndex: HMapWithIndex,
    MapRecordWithIndex: MapRecordWithIndex,
    MapVariantWithIndex: MapVariantWithIndex,
    MapVariantFWithIndex: MapVariantFWithIndex,
    mappingFunction: mappingFunction,
    constMapping: constMapping,
    hmapApp: hmapApp,
    hmapWithIndexApp: hmapWithIndexApp,
    hmapRecord: hmapRecord,
    hmapWithIndexRecord: hmapWithIndexRecord,
    mapRecordWithIndexCons: mapRecordWithIndexCons,
    mapRecordWithIndexNil: mapRecordWithIndexNil,
    hmapTuple: hmapTuple,
    hmapEither: hmapEither,
    hmapVariant: hmapVariant,
    hmapWithIndexVariant: hmapWithIndexVariant,
    mapVariantWithIndexCons: mapVariantWithIndexCons,
    mapVariantWithIndexNil: mapVariantWithIndexNil,
    hmapVariantF: hmapVariantF,
    hmapWithIndexVariantF: hmapWithIndexVariantF,
    mapVariantFWithIndexCons: mapVariantFWithIndexCons,
    mapVariantFWithIndexNil: mapVariantFWithIndexNil
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Either/index.js":129,"../Data.Functor.Variant/index.js":154,"../Data.Functor/index.js":156,"../Data.FunctorWithIndex/index.js":158,"../Data.Symbol/index.js":250,"../Data.Tuple/index.js":260,"../Data.Variant/index.js":269,"../Record.Builder/index.js":382,"../Type.Data.RowList/index.js":401}],362:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var InfraredRemote_HitachiHvac = require("../InfraredRemote.HitachiHvac/index.js");
var InfraredRemote_MitsubishiElectricHvac = require("../InfraredRemote.MitsubishiElectricHvac/index.js");
var InfraredRemote_PanasonicHvac = require("../InfraredRemote.PanasonicHvac/index.js");
var InfraredRemote_Types = require("../InfraredRemote.Types/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token/index.js");
var Utils = require("../Utils/index.js");
var IrRemoteUnknown = (function () {
    function IrRemoteUnknown(value0) {
        this.value0 = value0;
    };
    IrRemoteUnknown.create = function (value0) {
        return new IrRemoteUnknown(value0);
    };
    return IrRemoteUnknown;
})();
var IrRemotePanasonicHvac = (function () {
    function IrRemotePanasonicHvac(value0) {
        this.value0 = value0;
    };
    IrRemotePanasonicHvac.create = function (value0) {
        return new IrRemotePanasonicHvac(value0);
    };
    return IrRemotePanasonicHvac;
})();
var IrRemoteMitsubishiElectricHvac = (function () {
    function IrRemoteMitsubishiElectricHvac(value0) {
        this.value0 = value0;
    };
    IrRemoteMitsubishiElectricHvac.create = function (value0) {
        return new IrRemoteMitsubishiElectricHvac(value0);
    };
    return IrRemoteMitsubishiElectricHvac;
})();
var IrRemoteHitachiHvac = (function () {
    function IrRemoteHitachiHvac(value0) {
        this.value0 = value0;
    };
    IrRemoteHitachiHvac.create = function (value0) {
        return new IrRemoteHitachiHvac(value0);
    };
    return IrRemoteHitachiHvac;
})();
var Count = function (x) {
    return x;
};
var LeaderAeha = (function () {
    function LeaderAeha(value0) {
        this.value0 = value0;
    };
    LeaderAeha.create = function (value0) {
        return new LeaderAeha(value0);
    };
    return LeaderAeha;
})();
var LeaderNec = (function () {
    function LeaderNec(value0) {
        this.value0 = value0;
    };
    LeaderNec.create = function (value0) {
        return new LeaderNec(value0);
    };
    return LeaderNec;
})();
var LeaderSirc = (function () {
    function LeaderSirc(value0) {
        this.value0 = value0;
    };
    LeaderSirc.create = function (value0) {
        return new LeaderSirc(value0);
    };
    return LeaderSirc;
})();
var LeaderUnknown = (function () {
    function LeaderUnknown(value0) {
        this.value0 = value0;
    };
    LeaderUnknown.create = function (value0) {
        return new LeaderUnknown(value0);
    };
    return LeaderUnknown;
})();
var Baseband = function (x) {
    return x;
};
var toMilliseconds = function (v) {
    return Data_Int.toNumber(v) * 2.6e-2;
};
var toInfraredHexString = function (v) {
    var toHex = function (x) {
        if (x < 16) {
            return "0" + Data_Int.toStringAs(Data_Int.hexadecimal)(x);
        };
        if (Data_Boolean.otherwise) {
            return Data_Int.toStringAs(Data_Int.hexadecimal)(x);
        };
        throw new Error("Failed pattern match at InfraredRemote.Code (line 105, column 5 - line 105, column 27): " + [ x.constructor.name ]);
    };
    var countToHex = function (v1) {
        var lo = v1 & 255;
        var hi = v1 >> 8 & 255;
        return toHex(lo) + toHex(hi);
    };
    var f = function (x) {
        return countToHex(x.on) + countToHex(x.off);
    };
    return Data_String_Common.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(f)(v));
};
var takeEnd = function (errmsg) {
    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))([  ]))(function () {
            return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(errmsg))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Data_Array_NonEmpty.fromArray(v));
        });
    });
};
var takeBits = function (n) {
    return function (errmsg) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
            var nextState = Data_Array.drop(n)(v);
            var bitarray = Data_Array.take(n)(v);
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(nextState))(function () {
                return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(errmsg))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Array.length(bitarray) === n))(function () {
                    return Data_Array_NonEmpty.fromArray(bitarray);
                }));
            });
        });
    };
};
var takeBit = function (errmsg) {
    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
        var v1 = Data_Array.uncons(v);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(errmsg);
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(v1.value0.tail))(function () {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(v1.value0.head);
            });
        };
        throw new Error("Failed pattern match at InfraredRemote.Code (line 415, column 3 - line 421, column 18): " + [ v1.constructor.name ]);
    });
};
var showCount = Data_Show.showInt;
var showBaseband = Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(Data_Show.showRecordFieldsNil)(showCount))(showCount)));
var semiringCount = Data_Semiring.semiringInt;
var ringCount = Data_Ring.ringInt;
var ordCount = Data_Ord.ordInt;
var genericIrRemoteControlCode = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof IrRemoteUnknown) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof IrRemotePanasonicHvac) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof IrRemoteMitsubishiElectricHvac) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof IrRemoteHitachiHvac) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at InfraredRemote.Code (line 388, column 8 - line 388, column 77): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new IrRemoteUnknown(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new IrRemotePanasonicHvac(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new IrRemoteMitsubishiElectricHvac(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new IrRemoteHitachiHvac(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at InfraredRemote.Code (line 388, column 8 - line 388, column 77): " + [ x.constructor.name ]);
});
var showIrRemoteControlCode = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericIrRemoteControlCode)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showArray(InfraredRemote_Types.showInfraredCodeFrame)))(new Data_Symbol.IsSymbol(function () {
    return "IrRemoteUnknown";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(InfraredRemote_PanasonicHvac.showPanasonicHvac))(new Data_Symbol.IsSymbol(function () {
    return "IrRemotePanasonicHvac";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(InfraredRemote_MitsubishiElectricHvac.showMitsubishiElectricHvac))(new Data_Symbol.IsSymbol(function () {
    return "IrRemoteMitsubishiElectricHvac";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(InfraredRemote_HitachiHvac.showHitachiHvac))(new Data_Symbol.IsSymbol(function () {
    return "IrRemoteHitachiHvac";
})))))));
var genericInfraredLeader = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof LeaderAeha) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof LeaderNec) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof LeaderSirc) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof LeaderUnknown) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at InfraredRemote.Code (line 259, column 8 - line 259, column 66): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new LeaderAeha(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new LeaderNec(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new LeaderSirc(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new LeaderUnknown(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at InfraredRemote.Code (line 259, column 8 - line 259, column 66): " + [ x.constructor.name ]);
});
var showInfraredLeader = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericInfraredLeader)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(Data_Show.showRecordFieldsNil)(showCount))(showCount))))(new Data_Symbol.IsSymbol(function () {
    return "LeaderAeha";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(Data_Show.showRecordFieldsNil)(showCount))(showCount))))(new Data_Symbol.IsSymbol(function () {
    return "LeaderNec";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(Data_Show.showRecordFieldsNil)(showCount))(showCount))))(new Data_Symbol.IsSymbol(function () {
    return "LeaderSirc";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(Data_Show.showRecordFieldsNil)(showCount))(showCount))))(new Data_Symbol.IsSymbol(function () {
    return "LeaderUnknown";
})))))));
var fromMilliseconds = function (v) {
    return Count(Data_Int.floor(v / 2.6e-2));
};
var withTolerance = function (tolerance) {
    return function (typical) {
        var v = fromMilliseconds(tolerance.upper);
        var v1 = fromMilliseconds(tolerance.lower);
        var v2 = fromMilliseconds(typical);
        return Data_Functor.map(Data_Functor.functorArray)(Count)(Data_Array.range(v2 - v1 | 0)(v2 + v | 0));
    };
};
var formatPigpioIrrp = (function () {
    var toPulses = function (input) {
        var pulse = function (v) {
            if (v.length === 2) {
                var b = Data_Int.toNumber(v[1]) / 1000.0;
                var a = Data_Int.toNumber(v[0]) / 1000.0;
                return new Data_Maybe.Just({
                    on: fromMilliseconds(a),
                    off: fromMilliseconds(b)
                });
            };
            return Data_Maybe.Nothing.value;
        };
        var xs = Data_Functor.map(Data_Functor.functorArray)(pulse)(Utils.toArrayArray(2)(Data_Array.snoc(input)(35 * 1000 | 0)));
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.catMaybes(xs));
    };
    var sepalator = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(","))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit));
    });
    var jsonArray = (function () {
        var number = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity))))(function (v) {
            var v2 = Data_Int.fromStringAs(Data_Int.decimal)(v);
            if (v2 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("value is must be numeric.");
            };
            if (v2 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v2.value0);
            };
            throw new Error("Failed pattern match at InfraredRemote.Code (line 176, column 9 - line 178, column 27): " + [ v2.constructor.name ]);
        });
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("[")))(function () {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(number))(sepalator)))(function (v) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]")))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
                });
            });
        });
    })();
    var hashmap = (function () {
        var key = Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\""))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\""))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "\"" ])));
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(key)(function (v) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":")))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(jsonArray)(function (v1) {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(Data_String_CodeUnits.fromCharArray(v), v1));
                        });
                    });
                });
            });
        });
    })();
    var jsonObject = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("{")))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(hashmap))(sepalator)))(function (v) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("}")))(function () {
                return Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Empty content."))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity)))(Data_Array.head(v));
            });
        });
    });
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(jsonObject))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
            var v1 = toPulses(v.value1);
            if (v1 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("must be on-off pair.");
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1.value0);
            };
            throw new Error("Failed pattern match at InfraredRemote.Code (line 120, column 3 - line 122, column 34): " + [ v1.constructor.name ]);
        });
    });
})();
var formatOnOffPair = (function () {
    var hexd16bit = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (v1) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodeUnits.fromCharArray([ v, v1 ]));
        });
    });
    var valueOf32Bit = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(hexd16bit)("lower-pair hex digit"))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(hexd16bit)("higher-pair hex digit"))(function (v1) {
            var str = v1 + v;
            var maybeNum = Data_Int.fromStringAs(Data_Int.hexadecimal)(str);
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.fromJust()(maybeNum));
        });
    });
    var pulse = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(valueOf32Bit)("on-counts"))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(valueOf32Bit)("off-counts"))(function (v1) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                on: v,
                off: v1
            });
        });
    });
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(pulse)(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v);
        });
    });
})();
var infraredHexStringParser = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(formatOnOffPair)(formatPigpioIrrp);
var eucideanRingCount = Data_EuclideanRing.euclideanRingInt;
var eqIrRemoteControlCode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof IrRemoteUnknown && y instanceof IrRemoteUnknown) {
            return Data_Eq.eq(Data_Eq.eqArray(InfraredRemote_Types.eqInfraredCodeFrame))(x.value0)(y.value0);
        };
        if (x instanceof IrRemotePanasonicHvac && y instanceof IrRemotePanasonicHvac) {
            return Data_Eq.eq(InfraredRemote_PanasonicHvac.eqPanasonicHvac)(x.value0)(y.value0);
        };
        if (x instanceof IrRemoteMitsubishiElectricHvac && y instanceof IrRemoteMitsubishiElectricHvac) {
            return Data_Eq.eq(InfraredRemote_MitsubishiElectricHvac.eqMitsubishiElectricHvac)(x.value0)(y.value0);
        };
        if (x instanceof IrRemoteHitachiHvac && y instanceof IrRemoteHitachiHvac) {
            return Data_Eq.eq(InfraredRemote_HitachiHvac.eqHitachiHvac)(x.value0)(y.value0);
        };
        return false;
    };
});
var eqCount = Data_Eq.eqInt;
var eqInfraredLeader = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof LeaderAeha && y instanceof LeaderAeha) {
            return Data_Eq.eq(eqCount)(x.value0.off)(y.value0.off) && Data_Eq.eq(eqCount)(x.value0.on)(y.value0.on);
        };
        if (x instanceof LeaderNec && y instanceof LeaderNec) {
            return Data_Eq.eq(eqCount)(x.value0.off)(y.value0.off) && Data_Eq.eq(eqCount)(x.value0.on)(y.value0.on);
        };
        if (x instanceof LeaderSirc && y instanceof LeaderSirc) {
            return Data_Eq.eq(eqCount)(x.value0.off)(y.value0.off) && Data_Eq.eq(eqCount)(x.value0.on)(y.value0.on);
        };
        if (x instanceof LeaderUnknown && y instanceof LeaderUnknown) {
            return Data_Eq.eq(eqCount)(x.value0.off)(y.value0.off) && Data_Eq.eq(eqCount)(x.value0.on)(y.value0.on);
        };
        return false;
    };
});
var makeInfraredLeader = (function () {
    var typical = withTolerance({
        upper: 0.2,
        lower: 0.2
    });
    var sirc = function (pulse) {
        var on_ = typical(2.4);
        var off_ = typical(0.6);
        return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.on);
        })(on_) && Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.off);
        })(off_);
    };
    var nec = function (pulse) {
        var on_ = typical(9.0);
        var off_ = typical(4.5);
        return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.on);
        })(on_) && Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.off);
        })(off_);
    };
    var aeha = function (pulse) {
        var on_ = typical(3.4);
        var off_ = typical(1.7);
        return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.on);
        })(on_) && Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return Data_Eq.eq(eqCount)(v)(pulse.off);
        })(off_);
    };
    return function (v) {
        if (aeha(v)) {
            return new LeaderAeha(v);
        };
        if (nec(v)) {
            return new LeaderNec(v);
        };
        if (sirc(v)) {
            return new LeaderSirc(v);
        };
        if (Data_Boolean.otherwise) {
            return new LeaderUnknown(v);
        };
        throw new Error("Failed pattern match at InfraredRemote.Code (line 266, column 22 - line 270, column 35): " + [ v.constructor.name ]);
    };
})();
var eqBaseband = Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
    return "on";
}))(eqCount))()(new Data_Symbol.IsSymbol(function () {
    return "off";
}))(eqCount)));
var demodulate = function (leader) {
    return function (ps) {
        var sircModulation = function (p) {
            var threshold = withTolerance({
                upper: 0.1,
                lower: 0.1
            })(1.2);
            return InfraredRemote_Types.fromBoolean(Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                return Data_Eq.eq(eqCount)(v)(p.on);
            })(threshold));
        };
        var pulseDistanceModulation = function (v) {
            if (Data_Ord.lessThanOrEq(ordCount)(Data_Semiring.mul(semiringCount)(2)(v.on))(v.off)) {
                return InfraredRemote_Types.Assert.value;
            };
            if (Data_Boolean.otherwise) {
                return InfraredRemote_Types.Negate.value;
            };
            throw new Error("Failed pattern match at InfraredRemote.Code (line 315, column 29 - line 317, column 44): " + [ v.constructor.name ]);
        };
        if (leader instanceof LeaderSirc) {
            return Data_Functor.map(Data_Functor.functorArray)(sircModulation)(ps);
        };
        return Data_Functor.map(Data_Functor.functorArray)(pulseDistanceModulation)(ps);
    };
};
var decodeUnknown = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (v) {
    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))([  ]))(function () {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new InfraredRemote_Types.FormatUnknown(v));
    });
});
var decodeSirc = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBits(7)("fail to read: command code (SIRC)"))(function (v) {
    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeEnd("fail to read: address (SIRC)"))(function (v1) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new InfraredRemote_Types.FormatSIRC({
            command: v,
            address: v1
        }));
    });
});
var decodePhase4 = function (x) {
    var pana = function ($196) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(IrRemotePanasonicHvac.create)(InfraredRemote_PanasonicHvac.decodePanasonicHvac($196));
    };
    var melco = function ($197) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(IrRemoteMitsubishiElectricHvac.create)(InfraredRemote_MitsubishiElectricHvac.decodeMitsubishiElectricHvac($197));
    };
    var hitachi = function ($198) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(IrRemoteHitachiHvac.create)(InfraredRemote_HitachiHvac.decodeHitachiHvac($198));
    };
    return Data_Maybe.fromMaybe(new IrRemoteUnknown(x))(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(pana(x))(melco(x)))(hitachi(x)));
};
var decodePhase2 = function (tokens) {
    var v = Data_Array.uncons(tokens);
    if (v instanceof Data_Maybe.Just) {
        var leader = makeInfraredLeader(v.value0.head);
        return Data_Either.Right.create(new Data_Tuple.Tuple(leader, demodulate(leader)(v.value0.tail)));
    };
    if (v instanceof Data_Maybe.Nothing) {
        return new Data_Either.Left("Unexpected end of input");
    };
    throw new Error("Failed pattern match at InfraredRemote.Code (line 359, column 3 - line 368, column 1): " + [ v.constructor.name ]);
};
var decodePhase1 = function (v) {
    var threshold = fromMilliseconds(8.0);
    var frames = function (pulses) {
        var sep = Data_Array.span(function (count) {
            return Data_Ord.lessThan(ordCount)(count.off)(threshold);
        })(pulses);
        return {
            init: Data_Semigroup.append(Data_Semigroup.semigroupArray)(sep.init)(Data_Array.take(1)(sep.rest)),
            rest: Data_Array.drop(1)(sep.rest)
        };
    };
    var chop = function (xs) {
        var v1 = frames(xs);
        if (v1.rest.length === 0) {
            return new Data_Tuple.Tuple(v1.init, Data_Maybe.Nothing.value);
        };
        return new Data_Tuple.Tuple(v1.init, new Data_Maybe.Just(v1.rest));
    };
    return Data_Unfoldable1.unfoldr1(Data_Unfoldable1.unfoldable1Array)(chop)(v);
};
var decodeNec = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBits(8)("fail to read: custom code0 (NEC)"))(function (v) {
    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBits(8)("fail to read: custom code1 (NEC)"))(function (v1) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBits(8)("fail to read: data0 (NEC)"))(function (v2) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBits(8)("fail to read: data1 (NEC)"))(function (v3) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeBit("fail to read: stop bit (NEC)"))(function (v4) {
                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new InfraredRemote_Types.FormatNEC({
                        custom0: v,
                        custom1: v1,
                        data0: v2,
                        data1: v3,
                        stop: v4
                    }));
                });
            });
        });
    });
});
var decodeAeha = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(takeEnd("fail to read: data (AEHA)"))(function (v) {
    var last = Data_Array_NonEmpty.last(v);
    var init = Data_Array_NonEmpty.init(v);
    var octets = Utils.toArrayNonEmptyArray(8)(init);
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new InfraredRemote_Types.FormatAEHA({
        octets: octets,
        stop: last
    }));
});
var decodePhase3 = function (v) {
    var decoder = (function () {
        if (v.value0 instanceof LeaderAeha) {
            return decodeAeha;
        };
        if (v.value0 instanceof LeaderNec) {
            return decodeNec;
        };
        if (v.value0 instanceof LeaderSirc) {
            return decodeSirc;
        };
        if (v.value0 instanceof LeaderUnknown) {
            return decodeUnknown;
        };
        throw new Error("Failed pattern match at InfraredRemote.Code (line 375, column 13 - line 379, column 37): " + [ v.value0.constructor.name ]);
    })();
    return Control_Monad_State.evalState(Control_Monad_Except_Trans.runExceptT(decoder))(v.value1);
};
var toIrCodeFrames = function ($199) {
    return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(decodePhase3)(decodePhase2))(decodePhase1($199));
};
var toIrRemoteControlCode = function ($200) {
    return Data_Bifunctor.rmap(Data_Either.bifunctorEither)(decodePhase4)(toIrCodeFrames($200));
};
var commutativeRingCount = Data_CommutativeRing.commutativeRingInt;
module.exports = {
    Baseband: Baseband,
    Count: Count,
    LeaderAeha: LeaderAeha,
    LeaderNec: LeaderNec,
    LeaderSirc: LeaderSirc,
    LeaderUnknown: LeaderUnknown,
    IrRemoteUnknown: IrRemoteUnknown,
    IrRemotePanasonicHvac: IrRemotePanasonicHvac,
    IrRemoteMitsubishiElectricHvac: IrRemoteMitsubishiElectricHvac,
    IrRemoteHitachiHvac: IrRemoteHitachiHvac,
    decodePhase1: decodePhase1,
    decodePhase2: decodePhase2,
    decodePhase3: decodePhase3,
    decodePhase4: decodePhase4,
    fromMilliseconds: fromMilliseconds,
    infraredHexStringParser: infraredHexStringParser,
    toMilliseconds: toMilliseconds,
    toInfraredHexString: toInfraredHexString,
    toIrCodeFrames: toIrCodeFrames,
    toIrRemoteControlCode: toIrRemoteControlCode,
    eqBaseband: eqBaseband,
    showBaseband: showBaseband,
    eqCount: eqCount,
    ordCount: ordCount,
    showCount: showCount,
    semiringCount: semiringCount,
    ringCount: ringCount,
    commutativeRingCount: commutativeRingCount,
    eucideanRingCount: eucideanRingCount,
    genericInfraredLeader: genericInfraredLeader,
    eqInfraredLeader: eqInfraredLeader,
    showInfraredLeader: showInfraredLeader,
    genericIrRemoteControlCode: genericIrRemoteControlCode,
    eqIrRemoteControlCode: eqIrRemoteControlCode,
    showIrRemoteControlCode: showIrRemoteControlCode
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.State.Trans/index.js":59,"../Control.Monad.State/index.js":60,"../Control.MonadZero/index.js":67,"../Data.Array.NonEmpty/index.js":93,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.Boolean/index.js":107,"../Data.CommutativeRing/index.js":117,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.HeytingAlgebra/index.js":165,"../Data.Identity/index.js":166,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ring/index.js":224,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Data.Unfoldable1/index.js":264,"../Data.Unit/index.js":266,"../InfraredRemote.HitachiHvac/index.js":363,"../InfraredRemote.MitsubishiElectricHvac/index.js":364,"../InfraredRemote.PanasonicHvac/index.js":365,"../InfraredRemote.Types/index.js":366,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser.Token/index.js":398,"../Text.Parsing.Parser/index.js":399,"../Utils/index.js":408}],363:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Bounded = require("../Data.Generic.Rep.Bounded/index.js");
var Data_Generic_Rep_Enum = require("../Data.Generic.Rep.Enum/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var InfraredRemote_Types = require("../InfraredRemote.Types/index.js");
var Switch = function (x) {
    return x;
};
var MCool = (function () {
    function MCool() {

    };
    MCool.value = new MCool();
    return MCool;
})();
var MDryCool = (function () {
    function MDryCool() {

    };
    MDryCool.value = new MDryCool();
    return MDryCool;
})();
var MDehumidify = (function () {
    function MDehumidify() {

    };
    MDehumidify.value = new MDehumidify();
    return MDehumidify;
})();
var MHeat = (function () {
    function MHeat() {

    };
    MHeat.value = new MHeat();
    return MHeat;
})();
var MAutomatic = (function () {
    function MAutomatic() {

    };
    MAutomatic.value = new MAutomatic();
    return MAutomatic;
})();
var MAutoDehumidifying = (function () {
    function MAutoDehumidifying() {

    };
    MAutoDehumidifying.value = new MAutoDehumidifying();
    return MAutoDehumidifying;
})();
var MQuickLaundry = (function () {
    function MQuickLaundry() {

    };
    MQuickLaundry.value = new MQuickLaundry();
    return MQuickLaundry;
})();
var MCondensationControl = (function () {
    function MCondensationControl() {

    };
    MCondensationControl.value = new MCondensationControl();
    return MCondensationControl;
})();
var FSilent = (function () {
    function FSilent() {

    };
    FSilent.value = new FSilent();
    return FSilent;
})();
var FLow = (function () {
    function FLow() {

    };
    FLow.value = new FLow();
    return FLow;
})();
var FMed = (function () {
    function FMed() {

    };
    FMed.value = new FMed();
    return FMed;
})();
var FHigh = (function () {
    function FHigh() {

    };
    FHigh.value = new FHigh();
    return FHigh;
})();
var FAuto = (function () {
    function FAuto() {

    };
    FAuto.value = new FAuto();
    return FAuto;
})();
var HitachiHvac = function (x) {
    return x;
};
var showSwitch = new Data_Show.Show(function (v) {
    if (v) {
        return "ON";
    };
    if (!v) {
        return "OFF";
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 108, column 1 - line 108, column 35): " + [ v.constructor.name ]);
});
var ordSwitch = Data_Ord.ordBoolean;
var newtypeSwitch = new Data_Newtype.Newtype(function (n) {
    return n;
}, Switch);
var newtypeHitachiHvac = new Data_Newtype.Newtype(function (n) {
    return n;
}, HitachiHvac);
var genericMode = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof MCool) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof MDryCool) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof MDehumidify) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof MHeat) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof MAutomatic) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof MAutoDehumidifying) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
    };
    if (x instanceof MQuickLaundry) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
    };
    if (x instanceof MCondensationControl) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))));
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 42, column 8 - line 42, column 46): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return MCool.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return MDryCool.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return MDehumidify.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return MHeat.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return MAutomatic.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
        return MAutoDehumidifying.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
        return MQuickLaundry.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))) {
        return MCondensationControl.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 42, column 8 - line 42, column 46): " + [ x.constructor.name ]);
});
var showMode = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMode)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MCool";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MDryCool";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MDehumidify";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MHeat";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MAutomatic";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MAutoDehumidifying";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MQuickLaundry";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MCondensationControl";
})))))))))));
var genericHitachiHvac = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericFan = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof FSilent) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof FLow) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof FMed) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof FHigh) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof FAuto) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))));
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 75, column 8 - line 75, column 45): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return FSilent.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return FLow.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return FMed.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return FHigh.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
        return FAuto.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 75, column 8 - line 75, column 45): " + [ x.constructor.name ]);
});
var showFan = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFan)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FSilent";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FLow";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FMed";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FHigh";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FAuto";
}))))))));
var showHitachiHvac = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericHitachiHvac)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "fan";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "mode";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(Data_Show.showRecordFieldsNil)(InfraredRemote_Types.showCelsius))(showSwitch))(Data_Show.showArray(Data_Array_NonEmpty_Internal.showNonEmptyArray(InfraredRemote_Types["showBit'"]))))(showMode))(showFan))))(new Data_Symbol.IsSymbol(function () {
    return "HitachiHvac";
}))));
var eqSwitch = Data_Eq.eqBoolean;
var eqMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof MCool && y instanceof MCool) {
            return true;
        };
        if (x instanceof MDryCool && y instanceof MDryCool) {
            return true;
        };
        if (x instanceof MDehumidify && y instanceof MDehumidify) {
            return true;
        };
        if (x instanceof MHeat && y instanceof MHeat) {
            return true;
        };
        if (x instanceof MAutomatic && y instanceof MAutomatic) {
            return true;
        };
        if (x instanceof MAutoDehumidifying && y instanceof MAutoDehumidifying) {
            return true;
        };
        if (x instanceof MQuickLaundry && y instanceof MQuickLaundry) {
            return true;
        };
        if (x instanceof MCondensationControl && y instanceof MCondensationControl) {
            return true;
        };
        return false;
    };
});
var ordMode = new Data_Ord.Ord(function () {
    return eqMode;
}, function (x) {
    return function (y) {
        if (x instanceof MCool && y instanceof MCool) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MCool) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MCool) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MDryCool && y instanceof MDryCool) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MDryCool) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MDryCool) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MDehumidify && y instanceof MDehumidify) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MDehumidify) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MDehumidify) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MHeat && y instanceof MHeat) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MHeat) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MHeat) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MAutomatic && y instanceof MAutomatic) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MAutomatic) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MAutomatic) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MAutoDehumidifying && y instanceof MAutoDehumidifying) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MAutoDehumidifying) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MAutoDehumidifying) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MQuickLaundry && y instanceof MQuickLaundry) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MQuickLaundry) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MQuickLaundry) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MCondensationControl && y instanceof MCondensationControl) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 44, column 8 - line 44, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqFan = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof FSilent && y instanceof FSilent) {
            return true;
        };
        if (x instanceof FLow && y instanceof FLow) {
            return true;
        };
        if (x instanceof FMed && y instanceof FMed) {
            return true;
        };
        if (x instanceof FHigh && y instanceof FHigh) {
            return true;
        };
        if (x instanceof FAuto && y instanceof FAuto) {
            return true;
        };
        return false;
    };
});
var eqHitachiHvac = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(InfraredRemote_Types.eqCelsius))()(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(eqSwitch))()(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(InfraredRemote_Types.eqBit))))()(new Data_Symbol.IsSymbol(function () {
    return "mode";
}))(eqMode))()(new Data_Symbol.IsSymbol(function () {
    return "fan";
}))(eqFan));
var ordFan = new Data_Ord.Ord(function () {
    return eqFan;
}, function (x) {
    return function (y) {
        if (x instanceof FSilent && y instanceof FSilent) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof FSilent) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof FSilent) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FLow && y instanceof FLow) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof FLow) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof FLow) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FMed && y instanceof FMed) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof FMed) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof FMed) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FHigh && y instanceof FHigh) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof FHigh) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof FHigh) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FAuto && y instanceof FAuto) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 77, column 8 - line 77, column 39): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var enumSwitch = Data_Enum.enumBoolean;
var enumMode = new Data_Enum.Enum(function () {
    return ordMode;
}, Data_Generic_Rep_Enum.genericPred(genericMode)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))), Data_Generic_Rep_Enum.genericSucc(genericMode)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))));
var enumFan = new Data_Enum.Enum(function () {
    return ordFan;
}, Data_Generic_Rep_Enum.genericPred(genericFan)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))), Data_Generic_Rep_Enum.genericSucc(genericFan)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))));
var boundedSwitch = Data_Bounded.boundedBoolean;
var boundedMode = new Data_Bounded.Bounded(function () {
    return ordMode;
}, Data_Generic_Rep_Bounded.genericBottom(genericMode)(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))), Data_Generic_Rep_Bounded.genericTop(genericMode)(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))))))))));
var boundedFan = new Data_Bounded.Bounded(function () {
    return ordFan;
}, Data_Generic_Rep_Bounded.genericBottom(genericFan)(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))), Data_Generic_Rep_Bounded.genericTop(genericFan)(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments)))))));
var boundedEnumSwitch = Data_Enum.boundedEnumBoolean;
var boundedEnumMode = new Data_Enum.BoundedEnum(function () {
    return boundedMode;
}, function () {
    return enumMode;
}, Data_Generic_Rep_Enum.genericCardinality(genericMode)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))))))))), function (v) {
    if (v instanceof MCool) {
        return 3;
    };
    if (v instanceof MDryCool) {
        return 4;
    };
    if (v instanceof MDehumidify) {
        return 5;
    };
    if (v instanceof MHeat) {
        return 6;
    };
    if (v instanceof MAutomatic) {
        return 7;
    };
    if (v instanceof MAutoDehumidifying) {
        return 9;
    };
    if (v instanceof MQuickLaundry) {
        return 10;
    };
    if (v instanceof MCondensationControl) {
        return 12;
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 51, column 1 - line 51, column 48): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 3) {
        return new Data_Maybe.Just(MCool.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(MDryCool.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(MDehumidify.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(MHeat.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(MAutomatic.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(MAutoDehumidifying.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(MQuickLaundry.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(MCondensationControl.value);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumFan = new Data_Enum.BoundedEnum(function () {
    return boundedFan;
}, function () {
    return enumFan;
}, Data_Generic_Rep_Enum.genericCardinality(genericFan)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments)))))), function (v) {
    if (v instanceof FSilent) {
        return 1;
    };
    if (v instanceof FLow) {
        return 2;
    };
    if (v instanceof FMed) {
        return 3;
    };
    if (v instanceof FHigh) {
        return 4;
    };
    if (v instanceof FAuto) {
        return 5;
    };
    throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 84, column 1 - line 84, column 47): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(FSilent.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(FLow.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(FMed.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(FHigh.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(FAuto.value);
    };
    return Data_Maybe.Nothing.value;
});
var decodeHitachiHvac = function (inputFrames) {
    var first9bytes = Data_Array.mapMaybe(InfraredRemote_Types.fromBinaryString)([ "10000000", "00001000", "00000000", "00000010", "11111101", "11111111", "00000000", "00110011", "11001100" ]);
    var isValidIdentifier = function (input) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(InfraredRemote_Types.eqBit)))(Data_Array.take(9)(input))(first9bytes);
    };
    var decode = function (bitstreams) {
        if (isValidIdentifier(bitstreams)) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($110) {
                return Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($110));
            })(Data_Array.index(bitstreams)(13)))(function (v) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($111) {
                    return Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($111));
                })(Data_Array.index(bitstreams)(25)))(function (v1) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($112) {
                        return Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($112));
                    })(Data_Array.index(bitstreams)(27)))(function (v2) {
                        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumMode)(v1 & 15))(function (v3) {
                            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumFan)(v1 >> 4 & 15))(function (v4) {
                                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSwitch)(v2 >> 4 & 1))(function (v5) {
                                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                                        original: bitstreams,
                                        mode: v3,
                                        temperature: v >> 2 & 31,
                                        fan: v4,
                                        "switch": v5
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at InfraredRemote.HitachiHvac (line 140, column 3 - line 140, column 49): " + [ bitstreams.constructor.name ]);
    };
    var v = Data_Array.head(inputFrames);
    if (v instanceof Data_Maybe.Just && v.value0 instanceof InfraredRemote_Types.FormatAEHA) {
        return decode(v.value0.value0.octets);
    };
    return Data_Maybe.Nothing.value;
};
module.exports = {
    decodeHitachiHvac: decodeHitachiHvac,
    MCool: MCool,
    MDryCool: MDryCool,
    MDehumidify: MDehumidify,
    MHeat: MHeat,
    MAutomatic: MAutomatic,
    MAutoDehumidifying: MAutoDehumidifying,
    MQuickLaundry: MQuickLaundry,
    MCondensationControl: MCondensationControl,
    FSilent: FSilent,
    FLow: FLow,
    FMed: FMed,
    FHigh: FHigh,
    FAuto: FAuto,
    Switch: Switch,
    HitachiHvac: HitachiHvac,
    genericMode: genericMode,
    eqMode: eqMode,
    ordMode: ordMode,
    enumMode: enumMode,
    boundedMode: boundedMode,
    boundedEnumMode: boundedEnumMode,
    showMode: showMode,
    genericFan: genericFan,
    eqFan: eqFan,
    ordFan: ordFan,
    enumFan: enumFan,
    boundedFan: boundedFan,
    boundedEnumFan: boundedEnumFan,
    showFan: showFan,
    newtypeSwitch: newtypeSwitch,
    eqSwitch: eqSwitch,
    ordSwitch: ordSwitch,
    enumSwitch: enumSwitch,
    boundedSwitch: boundedSwitch,
    boundedEnumSwitch: boundedEnumSwitch,
    showSwitch: showSwitch,
    newtypeHitachiHvac: newtypeHitachiHvac,
    genericHitachiHvac: genericHitachiHvac,
    eqHitachiHvac: eqHitachiHvac,
    showHitachiHvac: showHitachiHvac
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Array.NonEmpty.Internal/index.js":92,"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Bounded/index.js":159,"../Data.Generic.Rep.Enum/index.js":160,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../InfraredRemote.Types/index.js":366}],364:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var InfraredRemote_Types = require("../InfraredRemote.Types/index.js");
var Switch = function (x) {
    return x;
};
var SAuto = (function () {
    function SAuto() {

    };
    SAuto.value = new SAuto();
    return SAuto;
})();
var SHorizontal = (function () {
    function SHorizontal() {

    };
    SHorizontal.value = new SHorizontal();
    return SHorizontal;
})();
var SNotch2 = (function () {
    function SNotch2() {

    };
    SNotch2.value = new SNotch2();
    return SNotch2;
})();
var SNotch3 = (function () {
    function SNotch3() {

    };
    SNotch3.value = new SNotch3();
    return SNotch3;
})();
var SNotch4 = (function () {
    function SNotch4() {

    };
    SNotch4.value = new SNotch4();
    return SNotch4;
})();
var SNotch5 = (function () {
    function SNotch5() {

    };
    SNotch5.value = new SNotch5();
    return SNotch5;
})();
var PNormal = (function () {
    function PNormal() {

    };
    PNormal.value = new PNormal();
    return PNormal;
})();
var PBoost = (function () {
    function PBoost() {

    };
    PBoost.value = new PBoost();
    return PBoost;
})();
var PQuiet = (function () {
    function PQuiet() {

    };
    PQuiet.value = new PQuiet();
    return PQuiet;
})();
var POther = (function () {
    function POther(value0) {
        this.value0 = value0;
    };
    POther.create = function (value0) {
        return new POther(value0);
    };
    return POther;
})();
var MAuto = (function () {
    function MAuto() {

    };
    MAuto.value = new MAuto();
    return MAuto;
})();
var MDry = (function () {
    function MDry() {

    };
    MDry.value = new MDry();
    return MDry;
})();
var MCool = (function () {
    function MCool() {

    };
    MCool.value = new MCool();
    return MCool;
})();
var MHeat = (function () {
    function MHeat() {

    };
    MHeat.value = new MHeat();
    return MHeat;
})();
var FAuto = (function () {
    function FAuto() {

    };
    FAuto.value = new FAuto();
    return FAuto;
})();
var FSlowest = (function () {
    function FSlowest() {

    };
    FSlowest.value = new FSlowest();
    return FSlowest;
})();
var FNotch2 = (function () {
    function FNotch2() {

    };
    FNotch2.value = new FNotch2();
    return FNotch2;
})();
var FNotch3 = (function () {
    function FNotch3() {

    };
    FNotch3.value = new FNotch3();
    return FNotch3;
})();
var FNotch4 = (function () {
    function FNotch4() {

    };
    FNotch4.value = new FNotch4();
    return FNotch4;
})();
var FNotch5 = (function () {
    function FNotch5() {

    };
    FNotch5.value = new FNotch5();
    return FNotch5;
})();
var Crc = function (x) {
    return x;
};
var MitsubishiElectricHvac = function (x) {
    return x;
};
var showSwitch = new Data_Show.Show(function (v) {
    if (v) {
        return "ON";
    };
    if (!v) {
        return "OFF";
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 58, column 1 - line 58, column 35): " + [ v.constructor.name ]);
});
var ordSwitch = Data_Ord.ordBoolean;
var newtypeSwitch = new Data_Newtype.Newtype(function (n) {
    return n;
}, Switch);
var newtypeMitsubishiElectricHvac = new Data_Newtype.Newtype(function (n) {
    return n;
}, MitsubishiElectricHvac);
var newtypeCrc = new Data_Newtype.Newtype(function (n) {
    return n;
}, Crc);
var validCrc = function (crc) {
    return function (original) {
        var values = Data_Functor.map(Data_Functor.functorArray)(function ($144) {
            return Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($144));
        })(Data_Array.take(17)(original));
        var y = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(values) & 255;
        var x = Data_Newtype.unwrap(newtypeCrc)(crc);
        return x === y;
    };
};
var genericSwing = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof SAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof SHorizontal) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof SNotch2) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof SNotch3) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof SNotch4) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof SNotch5) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 64, column 8 - line 64, column 49): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return SAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return SHorizontal.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return SNotch2.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return SNotch3.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return SNotch4.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return SNotch5.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 64, column 8 - line 64, column 49): " + [ x.constructor.name ]);
});
var showSwing = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericSwing)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SHorizontal";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch2";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch3";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch4";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch5";
})))))))));
var genericProfile = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof PNormal) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof PBoost) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof PQuiet) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof POther) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 78, column 8 - line 78, column 53): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return PNormal.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return PBoost.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return PQuiet.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new POther(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 78, column 8 - line 78, column 53): " + [ x.constructor.name ]);
});
var showProfile = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericProfile)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PNormal";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PBoost";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PQuiet";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showInt))(new Data_Symbol.IsSymbol(function () {
    return "POther";
})))))));
var genericMode = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof MAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof MDry) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof MCool) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof MHeat) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 45, column 8 - line 45, column 46): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return MAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return MDry.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return MCool.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return MHeat.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 45, column 8 - line 45, column 46): " + [ x.constructor.name ]);
});
var showMode = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMode)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MDry";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MCool";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MHeat";
})))))));
var genericMitsubishiElectricHvac = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericFan = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof FAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof FSlowest) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof FNotch2) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof FNotch3) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof FNotch4) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof FNotch5) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 71, column 8 - line 71, column 45): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return FAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return FSlowest.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return FNotch2.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return FNotch3.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return FNotch4.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return FNotch5.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.MitsubishiElectricHvac (line 71, column 8 - line 71, column 45): " + [ x.constructor.name ]);
});
var showFan = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFan)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FSlowest";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch2";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch3";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch4";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch5";
})))))))));
var genericCrc = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showCrc = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericCrc)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showInt))(new Data_Symbol.IsSymbol(function () {
    return "Crc";
}))));
var showMitsubishiElectricHvac = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMitsubishiElectricHvac)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "crc";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "mode1";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(Data_Show.showRecordFieldsNil)(InfraredRemote_Types.showCelsius))(showSwitch))(Data_Show.showArray(Data_Array_NonEmpty_Internal.showNonEmptyArray(InfraredRemote_Types["showBit'"]))))(showMode))(showCrc))))(new Data_Symbol.IsSymbol(function () {
    return "MitsubishiElectricHvac";
}))));
var eqSwitch = Data_Eq.eqBoolean;
var eqSwing = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof SAuto && y instanceof SAuto) {
            return true;
        };
        if (x instanceof SHorizontal && y instanceof SHorizontal) {
            return true;
        };
        if (x instanceof SNotch2 && y instanceof SNotch2) {
            return true;
        };
        if (x instanceof SNotch3 && y instanceof SNotch3) {
            return true;
        };
        if (x instanceof SNotch4 && y instanceof SNotch4) {
            return true;
        };
        if (x instanceof SNotch5 && y instanceof SNotch5) {
            return true;
        };
        return false;
    };
});
var eqProfile = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof PNormal && y instanceof PNormal) {
            return true;
        };
        if (x instanceof PBoost && y instanceof PBoost) {
            return true;
        };
        if (x instanceof PQuiet && y instanceof PQuiet) {
            return true;
        };
        if (x instanceof POther && y instanceof POther) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof MAuto && y instanceof MAuto) {
            return true;
        };
        if (x instanceof MDry && y instanceof MDry) {
            return true;
        };
        if (x instanceof MCool && y instanceof MCool) {
            return true;
        };
        if (x instanceof MHeat && y instanceof MHeat) {
            return true;
        };
        return false;
    };
});
var eqFan = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof FAuto && y instanceof FAuto) {
            return true;
        };
        if (x instanceof FSlowest && y instanceof FSlowest) {
            return true;
        };
        if (x instanceof FNotch2 && y instanceof FNotch2) {
            return true;
        };
        if (x instanceof FNotch3 && y instanceof FNotch3) {
            return true;
        };
        if (x instanceof FNotch4 && y instanceof FNotch4) {
            return true;
        };
        if (x instanceof FNotch5 && y instanceof FNotch5) {
            return true;
        };
        return false;
    };
});
var eqCrc = Data_Eq.eqInt;
var eqMitsubishiElectricHvac = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(InfraredRemote_Types.eqCelsius))()(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(eqSwitch))()(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(InfraredRemote_Types.eqBit))))()(new Data_Symbol.IsSymbol(function () {
    return "mode1";
}))(eqMode))()(new Data_Symbol.IsSymbol(function () {
    return "crc";
}))(eqCrc));
var enumSwitch = Data_Enum.enumBoolean;
var boundedSwitch = Data_Bounded.boundedBoolean;
var boundedEnumSwitch = Data_Enum.boundedEnumBoolean;
var decodeMitsubishiElectricHvac = (function () {
    var toMode1 = function (v) {
        if (v === 4) {
            return new Data_Maybe.Just(MAuto.value);
        };
        if (v === 2) {
            return new Data_Maybe.Just(MDry.value);
        };
        if (v === 3) {
            return new Data_Maybe.Just(MCool.value);
        };
        if (v === 1) {
            return new Data_Maybe.Just(MHeat.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var first5bytes = Data_Array.mapMaybe(InfraredRemote_Types.fromBinaryString)([ "11000100", "11010011", "01100100", "10000000", "00000000" ]);
    var isValidIdentifier = function (input) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(InfraredRemote_Types.eqBit)))(Data_Array.take(5)(input))(first5bytes);
    };
    var decode = function (v) {
        if (v instanceof InfraredRemote_Types.FormatAEHA && v.value0.octets.length === 18) {
            var temp = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][7])) & 15;
            var $$switch = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][5])) >> 5 & 1;
            var mode1 = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][6])) >> 3 & 7;
            var crc = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][17]));
            return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isValidIdentifier(v.value0.octets)))(function () {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(toMode1(mode1))(function (v1) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSwitch)($$switch))(function (v2) {
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                            original: v.value0.octets,
                            temperature: 16 + temp | 0,
                            mode1: v1,
                            "switch": v2,
                            crc: crc
                        });
                    });
                });
            });
        };
        return Data_Maybe.Nothing.value;
    };
    return function (v) {
        if (v.length === 2) {
            return decode(v[1]);
        };
        return Data_Maybe.Nothing.value;
    };
})();
module.exports = {
    decodeMitsubishiElectricHvac: decodeMitsubishiElectricHvac,
    validCrc: validCrc,
    SAuto: SAuto,
    SHorizontal: SHorizontal,
    SNotch2: SNotch2,
    SNotch3: SNotch3,
    SNotch4: SNotch4,
    SNotch5: SNotch5,
    Switch: Switch,
    MAuto: MAuto,
    MDry: MDry,
    MCool: MCool,
    MHeat: MHeat,
    FAuto: FAuto,
    FSlowest: FSlowest,
    FNotch2: FNotch2,
    FNotch3: FNotch3,
    FNotch4: FNotch4,
    FNotch5: FNotch5,
    Crc: Crc,
    PNormal: PNormal,
    PBoost: PBoost,
    PQuiet: PQuiet,
    POther: POther,
    MitsubishiElectricHvac: MitsubishiElectricHvac,
    genericMode: genericMode,
    eqMode: eqMode,
    showMode: showMode,
    newtypeSwitch: newtypeSwitch,
    eqSwitch: eqSwitch,
    ordSwitch: ordSwitch,
    enumSwitch: enumSwitch,
    boundedSwitch: boundedSwitch,
    boundedEnumSwitch: boundedEnumSwitch,
    showSwitch: showSwitch,
    genericSwing: genericSwing,
    eqSwing: eqSwing,
    showSwing: showSwing,
    genericFan: genericFan,
    eqFan: eqFan,
    showFan: showFan,
    genericProfile: genericProfile,
    eqProfile: eqProfile,
    showProfile: showProfile,
    genericCrc: genericCrc,
    newtypeCrc: newtypeCrc,
    eqCrc: eqCrc,
    showCrc: showCrc,
    newtypeMitsubishiElectricHvac: newtypeMitsubishiElectricHvac,
    genericMitsubishiElectricHvac: genericMitsubishiElectricHvac,
    eqMitsubishiElectricHvac: eqMitsubishiElectricHvac,
    showMitsubishiElectricHvac: showMitsubishiElectricHvac
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.MonadZero/index.js":67,"../Data.Array.NonEmpty.Internal/index.js":92,"../Data.Array/index.js":98,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../InfraredRemote.Types/index.js":366}],365:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var InfraredRemote_Types = require("../InfraredRemote.Types/index.js");
var Switch = function (x) {
    return x;
};
var SAuto = (function () {
    function SAuto() {

    };
    SAuto.value = new SAuto();
    return SAuto;
})();
var SHorizontal = (function () {
    function SHorizontal() {

    };
    SHorizontal.value = new SHorizontal();
    return SHorizontal;
})();
var SNotch2 = (function () {
    function SNotch2() {

    };
    SNotch2.value = new SNotch2();
    return SNotch2;
})();
var SNotch3 = (function () {
    function SNotch3() {

    };
    SNotch3.value = new SNotch3();
    return SNotch3;
})();
var SNotch4 = (function () {
    function SNotch4() {

    };
    SNotch4.value = new SNotch4();
    return SNotch4;
})();
var SNotch5 = (function () {
    function SNotch5() {

    };
    SNotch5.value = new SNotch5();
    return SNotch5;
})();
var PNormal = (function () {
    function PNormal() {

    };
    PNormal.value = new PNormal();
    return PNormal;
})();
var PBoost = (function () {
    function PBoost() {

    };
    PBoost.value = new PBoost();
    return PBoost;
})();
var PQuiet = (function () {
    function PQuiet() {

    };
    PQuiet.value = new PQuiet();
    return PQuiet;
})();
var POther = (function () {
    function POther(value0) {
        this.value0 = value0;
    };
    POther.create = function (value0) {
        return new POther(value0);
    };
    return POther;
})();
var MAuto = (function () {
    function MAuto() {

    };
    MAuto.value = new MAuto();
    return MAuto;
})();
var MFan = (function () {
    function MFan() {

    };
    MFan.value = new MFan();
    return MFan;
})();
var MDry = (function () {
    function MDry() {

    };
    MDry.value = new MDry();
    return MDry;
})();
var MCool = (function () {
    function MCool() {

    };
    MCool.value = new MCool();
    return MCool;
})();
var MHeat = (function () {
    function MHeat() {

    };
    MHeat.value = new MHeat();
    return MHeat;
})();
var FAuto = (function () {
    function FAuto() {

    };
    FAuto.value = new FAuto();
    return FAuto;
})();
var FSlowest = (function () {
    function FSlowest() {

    };
    FSlowest.value = new FSlowest();
    return FSlowest;
})();
var FNotch2 = (function () {
    function FNotch2() {

    };
    FNotch2.value = new FNotch2();
    return FNotch2;
})();
var FNotch3 = (function () {
    function FNotch3() {

    };
    FNotch3.value = new FNotch3();
    return FNotch3;
})();
var FNotch4 = (function () {
    function FNotch4() {

    };
    FNotch4.value = new FNotch4();
    return FNotch4;
})();
var FNotch5 = (function () {
    function FNotch5() {

    };
    FNotch5.value = new FNotch5();
    return FNotch5;
})();
var Crc = function (x) {
    return x;
};
var PanasonicHvac = function (x) {
    return x;
};
var showSwitch = new Data_Show.Show(function (v) {
    if (v) {
        return "ON";
    };
    if (!v) {
        return "OFF";
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 57, column 1 - line 57, column 35): " + [ v.constructor.name ]);
});
var ordSwitch = Data_Ord.ordBoolean;
var newtypeSwitch = new Data_Newtype.Newtype(function (n) {
    return n;
}, Switch);
var newtypePanasonicHvac = new Data_Newtype.Newtype(function (n) {
    return n;
}, PanasonicHvac);
var newtypeCrc = new Data_Newtype.Newtype(function (n) {
    return n;
}, Crc);
var validCrc = function (crc) {
    return function (original) {
        var values = Data_Functor.map(Data_Functor.functorArray)(function ($160) {
            return Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($160));
        })(Data_Array.take(18)(original));
        var y = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(values) & 255;
        var x = Data_Newtype.unwrap(newtypeCrc)(crc);
        return x === y;
    };
};
var genericSwing = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof SAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof SHorizontal) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof SNotch2) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof SNotch3) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof SNotch4) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof SNotch5) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 63, column 8 - line 63, column 49): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return SAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return SHorizontal.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return SNotch2.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return SNotch3.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return SNotch4.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return SNotch5.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 63, column 8 - line 63, column 49): " + [ x.constructor.name ]);
});
var showSwing = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericSwing)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SHorizontal";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch2";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch3";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch4";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "SNotch5";
})))))))));
var genericProfile = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof PNormal) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof PBoost) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof PQuiet) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof POther) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 77, column 8 - line 77, column 53): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return PNormal.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return PBoost.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return PQuiet.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new POther(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 77, column 8 - line 77, column 53): " + [ x.constructor.name ]);
});
var showProfile = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericProfile)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PNormal";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PBoost";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "PQuiet";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showInt))(new Data_Symbol.IsSymbol(function () {
    return "POther";
})))))));
var genericPanasonicHvac = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericMode = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof MAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof MFan) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof MDry) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof MCool) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof MHeat) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))));
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 44, column 8 - line 44, column 46): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return MAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return MFan.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return MDry.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return MCool.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
        return MHeat.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 44, column 8 - line 44, column 46): " + [ x.constructor.name ]);
});
var showMode = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMode)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MFan";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MDry";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MCool";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "MHeat";
}))))))));
var genericFan = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof FAuto) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof FSlowest) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof FNotch2) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
    };
    if (x instanceof FNotch3) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof FNotch4) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
    };
    if (x instanceof FNotch5) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 70, column 8 - line 70, column 45): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return FAuto.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return FSlowest.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return FNotch2.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return FNotch3.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return FNotch4.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return FNotch5.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.PanasonicHvac (line 70, column 8 - line 70, column 45): " + [ x.constructor.name ]);
});
var showFan = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericFan)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FAuto";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FSlowest";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch2";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch3";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch4";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "FNotch5";
})))))))));
var genericCrc = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showCrc = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericCrc)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showInt))(new Data_Symbol.IsSymbol(function () {
    return "Crc";
}))));
var showPanasonicHvac = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPanasonicHvac)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "crc";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "fan";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "mode";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "profile";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "swing";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(Data_Show.showRecordFieldsNil)(InfraredRemote_Types.showCelsius))(showSwitch))(showSwing))(showProfile))(Data_Show.showArray(Data_Array_NonEmpty_Internal.showNonEmptyArray(InfraredRemote_Types["showBit'"]))))(showMode))(showFan))(showCrc))))(new Data_Symbol.IsSymbol(function () {
    return "PanasonicHvac";
}))));
var eqSwitch = Data_Eq.eqBoolean;
var eqSwing = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof SAuto && y instanceof SAuto) {
            return true;
        };
        if (x instanceof SHorizontal && y instanceof SHorizontal) {
            return true;
        };
        if (x instanceof SNotch2 && y instanceof SNotch2) {
            return true;
        };
        if (x instanceof SNotch3 && y instanceof SNotch3) {
            return true;
        };
        if (x instanceof SNotch4 && y instanceof SNotch4) {
            return true;
        };
        if (x instanceof SNotch5 && y instanceof SNotch5) {
            return true;
        };
        return false;
    };
});
var eqProfile = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof PNormal && y instanceof PNormal) {
            return true;
        };
        if (x instanceof PBoost && y instanceof PBoost) {
            return true;
        };
        if (x instanceof PQuiet && y instanceof PQuiet) {
            return true;
        };
        if (x instanceof POther && y instanceof POther) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof MAuto && y instanceof MAuto) {
            return true;
        };
        if (x instanceof MFan && y instanceof MFan) {
            return true;
        };
        if (x instanceof MDry && y instanceof MDry) {
            return true;
        };
        if (x instanceof MCool && y instanceof MCool) {
            return true;
        };
        if (x instanceof MHeat && y instanceof MHeat) {
            return true;
        };
        return false;
    };
});
var eqFan = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof FAuto && y instanceof FAuto) {
            return true;
        };
        if (x instanceof FSlowest && y instanceof FSlowest) {
            return true;
        };
        if (x instanceof FNotch2 && y instanceof FNotch2) {
            return true;
        };
        if (x instanceof FNotch3 && y instanceof FNotch3) {
            return true;
        };
        if (x instanceof FNotch4 && y instanceof FNotch4) {
            return true;
        };
        if (x instanceof FNotch5 && y instanceof FNotch5) {
            return true;
        };
        return false;
    };
});
var eqCrc = Data_Eq.eqInt;
var eqPanasonicHvac = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
    return "temperature";
}))(InfraredRemote_Types.eqCelsius))()(new Data_Symbol.IsSymbol(function () {
    return "switch";
}))(eqSwitch))()(new Data_Symbol.IsSymbol(function () {
    return "swing";
}))(eqSwing))()(new Data_Symbol.IsSymbol(function () {
    return "profile";
}))(eqProfile))()(new Data_Symbol.IsSymbol(function () {
    return "original";
}))(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(InfraredRemote_Types.eqBit))))()(new Data_Symbol.IsSymbol(function () {
    return "mode";
}))(eqMode))()(new Data_Symbol.IsSymbol(function () {
    return "fan";
}))(eqFan))()(new Data_Symbol.IsSymbol(function () {
    return "crc";
}))(eqCrc));
var enumSwitch = Data_Enum.enumBoolean;
var boundedSwitch = Data_Bounded.boundedBoolean;
var boundedEnumSwitch = Data_Enum.boundedEnumBoolean;
var decodePanasonicHvac = (function () {
    var toSwingNotch = function (v) {
        if (v === 15) {
            return new Data_Maybe.Just(SAuto.value);
        };
        if (v === 1) {
            return new Data_Maybe.Just(SHorizontal.value);
        };
        if (v === 2) {
            return new Data_Maybe.Just(SNotch2.value);
        };
        if (v === 3) {
            return new Data_Maybe.Just(SNotch3.value);
        };
        if (v === 4) {
            return new Data_Maybe.Just(SNotch4.value);
        };
        if (v === 5) {
            return new Data_Maybe.Just(SNotch5.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var toProfile = function (v) {
        if (v === 16) {
            return PNormal.value;
        };
        if (v === 17) {
            return PBoost.value;
        };
        if (v === 48) {
            return PQuiet.value;
        };
        return new POther(v);
    };
    var toMode = function (v) {
        if (v === 0) {
            return new Data_Maybe.Just(MAuto.value);
        };
        if (v === 2) {
            return new Data_Maybe.Just(MDry.value);
        };
        if (v === 3) {
            return new Data_Maybe.Just(MCool.value);
        };
        if (v === 4) {
            return new Data_Maybe.Just(MHeat.value);
        };
        if (v === 6) {
            return new Data_Maybe.Just(MFan.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var toFanNotch = function (v) {
        if (v === 10) {
            return new Data_Maybe.Just(FAuto.value);
        };
        if (v === 3) {
            return new Data_Maybe.Just(FSlowest.value);
        };
        if (v === 4) {
            return new Data_Maybe.Just(FNotch2.value);
        };
        if (v === 5) {
            return new Data_Maybe.Just(FNotch3.value);
        };
        if (v === 6) {
            return new Data_Maybe.Just(FNotch4.value);
        };
        if (v === 7) {
            return new Data_Maybe.Just(FNotch5.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var firstFrame = (function () {
        var octets = Data_Array.mapMaybe(InfraredRemote_Types.fromBinaryString)([ "01000000", "00000100", "00000111", "00100000", "00000000", "00000000", "00000000", "01100000" ]);
        return new InfraredRemote_Types.FormatAEHA({
            octets: octets,
            stop: InfraredRemote_Types.Assert.value
        });
    })();
    var decode = function (v) {
        if (v instanceof InfraredRemote_Types.FormatAEHA && v.value0.octets.length === 19) {
            var temp = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][6])) >> 1 & 15;
            var $$switch = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][5])) & 1;
            var swing = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][8])) & 15;
            var prof = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][13]));
            var mode = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][5])) >> 4 & 15;
            var fan = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][8])) >> 4 & 15;
            var crc = Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v["value0"]["octets"][18]));
            return Control_Bind.bind(Data_Maybe.bindMaybe)(toMode(mode))(function (v1) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSwitch)($$switch))(function (v2) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(toSwingNotch(swing))(function (v3) {
                        return Control_Bind.bind(Data_Maybe.bindMaybe)(toFanNotch(fan))(function (v4) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                                original: v.value0.octets,
                                temperature: 16 + temp | 0,
                                mode: v1,
                                "switch": v2,
                                swing: v3,
                                fan: v4,
                                profile: toProfile(prof),
                                crc: crc
                            });
                        });
                    });
                });
            });
        };
        return Data_Maybe.Nothing.value;
    };
    return function (v) {
        if (v.length === 2 && Data_Eq.eq(InfraredRemote_Types.eqInfraredCodeFrame)(v[0])(firstFrame)) {
            return decode(v[1]);
        };
        return Data_Maybe.Nothing.value;
    };
})();
module.exports = {
    decodePanasonicHvac: decodePanasonicHvac,
    validCrc: validCrc,
    SAuto: SAuto,
    SHorizontal: SHorizontal,
    SNotch2: SNotch2,
    SNotch3: SNotch3,
    SNotch4: SNotch4,
    SNotch5: SNotch5,
    Switch: Switch,
    MAuto: MAuto,
    MFan: MFan,
    MDry: MDry,
    MCool: MCool,
    MHeat: MHeat,
    FAuto: FAuto,
    FSlowest: FSlowest,
    FNotch2: FNotch2,
    FNotch3: FNotch3,
    FNotch4: FNotch4,
    FNotch5: FNotch5,
    Crc: Crc,
    PNormal: PNormal,
    PBoost: PBoost,
    PQuiet: PQuiet,
    POther: POther,
    PanasonicHvac: PanasonicHvac,
    genericMode: genericMode,
    eqMode: eqMode,
    showMode: showMode,
    newtypeSwitch: newtypeSwitch,
    eqSwitch: eqSwitch,
    ordSwitch: ordSwitch,
    enumSwitch: enumSwitch,
    boundedSwitch: boundedSwitch,
    boundedEnumSwitch: boundedEnumSwitch,
    showSwitch: showSwitch,
    genericSwing: genericSwing,
    eqSwing: eqSwing,
    showSwing: showSwing,
    genericFan: genericFan,
    eqFan: eqFan,
    showFan: showFan,
    genericProfile: genericProfile,
    eqProfile: eqProfile,
    showProfile: showProfile,
    genericCrc: genericCrc,
    newtypeCrc: newtypeCrc,
    eqCrc: eqCrc,
    showCrc: showCrc,
    newtypePanasonicHvac: newtypePanasonicHvac,
    genericPanasonicHvac: genericPanasonicHvac,
    eqPanasonicHvac: eqPanasonicHvac,
    showPanasonicHvac: showPanasonicHvac
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Array.NonEmpty.Internal/index.js":92,"../Data.Array/index.js":98,"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../InfraredRemote.Types/index.js":366}],366:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var MsbFirst = function (x) {
    return x;
};
var LsbFirst = function (x) {
    return x;
};
var Celsius = function (x) {
    return x;
};
var Negate = (function () {
    function Negate() {

    };
    Negate.value = new Negate();
    return Negate;
})();
var Assert = (function () {
    function Assert() {

    };
    Assert.value = new Assert();
    return Assert;
})();
var FormatUnknown = (function () {
    function FormatUnknown(value0) {
        this.value0 = value0;
    };
    FormatUnknown.create = function (value0) {
        return new FormatUnknown(value0);
    };
    return FormatUnknown;
})();
var FormatAEHA = (function () {
    function FormatAEHA(value0) {
        this.value0 = value0;
    };
    FormatAEHA.create = function (value0) {
        return new FormatAEHA(value0);
    };
    return FormatAEHA;
})();
var FormatNEC = (function () {
    function FormatNEC(value0) {
        this.value0 = value0;
    };
    FormatNEC.create = function (value0) {
        return new FormatNEC(value0);
    };
    return FormatNEC;
})();
var FormatSIRC = (function () {
    function FormatSIRC(value0) {
        this.value0 = value0;
    };
    FormatSIRC.create = function (value0) {
        return new FormatSIRC(value0);
    };
    return FormatSIRC;
})();
var toMsbFirst = function (bits) {
    var f = function (acc) {
        return function (v) {
            if (v instanceof Assert) {
                return (acc * 2 | 0) + 1 | 0;
            };
            if (v instanceof Negate) {
                return (acc * 2 | 0) + 0 | 0;
            };
            throw new Error("Failed pattern match at InfraredRemote.Types (line 140, column 3 - line 140, column 25): " + [ acc.constructor.name, v.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(f)(0)(bits);
};
var toLsbFirst = function (bits) {
    var f = function (acc) {
        return function (v) {
            if (v instanceof Assert) {
                return (acc * 2 | 0) + 1 | 0;
            };
            if (v instanceof Negate) {
                return (acc * 2 | 0) + 0 | 0;
            };
            throw new Error("Failed pattern match at InfraredRemote.Types (line 113, column 3 - line 113, column 25): " + [ acc.constructor.name, v.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(f)(0)(Data_Array_NonEmpty.reverse(bits));
};
var toBoolean = function (v) {
    if (v instanceof Negate) {
        return false;
    };
    if (v instanceof Assert) {
        return true;
    };
    throw new Error("Failed pattern match at InfraredRemote.Types (line 70, column 1 - line 70, column 28): " + [ v.constructor.name ]);
};
var showMsbFirst = new Data_Show.Show(function (v) {
    return "0x" + (Data_Int.toStringAs(Data_Int.hexadecimal)(v) + "(MSBFirst)");
});
var showLsbFirst = new Data_Show.Show(function (v) {
    return "0x" + (Data_Int.toStringAs(Data_Int.hexadecimal)(v) + "(LSBFirst)");
});
var showCelsius = Data_Show.showInt;
var showBit = function (v) {
    if (v instanceof Negate) {
        return "0";
    };
    if (v instanceof Assert) {
        return "1";
    };
    throw new Error("Failed pattern match at InfraredRemote.Types (line 60, column 1 - line 60, column 25): " + [ v.constructor.name ]);
};
var showBit$prime = new Data_Show.Show(showBit);
var ordMsbFirst = Data_Ord.ordInt;
var ordLsbFirst = Data_Ord.ordInt;
var ordCelsius = Data_Ord.ordInt;
var newtypeMsbFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, MsbFirst);
var toStringMsbFirst = function ($71) {
    return Data_Int.toStringAs(Data_Int.decimal)(Data_Newtype.unwrap(newtypeMsbFirst)($71));
};
var toStringMsbFirstWithHex = function ($72) {
    return Data_Int.toStringAs(Data_Int.hexadecimal)(Data_Newtype.unwrap(newtypeMsbFirst)($72));
};
var newtypeLsbFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, LsbFirst);
var toStringLsbFirst = function ($73) {
    return Data_Int.toStringAs(Data_Int.decimal)(Data_Newtype.unwrap(newtypeLsbFirst)($73));
};
var toStringLsbFirstWithHex = function ($74) {
    return Data_Int.toStringAs(Data_Int.hexadecimal)(Data_Newtype.unwrap(newtypeLsbFirst)($74));
};
var newtypeCelsius = new Data_Newtype.Newtype(function (n) {
    return n;
}, Celsius);
var genericInfraredCodeFrame = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof FormatUnknown) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof FormatAEHA) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof FormatNEC) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof FormatSIRC) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)));
    };
    throw new Error("Failed pattern match at InfraredRemote.Types (line 150, column 8 - line 150, column 73): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new FormatUnknown(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new FormatAEHA(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new FormatNEC(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
        return new FormatSIRC(x.value0.value0.value0);
    };
    throw new Error("Failed pattern match at InfraredRemote.Types (line 150, column 8 - line 150, column 73): " + [ x.constructor.name ]);
});
var showInfraredCodeFrame = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericInfraredCodeFrame)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showArray(showBit$prime)))(new Data_Symbol.IsSymbol(function () {
    return "FormatUnknown";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "octets";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "stop";
}))(Data_Show.showRecordFieldsNil)(showBit$prime))(Data_Show.showArray(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime))))))(new Data_Symbol.IsSymbol(function () {
    return "FormatAEHA";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "custom0";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "custom1";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "data0";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "data1";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "stop";
}))(Data_Show.showRecordFieldsNil)(showBit$prime))(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))))(new Data_Symbol.IsSymbol(function () {
    return "FormatNEC";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "address";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "command";
}))(Data_Show.showRecordFieldsNil)(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))(Data_Array_NonEmpty_Internal.showNonEmptyArray(showBit$prime)))))(new Data_Symbol.IsSymbol(function () {
    return "FormatSIRC";
})))))));
var fromBoolean = function (v) {
    if (!v) {
        return Negate.value;
    };
    if (v) {
        return Assert.value;
    };
    throw new Error("Failed pattern match at InfraredRemote.Types (line 65, column 1 - line 65, column 30): " + [ v.constructor.name ]);
};
var fromBinaryString = function (input) {
    var f = function (v) {
        if (v === "0") {
            return new Data_Maybe.Just(Negate.value);
        };
        if (v === "1") {
            return new Data_Maybe.Just(Assert.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var xs = Data_Functor.map(Data_Functor.functorArray)(f)(Data_String_CodeUnits.toCharArray(input));
    return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Maybe.isJust)(xs)))(function () {
        return Data_Array_NonEmpty.fromArray(Data_Array.catMaybes(xs));
    });
};
var eqMsbFirst = Data_Eq.eqInt;
var eqLsbFirst = Data_Eq.eqInt;
var eqCelsius = Data_Eq.eqInt;
var eqBit = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Negate && y instanceof Negate) {
            return true;
        };
        if (x instanceof Assert && y instanceof Assert) {
            return true;
        };
        return false;
    };
});
var eqInfraredCodeFrame = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof FormatUnknown && y instanceof FormatUnknown) {
            return Data_Eq.eq(Data_Eq.eqArray(eqBit))(x.value0)(y.value0);
        };
        if (x instanceof FormatAEHA && y instanceof FormatAEHA) {
            return Data_Eq.eq(Data_Eq.eqArray(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit)))(x.value0.octets)(y.value0.octets) && Data_Eq.eq(eqBit)(x.value0.stop)(y.value0.stop);
        };
        if (x instanceof FormatNEC && y instanceof FormatNEC) {
            return Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.custom0)(y.value0.custom0) && Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.custom1)(y.value0.custom1) && Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.data0)(y.value0.data0) && Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.data1)(y.value0.data1) && Data_Eq.eq(eqBit)(x.value0.stop)(y.value0.stop);
        };
        if (x instanceof FormatSIRC && y instanceof FormatSIRC) {
            return Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.address)(y.value0.address) && Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqBit))(x.value0.command)(y.value0.command);
        };
        return false;
    };
});
module.exports = {
    Negate: Negate,
    Assert: Assert,
    Celsius: Celsius,
    FormatUnknown: FormatUnknown,
    FormatAEHA: FormatAEHA,
    FormatNEC: FormatNEC,
    FormatSIRC: FormatSIRC,
    LsbFirst: LsbFirst,
    MsbFirst: MsbFirst,
    fromBoolean: fromBoolean,
    showBit: showBit,
    toBoolean: toBoolean,
    toLsbFirst: toLsbFirst,
    toMsbFirst: toMsbFirst,
    toStringLsbFirst: toStringLsbFirst,
    toStringLsbFirstWithHex: toStringLsbFirstWithHex,
    toStringMsbFirst: toStringMsbFirst,
    toStringMsbFirstWithHex: toStringMsbFirstWithHex,
    fromBinaryString: fromBinaryString,
    eqBit: eqBit,
    "showBit'": showBit$prime,
    newtypeLsbFirst: newtypeLsbFirst,
    eqLsbFirst: eqLsbFirst,
    ordLsbFirst: ordLsbFirst,
    showLsbFirst: showLsbFirst,
    newtypeMsbFirst: newtypeMsbFirst,
    eqMsbFirst: eqMsbFirst,
    ordMsbFirst: ordMsbFirst,
    showMsbFirst: showMsbFirst,
    genericInfraredCodeFrame: genericInfraredCodeFrame,
    eqInfraredCodeFrame: eqInfraredCodeFrame,
    showInfraredCodeFrame: showInfraredCodeFrame,
    newtypeCelsius: newtypeCelsius,
    eqCelsius: eqCelsius,
    ordCelsius: ordCelsius,
    showCelsius: showCelsius
};

},{"../Control.Bind/index.js":35,"../Control.MonadZero/index.js":67,"../Data.Array.NonEmpty.Internal/index.js":92,"../Data.Array.NonEmpty/index.js":93,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.HeytingAlgebra/index.js":165,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.Symbol/index.js":250}],367:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var AppM = require("../AppM/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query = require("../Halogen.Query/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");
var Page_About = require("../Page.About/index.js");
var Page_Home = require("../Page.Home/index.js");
var Page_Infrared = require("../Page.Infrared/index.js");
var Page_Plotdata = require("../Page.Plotdata/index.js");
var Page_Settings = require("../Page.Settings/index.js");
var Route = require("../Route/index.js");
var Routing_PushState = require("../Routing.PushState/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Location = require("../Web.HTML.Location/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Goto = (function () {
    function Goto(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Goto.create = function (value0) {
        return function (value1) {
            return new Goto(value0, value1);
        };
    };
    return Goto;
})();
var routeSignal = function (hio) {
    return function ($$interface) {
        var pathChanged = function (v) {
            return function (newRoute) {
                return function __do() {
                    Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff(hio.query(Halogen_Query.tell(Goto.create(newRoute)))))();
                    return Data_Unit.unit;
                };
            };
        };
        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Routing_PushState.matches(Route.routing)(pathChanged)($$interface));
    };
};
var initialState = function (v) {
    return {
        route: Route.Home.value
    };
};
var handleQuery = function (v) {
    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Route.eqRoute)(v1.route)(v.value0))(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
            var $18 = {};
            for (var $19 in state) {
                if ({}.hasOwnProperty.call(state, $19)) {
                    $18[$19] = state[$19];
                };
            };
            $18.route = v.value0;
            return $18;
        })))(function () {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
        });
    });
};
var _pgSettings = Data_Symbol.SProxy.value;
var _pgPlotdata = Data_Symbol.SProxy.value;
var _pgInfrared = Data_Symbol.SProxy.value;
var _pgHome = Data_Symbol.SProxy.value;
var _pgAbout = Data_Symbol.SProxy.value;
var render = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return function (state) {
                if (state.route instanceof Route.Home) {
                    return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "pgHome";
                    }))(Data_Ord.ordUnit)(_pgHome)(Data_Unit.unit)(Page_Home.component(dictMonadAff)(dictNavigate)(dictHasApiAccessible))(Data_Unit.unit)(Data_Void.absurd);
                };
                if (state.route instanceof Route.Plotdata) {
                    return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "pgPlotdata";
                    }))(Data_Ord.ordUnit)(_pgPlotdata)(Data_Unit.unit)(Page_Plotdata.component(dictMonadAff)(dictNavigate)(dictHasApiAccessible))(state.route)(Data_Void.absurd);
                };
                if (state.route instanceof Route.Infrared) {
                    return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "pgInfrared";
                    }))(Data_Ord.ordUnit)(_pgInfrared)(Data_Unit.unit)(Page_Infrared.component(dictMonadAff)(dictNavigate)(dictHasApiAccessible))(state.route)(Data_Void.absurd);
                };
                if (state.route instanceof Route.Settings) {
                    return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "pgSettings";
                    }))(Data_Ord.ordUnit)(_pgSettings)(Data_Unit.unit)(Page_Settings.component(dictMonadAff)(dictNavigate)(dictHasApiAccessible))(Data_Unit.unit)(Data_Void.absurd);
                };
                if (state.route instanceof Route.About) {
                    return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "pgAbout";
                    }))(Data_Ord.ordUnit)(_pgAbout)(Data_Unit.unit)(Page_About.component(dictMonadAff)(dictNavigate))(Data_Unit.unit)(Data_Void.absurd);
                };
                throw new Error("Failed pattern match at Main (line 98, column 16 - line 108, column 58): " + [ state.route.constructor.name ]);
            };
        };
    };
};
var rootComponent = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return Halogen_Component.mkComponent({
                initialState: initialState,
                render: render(dictMonadAff)(dictNavigate)(dictHasApiAccessible),
                "eval": Halogen_Component.mkEval({
                    handleAction: Halogen_Component.defaultEval.handleAction,
                    handleQuery: handleQuery,
                    receive: Halogen_Component.defaultEval.receive,
                    initialize: Halogen_Component.defaultEval.initialize,
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (v) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Routing_PushState.makeInterface))(function (v1) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Location.origin)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.location)(Web_HTML.window))))(function (v2) {
            var env = {
                psInterface: v1,
                apiBaseURL: v2,
                apiTimeout: 3600.0
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Halogen_VDom_Driver.runUI(Halogen_Component.hoist(Halogen_HTML_Core.bifunctorHTML)(Effect_Aff.functorAff)(Data_Function.flip(AppM.runAppM)(env))(rootComponent(AppM.monadAffAppM)(AppM.navigateAppM)(AppM.hasApiAccessibleAppM)))(Data_Unit.unit)(v))(function (v3) {
                return Effect_Aff.forkAff(routeSignal(v3)(v1));
            });
        });
    });
}));
module.exports = {
    main: main
};

},{"../AppM/index.js":13,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Eq/index.js":133,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Data.Void/index.js":270,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect/index.js":294,"../Halogen.Aff.Util/index.js":336,"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML/index.js":345,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Query/index.js":351,"../Halogen.VDom.Driver/index.js":355,"../Page.About/index.js":370,"../Page.Home/index.js":373,"../Page.Infrared/index.js":374,"../Page.Plotdata/index.js":375,"../Page.Settings/index.js":376,"../Route/index.js":388,"../Routing.PushState/index.js":392,"../Web.HTML.Location/index.js":443,"../Web.HTML.Window/index.js":446,"../Web.HTML/index.js":448}],368:[function(require,module,exports){
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.tau = 2 * Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],369:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    abs: $foreign.abs,
    acos: $foreign.acos,
    asin: $foreign.asin,
    atan: $foreign.atan,
    atan2: $foreign.atan2,
    ceil: $foreign.ceil,
    cos: $foreign.cos,
    exp: $foreign.exp,
    floor: $foreign.floor,
    log: $foreign.log,
    max: $foreign.max,
    min: $foreign.min,
    pow: $foreign.pow,
    round: $foreign.round,
    sin: $foreign.sin,
    sqrt: $foreign.sqrt,
    tan: $foreign.tan,
    trunc: $foreign.trunc,
    remainder: $foreign.remainder,
    e: $foreign.e,
    ln2: $foreign.ln2,
    ln10: $foreign.ln10,
    log2e: $foreign.log2e,
    log10e: $foreign.log10e,
    pi: $foreign.pi,
    tau: $foreign.tau,
    sqrt1_2: $foreign.sqrt1_2,
    sqrt2: $foreign.sqrt2
};

},{"./foreign.js":368}],370:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var AppM = require("../AppM/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var Route = require("../Route/index.js");
var ThisIsNone = (function () {
    function ThisIsNone(value0) {
        this.value0 = value0;
    };
    ThisIsNone.create = function (value0) {
        return new ThisIsNone(value0);
    };
    return ThisIsNone;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var Finalize = (function () {
    function Finalize() {

    };
    Finalize.value = new Finalize();
    return Finalize;
})();
var NavigateTo = (function () {
    function NavigateTo(value0) {
        this.value0 = value0;
    };
    NavigateTo.create = function (value0) {
        return new NavigateTo(value0);
    };
    return NavigateTo;
})();
var initialState = function (v) {
    return {
        session: "About"
    };
};
var handleQuery = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (v) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0));
        };
    };
};
var handleAction = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (v) {
            if (v instanceof Initialize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
            };
            if (v instanceof Finalize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
            };
            if (v instanceof NavigateTo) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(v.value0))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                });
            };
            throw new Error("Failed pattern match at Page.About (line 94, column 16 - line 101, column 16): " + [ v.constructor.name ]);
        };
    };
};
var document = [ Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.h2) ])([ Halogen_HTML_Core.text("About this application") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m4 ]) ])([ Halogen_HTML_Core.text("PiHVAC <"), Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/ak1211/pi_hvac") ])([ Halogen_HTML_Core.text("https://github.com/ak1211/pi_hvac") ]), Halogen_HTML_Core.text(">"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Copyright 2019 Akihiro Yamamoto") ]), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.h2) ])([ Halogen_HTML_Core.text("The License") ]), Halogen_HTML_Elements.pre([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.m4) ])([ Halogen_HTML_Core.text("\x0a                                 Apache License\x0a                           Version 2.0, January 2004\x0a                        http://www.apache.org/licenses/\x0a\x0a   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\x0a\x0a   1. Definitions.\x0a\x0a      \"License\" shall mean the terms and conditions for use, reproduction,\x0a      and distribution as defined by Sections 1 through 9 of this document.\x0a\x0a      \"Licensor\" shall mean the copyright owner or entity authorized by\x0a      the copyright owner that is granting the License.\x0a\x0a      \"Legal Entity\" shall mean the union of the acting entity and all\x0a      other entities that control, are controlled by, or are under common\x0a      control with that entity. For the purposes of this definition,\x0a      \"control\" means (i) the power, direct or indirect, to cause the\x0a      direction or management of such entity, whether by contract or\x0a      otherwise, or (ii) ownership of fifty percent (50%) or more of the\x0a      outstanding shares, or (iii) beneficial ownership of such entity.\x0a\x0a      \"You\" (or \"Your\") shall mean an individual or Legal Entity\x0a      exercising permissions granted by this License.\x0a\x0a      \"Source\" form shall mean the preferred form for making modifications,\x0a      including but not limited to software source code, documentation\x0a      source, and configuration files.\x0a\x0a      \"Object\" form shall mean any form resulting from mechanical\x0a      transformation or translation of a Source form, including but\x0a      not limited to compiled object code, generated documentation,\x0a      and conversions to other media types.\x0a\x0a      \"Work\" shall mean the work of authorship, whether in Source or\x0a      Object form, made available under the License, as indicated by a\x0a      copyright notice that is included in or attached to the work\x0a      (an example is provided in the Appendix below).\x0a\x0a      \"Derivative Works\" shall mean any work, whether in Source or Object\x0a      form, that is based on (or derived from) the Work and for which the\x0a      editorial revisions, annotations, elaborations, or other modifications\x0a      represent, as a whole, an original work of authorship. For the purposes\x0a      of this License, Derivative Works shall not include works that remain\x0a      separable from, or merely link (or bind by name) to the interfaces of,\x0a      the Work and Derivative Works thereof.\x0a\x0a      \"Contribution\" shall mean any work of authorship, including\x0a      the original version of the Work and any modifications or additions\x0a      to that Work or Derivative Works thereof, that is intentionally\x0a      submitted to Licensor for inclusion in the Work by the copyright owner\x0a      or by an individual or Legal Entity authorized to submit on behalf of\x0a      the copyright owner. For the purposes of this definition, \"submitted\"\x0a      means any form of electronic, verbal, or written communication sent\x0a      to the Licensor or its representatives, including but not limited to\x0a      communication on electronic mailing lists, source code control systems,\x0a      and issue tracking systems that are managed by, or on behalf of, the\x0a      Licensor for the purpose of discussing and improving the Work, but\x0a      excluding communication that is conspicuously marked or otherwise\x0a      designated in writing by the copyright owner as \"Not a Contribution.\"\x0a\x0a      \"Contributor\" shall mean Licensor and any individual or Legal Entity\x0a      on behalf of whom a Contribution has been received by Licensor and\x0a      subsequently incorporated within the Work.\x0a\x0a   2. Grant of Copyright License. Subject to the terms and conditions of\x0a      this License, each Contributor hereby grants to You a perpetual,\x0a      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\x0a      copyright license to reproduce, prepare Derivative Works of,\x0a      publicly display, publicly perform, sublicense, and distribute the\x0a      Work and such Derivative Works in Source or Object form.\x0a\x0a   3. Grant of Patent License. Subject to the terms and conditions of\x0a      this License, each Contributor hereby grants to You a perpetual,\x0a      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\x0a      (except as stated in this section) patent license to make, have made,\x0a      use, offer to sell, sell, import, and otherwise transfer the Work,\x0a      where such license applies only to those patent claims licensable\x0a      by such Contributor that are necessarily infringed by their\x0a      Contribution(s) alone or by combination of their Contribution(s)\x0a      with the Work to which such Contribution(s) was submitted. If You\x0a      institute patent litigation against any entity (including a\x0a      cross-claim or counterclaim in a lawsuit) alleging that the Work\x0a      or a Contribution incorporated within the Work constitutes direct\x0a      or contributory patent infringement, then any patent licenses\x0a      granted to You under this License for that Work shall terminate\x0a      as of the date such litigation is filed.\x0a\x0a   4. Redistribution. You may reproduce and distribute copies of the\x0a      Work or Derivative Works thereof in any medium, with or without\x0a      modifications, and in Source or Object form, provided that You\x0a      meet the following conditions:\x0a\x0a      (a) You must give any other recipients of the Work or\x0a          Derivative Works a copy of this License; and\x0a\x0a      (b) You must cause any modified files to carry prominent notices\x0a          stating that You changed the files; and\x0a\x0a      (c) You must retain, in the Source form of any Derivative Works\x0a          that You distribute, all copyright, patent, trademark, and\x0a          attribution notices from the Source form of the Work,\x0a          excluding those notices that do not pertain to any part of\x0a          the Derivative Works; and\x0a\x0a      (d) If the Work includes a \"NOTICE\" text file as part of its\x0a          distribution, then any Derivative Works that You distribute must\x0a          include a readable copy of the attribution notices contained\x0a          within such NOTICE file, excluding those notices that do not\x0a          pertain to any part of the Derivative Works, in at least one\x0a          of the following places: within a NOTICE text file distributed\x0a          as part of the Derivative Works; within the Source form or\x0a          documentation, if provided along with the Derivative Works; or,\x0a          within a display generated by the Derivative Works, if and\x0a          wherever such third-party notices normally appear. The contents\x0a          of the NOTICE file are for informational purposes only and\x0a          do not modify the License. You may add Your own attribution\x0a          notices within Derivative Works that You distribute, alongside\x0a          or as an addendum to the NOTICE text from the Work, provided\x0a          that such additional attribution notices cannot be construed\x0a          as modifying the License.\x0a\x0a      You may add Your own copyright statement to Your modifications and\x0a      may provide additional or different license terms and conditions\x0a      for use, reproduction, or distribution of Your modifications, or\x0a      for any such Derivative Works as a whole, provided Your use,\x0a      reproduction, and distribution of the Work otherwise complies with\x0a      the conditions stated in this License.\x0a\x0a   5. Submission of Contributions. Unless You explicitly state otherwise,\x0a      any Contribution intentionally submitted for inclusion in the Work\x0a      by You to the Licensor shall be under the terms and conditions of\x0a      this License, without any additional terms or conditions.\x0a      Notwithstanding the above, nothing herein shall supersede or modify\x0a      the terms of any separate license agreement you may have executed\x0a      with Licensor regarding such Contributions.\x0a\x0a   6. Trademarks. This License does not grant permission to use the trade\x0a      names, trademarks, service marks, or product names of the Licensor,\x0a      except as required for reasonable and customary use in describing the\x0a      origin of the Work and reproducing the content of the NOTICE file.\x0a\x0a   7. Disclaimer of Warranty. Unless required by applicable law or\x0a      agreed to in writing, Licensor provides the Work (and each\x0a      Contributor provides its Contributions) on an \"AS IS\" BASIS,\x0a      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\x0a      implied, including, without limitation, any warranties or conditions\x0a      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\x0a      PARTICULAR PURPOSE. You are solely responsible for determining the\x0a      appropriateness of using or redistributing the Work and assume any\x0a      risks associated with Your exercise of permissions under this License.\x0a\x0a   8. Limitation of Liability. In no event and under no legal theory,\x0a      whether in tort (including negligence), contract, or otherwise,\x0a      unless required by applicable law (such as deliberate and grossly\x0a      negligent acts) or agreed to in writing, shall any Contributor be\x0a      liable to You for damages, including any direct, indirect, special,\x0a      incidental, or consequential damages of any character arising as a\x0a      result of this License or out of the use or inability to use the\x0a      Work (including but not limited to damages for loss of goodwill,\x0a      work stoppage, computer failure or malfunction, or any and all\x0a      other commercial damages or losses), even if such Contributor\x0a      has been advised of the possibility of such damages.\x0a\x0a   9. Accepting Warranty or Additional Liability. While redistributing\x0a      the Work or Derivative Works thereof, You may choose to offer,\x0a      and charge a fee for, acceptance of support, warranty, indemnity,\x0a      or other liability obligations and/or rights consistent with this\x0a      License. However, in accepting such obligations, You may act only\x0a      on Your own behalf and on Your sole responsibility, not on behalf\x0a      of any other Contributor, and only if You agree to indemnify,\x0a      defend, and hold each Contributor harmless for any liability\x0a      incurred by, or claims asserted against, such Contributor by reason\x0a      of your accepting any such warranty or additional liability.\x0a\x0a   END OF TERMS AND CONDITIONS\x0a\x0a   APPENDIX: How to apply the Apache License to your work.\x0a\x0a      To apply the Apache License to your work, attach the following\x0a      boilerplate notice, with the fields enclosed by brackets \"[]\"\x0a      replaced with your own identifying information. (Don't include\x0a      the brackets!)  The text should be enclosed in the appropriate\x0a      comment syntax for the file format. We also recommend that a\x0a      file or class name and description of purpose be included on the\x0a      same \"printed page\" as the copyright notice for easier\x0a      identification within third-party archives.\x0a\x0a   Copyright 2019 Akihiro Yamamoto.\x0a\x0a   Licensed under the Apache License, Version 2.0 (the \"License\");\x0a   you may not use this file except in compliance with the License.\x0a   You may obtain a copy of the License at\x0a\x0a       http://www.apache.org/licenses/LICENSE-2.0\x0a\x0a   Unless required by applicable law or agreed to in writing, software\x0a   distributed under the License is distributed on an \"AS IS\" BASIS,\x0a   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\x0a   See the License for the specific language governing permissions and\x0a   limitations under the License.") ]), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.h2) ])([ Halogen_HTML_Core.text("External libraries") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.m4) ])([ Halogen_HTML_Core.text("This software may contain all or part of the program specified in notice files below."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.strong_([ Halogen_HTML_Core.text("No NOTICE files specified.") ]) ]), Halogen_HTML_Elements.hr_, Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.m4) ])([ Halogen_HTML_Core.text("The program includes software licensed under the license terms as specified below.") ]), Halogen_HTML_Elements.ul_([ Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-affjax"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/slamdata/purescript-affjax") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-assert"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright 2018 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the BSD 3-Clause License"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript/purescript-assert") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-canvas"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2014-18 Phil Freeman and other contributors"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/paf31/purescript-canvas") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-console"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright 2018 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the BSD 3-Clause License"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript/purescript-console") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-datetime"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright 2018 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the BSD 3-Clause License"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript/purescript-datetime") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-effect"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright 2018 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the BSD 3-Clause License"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescipt/purescript-effect") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-foreign-generic"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2017 Phil Freeman"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/paf31/purescript-foreign-generic") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-formatters"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/slamdata/purescript-formatters") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-halogen"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/slamdata/purescript-halogen") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-halogen-bootstrap4"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/mschristiansen/purescript-halogen-bootstrap4") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-halogen-css"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/slamdata/purescript-halogen-css") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-halogen-formless"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/thomashoneyman/purescript-halogen-formless") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-js-timers"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2016 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript-contrib/purescript-js-timers") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-now"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2014 Purescript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript-contrib/purescript-now") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-numbers"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/sharkdp/purescript-numbers") ])([ Halogen_HTML_Core.text("see link for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-parsing"), Halogen_HTML_Elements.p_([ Halogen_HTML_Elements.pre_([ Halogen_HTML_Core.text("Copyright 2014-2016 PureScript\x0a\x0aRedistribution and use in source and binary forms, with or without\x0amodification, are permitted provided that the following conditions are met:\x0a\x0a* Redistributions of source code must retain the above copyright notice,\x0a  this list of conditions and the following disclaimer.\x0a* Redistributions in binary form must reproduce the above copyright\x0a  notice, this list of conditions and the following disclaimer in the\x0a  documentation and/or other materials provided with the distribution.\x0a\x0aThis software is provided by the copyright holders \"as is\" and any express or\x0aimplied warranties, including, but not limited to, the implied warranties of\x0amerchantability and fitness for a particular purpose are disclaimed. In no\x0aevent shall the copyright holders be liable for any direct, indirect,\x0aincidental, special, exemplary, or consequential damages (including, but not\x0alimited to, procurement of substitute goods or services; loss of use, data,\x0aor profits; or business interruption) however caused and on any theory of\x0aliability, whether in contract, strict liability, or tort (including\x0anegligence or otherwise) arising in any way out of the use of this software,\x0aeven if advised of the possibility of such damage.\x0a\x0a-------------------------------------------------------------------------------\x0a\x0aThis library uses code adapted from the Haskell libraries parsec and indents.\x0aTheir licenses are reproduced below:\x0a\x0a'parsec' license:\x0a\x0a  Copyright 1999-2000, Daan Leijen; 2007, Paolo Martini. All rights reserved.\x0a\x0a  Redistribution and use in source and binary forms, with or without\x0a  modification, are permitted provided that the following conditions are met:\x0a\x0a  * Redistributions of source code must retain the above copyright notice,\x0a    this list of conditions and the following disclaimer.\x0a  * Redistributions in binary form must reproduce the above copyright\x0a    notice, this list of conditions and the following disclaimer in the\x0a    documentation and/or other materials provided with the distribution.\x0a\x0a  This software is provided by the copyright holders \"as is\" and any express or\x0a  implied warranties, including, but not limited to, the implied warranties of\x0a  merchantability and fitness for a particular purpose are disclaimed. In no\x0a  event shall the copyright holders be liable for any direct, indirect,\x0a  incidental, special, exemplary, or consequential damages (including, but not\x0a  limited to, procurement of substitute goods or services; loss of use, data,\x0a  or profits; or business interruption) however caused and on any theory of\x0a  liability, whether in contract, strict liability, or tort (including\x0a  negligence or otherwise) arising in any way out of the use of this software,\x0a  even if advised of the possibility of such damage.\x0a\x0a'indents' license:\x0a\x0a  Copyright (c)2010, Sam Anklesaria\x0a\x0a  All rights reserved.\x0a\x0a  Redistribution and use in source and binary forms, with or without\x0a  modification, are permitted provided that the following conditions are met:\x0a\x0a    * Redistributions of source code must retain the above copyright\x0a      notice, this list of conditions and the following disclaimer.\x0a\x0a    * Redistributions in binary form must reproduce the above\x0a      copyright notice, this list of conditions and the following\x0a      disclaimer in the documentation and/or other materials provided\x0a      with the distribution.\x0a\x0a    * Neither the name of Sam Anklesaria nor the names of other\x0a      contributors may be used to endorse or promote products derived\x0a      from this software without specific prior written permission.\x0a\x0a  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\x0a  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\x0a  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\x0a  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\x0a  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\x0a  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\x0a  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\x0a  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\x0a  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\x0a  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\x0a  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.") ]), Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript-contrib/purescript-parsing") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-prelude"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright 2018 PureScript"), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the BSD 3-Clause License"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/purescript/purescript-prelude") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("purescript-routing"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Licensed under the Apache License, Version 2.0"), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/slamdata/purescript-routing") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("HTML Canvas Gauges v2.1"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2016 Mykhailo Stadnyk <mikhus@gmail.com>."), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/Mikhus/canvas-gauges") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]), Halogen_HTML_Elements.li_([ Halogen_HTML_Core.text("Chart.js"), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Copyright (c) 2018 Chart.js Contributors."), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text("Licensed under the MIT license."), Halogen_HTML_Elements.br_, Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href("https://github.com/chartjs/Chart.js") ])([ Halogen_HTML_Core.text("see LICENSE file for Details.") ]) ]) ]) ]) ];
var render = function (state) {
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("wrapper") ])([ Page_Commons.navbar(NavigateTo.create)(Route.About.value), Halogen_HTML_Elements.main([ Halogen_HTML_Properties.class_("container") ])(document), Page_Commons.footer ]);
};
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return Halogen_Component.mkComponent({
            initialState: initialState,
            render: render,
            "eval": Halogen_Component.mkEval({
                handleAction: handleAction(dictMonadAff)(dictNavigate),
                handleQuery: handleQuery(dictMonadAff)(dictNavigate),
                receive: Halogen_Component.defaultEval.receive,
                initialize: new Data_Maybe.Just(Initialize.value),
                finalize: new Data_Maybe.Just(Finalize.value)
            })
        });
    };
};
module.exports = {
    component: component
};

},{"../AppM/index.js":13,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Halogen.Component/index.js":337,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Properties/index.js":344,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Themes.Bootstrap4/index.js":352,"../Page.Commons/index.js":372,"../Route/index.js":388}],371:[function(require,module,exports){
"use strict";

exports.showToastJs = function () {
  $('.toast').toast({ autohide: false }).toast('show');
};

exports.enablePopoverJs = function () {
  $('[data-toggle="popover"]').popover('enable');
};

exports.disablePopoverJs = function () {
  $('[data-toggle="popover"]').popover('disable');
};
exports.disposePopoverJs = function () {
  $('[data-toggle="popover"]').popover('dispose');
};

},{}],372:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var DOM_HTML_Indexed_ButtonType = require("../DOM.HTML.Indexed.ButtonType/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect = require("../Effect/index.js");
var Graphics_Canvas = require("../Graphics.Canvas/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Route = require("../Route/index.js");
var toast = function (xs) {
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.attr("aria-live")("polite"), Halogen_HTML_Properties.attr("aria-atomic")("true") ])(xs);
};
var snackbarItem = function (text) {
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "toast", Halogen_Themes_Bootstrap4.bgInfo, Halogen_Themes_Bootstrap4.mxAuto ]), Halogen_HTML_Properties.attr("role")("alert"), Halogen_HTML_Properties.attr("aria-live")("assertive"), Halogen_HTML_Properties.attr("aria-atomic")("true") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "toast-body", Halogen_Themes_Bootstrap4.textCenter ]) ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textWhite) ])([ Halogen_HTML_Core.text(text) ]) ]) ]);
};
var showToast = $foreign.showToastJs;
var navbar = function (navigateAction) {
    return function (current) {
        var navItem = function (route) {
            var clss = (function () {
                var $2 = Data_Eq.eq(Route.eqRoute)(route)(current);
                if ($2) {
                    return [ Halogen_Themes_Bootstrap4.navItem, Halogen_Themes_Bootstrap4.active ];
                };
                return [ Halogen_Themes_Bootstrap4.navItem ];
            })();
            return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.classes(Data_Array.concat([ [ Halogen_Themes_Bootstrap4.navItem ], (function () {
                var $3 = Data_Eq.eq(Route.eqRoute)(route)(current);
                if ($3) {
                    return [ Halogen_Themes_Bootstrap4.active ];
                };
                return [  ];
            })() ])) ])([ Halogen_HTML_Elements.button((function () {
                var $4 = Data_Eq.eq(Route.eqRoute)(route)(current);
                if ($4) {
                    return [ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.navLink ]) ];
                };
                return [ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.navLink ]), Halogen_HTML_Events.onClick(function (v) {
                    return Data_Maybe.Just.create(navigateAction(route));
                }) ];
            })())([ Halogen_HTML_Core.text(Route.routeToString(route)) ]) ]);
        };
        return Halogen_HTML_Elements.nav([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.navbar, Halogen_Themes_Bootstrap4.navbarExpandSm, Halogen_Themes_Bootstrap4.fixedTop, Halogen_Themes_Bootstrap4.navbarDark, Halogen_Themes_Bootstrap4.bgDark ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navbarBrand) ])([ Halogen_HTML_Core.text("PiHVAC") ]), Halogen_HTML_Elements.button([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navbarToggler), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropButtonType)(DOM_HTML_Indexed_ButtonType.ButtonButton.value), Halogen_HTML_Properties.attr("data-toggle")("collapse"), Halogen_HTML_Properties.attr("data-target")("#navbarNav"), Halogen_HTML_Properties.attr("aria-controls")("navbarNav"), Halogen_HTML_Properties.attr("aria-expanded")("false"), Halogen_HTML_Properties.attr("aria-label")("Toggle navigation") ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navbarTogglerIcon) ])([  ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.collapse, Halogen_Themes_Bootstrap4.navbarCollapse ]), Halogen_HTML_Properties.id_("navbarNav") ])([ Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navbarNav) ])([ navItem(Route.Home.value), navItem(new Route.Plotdata(Data_Maybe.Nothing.value)), navItem(new Route.Infrared(Data_Maybe.Nothing.value)), navItem(Route.Settings.value), navItem(Route.About.value) ]) ]) ]);
    };
};
var icon = function (iconName) {
    return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("icon") ])([ Halogen_HTML_Elements.i([ Halogen_HTML_Properties.class_(iconName) ])([  ]) ]);
};
var toastItem = function (head) {
    return function (subhead) {
        return function (text) {
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "toast", Halogen_Themes_Bootstrap4.bgInfo, Halogen_Themes_Bootstrap4.mxAuto ]), Halogen_HTML_Properties.attr("role")("alert"), Halogen_HTML_Properties.attr("aria-live")("assertive"), Halogen_HTML_Properties.attr("aria-atomic")("true") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("toast-header") ])([ Halogen_HTML_Elements.strong([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.mrAuto) ])([ Halogen_HTML_Core.text(head) ]), Halogen_HTML_Elements.small([ Halogen_HTML_CSS.style(CSS_Geometry.marginLeft(CSS_Size.px(40.0))) ])([ Halogen_HTML_Core.text(subhead) ]), Halogen_HTML_Elements.button([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropButtonType)(DOM_HTML_Indexed_ButtonType.ButtonButton.value), Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.ml2, Halogen_Themes_Bootstrap4.mb1, Halogen_Themes_Bootstrap4.close ]), Halogen_HTML_Properties.attr("data-dismiss")("toast"), Halogen_HTML_Properties.attr("area-label")("Close") ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.attr("aria-hidden")("true") ])([ icon("fas fa-times-circle") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "toast-body", Halogen_Themes_Bootstrap4.textWhite ]) ])([ Halogen_HTML_Core.text(text) ]) ]);
        };
    };
};
var getContext2dById = function (id_) {
    var maybeC2d = function (elem) {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Graphics_Canvas.getContext2D(elem));
    };
    return function __do() {
        var v = Graphics_Canvas.getCanvasElementById(id_)();
        return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(function (x) {
            return Control_Bind.bindFlipped(Effect.bindEffect)(Control_Applicative.pure(Effect.applicativeEffect))(maybeC2d(x));
        })(v)();
    };
};
var footer = Halogen_HTML_Elements.footer([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.bgLight, Halogen_Themes_Bootstrap4.py2 ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.textCenter, Halogen_Themes_Bootstrap4.bgLight, Halogen_Themes_Bootstrap4.textDark ]) ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.small, Halogen_Themes_Bootstrap4.textMuted ]) ])([ Halogen_HTML_Core.text("PiHVAC \xa92019 Akihiro Yamamoto.") ]) ]) ]);
var enablePopover = $foreign.enablePopoverJs;
var disposePopover = $foreign.disposePopoverJs;
var disablePopover = $foreign.disablePopoverJs;
module.exports = {
    showToast: showToast,
    enablePopover: enablePopover,
    disablePopover: disablePopover,
    disposePopover: disposePopover,
    navbar: navbar,
    footer: footer,
    icon: icon,
    getContext2dById: getContext2dById,
    toast: toast,
    toastItem: toastItem,
    snackbarItem: snackbarItem
};

},{"../CSS.Geometry/index.js":15,"../CSS.Size/index.js":19,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../DOM.HTML.Indexed.ButtonType/index.js":72,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Effect/index.js":294,"../Graphics.Canvas/index.js":332,"../Halogen.HTML.CSS/index.js":340,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.Themes.Bootstrap4/index.js":352,"../Route/index.js":388,"./foreign.js":371}],373:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Api = require("../Api/index.js");
var AppM = require("../AppM/index.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Component_RadialGauge = require("../Component.RadialGauge/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Now = require("../Effect.Now/index.js");
var Effect_Timer = require("../Effect.Timer/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query = require("../Halogen.Query/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var Route = require("../Route/index.js");
var Utils = require("../Utils/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var NavigateTo = (function () {
    function NavigateTo(value0) {
        this.value0 = value0;
    };
    NavigateTo.create = function (value0) {
        return new NavigateTo(value0);
    };
    return NavigateTo;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var Update = (function () {
    function Update() {

    };
    Update.value = new Update();
    return Update;
})();
var updateButtonLabel = "updatebutton";
var updateButton = function (action) {
    return function (isActive) {
        var appendix = function (v) {
            if (v) {
                return Halogen_HTML_Properties.attr("active")("active");
            };
            if (!v) {
                return Halogen_HTML_Properties.attr("disabled")("disabled");
            };
            throw new Error("Failed pattern match at Page.Home (line 207, column 14 - line 211, column 1): " + [ v.constructor.name ]);
        };
        return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.ref(updateButtonLabel), Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m1, Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnLight, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
            return new Data_Maybe.Just(action);
        }), appendix(isActive) ])([ Page_Commons.icon("fas fa-sync") ]);
    };
};
var temperature = function (val) {
    return {
        refLabel: "temp",
        options: {
            width: 300,
            height: 300,
            units: "\xb0C",
            title: "Temprature",
            value: Data_Maybe.fromMaybe(0.0)(val),
            minValue: -20.0,
            maxValue: 70.0,
            majorTicks: [ -20 | 0, -10 | 0, 0, 10, 20, 30, 40, 50, 60, 70 ],
            minorTicks: 10,
            animationRule: "dequint",
            animationDuration: 800
        }
    };
};
var pressure = function (val) {
    return {
        refLabel: "pres",
        options: {
            width: 300,
            height: 300,
            units: "hPa",
            title: "Pressure",
            value: Data_Maybe.fromMaybe(950.0)(val),
            minValue: 950.0,
            maxValue: 1050.0,
            majorTicks: [ 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050 ],
            minorTicks: 10,
            animationRule: "dequint",
            animationDuration: 800
        }
    };
};
var msgLastUpdatedAt = function (nowTime) {
    return function (v) {
        var minute = (function () {
            var at = Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime(v));
            var duration = Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(nowTime) - Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(at);
            return Data_Int.floor(duration / (60.0 * 1000.0));
        })();
        var boundedMinute = Data_Maybe.fromJust()(Data_Foldable.minimum(Data_Ord.ordInt)(Data_Foldable.foldableArray)([ 9999, minute ]));
        var v1 = Utils.asiaTokyoDateTime(v);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Page_Commons.toastItem("Error")("")("\u6709\u52b9\u306a\u65e5\u4ed8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f");
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Page_Commons.snackbarItem(Data_String_Common.joinWith(" ")([ "Measured at", v1.value0.time + ",", Data_Int.toStringAs(Data_Int.decimal)(boundedMinute), "mins ago." ]));
        };
        throw new Error("Failed pattern match at Page.Home (line 248, column 3 - line 258, column 8): " + [ v1.constructor.name ]);
    };
};
var msgFailToAccess = function (reason) {
    return Page_Commons.toastItem("Error")("")(reason);
};
var initialState = function (v) {
    return {
        measValues: Data_Maybe.Nothing.value,
        nowTime: 0.0
    };
};
var hygro = function (val) {
    return {
        refLabel: "hygro",
        options: {
            width: 300,
            height: 300,
            units: "%",
            title: "Hygro",
            value: Data_Maybe.fromMaybe(0.0)(val),
            minValue: 0.0,
            maxValue: 100.0,
            majorTicks: [ 0, 20, 40, 60, 80, 100 ],
            minorTicks: 10,
            animationRule: "dequint",
            animationDuration: 800
        }
    };
};
var latestValue = function (state) {
    if (state.measValues instanceof Data_Maybe.Nothing) {
        return {
            t: temperature(Data_Maybe.Nothing.value),
            p: pressure(Data_Maybe.Nothing.value),
            h: hygro(Data_Maybe.Nothing.value),
            msg: Page_Commons.snackbarItem("Now on reading...")
        };
    };
    if (state.measValues instanceof Data_Maybe.Just && state.measValues.value0 instanceof Data_Either.Left) {
        return {
            t: temperature(Data_Maybe.Nothing.value),
            p: pressure(Data_Maybe.Nothing.value),
            h: hygro(Data_Maybe.Nothing.value),
            msg: msgFailToAccess(state.measValues.value0.value0)
        };
    };
    if (state.measValues instanceof Data_Maybe.Just && state.measValues.value0 instanceof Data_Either.Right) {
        var v = Data_Newtype.unwrap(Api.newtypeMeasEnvironment)(Data_Array_NonEmpty.last(state.measValues.value0.value0));
        return {
            t: temperature(new Data_Maybe.Just(v.degc)),
            p: pressure(new Data_Maybe.Just(v.hpa)),
            h: hygro(new Data_Maybe.Just(v.rh)),
            msg: msgLastUpdatedAt(state.nowTime)(v.measured_at)
        };
    };
    throw new Error("Failed pattern match at Page.Home (line 216, column 21 - line 238, column 6): " + [ state.measValues.constructor.name ]);
};
var handleAction = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            var timerHandler = function (button) {
                return Web_HTML_HTMLElement.click(button);
            };
            return function (v) {
                if (v instanceof NavigateTo) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(v.value0))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                };
                if (v instanceof Initialize) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_DateTime_Instant.unInstant)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Now.now)))(function (v1) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                            var $36 = {};
                            for (var $37 in st) {
                                if ({}.hasOwnProperty.call(st, $37)) {
                                    $36[$37] = st[$37];
                                };
                            };
                            $36.nowTime = v1;
                            return $36;
                        }))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.showToast))(function () {
                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(updateButtonLabel))(function (v2) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                        if (v2 instanceof Data_Maybe.Nothing) {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                        };
                                        if (v2 instanceof Data_Maybe.Just) {
                                            return Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Timer.setTimeout(60)(timerHandler(v2.value0))));
                                        };
                                        throw new Error("Failed pattern match at Page.Home (line 159, column 7 - line 163, column 72): " + [ v2.constructor.name ]);
                                    })())(function () {
                                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                    });
                                });
                            });
                        });
                    });
                };
                if (v instanceof Update) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))((function () {
                                var timeout = Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(v2))(new Data_Either.Left("\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u5fdc\u7b54\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f"));
                                var param = {
                                    baseurl: v1,
                                    limits: Data_Maybe.Nothing.value
                                };
                                var request = Api.getApiV1Measurements(param);
                                var nonEmptyVal = function ($49) {
                                    return Data_Maybe.maybe(new Data_Either.Left("\u6e2c\u5b9a\u5024\u304c\u3042\u308a\u307e\u305b\u3093"))(Data_Either.Right.create)(Data_Array_NonEmpty.fromArray($49));
                                };
                                var response = Data_Either.either(Data_Either.Left.create)(function (x) {
                                    return nonEmptyVal(x.body);
                                });
                                return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.map(Effect_Aff.functorAff)(response)(request)))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(timeout)));
                            })()))(function (v3) {
                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_DateTime_Instant.unInstant)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Now.now)))(function (v4) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                        var $46 = {};
                                        for (var $47 in st) {
                                            if ({}.hasOwnProperty.call(st, $47)) {
                                                $46[$47] = st[$47];
                                            };
                                        };
                                        $46.measValues = new Data_Maybe.Just(v3);
                                        $46.nowTime = v4;
                                        return $46;
                                    }))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.showToast))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                });
                            });
                        });
                    });
                };
                throw new Error("Failed pattern match at Page.Home (line 149, column 16 - line 180, column 18): " + [ v.constructor.name ]);
            };
        };
    };
};
var _gTemperature = Data_Symbol.SProxy.value;
var _gPressure = Data_Symbol.SProxy.value;
var _gHygro = Data_Symbol.SProxy.value;
var render = function (dictMonadAff) {
    return function (state) {
        var gauge = function (x) {
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.colSm) ])([ x ]);
        };
        var v = latestValue(state);
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("wrapper") ])([ Page_Commons.navbar(NavigateTo.create)(Route.Home.value), Halogen_HTML_Elements.main([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.container) ])([ updateButton(Update.value)(true), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.row), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.marginTop(CSS_Size.px(30.0)))(function () {
            return CSS_Geometry.marginBottom(CSS_Size.px(30.0));
        })) ])([ gauge(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "gTemperature";
        }))(Data_Ord.ordUnit)(_gTemperature)(Data_Unit.unit)(Component_RadialGauge.component(dictMonadAff))(v.t)(Data_Void.absurd)), gauge(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "gPressure";
        }))(Data_Ord.ordUnit)(_gPressure)(Data_Unit.unit)(Component_RadialGauge.component(dictMonadAff))(v.p)(Data_Void.absurd)), gauge(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "gHygro";
        }))(Data_Ord.ordUnit)(_gHygro)(Data_Unit.unit)(Component_RadialGauge.component(dictMonadAff))(v.h)(Data_Void.absurd)) ]), Page_Commons.toast([ v.msg ]) ]), Page_Commons.footer ]);
    };
};
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return Halogen_Component.mkComponent({
                initialState: initialState,
                render: render(dictMonadAff),
                "eval": Halogen_Component.mkEval({
                    handleAction: handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible),
                    handleQuery: Halogen_Component.defaultEval.handleQuery,
                    receive: Halogen_Component.defaultEval.receive,
                    initialize: new Data_Maybe.Just(Initialize.value),
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
module.exports = {
    component: component
};

},{"../Api/index.js":12,"../AppM/index.js":13,"../CSS.Geometry/index.js":15,"../CSS.Size/index.js":19,"../CSS.Stylesheet/index.js":21,"../Component.RadialGauge/index.js":24,"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Control.Parallel.Class/index.js":68,"../Data.Array.NonEmpty/index.js":93,"../Data.DateTime.Instant/index.js":124,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250,"../Data.Time.Duration/index.js":253,"../Data.Unit/index.js":266,"../Data.Void/index.js":270,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Now/index.js":286,"../Effect.Timer/index.js":290,"../Halogen.Component/index.js":337,"../Halogen.HTML.CSS/index.js":340,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.HTML/index.js":345,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Query/index.js":351,"../Halogen.Themes.Bootstrap4/index.js":352,"../Page.Commons/index.js":372,"../Route/index.js":388,"../Utils/index.js":408,"../Web.HTML.HTMLElement/index.js":437}],374:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Api = require("../Api/index.js");
var AppM = require("../AppM/index.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Components_InfraredCodeEditor = require("../Components.InfraredCodeEditor/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_Number = require("../Data.Formatter.Number/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Bounded = require("../Data.Generic.Rep.Bounded/index.js");
var Data_Generic_Rep_Enum = require("../Data.Generic.Rep.Enum/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var InfraredRemote_Code = require("../InfraredRemote.Code/index.js");
var InfraredRemote_HitachiHvac = require("../InfraredRemote.HitachiHvac/index.js");
var InfraredRemote_MitsubishiElectricHvac = require("../InfraredRemote.MitsubishiElectricHvac/index.js");
var InfraredRemote_PanasonicHvac = require("../InfraredRemote.PanasonicHvac/index.js");
var InfraredRemote_Types = require("../InfraredRemote.Types/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var Route = require("../Route/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Utils = require("../Utils/index.js");
var TabControlPanel = (function () {
    function TabControlPanel() {

    };
    TabControlPanel.value = new TabControlPanel();
    return TabControlPanel;
})();
var TabIrdbTable = (function () {
    function TabIrdbTable() {

    };
    TabIrdbTable.value = new TabIrdbTable();
    return TabIrdbTable;
})();
var LeastSignBitFirst = (function () {
    function LeastSignBitFirst() {

    };
    LeastSignBitFirst.value = new LeastSignBitFirst();
    return LeastSignBitFirst;
})();
var MostSignBitFirst = (function () {
    function MostSignBitFirst() {

    };
    MostSignBitFirst.value = new MostSignBitFirst();
    return MostSignBitFirst;
})();
var BothBitOrder = (function () {
    function BothBitOrder() {

    };
    BothBitOrder.value = new BothBitOrder();
    return BothBitOrder;
})();
var NavigateTo = (function () {
    function NavigateTo(value0) {
        this.value0 = value0;
    };
    NavigateTo.create = function (value0) {
        return new NavigateTo(value0);
    };
    return NavigateTo;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var ChangedRoute = (function () {
    function ChangedRoute(value0) {
        this.value0 = value0;
    };
    ChangedRoute.create = function (value0) {
        return new ChangedRoute(value0);
    };
    return ChangedRoute;
})();
var OnClickIRCodeDownload = (function () {
    function OnClickIRCodeDownload() {

    };
    OnClickIRCodeDownload.value = new OnClickIRCodeDownload();
    return OnClickIRCodeDownload;
})();
var OnClickIRCodeUpload = (function () {
    function OnClickIRCodeUpload() {

    };
    OnClickIRCodeUpload.value = new OnClickIRCodeUpload();
    return OnClickIRCodeUpload;
})();
var OnClickIRCodeTransmit = (function () {
    function OnClickIRCodeTransmit() {

    };
    OnClickIRCodeTransmit.value = new OnClickIRCodeTransmit();
    return OnClickIRCodeTransmit;
})();
var OnClickIrdbPagination = (function () {
    function OnClickIrdbPagination(value0) {
        this.value0 = value0;
    };
    OnClickIrdbPagination.create = function (value0) {
        return new OnClickIrdbPagination(value0);
    };
    return OnClickIrdbPagination;
})();
var OnClickIrdbTable = (function () {
    function OnClickIrdbTable(value0) {
        this.value0 = value0;
    };
    OnClickIrdbTable.create = function (value0) {
        return new OnClickIrdbTable(value0);
    };
    return OnClickIrdbTable;
})();
var OnValueChangeButtonNumber = (function () {
    function OnValueChangeButtonNumber(value0) {
        this.value0 = value0;
    };
    OnValueChangeButtonNumber.create = function (value0) {
        return new OnValueChangeButtonNumber(value0);
    };
    return OnValueChangeButtonNumber;
})();
var OnValueChangeManufacturer = (function () {
    function OnValueChangeManufacturer(value0) {
        this.value0 = value0;
    };
    OnValueChangeManufacturer.create = function (value0) {
        return new OnValueChangeManufacturer(value0);
    };
    return OnValueChangeManufacturer;
})();
var OnValueChangeLimits = (function () {
    function OnValueChangeLimits(value0) {
        this.value0 = value0;
    };
    OnValueChangeLimits.create = function (value0) {
        return new OnValueChangeLimits(value0);
    };
    return OnValueChangeLimits;
})();
var HandleEditorUpdate = (function () {
    function HandleEditorUpdate(value0) {
        this.value0 = value0;
    };
    HandleEditorUpdate.create = function (value0) {
        return new HandleEditorUpdate(value0);
    };
    return HandleEditorUpdate;
})();
var toBaseband = function (inp) {
    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Text_Parsing_Parser.parseErrorMessage)(Text_Parsing_Parser.runParser(inp)(InfraredRemote_Code.infraredHexStringParser));
};
var showHex = function (v) {
    var str = Data_Int.toStringAs(Data_Int.hexadecimal)(v);
    var v1 = Data_String_CodePoints.length(str);
    if (v1 < 2) {
        return "0" + str;
    };
    if (Data_Boolean.otherwise) {
        return str;
    };
    throw new Error("Failed pattern match at Page.Infrared (line 875, column 3 - line 877, column 25): " + [ v1.constructor.name ]);
};
var popoverContents = function (input) {
    var toIrCode = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(InfraredRemote_Code.toIrRemoteControlCode)(toBaseband);
    var showFormat = function (v) {
        if (v instanceof InfraredRemote_Types.FormatNEC) {
            return Data_String_Common.joinWith(" ")([ "NEC", showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.custom0))), showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.custom1))), showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.data0))), showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.data1))) ]);
        };
        if (v instanceof InfraredRemote_Types.FormatAEHA) {
            return Data_String_Common.joinWith(" ")(Data_Array.concat([ Data_Array.singleton("AEHA"), Data_Functor.map(Data_Functor.functorArray)(function ($336) {
                return showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($336)));
            })(v.value0.octets) ]));
        };
        if (v instanceof InfraredRemote_Types.FormatSIRC) {
            return Data_String_Common.joinWith(" ")([ "SIRC", showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.command))), showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.address))) ]);
        };
        if (v instanceof InfraredRemote_Types.FormatUnknown) {
            return Data_String_Common.joinWith(" ")(Data_Array.concat([ [ "Unkown", Data_Show.show(Data_Show.showArray(InfraredRemote_Types["showBit'"]))(v.value0) ] ]));
        };
        throw new Error("Failed pattern match at Page.Infrared (line 1175, column 16 - line 1203, column 9): " + [ v.constructor.name ]);
    };
    var display = function (v) {
        if (v instanceof InfraredRemote_Code.IrRemoteUnknown) {
            return Data_String_Common.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showFormat)(v.value0));
        };
        if (v instanceof InfraredRemote_Code.IrRemotePanasonicHvac) {
            return "Panasonic HVAC";
        };
        if (v instanceof InfraredRemote_Code.IrRemoteMitsubishiElectricHvac) {
            return "Mitsubishi Electric HVAC";
        };
        if (v instanceof InfraredRemote_Code.IrRemoteHitachiHvac) {
            return "Hitachi HVAC";
        };
        throw new Error("Failed pattern match at Page.Infrared (line 1161, column 13 - line 1174, column 3): " + [ v.constructor.name ]);
    };
    return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(display)(toIrCode(input));
};
var irdbTable = function (v) {
    var tableRow = function (v1) {
        var clk = Halogen_HTML_Events.onClick(function (v2) {
            return Data_Maybe.Just.create(new OnClickIrdbTable(v1.code));
        });
        return Halogen_HTML_Elements.tr_([ Halogen_HTML_Elements.th([ Halogen_HTML_Events.onClick(function (v2) {
            return Data_Maybe.Just.create(new OnClickIrdbTable(v1.code));
        }) ])([ Halogen_HTML_Core.text(Data_Int.toStringAs(Data_Int.decimal)(v1.id)) ]), Halogen_HTML_Elements.td([ clk ])([ Halogen_HTML_Core.text(v1.manuf) ]), Halogen_HTML_Elements.td([ clk ])([ Halogen_HTML_Core.text(v1.prod) ]), Halogen_HTML_Elements.td([ clk ])([ Halogen_HTML_Core.text(v1.key) ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnSecondary, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Properties.attr("data-container")("body"), Halogen_HTML_Properties.attr("data-toggle")("popover"), Halogen_HTML_Properties.attr("data-placement")("left"), Halogen_HTML_Properties.attr("data-content")(popoverContents(v1.code)) ])([ Halogen_HTML_Core.text(Data_String_CodePoints.take(8)(v1.code)), Halogen_HTML_Core.text("...") ]) ]) ]);
    };
    var tableHeading = (function () {
        var items = Data_Functor.map(Data_Functor.functorArray)(function ($337) {
            return Halogen_HTML_Elements.th_(Data_Array.singleton(Halogen_HTML_Core.text($337)));
        })([ "id", "manufacturer", "product", "key", "code" ]);
        return Halogen_HTML_Elements.thead_([ Halogen_HTML_Elements.tr_(items) ]);
    })();
    var tableBody = function (values) {
        return Halogen_HTML_Elements.tbody_(Data_Functor.map(Data_Functor.functorArray)(tableRow)(values));
    };
    return Halogen_HTML_Elements.p_([ Halogen_HTML_Elements.table([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.table, Halogen_Themes_Bootstrap4.tableHover ]) ])([ tableHeading, tableBody(v.value0.data) ]) ]);
};
var irdbPagination = function (v) {
    var text = function (n) {
        var $126 = n === v.value0.page;
        if ($126) {
            return [ Halogen_HTML_Core.text(Data_Int.toStringAs(Data_Int.decimal)(n)), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.srOnly) ])([ Halogen_HTML_Core.text("(current)") ]) ];
        };
        return [ Halogen_HTML_Core.text(Data_Int.toStringAs(Data_Int.decimal)(n)) ];
    };
    var classes = function (n) {
        var $127 = n === v.value0.page;
        if ($127) {
            return [ Halogen_Themes_Bootstrap4.pageItem, Halogen_Themes_Bootstrap4.colAuto, Halogen_Themes_Bootstrap4.active ];
        };
        return [ Halogen_Themes_Bootstrap4.pageItem, Halogen_Themes_Bootstrap4.colAuto ];
    };
    var item = function (number) {
        return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.classes(classes(number)) ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.pageLink), Halogen_HTML_Events.onClick(function (v1) {
            return Data_Maybe.Just.create(new OnClickIrdbPagination(number));
        }) ])(text(number)) ]);
    };
    return Halogen_HTML_Elements.nav([ Halogen_HTML_Properties.attr("area-label")("Pagination") ])([ Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.pagination, Halogen_Themes_Bootstrap4.row, Halogen_Themes_Bootstrap4.noGutters ]) ])(Data_Functor.map(Data_Functor.functorArray)(item)(Data_Array.range(1)(v.value0.pages))) ]);
};
var renderIrdbTable = function (dictMonadAff) {
    return function (state) {
        var nowreading = Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.alert, Halogen_Themes_Bootstrap4.alertInfo ]) ])([ Halogen_HTML_Core.text("Now on reading...") ]);
        var error = function (reason) {
            return Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.alert, Halogen_Themes_Bootstrap4.alertDanger, Halogen_Themes_Bootstrap4.textCenter ]) ])([ Halogen_HTML_Core.text(reason) ]);
        };
        var table = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return nowreading;
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                return error(v.value0.value0);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.h2_([ Halogen_HTML_Core.text("Infrared code database") ]), Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.formGroup) ])([ irdbPagination(v.value0.value0), irdbTable(v.value0.value0) ]) ]) ]);
            };
            throw new Error("Failed pattern match at Page.Infrared (line 529, column 11 - line 544, column 10): " + [ v.constructor.name ]);
        };
        var dropdownManuf = function (v) {
            var item = function (number) {
                return function (name) {
                    if (state.queryParams.manuf instanceof Data_Maybe.Just && state.queryParams.manuf.value0 === number) {
                        return Halogen_HTML_Elements.option([ Halogen_HTML_Properties.selected(true) ])([ Halogen_HTML_Core.text(name) ]);
                    };
                    return Halogen_HTML_Elements.option([  ])([ Halogen_HTML_Core.text(name) ]);
                };
            };
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formGroup, Halogen_Themes_Bootstrap4.row ]) ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.colSm2) ])([ Halogen_HTML_Core.text("manufacturer") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.colSm10) ])([ Halogen_HTML_Elements.select([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formControl ]), Halogen_HTML_Events.onValueChange(function ($338) {
                return Data_Maybe.Just.create(OnValueChangeManufacturer.create($338));
            }) ])(Data_Array.zipWith(item)(Data_Array.range(0)(Data_Array.length(v.manufacturers)))(v.manufacturers)) ]) ]);
        };
        var dropdownLimits = (function () {
            var item = function (number) {
                var str = Data_Int.toStringAs(Data_Int.decimal)(number);
                if (state.queryParams.limits instanceof Data_Maybe.Just && state.queryParams.limits.value0 === number) {
                    return Halogen_HTML_Elements.option([ Halogen_HTML_Properties.selected(true) ])([ Halogen_HTML_Core.text(str) ]);
                };
                return Halogen_HTML_Elements.option([  ])([ Halogen_HTML_Core.text(str) ]);
            };
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formGroup, Halogen_Themes_Bootstrap4.row ]) ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.colSm2) ])([ Halogen_HTML_Core.text("limits") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.colSm10) ])([ Halogen_HTML_Elements.select([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formControl ]), Halogen_HTML_Events.onValueChange(function ($339) {
                return Data_Maybe.Just.create(OnValueChangeLimits.create($339));
            }) ])([ item(10), item(25), item(50), item(100) ]) ]) ]);
        })();
        if (state.irdbManufacturers instanceof Data_Maybe.Nothing) {
            return nowreading;
        };
        if (state.irdbManufacturers instanceof Data_Maybe.Just && state.irdbManufacturers.value0 instanceof Data_Either.Left) {
            return error(state.irdbManufacturers.value0.value0);
        };
        if (state.irdbManufacturers instanceof Data_Maybe.Just && state.irdbManufacturers.value0 instanceof Data_Either.Right) {
            return Halogen_HTML_Elements.div_([ dropdownManuf(state.irdbManufacturers.value0.value0), dropdownLimits, table(state.irdb) ]);
        };
        throw new Error("Failed pattern match at Page.Infrared (line 518, column 3 - line 526, column 70): " + [ state.irdbManufacturers.constructor.name ]);
    };
};
var irUploadButton = function (isActive) {
    var appendix = function (v) {
        if (v) {
            return Halogen_HTML_Properties.attr("active")("active");
        };
        if (!v) {
            return Halogen_HTML_Properties.attr("disabled")("disabled");
        };
        throw new Error("Failed pattern match at Page.Infrared (line 913, column 14 - line 917, column 1): " + [ v.constructor.name ]);
    };
    return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnOutlineDanger, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
        return new Data_Maybe.Just(OnClickIRCodeUpload.value);
    }), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0)))(function () {
        return CSS_Geometry.width(CSS_Size.rem(8.0));
    })), appendix(isActive) ])([ Halogen_HTML_Core.text("Upload") ]);
};
var irTransmitButton = function (isActive) {
    var appendix = function (v) {
        if (v) {
            return Halogen_HTML_Properties.attr("active")("active");
        };
        if (!v) {
            return Halogen_HTML_Properties.attr("disabled")("disabled");
        };
        throw new Error("Failed pattern match at Page.Infrared (line 934, column 3 - line 936, column 3): " + [ v.constructor.name ]);
    };
    return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnOutlinePrimary, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
        return new Data_Maybe.Just(OnClickIRCodeTransmit.value);
    }), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0)))(function () {
        return CSS_Geometry.width(CSS_Size.rem(8.0));
    })), appendix(isActive) ])([ Halogen_HTML_Core.text("Transmit") ]);
};
var irDownloadButton = Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnOutlineSuccess, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
    return new Data_Maybe.Just(OnClickIRCodeDownload.value);
}), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0))(CSS_Size.px(2.0)))(function () {
    return CSS_Geometry.width(CSS_Size.rem(8.0));
})) ])([ Halogen_HTML_Core.text("Download") ]);
var infraredTimingTable = function (v) {
    var strMillisec = function (n) {
        return Data_Either.either(Data_Function["const"]("N/A"))(Control_Category.identity(Control_Category.categoryFn))(Data_Formatter_Number.formatNumber("0.00")(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(InfraredRemote_Code.toMilliseconds(n))));
    };
    var toText = function (p) {
        return [ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textPrimary) ])([ Halogen_HTML_Core.text(strMillisec(p.on) + "on") ]), Halogen_HTML_Core.text(", "), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textSuccess) ])([ Halogen_HTML_Core.text(strMillisec(p.off) + "off") ]) ];
    };
    var nbsp = Data_String_CodePoints.codePointFromChar(Data_Maybe.fromMaybe("?")(Data_Char.fromCharCode(160)));
    var col = function (p) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.col6, Halogen_Themes_Bootstrap4.colMd2 ]) ])([ Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textPrimary) ])([ Halogen_HTML_Core.text(strMillisec(p.on) + "on") ]), Halogen_HTML_Core.text("," + Data_String_CodePoints.singleton(nbsp)), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textSecondary) ])([ Halogen_HTML_Core.text(strMillisec(p.off) + "off") ]) ]) ]);
    };
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.row) ])(Data_Functor.map(Data_Functor.functorArray)(col)(v));
};
var infraredRemoteControlCode = (function () {
    var dd = Halogen_HTML_Elements.dd([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.pl4, Halogen_Themes_Bootstrap4.row ]) ]);
    return function (v) {
        if (v instanceof InfraredRemote_Code.IrRemoteUnknown) {
            return [ Halogen_HTML_Core.text("Unknown IR remote Code") ];
        };
        if (v instanceof InfraredRemote_Code.IrRemotePanasonicHvac) {
            return [ Halogen_HTML_Core.text("Panasonic HVAC"), Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Temperature") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types.showCelsius)(v.value0.temperature)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Mode") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_PanasonicHvac.showMode)(v.value0.mode)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Switch") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_PanasonicHvac.showSwitch)(v["value0"]["switch"])) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Fan") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_PanasonicHvac.showFan)(v.value0.fan)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Swing") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_PanasonicHvac.showSwing)(v.value0.swing)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Profile") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_PanasonicHvac.showProfile)(v.value0.profile)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("CRC") ]), dd([ Halogen_HTML_Core.text((function () {
                var $149 = InfraredRemote_PanasonicHvac.validCrc(v.value0.crc)(v.value0.original);
                if ($149) {
                    return "Checksum is valid.";
                };
                return "Checksum is NOT valid.";
            })()), Halogen_HTML_Core.text(" " + Data_Show.show(InfraredRemote_PanasonicHvac.showCrc)(v.value0.crc)) ]) ]) ];
        };
        if (v instanceof InfraredRemote_Code.IrRemoteMitsubishiElectricHvac) {
            return [ Halogen_HTML_Core.text("MitsubishiElectric HVAC"), Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Temperature") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types.showCelsius)(v.value0.temperature)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Mode1") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_MitsubishiElectricHvac.showMode)(v.value0.mode1)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Switch") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_MitsubishiElectricHvac.showSwitch)(v["value0"]["switch"])) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("CRC") ]), dd([ Halogen_HTML_Core.text((function () {
                var $151 = InfraredRemote_MitsubishiElectricHvac.validCrc(v.value0.crc)(v.value0.original);
                if ($151) {
                    return "Checksum is valid.";
                };
                return "Checksum is NOT valid.";
            })()), Halogen_HTML_Core.text(" " + Data_Show.show(InfraredRemote_MitsubishiElectricHvac.showCrc)(v.value0.crc)) ]) ]) ];
        };
        if (v instanceof InfraredRemote_Code.IrRemoteHitachiHvac) {
            return [ Halogen_HTML_Core.text("Hitachi HVAC"), Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Temperature") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types.showCelsius)(v.value0.temperature)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Mode") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_HitachiHvac.showMode)(v.value0.mode)) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Switch") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_HitachiHvac.showSwitch)(v["value0"]["switch"])) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("Fan") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_HitachiHvac.showFan)(v.value0.fan)) ]) ]) ];
        };
        throw new Error("Failed pattern match at Page.Infrared (line 807, column 29 - line 862, column 6): " + [ v.constructor.name ]);
    };
})();
var infraredBitpatterns = function (v) {
    var col = function (xs) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.col6, Halogen_Themes_Bootstrap4.colMd2 ]) ])(Data_Functor.map(Data_Functor.functorArray)(function ($340) {
            return Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types["showBit'"])($340));
        })(xs));
    };
    var row = function (xxs) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.row) ])(Data_Functor.map(Data_Functor.functorArray)(col)(xxs));
    };
    if (v.value0 instanceof InfraredRemote_Code.LeaderAeha) {
        return [ Halogen_HTML_Core.text("AEHA"), Halogen_HTML_Elements.br_, row(Utils.toArrayArray(8)(v.value1)) ];
    };
    if (v.value0 instanceof InfraredRemote_Code.LeaderNec) {
        return [ Halogen_HTML_Core.text("NEC"), Halogen_HTML_Elements.br_, row(Utils.toArrayArray(8)(v.value1)) ];
    };
    if (v.value0 instanceof InfraredRemote_Code.LeaderSirc) {
        var left = Data_Array.drop(7)(v.value1);
        var bit7 = Data_Array.take(7)(v.value1);
        return [ Halogen_HTML_Core.text("SIRC"), Halogen_HTML_Elements.br_, row(Data_Array.cons(bit7)(Utils.toArrayArray(8)(left))) ];
    };
    if (v.value0 instanceof InfraredRemote_Code.LeaderUnknown) {
        return [ Halogen_HTML_Core.text("Unknown"), Halogen_HTML_Elements.br_, row(Utils.toArrayArray(8)(v.value1)) ];
    };
    throw new Error("Failed pattern match at Page.Infrared (line 651, column 3 - line 674, column 8): " + [ v.value0.constructor.name ]);
};
var genericSelectedTab = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof TabControlPanel) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof TabIrdbTable) {
        return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
    };
    throw new Error("Failed pattern match at Page.Infrared (line 74, column 8 - line 74, column 60): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return TabControlPanel.value;
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return TabIrdbTable.value;
    };
    throw new Error("Failed pattern match at Page.Infrared (line 74, column 8 - line 74, column 60): " + [ x.constructor.name ]);
});
var genericSelectedBitOrder = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof LeastSignBitFirst) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof MostSignBitFirst) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
    };
    if (x instanceof BothBitOrder) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
    };
    throw new Error("Failed pattern match at Page.Infrared (line 90, column 8 - line 90, column 70): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return LeastSignBitFirst.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return MostSignBitFirst.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
        return BothBitOrder.value;
    };
    throw new Error("Failed pattern match at Page.Infrared (line 90, column 8 - line 90, column 70): " + [ x.constructor.name ]);
});
var eqSelectedTab = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof TabControlPanel && y instanceof TabControlPanel) {
            return true;
        };
        if (x instanceof TabIrdbTable && y instanceof TabIrdbTable) {
            return true;
        };
        return false;
    };
});
var ordSelectedTab = new Data_Ord.Ord(function () {
    return eqSelectedTab;
}, function (x) {
    return function (y) {
        if (x instanceof TabControlPanel && y instanceof TabControlPanel) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof TabControlPanel) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TabControlPanel) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof TabIrdbTable && y instanceof TabIrdbTable) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Page.Infrared (line 76, column 8 - line 76, column 50): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqSelectedBitOrder = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof LeastSignBitFirst && y instanceof LeastSignBitFirst) {
            return true;
        };
        if (x instanceof MostSignBitFirst && y instanceof MostSignBitFirst) {
            return true;
        };
        if (x instanceof BothBitOrder && y instanceof BothBitOrder) {
            return true;
        };
        return false;
    };
});
var ordSelectedBitOrder = new Data_Ord.Ord(function () {
    return eqSelectedBitOrder;
}, function (x) {
    return function (y) {
        if (x instanceof LeastSignBitFirst && y instanceof LeastSignBitFirst) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof LeastSignBitFirst) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof LeastSignBitFirst) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof MostSignBitFirst && y instanceof MostSignBitFirst) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof MostSignBitFirst) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof MostSignBitFirst) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof BothBitOrder && y instanceof BothBitOrder) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Page.Infrared (line 92, column 8 - line 92, column 60): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var enumSelectedTab = new Data_Enum.Enum(function () {
    return ordSelectedTab;
}, Data_Generic_Rep_Enum.genericPred(genericSelectedTab)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))), Data_Generic_Rep_Enum.genericSucc(genericSelectedTab)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))));
var enumSelectedBitOrder = new Data_Enum.Enum(function () {
    return ordSelectedBitOrder;
}, Data_Generic_Rep_Enum.genericPred(genericSelectedBitOrder)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))), Data_Generic_Rep_Enum.genericSucc(genericSelectedBitOrder)(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumSum(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments))(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)))));
var boundedSelectedTab = new Data_Bounded.Bounded(function () {
    return ordSelectedTab;
}, Data_Generic_Rep_Bounded.genericBottom(genericSelectedTab)(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))), Data_Generic_Rep_Bounded.genericTop(genericSelectedTab)(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments))));
var boundedSelectedBitOrder = new Data_Bounded.Bounded(function () {
    return ordSelectedBitOrder;
}, Data_Generic_Rep_Bounded.genericBottom(genericSelectedBitOrder)(Data_Generic_Rep_Bounded.genericBottomSum(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments))), Data_Generic_Rep_Bounded.genericTop(genericSelectedBitOrder)(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopSum(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments)))));
var boundedEnumSelectedTab = new Data_Enum.BoundedEnum(function () {
    return boundedSelectedTab;
}, function () {
    return enumSelectedTab;
}, Data_Generic_Rep_Enum.genericCardinality(genericSelectedTab)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))), Data_Generic_Rep_Enum.genericFromEnum(genericSelectedTab)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))), Data_Generic_Rep_Enum.genericToEnum(genericSelectedTab)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))));
var renderTab = function (dictMonadAff) {
    return function (state) {
        var item = function (newTab) {
            return function (caption) {
                return function (appendix) {
                    var qp = {
                        tab: Data_Maybe.Just.create(Data_Enum.fromEnum(boundedEnumSelectedTab)(newTab)),
                        bitorder: state.queryParams.bitorder,
                        limits: state.queryParams.limits,
                        manuf: state.queryParams.manuf,
                        page: state.queryParams.page
                    };
                    return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navItem) ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_Themes_Bootstrap4.navLink ])(appendix)), Halogen_HTML_Events.onClick(function (v) {
                        return Data_Maybe.Just.create(NavigateTo.create(Route.Infrared.create(new Data_Maybe.Just(qp))));
                    }) ])([ Halogen_HTML_Core.text(caption) ]) ]);
                };
            };
        };
        var tabControlPanel = item(TabControlPanel.value)("Control panel");
        var tabIrdbTable = item(TabIrdbTable.value)("Infrared database");
        return Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.nav, Halogen_Themes_Bootstrap4.navTabs, Halogen_Themes_Bootstrap4.navPills, Halogen_Themes_Bootstrap4.navJustified, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.marginTop(CSS_Size.px(12.0)))(function () {
            return CSS_Geometry.marginBottom(CSS_Size.px(36.0));
        })) ])((function () {
            var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSelectedTab))(state.queryParams.tab);
            if (v instanceof Data_Maybe.Nothing) {
                return [ tabControlPanel([ Halogen_Themes_Bootstrap4.active ]), tabIrdbTable([  ]) ];
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof TabControlPanel) {
                return [ tabControlPanel([ Halogen_Themes_Bootstrap4.active ]), tabIrdbTable([  ]) ];
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof TabIrdbTable) {
                return [ tabControlPanel([  ]), tabIrdbTable([ Halogen_Themes_Bootstrap4.active ]) ];
            };
            throw new Error("Failed pattern match at Page.Infrared (line 457, column 5 - line 465, column 57): " + [ v.constructor.name ]);
        })());
    };
};
var boundedEnumSelectedBitOrder = new Data_Enum.BoundedEnum(function () {
    return boundedSelectedBitOrder;
}, function () {
    return enumSelectedBitOrder;
}, Data_Generic_Rep_Enum.genericCardinality(genericSelectedBitOrder)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments)))), Data_Generic_Rep_Enum.genericFromEnum(genericSelectedBitOrder)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments)))), Data_Generic_Rep_Enum.genericToEnum(genericSelectedBitOrder)(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumSum(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments))(Data_Generic_Rep_Enum.genericBoundedEnumConstructor(Data_Generic_Rep_Enum.genericBoundedEnumNoArguments)))));
var infraredCodeFrame = function (state) {
    return function (input) {
        var showOctet = function (x) {
            return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.col6, Halogen_Themes_Bootstrap4.colMd2 ]) ])([ Halogen_HTML_Core.text(showHex(x)), Halogen_HTML_Core.text(" ") ]);
        };
        var dd = Halogen_HTML_Elements.dd([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.pl4, Halogen_Themes_Bootstrap4.row ]) ]);
        var leastSignificantBitFirst = function (v) {
            if (v instanceof InfraredRemote_Types.FormatNEC) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("NEC") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("custom code (LSBit first)") ]), dd([ showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.custom0))), showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.custom1))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("octets (LSBit first)") ]), dd([ showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.data0))), showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.data1))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("stop") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types["showBit'"])(v.value0.stop)) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatAEHA) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("AEHA") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("octets (LSBit first)") ]), dd(Data_Functor.map(Data_Functor.functorArray)(function ($341) {
                    return showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst($341)));
                })(v.value0.octets)), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("stop") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types["showBit'"])(v.value0.stop)) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatSIRC) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("SIRC") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("command (LSBit first)") ]), dd([ Halogen_HTML_Core.text(showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.command)))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("address (LSBit first)") ]), dd([ Halogen_HTML_Core.text(showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeLsbFirst)(InfraredRemote_Types.toLsbFirst(v.value0.address)))) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatUnknown) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("unknown format") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showArray(InfraredRemote_Types["showBit'"]))(v.value0)) ]) ]) ];
            };
            throw new Error("Failed pattern match at Page.Infrared (line 697, column 30 - line 744, column 8): " + [ v.constructor.name ]);
        };
        var mostSignificantBitFirst = function (v) {
            if (v instanceof InfraredRemote_Types.FormatNEC) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("NEC") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("custom code (MSBit first)") ]), dd([ showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.custom0))), showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.custom1))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("octets (MSBit first)") ]), dd([ showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.data0))), showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.data1))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("stop") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types["showBit'"])(v.value0.stop)) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatAEHA) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("AEHA") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("octets (MSBit first)") ]), dd(Data_Functor.map(Data_Functor.functorArray)(function ($342) {
                    return showOctet(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst($342)));
                })(v.value0.octets)), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("stop") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(InfraredRemote_Types["showBit'"])(v.value0.stop)) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatSIRC) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("format") ]), dd([ Halogen_HTML_Core.text("SIRC") ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("command (MSBit first)") ]), dd([ Halogen_HTML_Core.text(showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.command)))) ]), Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("address (MSBit first)") ]), dd([ Halogen_HTML_Core.text(showHex(Data_Newtype.unwrap(InfraredRemote_Types.newtypeMsbFirst)(InfraredRemote_Types.toMsbFirst(v.value0.address)))) ]) ]) ];
            };
            if (v instanceof InfraredRemote_Types.FormatUnknown) {
                return [ Halogen_HTML_Elements.dl_([ Halogen_HTML_Elements.dt_([ Halogen_HTML_Core.text("unknown format") ]), dd([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showArray(InfraredRemote_Types["showBit'"]))(v.value0)) ]) ]) ];
            };
            throw new Error("Failed pattern match at Page.Infrared (line 746, column 29 - line 793, column 8): " + [ v.constructor.name ]);
        };
        var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSelectedBitOrder))(state.queryParams.bitorder);
        if (v instanceof Data_Maybe.Nothing) {
            return leastSignificantBitFirst(input);
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof LeastSignBitFirst) {
            return leastSignificantBitFirst(input);
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof MostSignBitFirst) {
            return mostSignificantBitFirst(input);
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof BothBitOrder) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(leastSignificantBitFirst(input))(mostSignificantBitFirst(input));
        };
        throw new Error("Failed pattern match at Page.Infrared (line 689, column 3 - line 694, column 70): " + [ v.constructor.name ]);
    };
};
var initialQueryParams = {
    tab: Data_Maybe.Just.create(Data_Enum.fromEnum(boundedEnumSelectedTab)(TabControlPanel.value)),
    bitorder: Data_Maybe.Just.create(Data_Enum.fromEnum(boundedEnumSelectedBitOrder)(LeastSignBitFirst.value)),
    manuf: new Data_Maybe.Just(0),
    limits: new Data_Maybe.Just(10),
    page: new Data_Maybe.Just(1)
};
var initialState = function (route) {
    var st = function (v) {
        return {
            queryParams: v,
            infraredValue: Data_Maybe.Nothing.value,
            irdb: Data_Maybe.Nothing.value,
            irdbManufacturers: Data_Maybe.Nothing.value,
            buttonNumber: 1
        };
    };
    if (route instanceof Route.Infrared && route.value0 instanceof Data_Maybe.Just) {
        return st({
            tab: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.tab)(initialQueryParams.tab),
            manuf: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.manuf)(initialQueryParams.manuf),
            limits: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.limits)(initialQueryParams.limits),
            page: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.page)(initialQueryParams.page),
            bitorder: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.page)(initialQueryParams.bitorder)
        });
    };
    return st(initialQueryParams);
};
var renderBitOrderTab = function (dictMonadAff) {
    return function (state) {
        var item = function (newTab) {
            return function (caption) {
                return function (appendix) {
                    var qp = {
                        bitorder: Data_Maybe.Just.create(Data_Enum.fromEnum(boundedEnumSelectedBitOrder)(newTab)),
                        limits: state.queryParams.limits,
                        manuf: state.queryParams.manuf,
                        page: state.queryParams.page,
                        tab: state.queryParams.tab
                    };
                    return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.navItem) ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_Themes_Bootstrap4.navLink ])(appendix)), Halogen_HTML_Events.onClick(function (v) {
                        return Data_Maybe.Just.create(NavigateTo.create(Route.Infrared.create(new Data_Maybe.Just(qp))));
                    }) ])([ Halogen_HTML_Core.text(caption) ]) ]);
                };
            };
        };
        var tabBothBitOrder = item(BothBitOrder.value)("Both Bit Order");
        var tabLSBitFirst = item(LeastSignBitFirst.value)("Least Significant Bit First Order");
        var tabMSBitFirst = item(MostSignBitFirst.value)("Most Significant Bit First Order");
        return Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.nav, Halogen_Themes_Bootstrap4.navTabs, Halogen_Themes_Bootstrap4.navPills ]), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.marginTop(CSS_Size.px(12.0)))(function () {
            return CSS_Geometry.marginBottom(CSS_Size.px(36.0));
        })) ])((function () {
            var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSelectedBitOrder))(state.queryParams.bitorder);
            if (v instanceof Data_Maybe.Nothing) {
                return [ tabLSBitFirst([ Halogen_Themes_Bootstrap4.active ]), tabMSBitFirst([  ]), tabBothBitOrder([  ]) ];
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof LeastSignBitFirst) {
                return [ tabLSBitFirst([ Halogen_Themes_Bootstrap4.active ]), tabMSBitFirst([  ]), tabBothBitOrder([  ]) ];
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof MostSignBitFirst) {
                return [ tabLSBitFirst([  ]), tabMSBitFirst([ Halogen_Themes_Bootstrap4.active ]), tabBothBitOrder([  ]) ];
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof BothBitOrder) {
                return [ tabLSBitFirst([  ]), tabMSBitFirst([  ]), tabBothBitOrder([ Halogen_Themes_Bootstrap4.active ]) ];
            };
            throw new Error("Failed pattern match at Page.Infrared (line 1027, column 5 - line 1038, column 76): " + [ v.constructor.name ]);
        })());
    };
};
var accessToBackend = function (dictMonadAff) {
    return function (millisec) {
        return function (accessor) {
            var timeout = Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(millisec))(new Data_Either.Left("\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u5fdc\u7b54\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f"));
            var response = Data_Bifunctor.rmap(Data_Either.bifunctorEither)(function (v) {
                return v.body;
            });
            return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.map(Effect_Aff.functorAff)(response)(accessor)))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(timeout))));
        };
    };
};
var getIrdb = function (dictMonadAff) {
    return function (dictHasApiAccessible) {
        return function (queryParams) {
            return function (v) {
                return Control_Bind.bind((dictHasApiAccessible.Monad0()).Bind1())(AppM.getApiBaseURL(dictHasApiAccessible))(function (v1) {
                    return Control_Bind.bind((dictHasApiAccessible.Monad0()).Bind1())(AppM.getApiTimeout(dictHasApiAccessible))(function (v2) {
                        var param = {
                            baseurl: v1,
                            manufacturer: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Array.index(v.manufacturers))(queryParams.manuf),
                            product: Data_Maybe.Nothing.value,
                            limits: queryParams.limits,
                            page: queryParams.page
                        };
                        return accessToBackend(dictMonadAff)(v2)(Api.getApiV1Irdb(param));
                    });
                });
            };
        };
    };
};
var handleAction = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return function (v) {
                if (v instanceof NavigateTo) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(v.value0))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                if (v instanceof Initialize) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                        var newRoute = new Route.Infrared(new Data_Maybe.Just(v1.queryParams));
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible)(new ChangedRoute(newRoute))))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                if (v instanceof ChangedRoute) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)((function () {
                            if (v.value0 instanceof Route.Infrared && v.value0.value0 instanceof Data_Maybe.Nothing) {
                                return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                    var $214 = {};
                                    for (var $215 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $215)) {
                                            $214[$215] = v1[$215];
                                        };
                                    };
                                    $214.queryParams = initialQueryParams;
                                    return $214;
                                });
                            };
                            if (v.value0 instanceof Route.Infrared && v.value0.value0 instanceof Data_Maybe.Just) {
                                return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                                    var $218 = {};
                                    for (var $219 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $219)) {
                                            $218[$219] = v1[$219];
                                        };
                                    };
                                    $218.queryParams = v.value0.value0.value0;
                                    return $218;
                                });
                            };
                            return Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM);
                        })())(function (v1) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                var v2 = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSelectedTab))(v1.queryParams.tab);
                                if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof TabIrdbTable) {
                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v3) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v4) {
                                            var accessor = Api.getApiV1IrdbManufacturers({
                                                baseurl: v3
                                            });
                                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(accessToBackend(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(v4)(accessor))(function (v5) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                                    var $228 = {};
                                                    for (var $229 in v1) {
                                                        if ({}.hasOwnProperty.call(v1, $229)) {
                                                            $228[$229] = v1[$229];
                                                        };
                                                    };
                                                    $228.irdbManufacturers = new Data_Maybe.Just(v5);
                                                    return $228;
                                                })()))(function () {
                                                    if (v5 instanceof Data_Either.Left) {
                                                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                                    };
                                                    if (v5 instanceof Data_Either.Right) {
                                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(getIrdb(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible))(v1.queryParams)(v5.value0))(function (v6) {
                                                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                                var $234 = {};
                                                                for (var $235 in st) {
                                                                    if ({}.hasOwnProperty.call(st, $235)) {
                                                                        $234[$235] = st[$235];
                                                                    };
                                                                };
                                                                $234.irdb = new Data_Maybe.Just(v6);
                                                                return $234;
                                                            });
                                                        });
                                                    };
                                                    throw new Error("Failed pattern match at Page.Infrared (line 252, column 9 - line 258, column 51): " + [ v5.constructor.name ]);
                                                });
                                            });
                                        });
                                    });
                                };
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                            })())(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.enablePopover))(function () {
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnClickIRCodeDownload) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v3) {
                                var accessor = Api.getApiV1InfraRed({
                                    baseurl: v1,
                                    buttonNumber: v3.buttonNumber
                                });
                                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(accessToBackend(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(v2)(accessor))(function (v4) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                        var $244 = {};
                                        for (var $245 in st) {
                                            if ({}.hasOwnProperty.call(st, $245)) {
                                                $244[$245] = st[$245];
                                            };
                                        };
                                        $244.infraredValue = new Data_Maybe.Just(v4);
                                        return $244;
                                    }))(function () {
                                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                    });
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnClickIRCodeUpload) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v3) {
                                if (v3.infraredValue instanceof Data_Maybe.Just && v3.infraredValue.value0 instanceof Data_Either.Right) {
                                    var newD = {
                                        button_number: v3.buttonNumber,
                                        code: v3.infraredValue.value0.value0.code
                                    };
                                    var accessor = Api.postApiV1InfraRed({
                                        baseurl: v1,
                                        datum: newD
                                    });
                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(accessToBackend(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(v2)(accessor))(function (v4) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Console.logShow(Data_Either.showEither(Data_Show.showString)(Data_Show.showString))(v4)))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                };
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                            });
                        });
                    });
                };
                if (v instanceof OnClickIRCodeTransmit) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v3) {
                                if (v3.infraredValue instanceof Data_Maybe.Just && v3.infraredValue.value0 instanceof Data_Either.Right) {
                                    var accessor = Api.postApiV1TransIR({
                                        baseurl: v1,
                                        datum: v3.infraredValue.value0.value0
                                    });
                                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(accessToBackend(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(v2)(accessor))(function (v4) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Console.logShow(Data_Either.showEither(Data_Show.showString)(Data_Show.showString))(v4)))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                };
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                            });
                        });
                    });
                };
                if (v instanceof OnClickIrdbPagination) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                            var qp = {
                                page: new Data_Maybe.Just(v.value0),
                                bitorder: v1.queryParams.bitorder,
                                limits: v1.queryParams.limits,
                                manuf: v1.queryParams.manuf,
                                tab: v1.queryParams.tab
                            };
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                var $263 = {};
                                for (var $264 in v2) {
                                    if ({}.hasOwnProperty.call(v2, $264)) {
                                        $263[$264] = v2[$264];
                                    };
                                };
                                $263.queryParams = qp;
                                return $263;
                            }))(function (v2) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                    if (v2.irdbManufacturers instanceof Data_Maybe.Just && v2.irdbManufacturers.value0 instanceof Data_Either.Right) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(getIrdb(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible))(v2.queryParams)(v2.irdbManufacturers.value0.value0))(function (v3) {
                                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                var $269 = {};
                                                for (var $270 in st) {
                                                    if ({}.hasOwnProperty.call(st, $270)) {
                                                        $269[$270] = st[$270];
                                                    };
                                                };
                                                $269.irdb = new Data_Maybe.Just(v3);
                                                return $269;
                                            });
                                        });
                                    };
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                })())(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(new Route.Infrared(new Data_Maybe.Just(qp))))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.enablePopover))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnClickIrdbTable) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                            var newTab = Data_Maybe.Just.create(Data_Enum.fromEnum(boundedEnumSelectedTab)(TabControlPanel.value));
                            var qp = {
                                tab: newTab,
                                bitorder: v1.queryParams.bitorder,
                                limits: v1.queryParams.limits,
                                manuf: v1.queryParams.manuf,
                                page: v1.queryParams.page
                            };
                            var irval = {
                                button_number: v1.buttonNumber,
                                code: v.value0
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                var $276 = {};
                                for (var $277 in v2) {
                                    if ({}.hasOwnProperty.call(v2, $277)) {
                                        $276[$277] = v2[$277];
                                    };
                                };
                                $276.infraredValue = new Data_Maybe.Just(new Data_Either.Right(irval));
                                $276.queryParams = qp;
                                return $276;
                            }))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(new Route.Infrared(new Data_Maybe.Just(qp))))(function () {
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnValueChangeButtonNumber) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                        var v1 = Data_Int.fromString(v.value0);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                var $281 = {};
                                for (var $282 in st) {
                                    if ({}.hasOwnProperty.call(st, $282)) {
                                        $281[$282] = st[$282];
                                    };
                                };
                                $281.buttonNumber = v1.value0;
                                return $281;
                            });
                        };
                        throw new Error("Failed pattern match at Page.Infrared (line 331, column 5 - line 333, column 57): " + [ v1.constructor.name ]);
                    })())(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                };
                if (v instanceof OnValueChangeManufacturer) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                            var maybeManuf = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
                                return new Data_Maybe.Just((Data_Newtype.unwrap(Api.newtypeRespGetIrdbManufacturers)(x)).manufacturers);
                            }))(v1.irdbManufacturers);
                            var maybeIndex = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Array.elemIndex(Data_Eq.eqString)(v.value0))(maybeManuf);
                            var newQry = {
                                manuf: Control_Alt.alt(Data_Maybe.altMaybe)(maybeIndex)(initialQueryParams.manuf),
                                page: new Data_Maybe.Just(1),
                                bitorder: v1.queryParams.bitorder,
                                limits: v1.queryParams.limits,
                                tab: v1.queryParams.tab
                            };
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                var $287 = {};
                                for (var $288 in v2) {
                                    if ({}.hasOwnProperty.call(v2, $288)) {
                                        $287[$288] = v2[$288];
                                    };
                                };
                                $287.queryParams = newQry;
                                return $287;
                            }))(function (v2) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                    if (v2.irdbManufacturers instanceof Data_Maybe.Just && v2.irdbManufacturers.value0 instanceof Data_Either.Right) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(getIrdb(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible))(v2.queryParams)(v2.irdbManufacturers.value0.value0))(function (v3) {
                                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                var $293 = {};
                                                for (var $294 in st) {
                                                    if ({}.hasOwnProperty.call(st, $294)) {
                                                        $293[$294] = st[$294];
                                                    };
                                                };
                                                $293.irdb = new Data_Maybe.Just(v3);
                                                return $293;
                                            });
                                        });
                                    };
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                })())(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(new Route.Infrared(new Data_Maybe.Just(newQry))))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.enablePopover))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnValueChangeLimits) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.disposePopover))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                            var maybeLimits = Data_Int.fromString(v.value0);
                            var newQry = {
                                limits: Control_Alt.alt(Data_Maybe.altMaybe)(maybeLimits)(initialQueryParams.limits),
                                page: new Data_Maybe.Just(1),
                                bitorder: v1.queryParams.bitorder,
                                manuf: v1.queryParams.manuf,
                                tab: v1.queryParams.tab
                            };
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                var $300 = {};
                                for (var $301 in v2) {
                                    if ({}.hasOwnProperty.call(v2, $301)) {
                                        $300[$301] = v2[$301];
                                    };
                                };
                                $300.queryParams = newQry;
                                return $300;
                            }))(function (v2) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                    if (v2.irdbManufacturers instanceof Data_Maybe.Just && v2.irdbManufacturers.value0 instanceof Data_Either.Right) {
                                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(getIrdb(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible))(v2.queryParams)(v2.irdbManufacturers.value0.value0))(function (v3) {
                                            return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                                var $306 = {};
                                                for (var $307 in st) {
                                                    if ({}.hasOwnProperty.call(st, $307)) {
                                                        $306[$307] = st[$307];
                                                    };
                                                };
                                                $306.irdb = new Data_Maybe.Just(v3);
                                                return $306;
                                            });
                                        });
                                    };
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                })())(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(new Route.Infrared(new Data_Maybe.Just(newQry))))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Page_Commons.enablePopover))(function () {
                                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                        });
                                    });
                                });
                            });
                        });
                    });
                };
                if (v instanceof HandleEditorUpdate && v.value0 instanceof Components_InfraredCodeEditor.TextChanged) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                        var val = {
                            button_number: v1.buttonNumber,
                            code: v.value0.value0
                        };
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                            var $313 = {};
                            for (var $314 in st) {
                                if ({}.hasOwnProperty.call(st, $314)) {
                                    $313[$314] = st[$314];
                                };
                            };
                            $313.infraredValue = new Data_Maybe.Just(new Data_Either.Right(val));
                            return $313;
                        }))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                if (v instanceof HandleEditorUpdate && v.value0 instanceof Components_InfraredCodeEditor.Reset) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                        var $319 = {};
                        for (var $320 in st) {
                            if ({}.hasOwnProperty.call(st, $320)) {
                                $319[$320] = st[$320];
                            };
                        };
                        $319.infraredValue = Data_Maybe.Nothing.value;
                        return $319;
                    }))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                };
                throw new Error("Failed pattern match at Page.Infrared (line 220, column 16 - line 389, column 16): " + [ v.constructor.name ]);
            };
        };
    };
};
var _infraredCodeEditor = Data_Symbol.SProxy.value;
var renderInfraredRemoconCode = function (dictMonadAff) {
    return function (state) {
        var display = function (ir) {
            var baseband = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Text_Parsing_Parser.parseErrorMessage)(Text_Parsing_Parser.runParser(ir.code)(InfraredRemote_Code.infraredHexStringParser));
            var bitPatterns = Control_Bind.bindFlipped(Data_Either.bindEither)(function ($343) {
                return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(InfraredRemote_Code.decodePhase2)(InfraredRemote_Code.decodePhase1($343));
            })(baseband);
            var irframes = Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(InfraredRemote_Code.decodePhase3))(bitPatterns);
            var irRemoteCode = Data_Bifunctor.rmap(Data_Either.bifunctorEither)(InfraredRemote_Code.decodePhase4)(irframes);
            return Halogen_HTML_Elements.p_([ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Binaries") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.p3, "overflow-auto" ]), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0)))(function () {
                return CSS_Geometry.minHeight(CSS_Size.em(5.0));
            })) ])([ (function () {
                if (state.infraredValue instanceof Data_Maybe.Nothing) {
                    return Halogen_HTML_Core.text("");
                };
                if (state.infraredValue instanceof Data_Maybe.Just && state.infraredValue.value0 instanceof Data_Either.Left) {
                    return Halogen_HTML_Core.text(state.infraredValue.value0.value0);
                };
                if (state.infraredValue instanceof Data_Maybe.Just && state.infraredValue.value0 instanceof Data_Either.Right) {
                    var input = (Data_Newtype.unwrap(Api.newtypeDatumInfraRed)(state.infraredValue.value0.value0)).code;
                    var bb = toBaseband(input);
                    return Data_Either.either(Halogen_HTML_Core.text)(function ($344) {
                        return Halogen_HTML_Core.text(InfraredRemote_Code.toInfraredHexString($344));
                    })(bb);
                };
                throw new Error("Failed pattern match at Page.Infrared (line 976, column 13 - line 984, column 68): " + [ state.infraredValue.constructor.name ]);
            })() ]), Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Timing table in milliseconds") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.p3) ])([ Data_Either.either(Halogen_HTML_Core.text)(infraredTimingTable)(baseband) ]), Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Bit patterns") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.p3) ])(Data_Either.either(function ($345) {
                return Data_Array.singleton(Halogen_HTML_Core.text($345));
            })(function ($346) {
                return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)([ Halogen_HTML_Elements.hr_ ])(Data_Functor.map(Data_Functor.functorArray)(infraredBitpatterns)($346));
            })(bitPatterns)), Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Infrared remote control frames") ]), renderBitOrderTab(dictMonadAff)(state), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.p3) ])(Data_Either.either(function ($347) {
                return Data_Array.singleton(Halogen_HTML_Core.text($347));
            })(function ($348) {
                return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)([ Halogen_HTML_Elements.hr_ ])(Data_Functor.map(Data_Functor.functorArray)(infraredCodeFrame(state))($348));
            })(irframes)), Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Infrared remote control code") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.p3) ])(Data_Either.either(function ($349) {
                return Data_Array.singleton(Halogen_HTML_Core.text($349));
            })(infraredRemoteControlCode)(irRemoteCode)) ]);
        };
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.formGroup) ])((function () {
            if (state.infraredValue instanceof Data_Maybe.Nothing) {
                return [ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Edit codes") ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                    return "infraredCodeEditor";
                }))(Data_Ord.ordUnit)(_infraredCodeEditor)(Data_Unit.unit)(Components_InfraredCodeEditor.component(dictMonadAff))("")(function ($350) {
                    return Data_Maybe.Just.create(HandleEditorUpdate.create($350));
                }) ];
            };
            if (state.infraredValue instanceof Data_Maybe.Just && state.infraredValue.value0 instanceof Data_Either.Left) {
                return [ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Edit codes") ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                    return "infraredCodeEditor";
                }))(Data_Ord.ordUnit)(_infraredCodeEditor)(Data_Unit.unit)(Components_InfraredCodeEditor.component(dictMonadAff))("")(function ($351) {
                    return Data_Maybe.Just.create(HandleEditorUpdate.create($351));
                }) ];
            };
            if (state.infraredValue instanceof Data_Maybe.Just && state.infraredValue.value0 instanceof Data_Either.Right) {
                return [ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text("Edit codes") ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                    return "infraredCodeEditor";
                }))(Data_Ord.ordUnit)(_infraredCodeEditor)(Data_Unit.unit)(Components_InfraredCodeEditor.component(dictMonadAff))(state.infraredValue.value0.value0.code)(function ($352) {
                    return Data_Maybe.Just.create(HandleEditorUpdate.create($352));
                }), display(state.infraredValue.value0.value0) ];
            };
            throw new Error("Failed pattern match at Page.Infrared (line 944, column 7 - line 959, column 10): " + [ state.infraredValue.constructor.name ]);
        })());
    };
};
var renderControlPanel = function (dictMonadAff) {
    return function (state) {
        return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.formInline) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formGroup ]) ])([ Halogen_HTML_Elements.label_([ Halogen_HTML_Core.text("Button Number") ]), Halogen_HTML_Elements.select([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m3, Halogen_Themes_Bootstrap4.formControl ]), Halogen_HTML_Events.onValueChange(function ($353) {
            return Data_Maybe.Just.create(OnValueChangeButtonNumber.create($353));
        }) ])(Data_Functor.map(Data_Functor.functorArray)(function ($354) {
            return Halogen_HTML_Elements.option_(Data_Array.singleton(Halogen_HTML_Core.text(Data_Int.toStringAs(Data_Int.decimal)($354))));
        })(Data_Array.range(1)(10))) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.m3, Halogen_Themes_Bootstrap4.formGroup ]) ])([ irDownloadButton, irUploadButton(Data_Maybe.maybe(false)(Data_Either.isRight)(state.infraredValue)), irTransmitButton(Data_Maybe.maybe(false)(Data_Either.isRight)(state.infraredValue)) ]) ]), renderInfraredRemoconCode(dictMonadAff)(state) ]);
    };
};
var render = function (dictMonadAff) {
    return function (state) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("wrapper") ])([ Page_Commons.navbar(NavigateTo.create)(new Route.Infrared(Data_Maybe.Nothing.value)), Halogen_HTML_Elements.main([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.container) ])([ renderTab(dictMonadAff)(state), (function () {
            var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.toEnum(boundedEnumSelectedTab))(state.queryParams.tab);
            if (v instanceof Data_Maybe.Nothing) {
                return renderControlPanel(dictMonadAff)(state);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof TabControlPanel) {
                return renderControlPanel(dictMonadAff)(state);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof TabIrdbTable) {
                return renderIrdbTable(dictMonadAff)(state);
            };
            throw new Error("Failed pattern match at Page.Infrared (line 203, column 9 - line 206, column 57): " + [ v.constructor.name ]);
        })() ]), Page_Commons.footer ]);
    };
};
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return Halogen_Component.mkComponent({
                initialState: initialState,
                render: render(dictMonadAff),
                "eval": Halogen_Component.mkEval({
                    handleAction: handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible),
                    handleQuery: Halogen_Component.defaultEval.handleQuery,
                    receive: function ($355) {
                        return Data_Maybe.Just.create(ChangedRoute.create($355));
                    },
                    initialize: new Data_Maybe.Just(Initialize.value),
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
module.exports = {
    component: component
};

},{"../Api/index.js":12,"../AppM/index.js":13,"../CSS.Geometry/index.js":15,"../CSS.Size/index.js":19,"../CSS.Stylesheet/index.js":21,"../Components.InfraredCodeEditor/index.js":25,"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.State.Class/index.js":58,"../Control.Parallel.Class/index.js":68,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.Boolean/index.js":107,"../Data.Bounded/index.js":110,"../Data.Char/index.js":116,"../Data.Either/index.js":129,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Formatter.Number/index.js":143,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Bounded/index.js":159,"../Data.Generic.Rep.Enum/index.js":160,"../Data.Generic.Rep/index.js":162,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.Common/index.js":241,"../Data.Symbol/index.js":250,"../Data.Time.Duration/index.js":253,"../Data.Traversable/index.js":257,"../Data.Unit/index.js":266,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Effect.Class/index.js":279,"../Effect.Console/index.js":281,"../Halogen.Component/index.js":337,"../Halogen.HTML.CSS/index.js":340,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.HTML/index.js":345,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Themes.Bootstrap4/index.js":352,"../InfraredRemote.Code/index.js":362,"../InfraredRemote.HitachiHvac/index.js":363,"../InfraredRemote.MitsubishiElectricHvac/index.js":364,"../InfraredRemote.PanasonicHvac/index.js":365,"../InfraredRemote.Types/index.js":366,"../Page.Commons/index.js":372,"../Route/index.js":388,"../Text.Parsing.Parser/index.js":399,"../Utils/index.js":408}],375:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Api = require("../Api/index.js");
var AppM = require("../AppM/index.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var Component_LineChart = require("../Component.LineChart/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Formatter_Number = require("../Data.Formatter.Number/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Foreign_ChartJs = require("../Foreign.ChartJs/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var Route = require("../Route/index.js");
var Utils = require("../Utils/index.js");
var NavigateTo = (function () {
    function NavigateTo(value0) {
        this.value0 = value0;
    };
    NavigateTo.create = function (value0) {
        return new NavigateTo(value0);
    };
    return NavigateTo;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var ChangedRoute = (function () {
    function ChangedRoute(value0) {
        this.value0 = value0;
    };
    ChangedRoute.create = function (value0) {
        return new ChangedRoute(value0);
    };
    return ChangedRoute;
})();
var OnInputRecordsLimit = (function () {
    function OnInputRecordsLimit(value0) {
        this.value0 = value0;
    };
    OnInputRecordsLimit.create = function (value0) {
        return new OnInputRecordsLimit(value0);
    };
    return OnInputRecordsLimit;
})();
var initialQueryParams = {
    limits: new Data_Maybe.Just(30)
};
var initialState = function (route) {
    var qry = (function () {
        if (route instanceof Route.Plotdata && route.value0 instanceof Data_Maybe.Nothing) {
            return initialQueryParams;
        };
        if (route instanceof Route.Plotdata && route.value0 instanceof Data_Maybe.Just) {
            return {
                limits: Control_Alt.alt(Data_Maybe.altMaybe)(route.value0.value0.limits)(initialQueryParams.limits)
            };
        };
        return initialQueryParams;
    })();
    return {
        queryParams: qry,
        measValues: [  ]
    };
};
var idChartArea = {
    temp: "temp-chart-area",
    press: "press-chart-area",
    hum: "hum-chart-area"
};
var handleAction = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return function (v) {
                if (v instanceof NavigateTo) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(v.value0))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                };
                if (v instanceof Initialize) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                        var newRoute = new Route.Plotdata(new Data_Maybe.Just(v1.queryParams));
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible)(new ChangedRoute(newRoute))))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                if (v instanceof ChangedRoute) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                        var state = (function () {
                            if (v.value0 instanceof Route.Plotdata && v.value0.value0 instanceof Data_Maybe.Nothing) {
                                var $36 = {};
                                for (var $37 in v1) {
                                    if ({}.hasOwnProperty.call(v1, $37)) {
                                        $36[$37] = v1[$37];
                                    };
                                };
                                $36.queryParams = initialQueryParams;
                                return $36;
                            };
                            if (v.value0 instanceof Route.Plotdata && v.value0.value0 instanceof Data_Maybe.Just) {
                                var $40 = {};
                                for (var $41 in v1) {
                                    if ({}.hasOwnProperty.call(v1, $41)) {
                                        $40[$41] = v1[$41];
                                    };
                                };
                                $40.queryParams = v.value0.value0.value0;
                                return $40;
                            };
                            return v1;
                        })();
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            var param = {
                                baseurl: v2,
                                limits: state.queryParams.limits
                            };
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Api.getApiV1Measurements(param)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                                    if (v3 instanceof Data_Either.Left) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(state))(function () {
                                            return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Effect_Console.logShow(Data_Show.showString)(v3.value0));
                                        });
                                    };
                                    if (v3 instanceof Data_Either.Right) {
                                        return Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                            var $49 = {};
                                            for (var $50 in state) {
                                                if ({}.hasOwnProperty.call(state, $50)) {
                                                    $49[$50] = state[$50];
                                                };
                                            };
                                            $49.measValues = v3.value0.body;
                                            return $49;
                                        })());
                                    };
                                    throw new Error("Failed pattern match at Page.Plotdata (line 205, column 5 - line 211, column 49): " + [ v3.constructor.name ]);
                                })())(function () {
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                });
                            });
                        });
                    });
                };
                if (v instanceof OnInputRecordsLimit) {
                    var newLimits = Data_Int.fromString(v.value0);
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                        var newQueryParams = {
                            limits: newLimits
                        };
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                            var $55 = {};
                            for (var $56 in v2) {
                                if ({}.hasOwnProperty.call(v2, $56)) {
                                    $55[$56] = v2[$56];
                                };
                            };
                            $55.queryParams = newQueryParams;
                            return $55;
                        }))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(new Route.Plotdata(new Data_Maybe.Just(newQueryParams))))(function () {
                                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                            });
                        });
                    });
                };
                throw new Error("Failed pattern match at Page.Plotdata (line 179, column 16 - line 220, column 16): " + [ v.constructor.name ]);
            };
        };
    };
};
var fromNumber = function ($63) {
    return Data_Either.either(Data_Function["const"]("N/A"))(Control_Category.identity(Control_Category.categoryFn))(Data_Formatter_Number.formatNumber("0.00")($63));
};
var measurementalTable = function (measValues) {
    var tableRow = function (v) {
        var datetime = Utils.asiaTokyoDateTime(Data_Newtype.unwrap(Api.newtypeMeasDateTime)(v.measured_at));
        return Halogen_HTML_Elements.tr_([ Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text(Data_Maybe.fromMaybe("N/A")(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
            return v2.date;
        })(datetime))) ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text(Data_Maybe.fromMaybe("N/A")(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
            return v2.time;
        })(datetime))) ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text(fromNumber(v.degc)) ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text(fromNumber(v.hpa)) ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text(fromNumber(v.rh)) ]) ]);
    };
    var heading = [ Halogen_HTML_Elements.tr_([ Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text("\u65e5\u4ed8") ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text("\u6642\u523b") ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text("\u6e29\u5ea6") ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text("\u6c17\u5727") ]), Halogen_HTML_Elements.td_([ Halogen_HTML_Core.text("\u6e7f\u5ea6") ]) ]) ];
    return Halogen_HTML_Elements.table([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.table) ])([ Halogen_HTML_Elements.thead_(heading), Halogen_HTML_Elements.tbody_(Data_Functor.map(Data_Functor.functorArray)(tableRow)(measValues)) ]);
};
var chartLabels = function (values) {
    var showDateTime = function (x) {
        return x.date + (" " + x.time);
    };
    var measDateTime = function ($64) {
        return (function (v) {
            return v.measured_at;
        })(Data_Newtype.unwrap(Api.newtypeMeasEnvironment)($64));
    };
    var localDateTime = function ($65) {
        return Utils.asiaTokyoDateTime(Data_Newtype.unwrap(Api.newtypeMeasDateTime)($65));
    };
    return Data_Functor.map(Data_Functor.functorArray)(function ($66) {
        return Data_Maybe.maybe("N/A")(showDateTime)(localDateTime(measDateTime($66)));
    })(values);
};
var chartDatasets = function (values) {
    var labels = chartLabels(values);
    var dRh = {
        label: "\u76f8\u5bfe\u6e7f\u5ea6[\uff05]",
        data: Data_Functor.map(Data_Functor.functorArray)(function ($67) {
            return (function (v) {
                return v.rh;
            })(Data_Newtype.unwrap(Api.newtypeMeasEnvironment)($67));
        })(values),
        backgroundColor: [ "rgba(0, 99, 200, 0.2)" ],
        borderColor: [ "rgba(0, 99, 200, 1)" ],
        borderWidth: 1
    };
    var dHpa = {
        label: "\u6c17\u5727[hpa]",
        data: Data_Functor.map(Data_Functor.functorArray)(function ($68) {
            return (function (v) {
                return v.hpa;
            })(Data_Newtype.unwrap(Api.newtypeMeasEnvironment)($68));
        })(values),
        backgroundColor: [ "rgba(99, 200, 0, 0.2)" ],
        borderColor: [ "rgba(99, 200, 0, 1)" ],
        borderWidth: 1
    };
    var dDegc = {
        label: "\u6c17\u6e29[\u2103]",
        data: Data_Functor.map(Data_Functor.functorArray)(function ($69) {
            return (function (v) {
                return v.degc;
            })(Data_Newtype.unwrap(Api.newtypeMeasEnvironment)($69));
        })(values),
        backgroundColor: [ "rgba(255, 99, 132, 0.2)" ],
        borderColor: [ "rgba(255, 99, 132, 1)" ],
        borderWidth: 1
    };
    return {
        degc: {
            labels: labels,
            datasets: [ dDegc ]
        },
        hpa: {
            labels: labels,
            datasets: [ dHpa ]
        },
        rh: {
            labels: labels,
            datasets: [ dRh ]
        }
    };
};
var card = function (id_) {
    return function (class_) {
        return function (header) {
            return function (body) {
                return Halogen_HTML_Elements.article([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.card) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.cardHeader), Halogen_HTML_Properties.attr("data-toggle")("collapse"), Halogen_HTML_Properties.attr("data-target")("#" + id_), Halogen_HTML_Properties.attr("aria-expanded")("true"), Halogen_HTML_Properties.attr("aria-controls")(id_) ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.ml0) ])([ Halogen_HTML_Core.text(header) ]), Halogen_HTML_Elements.span([ Halogen_HTML_CSS.style(CSS_Geometry.marginLeft(CSS_Size.rem(1.0))) ])([  ]), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.textRight) ])([ Page_Commons.icon("fas fa-chevron-down") ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_Themes_Bootstrap4.cardBody, Halogen_Themes_Bootstrap4.collapse ])(class_)), Halogen_HTML_CSS.style(CSS_Geometry.height(CSS_Size.vh(90.0))), Halogen_HTML_Properties.id_(id_), Halogen_HTML_Properties.attr("aria-labelledby")(id_), Halogen_HTML_Properties.attr("data-parent")("#" + id_) ])(body) ]);
            };
        };
    };
};
var _cTemperature = Data_Symbol.SProxy.value;
var _cPressure = Data_Symbol.SProxy.value;
var _cHum = Data_Symbol.SProxy.value;
var render = function (dictMonadAff) {
    return function (state) {
        var chartdatasets = chartDatasets(state.measValues);
        var humChartData = {
            canvasId: idChartArea.hum,
            datasets: chartdatasets.rh,
            options: Foreign_ChartJs.defLineChartOptions
        };
        var pressChartData = {
            canvasId: idChartArea.press,
            datasets: chartdatasets.hpa,
            options: Foreign_ChartJs.defLineChartOptions
        };
        var tempChartData = {
            canvasId: idChartArea.temp,
            datasets: chartdatasets.degc,
            options: Foreign_ChartJs.defLineChartOptions
        };
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("wrapper") ])([ Page_Commons.navbar(NavigateTo.create)(new Route.Plotdata(Data_Maybe.Nothing.value)), Halogen_HTML_Elements.main([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.container) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.alert, Halogen_Themes_Bootstrap4.alertInfo ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.formGroup) ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.alertHeading) ])([ Halogen_HTML_Core.text("\u8868\u793a\u6570"), Halogen_HTML_Elements.span([ Halogen_HTML_CSS.style(CSS_Geometry.marginLeft(CSS_Size.rem(1.0))) ])([  ]), (function () {
            if (state.queryParams.limits instanceof Data_Maybe.Nothing) {
                return Halogen_HTML_Core.text("--");
            };
            if (state.queryParams.limits instanceof Data_Maybe.Just) {
                return Halogen_HTML_Core.text(Data_Int.toStringAs(Data_Int.decimal)(state.queryParams.limits.value0));
            };
            throw new Error("Failed pattern match at Page.Plotdata (line 149, column 15 - line 151, column 65): " + [ state.queryParams.limits.constructor.name ]);
        })() ]), Halogen_HTML_Elements.input([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.customRange), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputRange.value), Halogen_HTML_Properties.attr("min")("10"), Halogen_HTML_Properties.attr("max")("1000"), Halogen_HTML_Properties.attr("step")("10"), Halogen_HTML_Events.onValueInput(function (x) {
            return Data_Maybe.Just.create(new OnInputRecordsLimit(x));
        }) ]) ]) ]), card("temp")([  ])("\u6c17\u6e29")([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "cTemperature";
        }))(Data_Ord.ordUnit)(_cTemperature)(Data_Unit.unit)(Component_LineChart.component(dictMonadAff))(tempChartData)(Data_Void.absurd) ]), card("pres")([  ])("\u6c17\u5727")([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "cPressure";
        }))(Data_Ord.ordUnit)(_cPressure)(Data_Unit.unit)(Component_LineChart.component(dictMonadAff))(pressChartData)(Data_Void.absurd) ]), card("humi")([  ])("\u76f8\u5bfe\u6e7f\u5ea6")([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "cHum";
        }))(Data_Ord.ordUnit)(_cHum)(Data_Unit.unit)(Component_LineChart.component(dictMonadAff))(humChartData)(Data_Void.absurd) ]), card("meas")([  ])("\u6e2c\u5b9a\u5024")([ measurementalTable(state.measValues) ]) ]), Page_Commons.footer ]);
    };
};
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return Halogen_Component.mkComponent({
                initialState: initialState,
                render: render(dictMonadAff),
                "eval": Halogen_Component.mkEval({
                    handleAction: handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible),
                    handleQuery: Halogen_Component.defaultEval.handleQuery,
                    receive: Halogen_Component.defaultEval.receive,
                    initialize: new Data_Maybe.Just(Initialize.value),
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
module.exports = {
    component: component
};

},{"../Api/index.js":12,"../AppM/index.js":13,"../CSS.Geometry/index.js":15,"../CSS.Size/index.js":19,"../Component.LineChart/index.js":23,"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Monad.State.Class/index.js":58,"../DOM.HTML.Indexed.InputType/index.js":77,"../Data.Either/index.js":129,"../Data.Formatter.Number/index.js":143,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Data.Unit/index.js":266,"../Data.Void/index.js":270,"../Effect.Aff.Class/index.js":274,"../Effect.Class/index.js":279,"../Effect.Console/index.js":281,"../Foreign.ChartJs/index.js":298,"../Halogen.Component/index.js":337,"../Halogen.HTML.CSS/index.js":340,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.HTML/index.js":345,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Themes.Bootstrap4/index.js":352,"../Page.Commons/index.js":372,"../Route/index.js":388,"../Utils/index.js":408}],376:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Api = require("../Api/index.js");
var AppM = require("../AppM/index.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var DOM_HTML_Indexed_FormMethod = require("../DOM.HTML.Indexed.FormMethod/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Themes_Bootstrap4 = require("../Halogen.Themes.Bootstrap4/index.js");
var Page_Commons = require("../Page.Commons/index.js");
var Route = require("../Route/index.js");
var Utils = require("../Utils/index.js");
var NavigateTo = (function () {
    function NavigateTo(value0) {
        this.value0 = value0;
    };
    NavigateTo.create = function (value0) {
        return new NavigateTo(value0);
    };
    return NavigateTo;
})();
var Initialize = (function () {
    function Initialize() {

    };
    Initialize.value = new Initialize();
    return Initialize;
})();
var OnClickI2CDetect = (function () {
    function OnClickI2CDetect() {

    };
    OnClickI2CDetect.value = new OnClickI2CDetect();
    return OnClickI2CDetect;
})();
var uploadCsvFile = function (state) {
    return Halogen_HTML_Elements.form([ Halogen_HTML_Properties.method(DOM_HTML_Indexed_FormMethod.POST.value), Halogen_HTML_Properties.action(state.urlApiV1IRCSV), Halogen_HTML_Properties.enctype("multipart/form-data") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.formGroup ]) ])([ Halogen_HTML_Elements.input([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnPrimary ]), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputSubmit.value), Halogen_HTML_Properties.value("Submit") ]) ]) ]);
};
var toHexS = Data_Int.toStringAs(Data_Int.hexadecimal);
var tableRow = function (index) {
    return function (columns) {
        var tl = (function () {
            var f = function ($39) {
                return Halogen_HTML_Elements.td_(Data_Array.singleton(Halogen_HTML_Core.text($39)));
            };
            return Data_Functor.map(Data_Functor.functorArray)(f)(columns);
        })();
        var hd = Halogen_HTML_Elements.th_([ Halogen_HTML_Core.text(toHexS(index)) ]);
        return Halogen_HTML_Elements.tr_(Data_Array.cons(hd)(tl));
    };
};
var tableHeading = function (range) {
    var tl = (function () {
        var f = function ($40) {
            return Halogen_HTML_Elements.th_(Data_Array.singleton(Halogen_HTML_Core.text(toHexS($40))));
        };
        return Data_Functor.map(Data_Functor.functorArray)(f)(range);
    })();
    var hd = Halogen_HTML_Elements.th_([ Halogen_HTML_Core.text("#") ]);
    return Halogen_HTML_Elements.thead_([ Halogen_HTML_Elements.tr_(Data_Array.cons(hd)(tl)) ]);
};
var tableBody = function (range) {
    return function (array2D) {
        return Halogen_HTML_Elements.tbody_(Data_Array.zipWith(tableRow)(range)(array2D));
    };
};
var initialState = function (v) {
    return {
        urlApiV1IRCSV: "",
        detectedAddresses: Data_Maybe.Nothing.value
    };
};
var i2cDevices = (function () {
    var devices = function (xs) {
        var f = function (n) {
            return new Data_Tuple.Tuple(n, toHexS(n));
        };
        return Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(f)(xs));
    };
    var cellFiller = function (addr) {
        if (Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
            return v === addr;
        })(Data_Array.range(3)(119))) {
            return "\u2022";
        };
        if (Data_Boolean.otherwise) {
            return " ";
        };
        throw new Error("Failed pattern match at Page.Settings (line 204, column 3 - line 204, column 30): " + [ addr.constructor.name ]);
    };
    var addressTableRangeRowHeading = Data_Functor.map(Data_Functor.functorArray)(function (v) {
        return v * 16 | 0;
    })(Data_Array.range(0)(15));
    var addressTableRangeHeading = Data_Array.range(0)(15);
    var addressTableRange = Data_Array.range(0)(127);
    var detectedDevAddresses = function (addresses) {
        var f = function (x) {
            return Data_Maybe.fromMaybe(cellFiller(x))(Data_Map_Internal.lookup(Data_Ord.ordInt)(x)(devices(addresses)));
        };
        return Data_Functor.map(Data_Functor.functorArray)(f)(addressTableRange);
    };
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.alert, Halogen_Themes_Bootstrap4.alertInfo ]) ])([ Halogen_HTML_Core.text("Click Search button to detect devices.") ]);
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
            return Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.alert, Halogen_Themes_Bootstrap4.alertDanger, Halogen_Themes_Bootstrap4.textCenter ]) ])([ Halogen_HTML_Core.text(v.value0.value0) ]);
        };
        if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
            return Halogen_HTML_Elements.p([  ])([ Halogen_HTML_Elements.table([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.table, Halogen_Themes_Bootstrap4.tableHover ]) ])([ Halogen_HTML_Elements.caption_([ Halogen_HTML_Core.text("Hexadecimal addresses") ]), tableHeading(addressTableRangeHeading), tableBody(addressTableRangeRowHeading)(Utils.toArrayArray(16)(detectedDevAddresses(v.value0.value0))) ]) ]);
        };
        throw new Error("Failed pattern match at Page.Settings (line 164, column 14 - line 185, column 8): " + [ v.constructor.name ]);
    };
})();
var i2cDetectButton = function (action) {
    return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.btn, Halogen_Themes_Bootstrap4.btnOutlineSuccess, Halogen_Themes_Bootstrap4.justifyContentCenter ]), Halogen_HTML_Events.onClick(function (v) {
        return new Data_Maybe.Just(action);
    }), Halogen_HTML_CSS.style(CSS_Geometry.marginLeft(CSS_Size.px(31.0))) ])([ Page_Commons.icon("fas fa-search") ]);
};
var i2c = Halogen_HTML_Elements.span_([ Halogen_HTML_Core.text("I"), Halogen_HTML_Elements.sup_([ Halogen_HTML_Core.text("2") ]), Halogen_HTML_Core.text("C") ]);
var render = function (state) {
    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("wrapper") ])([ Page_Commons.navbar(NavigateTo.create)(Route.Settings.value), Halogen_HTML_Elements.main([ Halogen_HTML_Properties.classes([ Halogen_Themes_Bootstrap4.mbAuto, Halogen_Themes_Bootstrap4.container ]) ])([ Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.h2) ])([ i2c, Halogen_HTML_Core.text(" devices"), i2cDetectButton(OnClickI2CDetect.value) ]), i2cDevices(state.detectedAddresses), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_Themes_Bootstrap4.h2) ])([ Halogen_HTML_Core.text("Upload to Infrared Code Database") ]), uploadCsvFile(state) ]), Page_Commons.footer ]);
};
var handleAction = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return function (v) {
                if (v instanceof NavigateTo) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(AppM.navigate(AppM.navigateHalogenM(dictNavigate))(v.value0))(function () {
                        return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                    });
                };
                if (v instanceof Initialize) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                            var $29 = {};
                            for (var $30 in v2) {
                                if ({}.hasOwnProperty.call(v2, $30)) {
                                    $29[$30] = v2[$30];
                                };
                            };
                            $29.urlApiV1IRCSV = Api.urlApiV1Ircsv(v1);
                            return $29;
                        }))(function () {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                        });
                    });
                };
                if (v instanceof OnClickI2CDetect) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiBaseURL(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(AppM.getApiTimeout(AppM.hasApiAccessibleHalogenM(dictHasApiAccessible)))(function (v2) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))((function () {
                                var timeout = Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(v2))(new Data_Either.Left("\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e\u5fdc\u7b54\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f"));
                                var param = {
                                    baseurl: v1,
                                    busnumber: new Data_Maybe.Just(1)
                                };
                                var request = Api.getApiV1I2cDevices(param);
                                var i2cdevices = function (v3) {
                                    return v3.data;
                                };
                                var response = Data_Bifunctor.rmap(Data_Either.bifunctorEither)(function (x) {
                                    return i2cdevices(x.body);
                                });
                                return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.map(Effect_Aff.functorAff)(response)(request)))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(timeout)));
                            })()))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                    var $36 = {};
                                    for (var $37 in st) {
                                        if ({}.hasOwnProperty.call(st, $37)) {
                                            $36[$37] = st[$37];
                                        };
                                    };
                                    $36.detectedAddresses = new Data_Maybe.Just(v3);
                                    return $36;
                                }))(function () {
                                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
                                });
                            });
                        });
                    });
                };
                throw new Error("Failed pattern match at Page.Settings (line 118, column 16 - line 140, column 18): " + [ v.constructor.name ]);
            };
        };
    };
};
var fromHexS = Data_Int.fromStringAs(Data_Int.hexadecimal);
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictHasApiAccessible) {
            return Halogen_Component.mkComponent({
                initialState: initialState,
                render: render,
                "eval": Halogen_Component.mkEval({
                    handleAction: handleAction(dictMonadAff)(dictNavigate)(dictHasApiAccessible),
                    handleQuery: Halogen_Component.defaultEval.handleQuery,
                    receive: Halogen_Component.defaultEval.receive,
                    initialize: new Data_Maybe.Just(Initialize.value),
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
module.exports = {
    component: component
};

},{"../Api/index.js":12,"../AppM/index.js":13,"../CSS.Geometry/index.js":15,"../CSS.Size/index.js":19,"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Control.Parallel.Class/index.js":68,"../DOM.HTML.Indexed.FormMethod/index.js":75,"../DOM.HTML.Indexed.InputType/index.js":77,"../Data.Array/index.js":98,"../Data.Bifunctor/index.js":105,"../Data.Boolean/index.js":107,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Int/index.js":168,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Tuple/index.js":260,"../Effect.Aff.Class/index.js":274,"../Effect.Aff/index.js":277,"../Halogen.Component/index.js":337,"../Halogen.HTML.CSS/index.js":340,"../Halogen.HTML.Core/index.js":341,"../Halogen.HTML.Elements/index.js":342,"../Halogen.HTML.Events/index.js":343,"../Halogen.HTML.Properties/index.js":344,"../Halogen.Query.HalogenM/index.js":348,"../Halogen.Themes.Bootstrap4/index.js":352,"../Page.Commons/index.js":372,"../Route/index.js":388,"../Utils/index.js":408}],377:[function(require,module,exports){
"use strict";

// module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};

},{}],378:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Partial = require("../Partial/index.js");
var unsafePartialBecause = function (v) {
    return function (x) {
        return $foreign.unsafePartial(function (dictPartial) {
            return x(dictPartial);
        });
    };
};
var unsafeCrashWith = function (msg) {
    return $foreign.unsafePartial(function (dictPartial) {
        return Partial.crashWith(dictPartial)(msg);
    });
};
module.exports = {
    unsafePartialBecause: unsafePartialBecause,
    unsafeCrashWith: unsafeCrashWith,
    unsafePartial: $foreign.unsafePartial
};

},{"../Partial/index.js":380,"./foreign.js":377}],379:[function(require,module,exports){
"use strict";

// module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};

},{}],380:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var crash = function (dictPartial) {
    return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
};
module.exports = {
    crash: crash,
    crashWith: $foreign.crashWith
};

},{"./foreign.js":379}],381:[function(require,module,exports){
"use strict";

exports.copyRecord = function(rec) {
  var copy = {};
  for (var key in rec) {
    if ({}.hasOwnProperty.call(rec, key)) {
      copy[key] = rec[key];
    }
  }
  return copy;
};

exports.unsafeInsert = function(l) {
  return function(a) {
    return function(rec) {
      rec[l] = a;
      return rec;
    };
  };
};

exports.unsafeModify = function(l) {
  return function (f) {
    return function(rec) {
      rec[l] = f(rec[l]);
      return rec;
    };
  };
};

exports.unsafeDelete = function(l) {
  return function(rec) {
    delete rec[l];
    return rec;
  };
};

exports.unsafeRename = function(l1) {
  return function (l2) {
    return function (rec) {
      rec[l2] = rec[l1];
      delete rec[l1];
      return rec;
    };
  };
};

},{}],382:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Builder = function (x) {
    return x;
};
var union = function (dictUnion) {
    return function (r2) {
        return function (r1) {
            return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
        };
    };
};
var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (l1) {
                            return function (l2) {
                                return function (r1) {
                                    return $foreign.unsafeRename(Data_Symbol.reflectSymbol(dictIsSymbol)(l1))(Data_Symbol.reflectSymbol(dictIsSymbol1)(l2))(r1);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var modify = function (dictCons) {
    return function (dictCons1) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (f) {
                    return function (r1) {
                        return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                    };
                };
            };
        };
    };
};
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (r2) {
            return function (r1) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};
var insert = function (dictCons) {
    return function (dictLacks) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (a) {
                    return function (r1) {
                        return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                    };
                };
            };
        };
    };
};
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (r1) {
            return function (r2) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r2) {
                    return $foreign.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r2);
                };
            };
        };
    };
};
var categoryBuilder = Control_Category.categoryFn;
var build = function (v) {
    return function (r1) {
        return v($foreign.copyRecord(r1));
    };
};
module.exports = {
    build: build,
    insert: insert,
    modify: modify,
    "delete": $$delete,
    rename: rename,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    semigroupoidBuilder: semigroupoidBuilder,
    categoryBuilder: categoryBuilder
};

},{"../Control.Category/index.js":36,"../Control.Semigroupoid/index.js":71,"../Data.Symbol/index.js":250,"../Record.Unsafe.Union/index.js":384,"../Unsafe.Coerce/index.js":405,"./foreign.js":381}],383:[function(require,module,exports){
"use strict";

exports.unsafeUnionFn = function(r1, r2) {
  var copy = {};
  for (var k1 in r2) {
    if ({}.hasOwnProperty.call(r2, k1)) {
      copy[k1] = r2[k1];
    }
  }
  for (var k2 in r1) {
    if ({}.hasOwnProperty.call(r1, k2)) {
      copy[k2] = r1[k2];
    }
  }
  return copy;
};

},{}],384:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
module.exports = {
    unsafeUnion: unsafeUnion,
    unsafeUnionFn: $foreign.unsafeUnionFn
};

},{"../Data.Function.Uncurried/index.js":148,"./foreign.js":383}],385:[function(require,module,exports){
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
};

},{}],386:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeHas: $foreign.unsafeHas,
    unsafeGet: $foreign.unsafeGet,
    unsafeSet: $foreign.unsafeSet,
    unsafeDelete: $foreign.unsafeDelete
};

},{"./foreign.js":385}],387:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var EqualFields = function (equalFields) {
    this.equalFields = equalFields;
};
var union = function (dictUnion) {
    return function (l) {
        return function (r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
        };
    };
};
var set = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (b) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                    };
                };
            };
        };
    };
};
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var insert = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (a) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                    };
                };
            };
        };
    };
};
var get = function (dictIsSymbol) {
    return function (dictCons) {
        return function (l) {
            return function (r) {
                return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
            };
        };
    };
};
var modify = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (f) {
                    return function (r) {
                        return set(dictIsSymbol)(dictCons)(dictCons1)(l)(f(get(dictIsSymbol)(dictCons)(l)(r)))(r);
                    };
                };
            };
        };
    };
};
var equalFieldsNil = new EqualFields(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var equalFields = function (dict) {
    return dict.equalFields;
};
var equalFieldsCons = function (dictIsSymbol) {
    return function (dictEq) {
        return function (dictCons) {
            return function (dictEqualFields) {
                return new EqualFields(function (v) {
                    return function (a) {
                        return function (b) {
                            var get$prime = get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value);
                            var equalRest = equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value);
                            return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                        };
                    };
                });
            };
        };
    };
};
var equal = function (dictRowToList) {
    return function (dictEqualFields) {
        return function (a) {
            return function (b) {
                return equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value)(a)(b);
            };
        };
    };
};
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r) {
                    return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                };
            };
        };
    };
};
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (prev) {
                            return function (next) {
                                return function (record) {
                                    return insert(dictIsSymbol1)(dictLacks1)(dictCons1)(next)(get(dictIsSymbol)(dictCons)(prev)(record))($$delete(dictIsSymbol)(dictLacks)(dictCons)(prev)(record));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    get: get,
    set: set,
    modify: modify,
    insert: insert,
    "delete": $$delete,
    rename: rename,
    equal: equal,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    EqualFields: EqualFields,
    equalFields: equalFields,
    equalFieldsCons: equalFieldsCons,
    equalFieldsNil: equalFieldsNil
};

},{"../Data.Eq/index.js":133,"../Data.Symbol/index.js":250,"../Record.Unsafe.Union/index.js":384,"../Record.Unsafe/index.js":386,"../Type.Data.RowList/index.js":401,"../Unsafe.Coerce/index.js":405}],388:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect = require("../Effect/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Routing_Match = require("../Routing.Match/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Location = require("../Web.HTML.Location/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Home = (function () {
    function Home() {

    };
    Home.value = new Home();
    return Home;
})();
var Plotdata = (function () {
    function Plotdata(value0) {
        this.value0 = value0;
    };
    Plotdata.create = function (value0) {
        return new Plotdata(value0);
    };
    return Plotdata;
})();
var Infrared = (function () {
    function Infrared(value0) {
        this.value0 = value0;
    };
    Infrared.create = function (value0) {
        return new Infrared(value0);
    };
    return Infrared;
})();
var Settings = (function () {
    function Settings() {

    };
    Settings.value = new Settings();
    return Settings;
})();
var About = (function () {
    function About() {

    };
    About.value = new About();
    return About;
})();
var routing = (function () {
    var toPlotdataParams = function (str) {
        return new Data_Maybe.Just({
            limits: Data_Int.fromString(str)
        });
    };
    var toIrParams = function (kvsets) {
        return new Data_Maybe.Just({
            tab: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Map_Internal.lookup(Data_Ord.ordString)("tab")(kvsets)),
            bitorder: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Map_Internal.lookup(Data_Ord.ordString)("bitorder")(kvsets)),
            manuf: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Map_Internal.lookup(Data_Ord.ordString)("manuf")(kvsets)),
            limits: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Map_Internal.lookup(Data_Ord.ordString)("limits")(kvsets)),
            page: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Map_Internal.lookup(Data_Ord.ordString)("page")(kvsets))
        });
    };
    return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Routing_Match.matchPlus)([ Data_Functor.voidRight(Routing_Match.matchFunctor)(Home.value)(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.end)), Control_Apply.apply(Routing_Match.matchApply)(Data_Functor.voidRight(Routing_Match.matchFunctor)(function ($58) {
        return Plotdata.create(toPlotdataParams($58));
    })(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("plotdata"))))(Routing_Match.param("limits")), Data_Functor.voidRight(Routing_Match.matchFunctor)(new Plotdata(Data_Maybe.Nothing.value))(Control_Apply.applySecond(Routing_Match.matchApply)(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("plotdata")))(Routing_Match.end)), Control_Apply.apply(Routing_Match.matchApply)(Data_Functor.voidRight(Routing_Match.matchFunctor)(function ($59) {
        return Infrared.create(toIrParams($59));
    })(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("infra-red"))))(Routing_Match.params), Data_Functor.voidRight(Routing_Match.matchFunctor)(new Infrared(Data_Maybe.Nothing.value))(Control_Apply.applySecond(Routing_Match.matchApply)(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("infra-red")))(Routing_Match.end)), Data_Functor.voidRight(Routing_Match.matchFunctor)(Settings.value)(Control_Apply.applySecond(Routing_Match.matchApply)(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("settings")))(Routing_Match.end)), Data_Functor.voidRight(Routing_Match.matchFunctor)(About.value)(Control_Apply.applySecond(Routing_Match.matchApply)(Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match.root)(Routing_Match.lit("about")))(Routing_Match.end)) ]);
})();
var routeToString = function (v) {
    if (v instanceof Home) {
        return "Home";
    };
    if (v instanceof Plotdata) {
        return "Plotdata";
    };
    if (v instanceof Infrared) {
        return "Infra-red";
    };
    if (v instanceof Settings) {
        return "Settings";
    };
    if (v instanceof About) {
        return "About";
    };
    throw new Error("Failed pattern match at Route (line 103, column 17 - line 110, column 1): " + [ v.constructor.name ]);
};
var routeToPathQuery = function (route) {
    return "/" + (function () {
        if (route instanceof Home) {
            return "";
        };
        if (route instanceof Plotdata && route.value0 instanceof Data_Maybe.Nothing) {
            return "plotdata";
        };
        if (route instanceof Plotdata && route.value0 instanceof Data_Maybe.Just) {
            return "plotdata" + (function (v) {
                if (v === "") {
                    return "";
                };
                return "?" + v;
            })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("&")(Data_Array.catMaybes([ Data_Functor.map(Data_Maybe.functorMaybe)(function ($60) {
                return (function (v) {
                    return "limits=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($60));
            })(route.value0.value0.limits) ])));
        };
        if (route instanceof Infrared && route.value0 instanceof Data_Maybe.Nothing) {
            return "infra-red";
        };
        if (route instanceof Infrared && route.value0 instanceof Data_Maybe.Just) {
            return "infra-red" + (function (v) {
                if (v === "") {
                    return "";
                };
                return "?" + v;
            })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("&")(Data_Array.catMaybes([ Data_Functor.map(Data_Maybe.functorMaybe)(function ($61) {
                return (function (v) {
                    return "tab=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($61));
            })(route.value0.value0.tab), Data_Functor.map(Data_Maybe.functorMaybe)(function ($62) {
                return (function (v) {
                    return "bitorder=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($62));
            })(route.value0.value0.bitorder), Data_Functor.map(Data_Maybe.functorMaybe)(function ($63) {
                return (function (v) {
                    return "manuf=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($63));
            })(route.value0.value0.manuf), Data_Functor.map(Data_Maybe.functorMaybe)(function ($64) {
                return (function (v) {
                    return "limits=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($64));
            })(route.value0.value0.limits), Data_Functor.map(Data_Maybe.functorMaybe)(function ($65) {
                return (function (v) {
                    return "page=" + v;
                })(Data_Int.toStringAs(Data_Int.decimal)($65));
            })(route.value0.value0.page) ])));
        };
        if (route instanceof Settings) {
            return "settings";
        };
        if (route instanceof About) {
            return "about";
        };
        throw new Error("Failed pattern match at Route (line 113, column 10 - line 144, column 1): " + [ route.constructor.name ]);
    })();
};
var redirectToRoot = function __do() {
    var loc = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.location)();
    var v = Web_HTML_Location.origin(loc)();
    return Web_HTML_Location.setHref(v + "/")(loc)();
};
var redirectTo = function (route) {
    return function __do() {
        var loc = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.location)();
        var v = Web_HTML_Location.origin(loc)();
        return Web_HTML_Location.setHref(v + routeToPathQuery(route))(loc)();
    };
};
var locationReplace = function (route) {
    return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.location))(Web_HTML_Location.replace(routeToPathQuery(route)));
};
var href = function (targetRoute) {
    return Halogen_HTML_Properties.href(routeToPathQuery(targetRoute));
};
var genericRoute = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Home) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Plotdata) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof Infrared) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof Settings) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
    };
    if (x instanceof About) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))));
    };
    throw new Error("Failed pattern match at Route (line 53, column 8 - line 53, column 48): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return Home.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Plotdata(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Infrared(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return Settings.value;
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
        return About.value;
    };
    throw new Error("Failed pattern match at Route (line 53, column 8 - line 53, column 48): " + [ x.constructor.name ]);
});
var showRoute = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRoute)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Home";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "limits";
}))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt))))))(new Data_Symbol.IsSymbol(function () {
    return "Plotdata";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "bitorder";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "limits";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "manuf";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "page";
}))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
    return "tab";
}))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showInt))))))(new Data_Symbol.IsSymbol(function () {
    return "Infrared";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "Settings";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
    return "About";
}))))))));
var eqRoute = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Home && y instanceof Home) {
            return true;
        };
        if (x instanceof Plotdata && y instanceof Plotdata) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "limits";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))))(x.value0)(y.value0);
        };
        if (x instanceof Infrared && y instanceof Infrared) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "tab";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
                return "page";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
                return "manuf";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
                return "limits";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
                return "bitorder";
            }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))))(x.value0)(y.value0);
        };
        if (x instanceof Settings && y instanceof Settings) {
            return true;
        };
        if (x instanceof About && y instanceof About) {
            return true;
        };
        return false;
    };
});
module.exports = {
    Home: Home,
    Plotdata: Plotdata,
    Infrared: Infrared,
    Settings: Settings,
    About: About,
    href: href,
    locationReplace: locationReplace,
    redirectTo: redirectTo,
    redirectToRoot: redirectToRoot,
    routeToPathQuery: routeToPathQuery,
    routeToString: routeToString,
    routing: routing,
    genericRoute: genericRoute,
    eqRoute: eqRoute,
    showRoute: showRoute
};

},{"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Generic.Rep.Show/index.js":161,"../Data.Generic.Rep/index.js":162,"../Data.Int/index.js":168,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Monoid/index.js":206,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Data.Symbol/index.js":250,"../Effect/index.js":294,"../Halogen.HTML.Properties/index.js":344,"../Routing.Match/index.js":390,"../Web.HTML.Location/index.js":443,"../Web.HTML.Window/index.js":446,"../Web.HTML/index.js":448}],389:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var UnexpectedPath = (function () {
    function UnexpectedPath(value0) {
        this.value0 = value0;
    };
    UnexpectedPath.create = function (value0) {
        return new UnexpectedPath(value0);
    };
    return UnexpectedPath;
})();
var ExpectedBoolean = (function () {
    function ExpectedBoolean() {

    };
    ExpectedBoolean.value = new ExpectedBoolean();
    return ExpectedBoolean;
})();
var ExpectedEnd = (function () {
    function ExpectedEnd() {

    };
    ExpectedEnd.value = new ExpectedEnd();
    return ExpectedEnd;
})();
var ExpectedNumber = (function () {
    function ExpectedNumber() {

    };
    ExpectedNumber.value = new ExpectedNumber();
    return ExpectedNumber;
})();
var ExpectedInt = (function () {
    function ExpectedInt() {

    };
    ExpectedInt.value = new ExpectedInt();
    return ExpectedInt;
})();
var ExpectedString = (function () {
    function ExpectedString() {

    };
    ExpectedString.value = new ExpectedString();
    return ExpectedString;
})();
var ExpectedQuery = (function () {
    function ExpectedQuery() {

    };
    ExpectedQuery.value = new ExpectedQuery();
    return ExpectedQuery;
})();
var ExpectedPathPart = (function () {
    function ExpectedPathPart() {

    };
    ExpectedPathPart.value = new ExpectedPathPart();
    return ExpectedPathPart;
})();
var KeyNotFound = (function () {
    function KeyNotFound(value0) {
        this.value0 = value0;
    };
    KeyNotFound.create = function (value0) {
        return new KeyNotFound(value0);
    };
    return KeyNotFound;
})();
var Fail = (function () {
    function Fail(value0) {
        this.value0 = value0;
    };
    Fail.create = function (value0) {
        return new Fail(value0);
    };
    return Fail;
})();
var showMatchError = function (err) {
    if (err instanceof UnexpectedPath) {
        return "expected path part: " + err.value0;
    };
    if (err instanceof KeyNotFound) {
        return "key: " + (err.value0 + " has not found in query part");
    };
    if (err instanceof ExpectedQuery) {
        return "expected query - found path";
    };
    if (err instanceof ExpectedNumber) {
        return "expected number";
    };
    if (err instanceof ExpectedInt) {
        return "expected int";
    };
    if (err instanceof ExpectedBoolean) {
        return "expected boolean";
    };
    if (err instanceof ExpectedEnd) {
        return "expected end";
    };
    if (err instanceof ExpectedString) {
        return "expected string var";
    };
    if (err instanceof ExpectedPathPart) {
        return "expected path part, found query";
    };
    if (err instanceof Fail) {
        return "match error: " + err.value0;
    };
    throw new Error("Failed pattern match at Routing.Match.Error (line 29, column 3 - line 39, column 36): " + [ err.constructor.name ]);
};
module.exports = {
    UnexpectedPath: UnexpectedPath,
    ExpectedBoolean: ExpectedBoolean,
    ExpectedEnd: ExpectedEnd,
    ExpectedNumber: ExpectedNumber,
    ExpectedInt: ExpectedInt,
    ExpectedString: ExpectedString,
    ExpectedQuery: ExpectedQuery,
    ExpectedPathPart: ExpectedPathPart,
    KeyNotFound: KeyNotFound,
    Fail: Fail,
    showMatchError: showMatchError
};

},{}],390:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Semiring_Free = require("../Data.Semiring.Free/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Validation_Semiring = require("../Data.Validation.Semiring/index.js");
var Global = require("../Global/index.js");
var Routing_Match_Error = require("../Routing.Match.Error/index.js");
var Routing_Types = require("../Routing.Types/index.js");
var Match = function (x) {
    return x;
};
var str = function (route) {
    if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedString.value));
};
var runMatch = function (v) {
    return function (route) {
        var foldErrors = function (errs) {
            return Data_Either.Left.create(Data_Foldable.foldl(Data_List_Types.foldableList)(function (b) {
                return function (a) {
                    return a + ("\x0a" + b);
                };
            })("")(Control_Bind.bind(Data_List_Types.bindList)(Data_Functor.map(Data_List_Types.functorList)(Data_List.reverse)(Data_Newtype.unwrap(Data_Semiring_Free.newtypeFree)(errs)))(function (v1) {
                return Control_Applicative.pure(Data_List_Types.applicativeList)(Data_Foldable.foldl(Data_List_Types.foldableList)(function (b) {
                    return function (a) {
                        return a + (";" + b);
                    };
                })("")(Data_Functor.map(Data_List_Types.functorList)(Routing_Match_Error.showMatchError)(v1)));
            })));
        };
        return Data_Validation_Semiring.unV(foldErrors)(function ($90) {
            return Data_Either.Right.create(Data_Tuple.snd($90));
        })(v(route));
    };
};
var params = function (route) {
    if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Query) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
};
var param = function (key) {
    return function (route) {
        if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Query) {
            var v = Data_Map_Internal.lookup(Data_Ord.ordString)(key)(route.value0.value0);
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.KeyNotFound(key)));
            };
            if (v instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(new Data_List_Types.Cons(Routing_Types.Query.create(Data_Map_Internal["delete"](Data_Ord.ordString)(key)(route.value0.value0)), route.value1), v.value0));
            };
            throw new Error("Failed pattern match at Routing.Match (line 121, column 7 - line 125, column 67): " + [ v.constructor.name ]);
        };
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
    };
};
var optionalMatch = function (v) {
    return function (route) {
        return Data_Validation_Semiring.unV(Data_Function["const"](Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route, Data_Maybe.Nothing.value))))(function ($91) {
            return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(Data_Functor.map(Data_Tuple.functorTuple)(Data_Maybe.Just.create)($91));
        })(v(route));
    };
};
var num = function (route) {
    if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
        var res = Global.readFloat(route.value0.value0);
        var $38 = Global["isNaN"](res);
        if ($38) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
        };
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, res));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
};
var newtypeMatch = new Data_Newtype.Newtype(function (v) {
    return v;
}, Match);
var matchFunctor = new Data_Functor.Functor(function (fn) {
    return function (v) {
        return Match(function (r) {
            return Data_Validation_Semiring.unV(Data_Validation_Semiring.invalid)(function (v1) {
                return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v1.value0, fn(v1.value1)));
            })(v(r));
        });
    };
});
var matchApply = new Control_Apply.Apply(function () {
    return matchFunctor;
}, function (v) {
    return function (v1) {
        var processFnRes = function (v2) {
            return Data_Validation_Semiring.unV(Data_Validation_Semiring.invalid)(function (v3) {
                return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v3.value0, v2.value1(v3.value1)));
            })(v1(v2.value0));
        };
        var processFnErr = function (r) {
            return function (err) {
                return Data_Validation_Semiring.invalid(Data_Semiring.mul(Data_Semiring_Free.semiringFree)(err)(Data_Validation_Semiring.unV(Control_Category.identity(Control_Category.categoryFn))(Data_Function["const"](Data_Semiring.one(Data_Semiring_Free.semiringFree)))(v1(r))));
            };
        };
        return Match(function (r) {
            return Data_Validation_Semiring.unV(processFnErr(r))(processFnRes)(v(r));
        });
    };
});
var matchApplicative = new Control_Applicative.Applicative(function () {
    return matchApply;
}, function (a) {
    return function (r) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(r, a));
    };
});
var matchAlt = new Control_Alt.Alt(function () {
    return matchFunctor;
}, function (v) {
    return function (v1) {
        return Match(function (r) {
            return Control_Alt.alt(Data_Validation_Semiring.altV(Data_Semiring_Free.semiringFree))(v(r))(v1(r));
        });
    };
});
var matchPlus = new Control_Plus.Plus(function () {
    return matchAlt;
}, Match(Data_Function["const"](Data_Validation_Semiring.invalid(Data_Semiring.one(Data_Semiring_Free.semiringFree)))));
var matchAlternative = new Control_Alternative.Alternative(function () {
    return matchApplicative;
}, function () {
    return matchPlus;
});
var lit = function (input) {
    return function (route) {
        if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === input)) {
            return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, Data_Unit.unit));
        };
        if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.UnexpectedPath(input)));
        };
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedPathPart.value));
    };
};
var root = lit("");
var list = function (v) {
    var go = function (accum) {
        return function (r) {
            return Data_Validation_Semiring.unV(Data_Function["const"](Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(r, Data_List.reverse(accum)))))(function (v1) {
                return go(new Data_List_Types.Cons(v1.value1, accum))(v1.value0);
            })(v(r));
        };
    };
    return Match(go(Data_List_Types.Nil.value));
};
var $$int = function (route) {
    if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
        var v = Data_Int.fromString(route.value0.value0);
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedInt.value));
        };
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, v.value0));
        };
        throw new Error("Failed pattern match at Routing.Match (line 88, column 29 - line 90, column 38): " + [ v.constructor.name ]);
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedInt.value));
};
var fail = function (msg) {
    return function (v) {
        return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.Fail(msg)));
    };
};
var end = function (route) {
    if (route instanceof Data_List_Types.Nil) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_Unit.unit));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedEnd.value));
};
var eitherMatch = function (v) {
    var runEither = function (v1) {
        if (v1.value1 instanceof Data_Either.Left) {
            return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.Fail("Nested check failed")));
        };
        if (v1.value1 instanceof Data_Either.Right) {
            return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v1.value0, v1.value1.value0));
        };
        throw new Error("Failed pattern match at Routing.Match (line 202, column 5 - line 204, column 39): " + [ v1.value1.constructor.name ]);
    };
    return Match(function (r) {
        return Data_Validation_Semiring.unV(Data_Validation_Semiring.invalid)(runEither)(v(r));
    });
};
var nonempty = eitherMatch(Data_Functor.map(matchFunctor)(function ($92) {
    return Data_Maybe.maybe(new Data_Either.Left("Empty string"))(Data_Either.Right.create)(Data_String_NonEmpty_Internal.fromString($92));
})(str));
var bool = function (route) {
    if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "true")) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, true));
    };
    if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "false")) {
        return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, false));
    };
    return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedBoolean.value));
};
module.exports = {
    Match: Match,
    root: root,
    lit: lit,
    num: num,
    "int": $$int,
    bool: bool,
    str: str,
    param: param,
    params: params,
    end: end,
    fail: fail,
    nonempty: nonempty,
    list: list,
    runMatch: runMatch,
    eitherMatch: eitherMatch,
    optionalMatch: optionalMatch,
    newtypeMatch: newtypeMatch,
    matchFunctor: matchFunctor,
    matchAlt: matchAlt,
    matchPlus: matchPlus,
    matchAlternative: matchAlternative,
    matchApply: matchApply,
    matchApplicative: matchApplicative
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Semiring.Free/index.js":231,"../Data.Semiring/index.js":233,"../Data.String.NonEmpty.Internal/index.js":242,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Data.Validation.Semiring/index.js":267,"../Global/index.js":330,"../Routing.Match.Error/index.js":389,"../Routing.Types/index.js":393}],391:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Routing_Types = require("../Routing.Types/index.js");
var parseQueryPart = function (decoder) {
    var part2tuple = function (input) {
        var keyVal = Data_Functor.map(Data_Functor.functorArray)(decoder)(Data_String_Common.split("=")(input));
        return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Array.length(keyVal) <= 2))(function () {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Array.head(keyVal)))(Data_Array.index(keyVal)(1));
        });
    };
    return function ($11) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(part2tuple)(Data_String_Common.split("&")($11)));
    };
};
var parse = function (decoder) {
    return function (hash) {
        var pathParts = function (str) {
            var parts = Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function ($12) {
                return Routing_Types.Path.create(decoder($12));
            })(Data_String_Common.split("/")(str)));
            var v = Data_List.unsnoc(parts);
            if (v instanceof Data_Maybe.Just && (v.value0.last instanceof Routing_Types.Path && v.value0.last.value0 === "")) {
                return v.value0.init;
            };
            return parts;
        };
        var v = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_String_CodePoints.splitAt)(hash))(Data_String_CodePoints.indexOf("?")(hash));
        if (v instanceof Data_Maybe.Just) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(pathParts(v.value0.before))(Data_Functor.map(Data_List_Types.functorList)(Routing_Types.Query.create)(Data_List.fromFoldable(Data_Foldable.foldableMaybe)(parseQueryPart(decoder)(Data_String_CodePoints.drop(1)(v.value0.after)))));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return pathParts(hash);
        };
        throw new Error("Failed pattern match at Routing.Parser (line 32, column 3 - line 37, column 21): " + [ v.constructor.name ]);
    };
};
module.exports = {
    parse: parse
};

},{"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.MonadZero/index.js":67,"../Data.Array/index.js":98,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Semigroup/index.js":230,"../Data.String.CodePoints/index.js":237,"../Data.String.Common/index.js":241,"../Data.Traversable/index.js":257,"../Data.Tuple/index.js":260,"../Routing.Types/index.js":393}],392:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Routing = require("../Routing/index.js");
var Web_DOM_Document = require("../Web.DOM.Document/index.js");
var Web_DOM_MutationObserver = require("../Web.DOM.MutationObserver/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_DOM_Text = require("../Web.DOM.Text/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Event_PopStateEvent_EventTypes = require("../Web.HTML.Event.PopStateEvent.EventTypes/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_History = require("../Web.HTML.History/index.js");
var Web_HTML_Location = require("../Web.HTML.Location/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var makeImmediate = function (run) {
    return function __do() {
        var v = (function __do() {
            var $37 = Web_HTML.window();
            return Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Web_HTML_Window.document($37))();
        })();
        var v1 = Effect_Ref["new"](new Data_Either.Right(0))();
        var v2 = Data_Functor.map(Effect.functorEffect)(Web_DOM_Text.toNode)(Web_DOM_Document.createTextNode("")(v))();
        var v3 = Web_DOM_MutationObserver.mutationObserver(function (v3) {
            return function (v4) {
                return function __do() {
                    Effect_Ref.modify_(Data_Either.either(function ($38) {
                        return Data_Either.Right.create(1 + $38 | 0);
                    })(Data_Either.Right.create))(v1)();
                    return run();
                };
            };
        })();
        Web_DOM_MutationObserver.observe()(v2)({
            characterData: true
        })(v3)();
        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Either.foldableEither)(function (tick) {
            return function __do() {
                Effect_Ref.write(new Data_Either.Left(tick + 1 | 0))(v1)();
                return Web_DOM_Node.setNodeValue(Data_Show.show(Data_Show.showInt)(tick))(v2)();
            };
        }));
    };
};
var makeInterface = function __do() {
    var v = Effect_Ref["new"](0)();
    var v1 = Effect_Ref["new"](Data_Map_Internal.empty)();
    var notify = function (ev) {
        return Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(function (v2) {
            return v2(ev);
        }))(Effect_Ref.read(v1));
    };
    var locationState = function __do() {
        var v2 = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.location)();
        var v3 = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.history))(Web_HTML_History.state)();
        var v4 = Web_HTML_Location.pathname(v2)();
        var v5 = Web_HTML_Location.search(v2)();
        var v6 = Web_HTML_Location.hash(v2)();
        var path = v4 + (v5 + v6);
        return {
            state: v3,
            pathname: v4,
            search: v5,
            hash: v6,
            path: path
        };
    };
    var listen = function (k) {
        return function __do() {
            var v2 = Effect_Ref.read(v)();
            Effect_Ref.write(v2 + 1 | 0)(v)();
            Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(v2)(k))(v1)();
            return Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(v2))(v1);
        };
    };
    var v2 = makeImmediate(Control_Bind.bindFlipped(Effect.bindEffect)(notify)(locationState))();
    var stateFn = function (op) {
        return function (state) {
            return function (path) {
                return function __do() {
                    Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.history))(op(state)("")(path))();
                    return v2();
                };
            };
        };
    };
    var v3 = Web_Event_EventTarget.eventListener(function (v3) {
        return Control_Bind.bindFlipped(Effect.bindEffect)(notify)(locationState);
    })();
    (function __do() {
        var $39 = Web_HTML.window();
        return Web_Event_EventTarget.addEventListener(Web_HTML_Event_PopStateEvent_EventTypes.popstate)(v3)(false)(Web_HTML_Window.toEventTarget($39))();
    })();
    return {
        pushState: stateFn(Web_HTML_History.pushState),
        replaceState: stateFn(Web_HTML_History.replaceState),
        locationState: locationState,
        listen: listen
    };
};
var foldLocations = function (cb) {
    return function (init) {
        return function (psi) {
            return function __do() {
                var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(Control_Bind.bindFlipped(Effect.bindEffect)(init)(psi.locationState))();
                return psi.listen(function (loc) {
                    return Control_Bind.bindFlipped(Effect.bindEffect)(Data_Function.flip(Effect_Ref.write)(v))(Control_Bind.bindFlipped(Effect.bindEffect)(Data_Function.flip(cb)(loc))(Effect_Ref.read(v)));
                })();
            };
        };
    };
};
var foldPaths = function (cb) {
    return function (init) {
        return foldLocations(function (a) {
            return function ($40) {
                return cb(a)((function (v) {
                    return v.path;
                })($40));
            };
        })(function ($41) {
            return init((function (v) {
                return v.path;
            })($41));
        });
    };
};
var matchesWith = function (dictFoldable) {
    return function (parser) {
        return function (cb) {
            var go = function (a) {
                return function ($42) {
                    return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(a))(function (b) {
                        return Data_Functor.voidRight(Effect.functorEffect)(new Data_Maybe.Just(b))(cb(a)(b));
                    })(Data_Foldable.indexl(dictFoldable)(0)(parser($42)));
                };
            };
            return foldPaths(go)(go(Data_Maybe.Nothing.value));
        };
    };
};
var matches = function ($43) {
    return matchesWith(Data_Either.foldableEither)(Routing.match($43));
};
var paths = matchesWith(Data_Foldable.foldableMaybe)(Data_Maybe.Just.create);
var locations = function (cb) {
    var go = function (a) {
        return function (b) {
            return Data_Functor.voidRight(Effect.functorEffect)(new Data_Maybe.Just(b))(cb(a)(b));
        };
    };
    return foldLocations(go)(go(Data_Maybe.Nothing.value));
};
module.exports = {
    makeInterface: makeInterface,
    foldLocations: foldLocations,
    locations: locations,
    foldPaths: foldPaths,
    paths: paths,
    matches: matches,
    matchesWith: matchesWith
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Map.Internal/index.js":194,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Show/index.js":235,"../Effect.Ref/index.js":288,"../Effect/index.js":294,"../Routing/index.js":394,"../Web.DOM.Document/index.js":411,"../Web.DOM.MutationObserver/index.js":415,"../Web.DOM.Node/index.js":417,"../Web.DOM.Text/index.js":422,"../Web.Event.EventTarget/index.js":427,"../Web.HTML.Event.PopStateEvent.EventTypes/index.js":432,"../Web.HTML.HTMLDocument/index.js":435,"../Web.HTML.History/index.js":441,"../Web.HTML.Location/index.js":443,"../Web.HTML.Window/index.js":446,"../Web.HTML/index.js":448}],393:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Path = (function () {
    function Path(value0) {
        this.value0 = value0;
    };
    Path.create = function (value0) {
        return new Path(value0);
    };
    return Path;
})();
var Query = (function () {
    function Query(value0) {
        this.value0 = value0;
    };
    Query.create = function (value0) {
        return new Query(value0);
    };
    return Query;
})();
var eqRoutePart = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Path && y instanceof Path) {
            return x.value0 === y.value0;
        };
        if (x instanceof Query && y instanceof Query) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(Data_Eq.eqString)(Data_Eq.eqString))(x.value0)(y.value0);
        };
        return false;
    };
});
var ordRoutePart = new Data_Ord.Ord(function () {
    return eqRoutePart;
}, function (x) {
    return function (y) {
        if (x instanceof Path && y instanceof Path) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Path) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Path) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Query && y instanceof Query) {
            return Data_Ord.compare(Data_Map_Internal.ordMap(Data_Ord.ordString)(Data_Ord.ordString))(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at Routing.Types (line 11, column 8 - line 11, column 46): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Path: Path,
    Query: Query,
    eqRoutePart: eqRoutePart,
    ordRoutePart: ordRoutePart
};

},{"../Data.Eq/index.js":133,"../Data.Map.Internal/index.js":194,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215}],394:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Global_Unsafe = require("../Global.Unsafe/index.js");
var Routing_Match = require("../Routing.Match/index.js");
var Routing_Parser = require("../Routing.Parser/index.js");
var matchWith = function (decoder) {
    return function (matcher) {
        return function ($0) {
            return Routing_Match.runMatch(matcher)(Routing_Parser.parse(decoder)($0));
        };
    };
};
var match = matchWith(Global_Unsafe.unsafeDecodeURIComponent);
module.exports = {
    match: match,
    matchWith: matchWith
};

},{"../Global.Unsafe/index.js":328,"../Routing.Match/index.js":390,"../Routing.Parser/index.js":391}],395:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var withErrorMessage = function (dictMonad) {
    return function (p) {
        return function (msg) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
        };
    };
};
var tryRethrow = function (dictMonad) {
    return function (p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                if (v1.value0 instanceof Data_Either.Left) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                };
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
            });
        })));
    };
};
var $$try = function (dictMonad) {
    return function (p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                if (v1.value0 instanceof Data_Either.Left) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                };
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
            });
        })));
    };
};
var skipMany1 = function (dictMonad) {
    return function (p) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (v1) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
            });
        });
    };
};
var skipMany = function (dictMonad) {
    return function (p) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
    };
};
var sepEndBy1 = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sep)(function (v1) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sepEndBy(dictMonad)(p)(sep))(function (v2) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v2));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List.singleton(v)));
            });
        };
    };
};
var sepEndBy = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepEndBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
        };
    };
};
var sepBy1 = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (v1) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                });
            });
        };
    };
};
var sepBy = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
        };
    };
};
var optional = function (dictMonad) {
    return function (p) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
    };
};
var option = function (dictMonad) {
    return function (a) {
        return function (p) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
        };
    };
};
var optionMaybe = function (dictMonad) {
    return function (p) {
        return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
    };
};
var notFollowedBy = function (dictMonad) {
    return function (p) {
        return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
    };
};
var manyTill = function (dictMonad) {
    return function (p) {
        return function (end) {
            var scan = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(end)(Data_List_Types.Nil.value))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(scan)(function (v1) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                });
            }));
            return scan;
        };
    };
};
var many1Till = function (dictMonad) {
    return function (p) {
        return function (end) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(manyTill(dictMonad)(p)(end))(function (v1) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                });
            });
        };
    };
};
var lookAhead = function (dictMonad) {
    return function (p) {
        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (s) {
            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(s))(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v.value0, s));
            });
        })));
    };
};
var endBy1 = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Data_List.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
        };
    };
};
var endBy = function (dictMonad) {
    return function (p) {
        return function (sep) {
            return Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(sep));
        };
    };
};
var choice = function (dictFoldable) {
    return function (dictMonad) {
        return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
    };
};
var chainr1$prime = function (dictMonad) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (v) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(chainr1(dictMonad)(p)(f))(function (v1) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v(a)(v1));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainr1 = function (dictMonad) {
    return function (p) {
        return function (f) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return chainr1$prime(dictMonad)(p)(f)(v);
            });
        };
    };
};
var chainr = function (dictMonad) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainr1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainl1$prime = function (dictMonad) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(f)(function (v) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v1) {
                        return chainl1$prime(dictMonad)(p)(f)(v(a)(v1));
                    });
                }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var chainl1 = function (dictMonad) {
    return function (p) {
        return function (f) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                return chainl1$prime(dictMonad)(p)(f)(v);
            });
        };
    };
};
var chainl = function (dictMonad) {
    return function (p) {
        return function (f) {
            return function (a) {
                return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(chainl1(dictMonad)(p)(f))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
            };
        };
    };
};
var between = function (dictMonad) {
    return function (open) {
        return function (close) {
            return function (p) {
                return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
            };
        };
    };
};
var asErrorMessage = function (dictMonad) {
    return Data_Function.flip(withErrorMessage(dictMonad));
};
module.exports = {
    withErrorMessage: withErrorMessage,
    asErrorMessage: asErrorMessage,
    between: between,
    option: option,
    optional: optional,
    optionMaybe: optionMaybe,
    "try": $$try,
    tryRethrow: tryRethrow,
    lookAhead: lookAhead,
    sepBy: sepBy,
    sepBy1: sepBy1,
    sepEndBy: sepEndBy,
    sepEndBy1: sepEndBy1,
    endBy1: endBy1,
    endBy: endBy,
    chainr: chainr,
    chainl: chainl,
    chainl1: chainl1,
    "chainl1'": chainl1$prime,
    chainr1: chainr1,
    "chainr1'": chainr1$prime,
    choice: choice,
    skipMany: skipMany,
    skipMany1: skipMany1,
    notFollowedBy: notFollowedBy,
    manyTill: manyTill,
    many1Till: many1Till
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.State.Trans/index.js":59,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Tuple/index.js":260,"../Data.Unit/index.js":266,"../Text.Parsing.Parser/index.js":399}],396:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Position = function (x) {
    return x;
};
var updatePosString = function (pos$prime) {
    return function (str) {
        var updatePosChar = function (v) {
            return function (c) {
                if (c === "\x0a") {
                    return {
                        line: v.line + 1 | 0,
                        column: 1
                    };
                };
                if (c === "\x0d") {
                    return {
                        line: v.line + 1 | 0,
                        column: 1
                    };
                };
                if (c === "\x09") {
                    return {
                        line: v.line,
                        column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                    };
                };
                return {
                    line: v.line,
                    column: v.column + 1 | 0
                };
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
    };
};
var showPosition = new Data_Show.Show(function (v) {
    return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
});
var initialPos = {
    line: 1,
    column: 1
};
var eqPosition = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.column === y.column && x.line === y.line;
    };
});
var ordPosition = new Data_Ord.Ord(function () {
    return eqPosition;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordInt)(x.column)(y.column);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Ord.ordInt)(x.line)(y.line);
    };
});
module.exports = {
    Position: Position,
    initialPos: initialPos,
    updatePosString: updatePosString,
    showPosition: showPosition,
    eqPosition: eqPosition,
    ordPosition: ordPosition
};

},{"../Data.Eq/index.js":133,"../Data.EuclideanRing/index.js":135,"../Data.Foldable/index.js":138,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235,"../Data.String.Common/index.js":241,"../Data.String.Pattern/index.js":243}],397:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");
var StringLike = function (drop, indexOf, $$null, uncons) {
    this.drop = drop;
    this.indexOf = indexOf;
    this["null"] = $$null;
    this.uncons = uncons;
};
var uncons = function (dict) {
    return dict.uncons;
};
var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
var $$null = function (dict) {
    return dict["null"];
};
var indexOf = function (dict) {
    return dict.indexOf;
};
var eof = function (dictStringLike) {
    return function (dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
            return v.value0;
        }))(function (v) {
            return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(v))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
        });
    };
};
var drop = function (dict) {
    return dict.drop;
};
var string = function (dictStringLike) {
    return function (dictMonad) {
        return function (str) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                return v.value0;
            }))(function (v) {
                var v1 = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(v);
                if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                        return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(v), Text_Parsing_Parser_Pos.updatePosString(v2.value1)(str), true);
                    }))(function () {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                    });
                };
                return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
            });
        };
    };
};
var anyChar = function (dictStringLike) {
    return function (dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
            return v.value0;
        }))(function (v) {
            var v1 = uncons(dictStringLike)(v);
            if (v1 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                    return new Text_Parsing_Parser.ParseState(v1.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v2.value1)(Data_String_CodeUnits.singleton(v1.value0.head)), true);
                }))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                });
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v1.constructor.name ]);
        });
    };
};
var satisfy = function (dictStringLike) {
    return function (dictMonad) {
        return function (f) {
            return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (v) {
                var $61 = f(v);
                if ($61) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                };
                return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(v) + "' did not satisfy predicate"));
            }));
        };
    };
};
var $$char = function (dictStringLike) {
    return function (dictMonad) {
        return function (c) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                return v === c;
            }))(Data_Show.show(Data_Show.showChar)(c));
        };
    };
};
var noneOf = function (dictStringLike) {
    return function (dictMonad) {
        return function (ss) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
        };
    };
};
var oneOf = function (dictStringLike) {
    return function (dictMonad) {
        return function (ss) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
        };
    };
};
var whiteSpace = function (dictStringLike) {
    return function (dictMonad) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictStringLike)(dictMonad)(function (c) {
            return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
        })))(function (v) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(v));
        });
    };
};
var skipSpaces = function (dictStringLike) {
    return function (dictMonad) {
        return Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(whiteSpace(dictStringLike)(dictMonad));
    };
};
module.exports = {
    drop: drop,
    indexOf: indexOf,
    "null": $$null,
    uncons: uncons,
    StringLike: StringLike,
    eof: eof,
    string: string,
    anyChar: anyChar,
    satisfy: satisfy,
    "char": $$char,
    whiteSpace: whiteSpace,
    skipSpaces: skipSpaces,
    oneOf: oneOf,
    noneOf: noneOf,
    stringLikeString: stringLikeString
};

},{"../Control.Applicative/index.js":29,"../Control.Bind/index.js":35,"../Control.Monad.State.Class/index.js":58,"../Data.Array/index.js":98,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Show/index.js":235,"../Data.String.CodePoints/index.js":237,"../Data.String.CodeUnits/index.js":239,"../Data.String.Common/index.js":241,"../Data.String.Pattern/index.js":243,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.Pos/index.js":396,"../Text.Parsing.Parser/index.js":399}],398:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var $$Math = require("../Math/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var LanguageDef = function (x) {
    return x;
};
var upper = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isUpper))("uppercase letter");
};
var unGenLanguageDef = function (v) {
    return v;
};
var token = function (dictMonad) {
    return function (tokpos) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
            return v.value0;
        }))(function (v) {
            var v1 = Data_List.uncons(v);
            if (v1 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                    return new Text_Parsing_Parser.ParseState(v1.value0.tail, tokpos(v1.value0.head), true);
                }))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                });
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 53, column 3 - line 58, column 16): " + [ v1.constructor.name ]);
        });
    };
};
var when = function (dictMonad) {
    return function (tokpos) {
        return function (f) {
            return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(token(dictMonad)(tokpos))(function (v) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_MonadZero.guard(Text_Parsing_Parser.monadZeroParserT(dictMonad))(f(v)))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                });
            }));
        };
    };
};
var theReservedNames = function (dictMonad) {
    return function (v) {
        if (v.caseSensitive) {
            return Data_Array.sort(Data_Ord.ordString)(v.reservedNames);
        };
        if (Data_Boolean.otherwise) {
            return Data_Array.sort(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.toLower)(v.reservedNames));
        };
        throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 722, column 1 - line 722, column 82): " + [ v.constructor.name ]);
    };
};
var space = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace))("space");
};
var simpleSpace = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace));
};
var oneLineComment = function (dictMonad) {
    return function (v) {
        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (v1) {
            return v1 !== "\x0a";
        })));
    };
};
var octDigit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isOctDigit))("oct digit");
};
var match = function (dictMonad) {
    return function (dictEq) {
        return function (tokpos) {
            return function (tok) {
                return when(dictMonad)(tokpos)(function (v) {
                    return Data_Eq.eq(dictEq)(v)(tok);
                });
            };
        };
    };
};
var letter = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlpha))("letter");
};
var isReserved = function ($copy_names) {
    return function ($copy_name) {
        var $tco_var_names = $copy_names;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(names, name) {
            var v = Data_Array.uncons(names);
            if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return false;
            };
            if (v instanceof Data_Maybe.Just) {
                var v1 = Data_Ord.compare(Data_Ord.ordString)(v.value0.head)(name);
                if (v1 instanceof Data_Ordering.LT) {
                    $tco_var_names = v.value0.tail;
                    $copy_name = name;
                    return;
                };
                if (v1 instanceof Data_Ordering.EQ) {
                    $tco_done = true;
                    return true;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    $tco_done = true;
                    return false;
                };
                throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 717, column 39 - line 720, column 53): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 715, column 5 - line 720, column 53): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_names, $copy_name);
        };
        return $tco_result;
    };
};
var isReservedName = function (dictMonad) {
    return function (v) {
        return function (name) {
            var caseName = (function () {
                if (v.caseSensitive) {
                    return name;
                };
                if (Data_Boolean.otherwise) {
                    return Data_String_Common.toLower(name);
                };
                throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 710, column 5 - line 711, column 57): " + [  ]);
            })();
            return isReserved(theReservedNames(dictMonad)(v))(caseName);
        };
    };
};
var inCommentSingle = function (dictMonad) {
    return function (v) {
        var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
        return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
        });
    };
};
var multiLineComment = function (dictMonad) {
    return function (v) {
        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
    };
};
var inCommentMulti = function (dictMonad) {
    return function (v) {
        var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
        return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
        });
    };
};
var inComment = function (dictMonad) {
    return function (v) {
        if (v.nestedComments) {
            return inCommentMulti(dictMonad)(v);
        };
        return inCommentSingle(dictMonad)(v);
    };
};
var whiteSpace$prime = function (dictMonad) {
    return function (v) {
        if (Data_String_Common["null"](v.commentLine) && Data_String_Common["null"](v.commentStart)) {
            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
        };
        if (Data_String_Common["null"](v.commentLine)) {
            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
        };
        if (Data_String_Common["null"](v.commentStart)) {
            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
        };
        if (Data_Boolean.otherwise) {
            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
        };
        throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 731, column 1 - line 731, column 86): " + [ v.constructor.name ]);
    };
};
var hexDigit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isHexDigit))("hex digit");
};
var digit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isDigit))("digit");
};
var makeTokenParser = function (dictMonad) {
    return function (v) {
        var stringLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
            return c !== "\"" && (c !== "\\" && c > "\x1a");
        });
        var sign = function (dictRing) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("+"))(Control_Category.identity(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
        };
        var oper = (function () {
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(function (v2) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(v1) + Data_String_CodeUnits.fromCharArray(v2));
                });
            });
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
        })();
        var number = function (base) {
            return function (baseDigit) {
                var folder = function (v1) {
                    return function (v2) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                                return (base * v1.value0 | 0) + v3 | 0;
                            })(Data_Char_Unicode.digitToInt(v2));
                        };
                        throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 600, column 9 - line 600, column 49): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                };
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(function (v1) {
                    return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(v1));
                });
            };
        };
        var octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "o", "O" ]))(number(8)(octDigit(dictMonad)));
        var lexeme = function (p) {
            return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
        };
        var reservedOp = function (name) {
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(function (v1) {
                return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))("end of " + name);
            });
            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
        };
        var symbol = function (name) {
            return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name)))(name);
        };
        var parens = function (p) {
            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
        };
        var semi = symbol(";");
        var semiSep = function (p) {
            return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
        };
        var semiSep1 = function (p) {
            return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
        };
        var isReservedOp = function (name) {
            return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
        };
        var operator = (function () {
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(function (v1) {
                var $115 = isReservedOp(v1);
                if ($115) {
                    return Text_Parsing_Parser.fail(dictMonad)("reserved operator " + v1);
                };
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1);
            });
            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
        })();
        var ident = (function () {
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(function (v2) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(v1) + Data_String_CodeUnits.fromCharArray(v2));
                });
            });
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identifier");
        })();
        var identifier = (function () {
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(function (v1) {
                var $119 = isReservedName(dictMonad)(v)(v1);
                if ($119) {
                    return Text_Parsing_Parser.fail(dictMonad)("reserved word " + Data_Show.show(Data_Show.showString)(v1));
                };
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1);
            });
            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
        })();
        var hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "x", "X" ]))(number(16)(hexDigit(dictMonad)));
        var fraction = (function () {
            var op = function (v1) {
                return function (v2) {
                    if (v2 instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v2 instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Char_Unicode.digitToInt(v1))(function (v3) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v2.value0 + Data_Int.toNumber(v3)) / 10.0);
                        });
                    };
                    throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 550, column 9 - line 550, column 51): " + [ v1.constructor.name, v2.constructor.name ]);
                };
            };
            return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("."))(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(function (v2) {
                    return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(v2));
                });
            }));
        })();
        var escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))("end of string gap");
        var escapeEmpty = Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("&");
        var escMap = Data_Array.zip([ "a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'" ])([ "\x07", "\x08", "\x0c", "\x0a", "\x0d", "\x09", "\x0b", "\\", "\"", "'" ]);
        var dot = symbol(".");
        var decimal = number(10)(digit(dictMonad));
        var exponent$prime = (function () {
            var power = function (e) {
                if (e < 0) {
                    return 1.0 / power(-e | 0);
                };
                if (Data_Boolean.otherwise) {
                    return $$Math.pow(10.0)(Data_Int.toNumber(e));
                };
                throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 563, column 9 - line 563, column 31): " + [ e.constructor.name ]);
            };
            return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "e", "E" ]))(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(function (v2) {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(function (v3) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(power(v2(v3)));
                    });
                });
            }));
        })();
        var fractExponent = function (n) {
            var justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(function (v1) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Int.toNumber(n) * v1);
            });
            var fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(function (v2) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))((Data_Int.toNumber(n) + v1) * v2);
                });
            });
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
        };
        var fractFloat = function (n) {
            return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Right.create)(fractExponent(n));
        };
        var decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(function (v1) {
            return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(v1))(fractFloat(v1));
        });
        var zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
        var natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(zeroNumFloat))(decimalFloat);
        var naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
        var floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
        var $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
        var zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
        var nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
        var $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(function (v1) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(function (v2) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1(v2));
            });
        });
        var integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
        var natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
        var comma = symbol(",");
        var commaSep = function (p) {
            return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
        };
        var commaSep1 = function (p) {
            return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
        };
        var colon = symbol(":");
        var charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(function (v1) {
            var $135 = v1 > 1114111;
            if ($135) {
                return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
            };
            var v2 = Data_Char.fromCharCode(v1);
            if (v2 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v2.value0);
            };
            if (v2 instanceof Data_Maybe.Nothing) {
                return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 448, column 17 - line 452, column 5): " + [ v2.constructor.name ]);
        });
        var charLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
            return c !== "'" && (c !== "\\" && c > "\x1a");
        });
        var charEsc = (function () {
            var parseEsc = function (v1) {
                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1);
            };
            return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
        })();
        var charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("^"))(function (v1) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(function (v2) {
                var v3 = Data_Char.fromCharCode((Data_Char.toCharCode(v2) - Data_Char.toCharCode("A") | 0) + 1 | 0);
                if (v3 instanceof Data_Maybe.Just) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v3.value0);
                };
                if (v3 instanceof Data_Maybe.Nothing) {
                    return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                };
                throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 437, column 9 - line 441, column 5): " + [ v3.constructor.name ]);
            });
        });
        var caseString = function (name) {
            if (v.caseSensitive) {
                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(name);
            };
            if (Data_Boolean.otherwise) {
                var msg = Data_Show.show(Data_Show.showString)(name);
                var caseChar = function (c) {
                    if (Data_Char_Unicode.isAlpha(c)) {
                        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toLower(c)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toUpper(c)));
                    };
                    if (Data_Boolean.otherwise) {
                        return Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c);
                    };
                    throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 658, column 9 - line 658, column 50): " + [ c.constructor.name ]);
                };
                var walk = function (name$prime) {
                    var v1 = Data_String_CodeUnits.uncons(name$prime);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
                    };
                    throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 654, column 22 - line 656, column 86): " + [ v1.constructor.name ]);
                };
                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(walk(name))(name);
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 649, column 5 - line 649, column 52): " + [ name.constructor.name ]);
        };
        var reserved = function (name) {
            var go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))("end of " + name));
            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
        };
        var brackets = function (p) {
            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
        };
        var braces = function (p) {
            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
        };
        var ascii3codes = [ "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL" ];
        var ascii3 = [ "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f" ];
        var ascii2codes = [ "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP" ];
        var ascii2 = [ "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " " ];
        var asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
        var charAscii = (function () {
            var parseAscii = function (v1) {
                return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1));
            };
            return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
        })();
        var escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
        var charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(escapeCode);
        var characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
        var charLiteral = (function () {
            var go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))("end of character"))(characterChar);
            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
        })();
        var stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(function (v1) {
            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(escapeCode));
        });
        var stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
        var stringLiteral = (function () {
            var folder = function (v1) {
                return function (chars) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return chars;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v1.value0, chars);
                    };
                    throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 404, column 9 - line 404, column 55): " + [ v1.constructor.name, chars.constructor.name ]);
                };
            };
            var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))("end of string"))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(function (v1) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_List_Types.foldableList)(folder)(Data_List_Types.Nil.value)(v1))));
            });
            return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
        })();
        var angles = function (p) {
            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
        };
        return {
            identifier: identifier,
            reserved: reserved,
            operator: operator,
            reservedOp: reservedOp,
            charLiteral: charLiteral,
            stringLiteral: stringLiteral,
            natural: natural,
            integer: integer,
            "float": $$float,
            naturalOrFloat: naturalOrFloat,
            decimal: decimal,
            hexadecimal: hexadecimal,
            octal: octal,
            symbol: symbol,
            lexeme: lexeme,
            whiteSpace: whiteSpace$prime(dictMonad)(v),
            parens: parens,
            braces: braces,
            angles: angles,
            brackets: brackets,
            semi: semi,
            comma: comma,
            colon: colon,
            dot: dot,
            semiSep: semiSep,
            semiSep1: semiSep1,
            commaSep: commaSep,
            commaSep1: commaSep1
        };
    };
};
var alphaNum = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlphaNum))("letter or digit");
};
module.exports = {
    token: token,
    when: when,
    match: match,
    LanguageDef: LanguageDef,
    unGenLanguageDef: unGenLanguageDef,
    makeTokenParser: makeTokenParser,
    digit: digit,
    hexDigit: hexDigit,
    octDigit: octDigit,
    upper: upper,
    space: space,
    letter: letter,
    alphaNum: alphaNum
};

},{"../Control.Alt/index.js":26,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Category/index.js":36,"../Control.Lazy/index.js":41,"../Control.Monad.State.Class/index.js":58,"../Control.MonadZero/index.js":67,"../Data.Array/index.js":98,"../Data.Boolean/index.js":107,"../Data.Char.Unicode/index.js":115,"../Data.Char/index.js":116,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Foldable/index.js":138,"../Data.Functor/index.js":156,"../Data.Int/index.js":168,"../Data.List.Types/index.js":192,"../Data.List/index.js":193,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.String.CodeUnits/index.js":239,"../Data.String.Common/index.js":241,"../Data.Unfoldable/index.js":262,"../Data.Unit/index.js":266,"../Math/index.js":369,"../Text.Parsing.Parser.Combinators/index.js":395,"../Text.Parsing.Parser.String/index.js":397,"../Text.Parsing.Parser/index.js":399}],399:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");
var ParseState = (function () {
    function ParseState(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ParseState.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ParseState(value0, value1, value2);
            };
        };
    };
    return ParseState;
})();
var ParseError = (function () {
    function ParseError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ParseError.create = function (value0) {
        return function (value1) {
            return new ParseError(value0, value1);
        };
    };
    return ParseError;
})();
var ParserT = function (x) {
    return x;
};
var showParseError = new Data_Show.Show(function (v) {
    return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
});
var parseErrorPosition = function (v) {
    return v.value1;
};
var parseErrorMessage = function (v) {
    return v.value0;
};
var newtypeParserT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ParserT);
var runParserT = function (dictMonad) {
    return function (s) {
        return function (p) {
            var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
            return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
        };
    };
};
var runParser = function (s) {
    return function ($90) {
        return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runParserT(Data_Identity.monadIdentity)(s)($90));
    };
};
var monadTransParserT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($91) {
        return ParserT(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)($91)));
    };
});
var monadThrowParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monadStateParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
};
var position = function (dictMonad) {
    return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
        return v.value1;
    });
};
var monadRecParserT = function (dictMonadRec) {
    return Control_Monad_Except_Trans.monadRecExceptT(Control_Monad_State_Trans.monadRecStateT(dictMonadRec));
};
var monadParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monadErrorParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var mapParserT = function ($92) {
    return Data_Newtype.over(newtypeParserT)(newtypeParserT)(ParserT)(Control_Monad_Except_Trans.mapExceptT(Control_Monad_State_Trans.mapStateT($92)));
};
var lazyParserT = new Control_Lazy.Lazy(function (f) {
    return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function ($93) {
        return Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(f($93)));
    });
});
var hoistParserT = mapParserT;
var functorParserT = function (dictFunctor) {
    return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
};
var failWithPosition = function (dictMonad) {
    return function (message) {
        return function (pos) {
            return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
        };
    };
};
var eqParseError = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Text_Parsing_Parser_Pos.eqPosition)(x.value1)(y.value1);
    };
});
var ordParseError = new Data_Ord.Ord(function () {
    return eqParseError;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Text_Parsing_Parser_Pos.ordPosition)(x.value1)(y.value1);
    };
});
var consume = function (dictMonad) {
    return Control_Monad_State_Class.modify_(monadStateParserT(dictMonad))(function (v) {
        return new ParseState(v.value0, v.value1, true);
    });
};
var bindParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var fail = function (dictMonad) {
    return function (message) {
        return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
    };
};
var applyParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var semigroupParserT = function (dictMonad) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParserT(dictMonad))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeParserT = function (dictMonad) {
    return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
};
var monoidParserT = function (dictMonad) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupParserT(dictMonad)(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeParserT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altParserT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (p1) {
        return function (p2) {
            return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                    if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                        return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                    };
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                });
            })));
        };
    });
};
var plusParserT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altParserT(dictMonad);
    }, fail(dictMonad)("No alternative"));
};
var alternativeParserT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeParserT(dictMonad);
    }, function () {
        return plusParserT(dictMonad);
    });
};
var monadZeroParserT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeParserT(dictMonad);
    }, function () {
        return monadParserT(dictMonad);
    });
};
var monadPlusParserT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroParserT(dictMonad);
    });
};
module.exports = {
    ParseError: ParseError,
    parseErrorMessage: parseErrorMessage,
    parseErrorPosition: parseErrorPosition,
    ParseState: ParseState,
    ParserT: ParserT,
    runParser: runParser,
    runParserT: runParserT,
    hoistParserT: hoistParserT,
    mapParserT: mapParserT,
    consume: consume,
    position: position,
    fail: fail,
    failWithPosition: failWithPosition,
    showParseError: showParseError,
    eqParseError: eqParseError,
    ordParseError: ordParseError,
    newtypeParserT: newtypeParserT,
    lazyParserT: lazyParserT,
    semigroupParserT: semigroupParserT,
    monoidParserT: monoidParserT,
    functorParserT: functorParserT,
    applyParserT: applyParserT,
    applicativeParserT: applicativeParserT,
    bindParserT: bindParserT,
    monadParserT: monadParserT,
    monadRecParserT: monadRecParserT,
    monadStateParserT: monadStateParserT,
    monadThrowParserT: monadThrowParserT,
    monadErrorParserT: monadErrorParserT,
    altParserT: altParserT,
    plusParserT: plusParserT,
    alternativeParserT: alternativeParserT,
    monadZeroParserT: monadZeroParserT,
    monadPlusParserT: monadPlusParserT,
    monadTransParserT: monadTransParserT
};

},{"../Control.Alt/index.js":26,"../Control.Alternative/index.js":27,"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Lazy/index.js":41,"../Control.Monad.Error.Class/index.js":44,"../Control.Monad.Except.Trans/index.js":45,"../Control.Monad.State.Class/index.js":58,"../Control.Monad.State.Trans/index.js":59,"../Control.Monad.Trans.Class/index.js":61,"../Control.MonadPlus/index.js":66,"../Control.MonadZero/index.js":67,"../Control.Plus/index.js":70,"../Data.Either/index.js":129,"../Data.Eq/index.js":133,"../Data.Identity/index.js":166,"../Data.Monoid/index.js":206,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Semigroup/index.js":230,"../Data.Show/index.js":235,"../Data.Tuple/index.js":260,"../Text.Parsing.Parser.Pos/index.js":396}],400:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var RProxy = (function () {
    function RProxy() {

    };
    RProxy.value = new RProxy();
    return RProxy;
})();
module.exports = {
    RProxy: RProxy
};

},{}],401:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var RLProxy = (function () {
    function RLProxy() {

    };
    RLProxy.value = new RLProxy();
    return RLProxy;
})();
module.exports = {
    RLProxy: RLProxy
};

},{}],402:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var TypeEquals = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var refl = new TypeEquals(function (a) {
    return a;
}, function (a) {
    return a;
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    TypeEquals: TypeEquals,
    to: to,
    from: from,
    refl: refl
};

},{}],403:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Proxy3 = (function () {
    function Proxy3() {

    };
    Proxy3.value = new Proxy3();
    return Proxy3;
})();
var Proxy2 = (function () {
    function Proxy2() {

    };
    Proxy2.value = new Proxy2();
    return Proxy2;
})();
var $$Proxy = (function () {
    function $$Proxy() {

    };
    $$Proxy.value = new $$Proxy();
    return $$Proxy;
})();
var showProxy3 = new Data_Show.Show(function (v) {
    return "Proxy3";
});
var showProxy2 = new Data_Show.Show(function (v) {
    return "Proxy2";
});
var showProxy = new Data_Show.Show(function (v) {
    return "Proxy";
});
var semiringProxy3 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, Proxy3.value);
var semiringProxy2 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, Proxy2.value);
var semiringProxy = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, $$Proxy.value);
var semigroupProxy3 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var semigroupProxy2 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var semigroupProxy = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var ringProxy3 = new Data_Ring.Ring(function () {
    return semiringProxy3;
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var ringProxy2 = new Data_Ring.Ring(function () {
    return semiringProxy2;
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var ringProxy = new Data_Ring.Ring(function () {
    return semiringProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var heytingAlgebraProxy3 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return Proxy3.value;
}, Proxy3.value);
var heytingAlgebraProxy2 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return Proxy2.value;
}, Proxy2.value);
var heytingAlgebraProxy = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return $$Proxy.value;
}, $$Proxy.value);
var functorProxy = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $$Proxy.value;
    };
});
var eqProxy3 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy3 = new Data_Ord.Ord(function () {
    return eqProxy3;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy2 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy2 = new Data_Ord.Ord(function () {
    return eqProxy2;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy = new Data_Ord.Ord(function () {
    return eqProxy;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var discardProxy3 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy2 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var commutativeRingProxy3 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy3;
});
var commutativeRingProxy2 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy2;
});
var commutativeRingProxy = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy;
});
var boundedProxy3 = new Data_Bounded.Bounded(function () {
    return ordProxy3;
}, Proxy3.value, Proxy3.value);
var boundedProxy2 = new Data_Bounded.Bounded(function () {
    return ordProxy2;
}, Proxy2.value, Proxy2.value);
var boundedProxy = new Data_Bounded.Bounded(function () {
    return ordProxy;
}, $$Proxy.value, $$Proxy.value);
var booleanAlgebraProxy3 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy3;
});
var booleanAlgebraProxy2 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy2;
});
var booleanAlgebraProxy = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy;
});
var applyProxy = new Control_Apply.Apply(function () {
    return functorProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var bindProxy = new Control_Bind.Bind(function () {
    return applyProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var applicativeProxy = new Control_Applicative.Applicative(function () {
    return applyProxy;
}, function (v) {
    return $$Proxy.value;
});
var monadProxy = new Control_Monad.Monad(function () {
    return applicativeProxy;
}, function () {
    return bindProxy;
});
module.exports = {
    "Proxy": $$Proxy,
    Proxy2: Proxy2,
    Proxy3: Proxy3,
    eqProxy: eqProxy,
    functorProxy: functorProxy,
    ordProxy: ordProxy,
    applicativeProxy: applicativeProxy,
    applyProxy: applyProxy,
    bindProxy: bindProxy,
    booleanAlgebraProxy: booleanAlgebraProxy,
    boundedProxy: boundedProxy,
    commutativeRingProxy: commutativeRingProxy,
    discardProxy: discardProxy,
    heytingAlgebraProxy: heytingAlgebraProxy,
    monadProxy: monadProxy,
    ringProxy: ringProxy,
    semigroupProxy: semigroupProxy,
    semiringProxy: semiringProxy,
    showProxy: showProxy,
    eqProxy2: eqProxy2,
    ordProxy2: ordProxy2,
    booleanAlgebraProxy2: booleanAlgebraProxy2,
    boundedProxy2: boundedProxy2,
    commutativeRingProxy2: commutativeRingProxy2,
    discardProxy2: discardProxy2,
    heytingAlgebraProxy2: heytingAlgebraProxy2,
    ringProxy2: ringProxy2,
    semigroupProxy2: semigroupProxy2,
    semiringProxy2: semiringProxy2,
    showProxy2: showProxy2,
    eqProxy3: eqProxy3,
    ordProxy3: ordProxy3,
    booleanAlgebraProxy3: booleanAlgebraProxy3,
    boundedProxy3: boundedProxy3,
    commutativeRingProxy3: commutativeRingProxy3,
    discardProxy3: discardProxy3,
    heytingAlgebraProxy3: heytingAlgebraProxy3,
    ringProxy3: ringProxy3,
    semigroupProxy3: semigroupProxy3,
    semiringProxy3: semiringProxy3,
    showProxy3: showProxy3
};

},{"../Control.Applicative/index.js":29,"../Control.Apply/index.js":31,"../Control.Bind/index.js":35,"../Control.Monad/index.js":65,"../Data.BooleanAlgebra/index.js":108,"../Data.Bounded/index.js":110,"../Data.CommutativeRing/index.js":117,"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.HeytingAlgebra/index.js":165,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Ring/index.js":224,"../Data.Semigroup/index.js":230,"../Data.Semiring/index.js":233,"../Data.Show/index.js":235}],404:[function(require,module,exports){
"use strict";

// module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};

},{}],405:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeCoerce: $foreign.unsafeCoerce
};

},{"./foreign.js":404}],406:[function(require,module,exports){
"use strict";

exports.reallyUnsafeRefEq = function (a) {
  return function (b) {
    return a === b;
  };
};

},{}],407:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var unsafeRefEq = $foreign.reallyUnsafeRefEq;
module.exports = {
    unsafeRefEq: unsafeRefEq,
    reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
};

},{"./foreign.js":406}],408:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Formatter_DateTime = require("../Data.Formatter.DateTime/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var unlines = Data_String_Common.joinWith("\x0a");
var toArrayArray = function (n) {
    var chop = function (xs) {
        var b = Data_Array.drop(n)(xs);
        var a = Data_Array.take(n)(xs);
        var $3 = Data_Array["null"](b);
        if ($3) {
            return new Data_Tuple.Tuple(a, Data_Maybe.Nothing.value);
        };
        return new Data_Tuple.Tuple(a, new Data_Maybe.Just(b));
    };
    return Data_Unfoldable1.unfoldr1(Data_Unfoldable1.unfoldable1Array)(chop);
};
var toArrayNonEmptyArray = function (n) {
    return function ($9) {
        return Data_Array.mapMaybe(Data_Array_NonEmpty.fromArray)(toArrayArray(n)($9));
    };
};
var splitAt = function (n) {
    return function (xs) {
        return new Data_Tuple.Tuple(Data_Array.take(n)(xs), Data_Array.drop(n)(xs));
    };
};
var removeAllSpaces = function ($10) {
    return Data_String_Common.joinWith("")(Data_String_Common.split(" ")($10));
};
var lines = Data_String_Common.split("\x0a");
var chopDateTime = function (original) {
    var v = Data_String_Common.split(" ")(original);
    if (v.length === 2) {
        return new Data_Maybe.Just({
            date: v[0],
            time: v[1]
        });
    };
    return Data_Maybe.Nothing.value;
};
var asiaTokyoDateTime = function (utc) {
    var offset = Data_Time_Duration.fromDuration(Data_Time_Duration.durationHours)(9.0);
    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_DateTime.adjust(Data_Time_Duration.durationMilliseconds)(offset)(utc))(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Formatter_DateTime.formatDateTime("YYYY-MM-DD HH:mm:ss")(v)))(function (v1) {
            return chopDateTime(v1);
        });
    });
};
module.exports = {
    asiaTokyoDateTime: asiaTokyoDateTime,
    lines: lines,
    removeAllSpaces: removeAllSpaces,
    toArrayArray: toArrayArray,
    toArrayNonEmptyArray: toArrayNonEmptyArray,
    unlines: unlines
};

},{"../Control.Bind/index.js":35,"../Data.Array.NonEmpty/index.js":93,"../Data.Array/index.js":98,"../Data.DateTime/index.js":126,"../Data.Either/index.js":129,"../Data.Formatter.DateTime/index.js":141,"../Data.Function/index.js":149,"../Data.Maybe/index.js":197,"../Data.String.Common/index.js":241,"../Data.Time.Duration/index.js":253,"../Data.Tuple/index.js":260,"../Data.Unfoldable1/index.js":264}],409:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var paste = "paste";
var cut = "cut";
var copy = "copy";
var clipboardchange = "clipboardchange";
module.exports = {
    clipboardchange: clipboardchange,
    copy: copy,
    cut: cut,
    paste: paste
};

},{}],410:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (doc) {
    return function () {
      return doc[name];
    };
  };
};

exports.url = getEffProp("URL");
exports.documentURI = getEffProp("documentURI");
exports.origin = getEffProp("origin");
exports.compatMode = getEffProp("compatMode");
exports.characterSet = getEffProp("characterSet");
exports.contentType = getEffProp("contentType");

exports._doctype = getEffProp("doctype");
exports._documentElement = getEffProp("documentElement");

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.createElement = function (localName) {
  return function (doc) {
    return function () {
      return doc.createElement(localName);
    };
  };
};

exports._createElementNS = function (ns) {
  return function (qualifiedName) {
    return function (doc) {
      return function () {
        return doc.createElementNS(ns, qualifiedName);
      };
    };
  };
};

exports.createDocumentFragment = function (doc) {
  return function () {
    return doc.createDocumentFragment();
  };
};

exports.createTextNode = function (data) {
  return function (doc) {
    return function () {
      return doc.createTextNode(data);
    };
  };
};

exports.createComment = function (data) {
  return function (doc) {
    return function () {
      return doc.createComment(data);
    };
  };
};

exports.createProcessingInstruction = function (target) {
  return function (data) {
    return function (doc) {
      return function () {
        return doc.createProcessingInstruction(target, data);
      };
    };
  };
};

exports.importNode = function (node) {
  return function (deep) {
    return function (doc) {
      return function () {
        return doc.importNode(node, deep);
      };
    };
  };
};

exports.adoptNode = function (node) {
  return function (doc) {
    return function () {
      return doc.adoptNode(node);
    };
  };
};

},{}],411:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var getElementsByTagNameNS = function ($0) {
    return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($0));
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var documentElement = function ($1) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_documentElement"]($1));
};
var doctype = function ($2) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_doctype"]($2));
};
var createElementNS = function ($3) {
    return $foreign["_createElementNS"](Data_Nullable.toNullable($3));
};
module.exports = {
    fromNode: fromNode,
    fromParentNode: fromParentNode,
    fromNonElementParentNode: fromNonElementParentNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toParentNode: toParentNode,
    toNonElementParentNode: toNonElementParentNode,
    toEventTarget: toEventTarget,
    doctype: doctype,
    documentElement: documentElement,
    getElementsByTagNameNS: getElementsByTagNameNS,
    createElementNS: createElementNS,
    url: $foreign.url,
    documentURI: $foreign.documentURI,
    origin: $foreign.origin,
    compatMode: $foreign.compatMode,
    characterSet: $foreign.characterSet,
    contentType: $foreign.contentType,
    getElementsByTagName: $foreign.getElementsByTagName,
    getElementsByClassName: $foreign.getElementsByClassName,
    createElement: $foreign.createElement,
    createDocumentFragment: $foreign.createDocumentFragment,
    createTextNode: $foreign.createTextNode,
    createComment: $foreign.createComment,
    createProcessingInstruction: $foreign.createProcessingInstruction,
    importNode: $foreign.importNode,
    adoptNode: $foreign.adoptNode
};

},{"../Data.Functor/index.js":156,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"../Web.Internal.FFI/index.js":450,"./foreign.js":410}],412:[function(require,module,exports){
"use strict";

var getProp = function (name) {
  return function (doctype) {
    return doctype[name];
  };
};

exports._namespaceURI = getProp("namespaceURI");
exports._prefix = getProp("prefix");
exports.localName = getProp("localName");
exports.tagName = getProp("tagName");

exports.id = function (node) {
  return function () {
    return node.id;
  };
};

exports.setId = function (id) {
  return function (node) {
    return function () {
      node.id = id;
      return {};
    };
  };
};

exports.className = function (node) {
  return function () {
    return node.className;
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

exports.setClassName = function (className) {
  return function (node) {
    return function () {
      node.className = className;
      return {};
    };
  };
};

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.setAttribute = function (name) {
  return function (value) {
    return function (element) {
      return function () {
        element.setAttribute(name, value);
        return {};
      };
    };
  };
};

exports._getAttribute = function (name) {
  return function (element) {
    return function () {
      return element.getAttribute(name);
    };
  };
};

exports.hasAttribute = function(name) {
  return function (element) {
    return element.hasAttribute(name);
  };
};

exports.removeAttribute = function (name) {
  return function (element) {
    return function () {
      element.removeAttribute(name);
      return {};
    };
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.scrollTop = function (node) {
  return function () {
    return node.scrollTop;
  };
};

exports.setScrollTop = function (scrollTop) {
  return function (node) {
    return function () {
      node.scrollTop = scrollTop;
      return {};
    };
  };
};

exports.scrollLeft = function (node) {
  return function () {
    return node.scrollLeft;
  };
};

exports.setScrollLeft = function (scrollLeft) {
  return function (node) {
    return function () {
      node.scrollLeft = scrollLeft;
      return {};
    };
  };
};

exports.scrollWidth = function (el) {
  return function () {
    return el.scrollWidth;
  };
};

exports.scrollHeight = function (el) {
  return function () {
    return el.scrollHeight;
  };
};

exports.clientTop = function (el) {
  return function () {
    return el.clientTop;
  };
};

exports.clientLeft = function (el) {
  return function () {
    return el.clientLeft;
  };
};

exports.clientWidth = function (el) {
  return function () {
    return el.clientWidth;
  };
};

exports.clientHeight = function (el) {
  return function () {
    return el.clientHeight;
  };
};

},{}],413:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var prefix = function ($0) {
    return Data_Nullable.toMaybe($foreign["_prefix"]($0));
};
var namespaceURI = function ($1) {
    return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
};
var getElementsByTagNameNS = function ($2) {
    return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
};
var getAttribute = function (attr) {
    return function ($3) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_getAttribute"](attr)($3));
    };
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
module.exports = {
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    namespaceURI: namespaceURI,
    prefix: prefix,
    getElementsByTagNameNS: getElementsByTagNameNS,
    getAttribute: getAttribute,
    localName: $foreign.localName,
    tagName: $foreign.tagName,
    id: $foreign.id,
    setId: $foreign.setId,
    className: $foreign.className,
    classList: $foreign.classList,
    setClassName: $foreign.setClassName,
    getElementsByTagName: $foreign.getElementsByTagName,
    getElementsByClassName: $foreign.getElementsByClassName,
    setAttribute: $foreign.setAttribute,
    hasAttribute: $foreign.hasAttribute,
    removeAttribute: $foreign.removeAttribute,
    scrollTop: $foreign.scrollTop,
    setScrollTop: $foreign.setScrollTop,
    scrollLeft: $foreign.scrollLeft,
    setScrollLeft: $foreign.setScrollLeft,
    scrollWidth: $foreign.scrollWidth,
    scrollHeight: $foreign.scrollHeight,
    clientTop: $foreign.clientTop,
    clientLeft: $foreign.clientLeft,
    clientWidth: $foreign.clientWidth,
    clientHeight: $foreign.clientHeight
};

},{"../Data.Functor/index.js":156,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"../Web.Internal.FFI/index.js":450,"./foreign.js":412}],414:[function(require,module,exports){
"use strict";

exports.mutationObserver = function (cb) {
  return function () {
    return new MutationObserver(function (mr, mo) {
      return cb(mr)(mo)();
    });
  };
};

exports._observe = function (node) {
  return function (config) {
    return function (mo) {
      return function () {
        return mo.observe(node, config);
      };
    };
  };
};

exports.disconnect = function (mo) {
  return function () {
    return mo.disconnect();
  };
};

exports.takeRecords = function (mo) {
  return function () {
    return mo.takeRecords();
  };
};

},{}],415:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var observe = function (dictUnion) {
    return $foreign["_observe"];
};
module.exports = {
    observe: observe,
    mutationObserver: $foreign.mutationObserver,
    disconnect: $foreign.disconnect,
    takeRecords: $foreign.takeRecords
};

},{"./foreign.js":414}],416:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.nodeTypeIndex = function (node) {
  return node.nodeType;
};

exports.nodeName = function (node) {
  return node.nodeName;
};

exports.baseURI = getEffProp("baseURI");

exports._ownerDocument = getEffProp("ownerDocument");

exports._parentNode = getEffProp("parentNode");

exports._parentElement = getEffProp("parentElement");

exports.hasChildNodes = function (node) {
  return function () {
    return node.hasChildNodes();
  };
};

exports.childNodes = getEffProp("childNodes");

exports._firstChild = getEffProp("firstChild");

exports._lastChild = getEffProp("lastChild");

exports._previousSibling = getEffProp("previousSibling");

exports._nextSibling = getEffProp("nextSibling");

exports._nodeValue = getEffProp("nodeValue");

exports.setNodeValue = function (value) {
  return function (node) {
    return function () {
      node.nodeValue = value;
      return {};
    };
  };
};

exports.textContent = getEffProp("textContent");

exports.setTextContent = function (value) {
  return function (node) {
    return function () {
      node.textContent = value;
      return {};
    };
  };
};

exports.normalize = function (node) {
  return function () {
    node.normalize();
    return {};
  };
};

exports.clone = function (node) {
  return function () {
    return node.cloneNode(false);
  };
};

exports.deepClone = function (node) {
  return function () {
    return node.cloneNode(true);
  };
};

exports.isEqualNode = function (node1) {
  return function (node2) {
    return function () {
      return node1.isEqualNode(node2);
    };
  };
};

exports.compareDocumentPositionBits = function (node1) {
  return function (node2) {
    return function () {
      return node1.compareDocumentPosition(node2);
    };
  };
};

exports.contains = function (node1) {
  return function (node2) {
    return function () {
      return node1.contains(node2);
    };
  };
};

exports._lookupPrefix = function (prefix) {
  return function (node) {
    return function () {
      return node.lookupPrefix(prefix);
    };
  };
};

exports._lookupNamespaceURI = function (ns) {
  return function (node) {
    return function () {
      return node.lookupNamespaceURI(ns);
    };
  };
};

exports.isDefaultNamespace = function (ns) {
  return function (node) {
    return function () {
      return node.isDefaultNamespace(ns);
    };
  };
};

exports.insertBefore = function (node1) {
  return function (node2) {
    return function (parent) {
      return function () {
        return parent.insertBefore(node1, node2);
      };
    };
  };
};

exports.appendChild = function (node) {
  return function (parent) {
    return function () {
      return parent.appendChild(node);
    };
  };
};

exports.replaceChild = function (newChild) {
  return function (oldChild) {
    return function (parent) {
      return function () {
        return parent.replaceChild(newChild, oldChild);
      };
    };
  };
};

exports.removeChild = function (node) {
  return function (parent) {
    return function () {
      return parent.removeChild(node);
    };
  };
};

},{}],417:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_DOM_NodeType = require("../Web.DOM.NodeType/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var previousSibling = function ($1) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_previousSibling"]($1));
};
var parentNode = function ($2) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_parentNode"]($2));
};
var parentElement = function ($3) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_parentElement"]($3));
};
var ownerDocument = function ($4) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_ownerDocument"]($4));
};
var nodeValue = function ($5) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_nodeValue"]($5));
};
var nodeType = function (dictPartial) {
    return function ($6) {
        return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType)($foreign.nodeTypeIndex($6)));
    };
};
var nextSibling = function ($7) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_nextSibling"]($7));
};
var lookupPrefix = function (p) {
    return function ($8) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_lookupPrefix"](p)($8));
    };
};
var lookupNamespaceURI = function (ns) {
    return function ($9) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_lookupNamespaceURI"](ns)($9));
    };
};
var lastChild = function ($10) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_lastChild"]($10));
};
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Node");
var firstChild = function ($11) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_firstChild"]($11));
};
module.exports = {
    fromEventTarget: fromEventTarget,
    toEventTarget: toEventTarget,
    nodeType: nodeType,
    ownerDocument: ownerDocument,
    parentNode: parentNode,
    parentElement: parentElement,
    firstChild: firstChild,
    lastChild: lastChild,
    previousSibling: previousSibling,
    nextSibling: nextSibling,
    nodeValue: nodeValue,
    lookupPrefix: lookupPrefix,
    lookupNamespaceURI: lookupNamespaceURI,
    nodeTypeIndex: $foreign.nodeTypeIndex,
    nodeName: $foreign.nodeName,
    baseURI: $foreign.baseURI,
    hasChildNodes: $foreign.hasChildNodes,
    childNodes: $foreign.childNodes,
    setNodeValue: $foreign.setNodeValue,
    textContent: $foreign.textContent,
    setTextContent: $foreign.setTextContent,
    normalize: $foreign.normalize,
    clone: $foreign.clone,
    deepClone: $foreign.deepClone,
    isEqualNode: $foreign.isEqualNode,
    compareDocumentPositionBits: $foreign.compareDocumentPositionBits,
    contains: $foreign.contains,
    isDefaultNamespace: $foreign.isDefaultNamespace,
    insertBefore: $foreign.insertBefore,
    appendChild: $foreign.appendChild,
    replaceChild: $foreign.replaceChild,
    removeChild: $foreign.removeChild
};

},{"../Data.Enum/index.js":131,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"../Web.DOM.NodeType/index.js":418,"../Web.Internal.FFI/index.js":450,"./foreign.js":416}],418:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var ElementNode = (function () {
    function ElementNode() {

    };
    ElementNode.value = new ElementNode();
    return ElementNode;
})();
var AttributeNode = (function () {
    function AttributeNode() {

    };
    AttributeNode.value = new AttributeNode();
    return AttributeNode;
})();
var TextNode = (function () {
    function TextNode() {

    };
    TextNode.value = new TextNode();
    return TextNode;
})();
var CDATASectionNode = (function () {
    function CDATASectionNode() {

    };
    CDATASectionNode.value = new CDATASectionNode();
    return CDATASectionNode;
})();
var EntityReferenceNode = (function () {
    function EntityReferenceNode() {

    };
    EntityReferenceNode.value = new EntityReferenceNode();
    return EntityReferenceNode;
})();
var EntityNode = (function () {
    function EntityNode() {

    };
    EntityNode.value = new EntityNode();
    return EntityNode;
})();
var ProcessingInstructionNode = (function () {
    function ProcessingInstructionNode() {

    };
    ProcessingInstructionNode.value = new ProcessingInstructionNode();
    return ProcessingInstructionNode;
})();
var CommentNode = (function () {
    function CommentNode() {

    };
    CommentNode.value = new CommentNode();
    return CommentNode;
})();
var DocumentNode = (function () {
    function DocumentNode() {

    };
    DocumentNode.value = new DocumentNode();
    return DocumentNode;
})();
var DocumentTypeNode = (function () {
    function DocumentTypeNode() {

    };
    DocumentTypeNode.value = new DocumentTypeNode();
    return DocumentTypeNode;
})();
var DocumentFragmentNode = (function () {
    function DocumentFragmentNode() {

    };
    DocumentFragmentNode.value = new DocumentFragmentNode();
    return DocumentFragmentNode;
})();
var NotationNode = (function () {
    function NotationNode() {

    };
    NotationNode.value = new NotationNode();
    return NotationNode;
})();
var toEnumNodeType = function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(ElementNode.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AttributeNode.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(TextNode.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(CDATASectionNode.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(EntityReferenceNode.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(EntityNode.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(ProcessingInstructionNode.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(CommentNode.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(DocumentNode.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(DocumentTypeNode.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(DocumentFragmentNode.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(NotationNode.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumNodeType = function (v) {
    if (v instanceof ElementNode) {
        return 1;
    };
    if (v instanceof AttributeNode) {
        return 2;
    };
    if (v instanceof TextNode) {
        return 3;
    };
    if (v instanceof CDATASectionNode) {
        return 4;
    };
    if (v instanceof EntityReferenceNode) {
        return 5;
    };
    if (v instanceof EntityNode) {
        return 6;
    };
    if (v instanceof ProcessingInstructionNode) {
        return 7;
    };
    if (v instanceof CommentNode) {
        return 8;
    };
    if (v instanceof DocumentNode) {
        return 9;
    };
    if (v instanceof DocumentTypeNode) {
        return 10;
    };
    if (v instanceof DocumentFragmentNode) {
        return 11;
    };
    if (v instanceof NotationNode) {
        return 12;
    };
    throw new Error("Failed pattern match at Web.DOM.NodeType (line 54, column 1 - line 54, column 36): " + [ v.constructor.name ]);
};
var eqNodeType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ElementNode && y instanceof ElementNode) {
            return true;
        };
        if (x instanceof AttributeNode && y instanceof AttributeNode) {
            return true;
        };
        if (x instanceof TextNode && y instanceof TextNode) {
            return true;
        };
        if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
            return true;
        };
        if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
            return true;
        };
        if (x instanceof EntityNode && y instanceof EntityNode) {
            return true;
        };
        if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
            return true;
        };
        if (x instanceof CommentNode && y instanceof CommentNode) {
            return true;
        };
        if (x instanceof DocumentNode && y instanceof DocumentNode) {
            return true;
        };
        if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
            return true;
        };
        if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
            return true;
        };
        if (x instanceof NotationNode && y instanceof NotationNode) {
            return true;
        };
        return false;
    };
});
var ordNodeType = new Data_Ord.Ord(function () {
    return eqNodeType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
    };
});
var enumNodeType = new Data_Enum.Enum(function () {
    return ordNodeType;
}, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
var boundedNodeType = new Data_Bounded.Bounded(function () {
    return ordNodeType;
}, ElementNode.value, NotationNode.value);
var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
    return boundedNodeType;
}, function () {
    return enumNodeType;
}, 12, fromEnumNodeType, toEnumNodeType);
module.exports = {
    ElementNode: ElementNode,
    AttributeNode: AttributeNode,
    TextNode: TextNode,
    CDATASectionNode: CDATASectionNode,
    EntityReferenceNode: EntityReferenceNode,
    EntityNode: EntityNode,
    ProcessingInstructionNode: ProcessingInstructionNode,
    CommentNode: CommentNode,
    DocumentNode: DocumentNode,
    DocumentTypeNode: DocumentTypeNode,
    DocumentFragmentNode: DocumentFragmentNode,
    NotationNode: NotationNode,
    eqNodeType: eqNodeType,
    ordNodeType: ordNodeType,
    boundedNodeType: boundedNodeType,
    enumNodeType: enumNodeType,
    boundedEnumNodeType: boundedEnumNodeType
};

},{"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214}],419:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.children = getEffProp("children");

exports._firstElementChild = getEffProp("firstElementChild");

exports._lastElementChild = getEffProp("lastElementChild");

exports.childElementCount = getEffProp("childElementCount");

exports._querySelector = function (selector) {
  return function (node) {
    return function () {
      return node.querySelector(selector);
    };
  };
};

exports.querySelectorAll = function (selector) {
  return function (node) {
    return function () {
      return node.querySelectorAll(selector);
    };
  };
};

},{}],420:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var QuerySelector = function (x) {
    return x;
};
var querySelector = function (qs) {
    return function ($3) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_querySelector"](qs)($3));
    };
};
var ordQuerySelector = Data_Ord.ordString;
var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
    return n;
}, QuerySelector);
var lastElementChild = function ($4) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_lastElementChild"]($4));
};
var firstElementChild = function ($5) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_firstElementChild"]($5));
};
var eqQuerySelector = Data_Eq.eqString;
module.exports = {
    firstElementChild: firstElementChild,
    lastElementChild: lastElementChild,
    QuerySelector: QuerySelector,
    querySelector: querySelector,
    eqQuerySelector: eqQuerySelector,
    ordQuerySelector: ordQuerySelector,
    newtypeQuerySelector: newtypeQuerySelector,
    children: $foreign.children,
    childElementCount: $foreign.childElementCount,
    querySelectorAll: $foreign.querySelectorAll
};

},{"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Nullable/index.js":210,"../Data.Ord/index.js":214,"../Effect/index.js":294,"./foreign.js":419}],421:[function(require,module,exports){
"use strict";

exports.splitText = function (offset) {
  return function (t) {
    return function () {
      return t.splitText(offset);
    };
  };
};

exports.wholeText = function (t) {
  return function () {
    return t.wholeText;
  };
};

},{}],422:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var toCharacterData = Unsafe_Coerce.unsafeCoerce;
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Text");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Text");
var fromCharacterData = Web_Internal_FFI.unsafeReadProtoTagged("Text");
module.exports = {
    fromCharacterData: fromCharacterData,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toCharacterData: toCharacterData,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toEventTarget: toEventTarget,
    splitText: $foreign.splitText,
    wholeText: $foreign.wholeText
};

},{"../Unsafe.Coerce/index.js":405,"../Web.Internal.FFI/index.js":450,"./foreign.js":421}],423:[function(require,module,exports){
"use strict";

exports.bubbles = function (e) {
  return e.bubbles;
};

exports.cancelable = function (e) {
  return e.cancelable;
};

exports._currentTarget = function (e) {
  return e.currentTarget;
};

exports.defaultPrevented = function (e) {
  return function() {
    return e.defaultPrevented;
  };
};

exports.eventPhaseIndex = function (e) {
  return e.eventPhase;
};

exports._target = function (e) {
  return e.target;
};

exports.timeStamp = function (e) {
  return e.timeStamp;
};

exports.type_ = function (e) {
  return e.type;
};

exports.preventDefault = function (e) {
  return function () {
    return e.preventDefault();
  };
};

exports.stopImmediatePropagation = function (e) {
  return function () {
    return e.stopImmediatePropagation();
  };
};

exports.stopPropagation = function (e) {
  return function () {
    return e.stopPropagation();
  };
};

},{}],424:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Web_Event_EventPhase = require("../Web.Event.EventPhase/index.js");
var EventType = function (x) {
    return x;
};
var target = function ($4) {
    return Data_Nullable.toMaybe($foreign["_target"]($4));
};
var ordEventType = Data_Ord.ordString;
var newtypeEventType = new Data_Newtype.Newtype(function (n) {
    return n;
}, EventType);
var eventPhase = function (dictPartial) {
    return function ($5) {
        return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(Web_Event_EventPhase.boundedEnumEventPhase)($foreign.eventPhaseIndex($5)));
    };
};
var eqEventType = Data_Eq.eqString;
var currentTarget = function ($6) {
    return Data_Nullable.toMaybe($foreign["_currentTarget"]($6));
};
module.exports = {
    EventType: EventType,
    target: target,
    currentTarget: currentTarget,
    eventPhase: eventPhase,
    newtypeEventType: newtypeEventType,
    eqEventType: eqEventType,
    ordEventType: ordEventType,
    type_: $foreign.type_,
    stopPropagation: $foreign.stopPropagation,
    stopImmediatePropagation: $foreign.stopImmediatePropagation,
    bubbles: $foreign.bubbles,
    cancelable: $foreign.cancelable,
    preventDefault: $foreign.preventDefault,
    defaultPrevented: $foreign.defaultPrevented,
    timeStamp: $foreign.timeStamp
};

},{"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Newtype/index.js":207,"../Data.Nullable/index.js":210,"../Data.Ord/index.js":214,"../Web.Event.EventPhase/index.js":425,"./foreign.js":423}],425:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Capturing = (function () {
    function Capturing() {

    };
    Capturing.value = new Capturing();
    return Capturing;
})();
var AtTarget = (function () {
    function AtTarget() {

    };
    AtTarget.value = new AtTarget();
    return AtTarget;
})();
var Bubbling = (function () {
    function Bubbling() {

    };
    Bubbling.value = new Bubbling();
    return Bubbling;
})();
var toEnumEventPhase = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(None.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Capturing.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AtTarget.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Bubbling.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumEventPhase = function (v) {
    if (v instanceof None) {
        return 0;
    };
    if (v instanceof Capturing) {
        return 1;
    };
    if (v instanceof AtTarget) {
        return 2;
    };
    if (v instanceof Bubbling) {
        return 3;
    };
    throw new Error("Failed pattern match at Web.Event.EventPhase (line 40, column 3 - line 44, column 17): " + [ v.constructor.name ]);
};
var eqEventPhase = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof None && y instanceof None) {
            return true;
        };
        if (x instanceof Capturing && y instanceof Capturing) {
            return true;
        };
        if (x instanceof AtTarget && y instanceof AtTarget) {
            return true;
        };
        if (x instanceof Bubbling && y instanceof Bubbling) {
            return true;
        };
        return false;
    };
});
var ordEventPhase = new Data_Ord.Ord(function () {
    return eqEventPhase;
}, function (x) {
    return function (y) {
        if (x instanceof None && y instanceof None) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof None) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof None) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Capturing && y instanceof Capturing) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Capturing) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Capturing) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AtTarget && y instanceof AtTarget) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof AtTarget) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AtTarget) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Bubbling && y instanceof Bubbling) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.Event.EventPhase (line 14, column 8 - line 14, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var enumEventPhase = new Data_Enum.Enum(function () {
    return ordEventPhase;
}, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
var boundedEventPhase = new Data_Bounded.Bounded(function () {
    return ordEventPhase;
}, None.value, Bubbling.value);
var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
    return boundedEventPhase;
}, function () {
    return enumEventPhase;
}, 4, fromEnumEventPhase, toEnumEventPhase);
module.exports = {
    None: None,
    Capturing: Capturing,
    AtTarget: AtTarget,
    Bubbling: Bubbling,
    toEnumEventPhase: toEnumEventPhase,
    fromEnumEventPhase: fromEnumEventPhase,
    eqEventPhase: eqEventPhase,
    ordEventPhase: ordEventPhase,
    boundedEventPhase: boundedEventPhase,
    enumEventPhase: enumEventPhase,
    boundedEnumEventPhase: boundedEnumEventPhase
};

},{"../Data.Bounded/index.js":110,"../Data.Enum/index.js":131,"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215}],426:[function(require,module,exports){
"use strict";

exports.eventListener = function (fn) {
  return function () {
    return function (event) {
      return fn(event)();
    };
  };
};

exports.addEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.removeEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.dispatchEvent = function (event) {
  return function (target) {
    return function () {
      return target.dispatchEvent(event);
    };
  };
};

},{}],427:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    eventListener: $foreign.eventListener,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    dispatchEvent: $foreign.dispatchEvent
};

},{"./foreign.js":426}],428:[function(require,module,exports){
"use strict";

exports.length = function (fileList) { return fileList.length; };

exports._item = function (index) {
  return function (fileList) {
    return fileList.item(index);
  };
};

},{}],429:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var item = function (i) {
    return function ($1) {
        return Data_Nullable.toMaybe($foreign["_item"](i)($1));
    };
};
var items = function (dictUnfoldable) {
    return function (fl) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function (i) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(i + 1 | 0))(item(i)(fl));
        })(0);
    };
};
module.exports = {
    item: item,
    items: items,
    length: $foreign.length
};

},{"../Data.Function/index.js":149,"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Data.Tuple/index.js":260,"../Data.Unfoldable/index.js":262,"./foreign.js":428}],430:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var drop = "drop";
var dragstart = "dragstart";
var dragover = "dragover";
var dragleave = "dragleave";
var dragexit = "dragexit";
var dragenter = "dragenter";
var dragend = "dragend";
var drag = "drag";
module.exports = {
    dragstart: dragstart,
    drag: drag,
    dragenter: dragenter,
    dragexit: dragexit,
    dragleave: dragleave,
    dragover: dragover,
    drop: drop,
    dragend: dragend
};

},{}],431:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var unload = "unload";
var toggle = "toggle";
var submit = "submit";
var storage = "storage";
var select = "select";
var reset = "reset";
var readystatechange = "readystatechange";
var progress = "progress";
var paste = "paste";
var online = "online";
var offline = "offline";
var message = "message";
var loadstart = "loadstart";
var loadend = "loadend";
var load = "load";
var languagechange = "languagechange";
var invalid = "invalid";
var input = "input";
var focus = "focus";
var error = "error";
var domcontentloaded = "DOMContentLoaded";
var cut = "cut";
var copy = "copy";
var close = "close";
var click = "click";
var change = "change";
var cancel = "cancel";
var blur = "blur";
var beforescriptexecute = "beforescriptexecute";
var beforeprint = "beforeprint";
var afterscriptexecute = "afterscriptexecute";
var afterprint = "afterprint";
var abort = "abort";
module.exports = {
    abort: abort,
    afterprint: afterprint,
    afterscriptexecute: afterscriptexecute,
    beforeprint: beforeprint,
    beforescriptexecute: beforescriptexecute,
    blur: blur,
    cancel: cancel,
    change: change,
    click: click,
    close: close,
    copy: copy,
    cut: cut,
    domcontentloaded: domcontentloaded,
    error: error,
    focus: focus,
    input: input,
    invalid: invalid,
    languagechange: languagechange,
    load: load,
    loadend: loadend,
    loadstart: loadstart,
    message: message,
    offline: offline,
    online: online,
    paste: paste,
    progress: progress,
    readystatechange: readystatechange,
    reset: reset,
    select: select,
    storage: storage,
    submit: submit,
    toggle: toggle,
    unload: unload
};

},{}],432:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var popstate = "popstate";
module.exports = {
    popstate: popstate
};

},{}],433:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Loading = (function () {
    function Loading() {

    };
    Loading.value = new Loading();
    return Loading;
})();
var Interactive = (function () {
    function Interactive() {

    };
    Interactive.value = new Interactive();
    return Interactive;
})();
var Complete = (function () {
    function Complete() {

    };
    Complete.value = new Complete();
    return Complete;
})();
var showReadyState = new Data_Show.Show(function (v) {
    if (v instanceof Loading) {
        return "Loading";
    };
    if (v instanceof Interactive) {
        return "Interactive";
    };
    if (v instanceof Complete) {
        return "Complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 20, column 1): " + [ v.constructor.name ]);
});
var print = function (v) {
    if (v instanceof Loading) {
        return "loading";
    };
    if (v instanceof Interactive) {
        return "interactive";
    };
    if (v instanceof Complete) {
        return "complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 26, column 1): " + [ v.constructor.name ]);
};
var parse = function (v) {
    if (v === "loading") {
        return new Data_Maybe.Just(Loading.value);
    };
    if (v === "interactive") {
        return new Data_Maybe.Just(Interactive.value);
    };
    if (v === "complete") {
        return new Data_Maybe.Just(Complete.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqReadyState = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return true;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return true;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Data_Ord.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Loading) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Loading) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Interactive) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Interactive) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 8 - line 12, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Loading: Loading,
    Interactive: Interactive,
    Complete: Complete,
    print: print,
    parse: parse,
    eqReadyState: eqReadyState,
    ordReadyState: ordReadyState,
    showReadyState: showReadyState
};

},{"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],434:[function(require,module,exports){
"use strict";

exports._head = function (doc) {
  return function () {
    return doc.head;
  };
};

exports._body = function (doc) {
  return function () {
    return doc.body;
  };
};

exports._readyState = function (doc) {
  return function () {
    return doc.readyState;
  };
};

exports._activeElement = function (doc) {
  return function () {
    return doc.activeElement;
  };
};

exports._currentScript = function (doc) {
  return function () {
    return doc.currentScript;
  };
};

exports.referrer = function (doc) {
  return function () {
    return doc.referrer;
  };
};

exports.title = function (doc) {
  return function () {
    return doc.title;
  };
};

exports.setTitle = function (title) {
  return function (doc) {
    return function () {
      doc.title = title;
      return {};
    };
  };
};

},{}],435:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toDocument = Unsafe_Coerce.unsafeCoerce;
var readyState = function ($0) {
    return Data_Functor.map(Effect.functorEffect)(function ($1) {
        return Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value)(Web_HTML_HTMLDocument_ReadyState.parse($1));
    })($foreign["_readyState"]($0));
};
var head = function ($2) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_head"]($2));
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var currentScript = function ($3) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_currentScript"]($3));
};
var body = function ($4) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_body"]($4));
};
var activeElement = function ($5) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_activeElement"]($5));
};
module.exports = {
    fromDocument: fromDocument,
    fromNode: fromNode,
    fromParentNode: fromParentNode,
    fromNonElementParentNode: fromNonElementParentNode,
    fromEventTarget: fromEventTarget,
    toDocument: toDocument,
    toNode: toNode,
    toParentNode: toParentNode,
    toNonElementParentNode: toNonElementParentNode,
    toEventTarget: toEventTarget,
    head: head,
    body: body,
    readyState: readyState,
    activeElement: activeElement,
    currentScript: currentScript,
    referrer: $foreign.referrer,
    title: $foreign.title,
    setTitle: $foreign.setTitle
};

},{"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"../Web.HTML.HTMLDocument.ReadyState/index.js":433,"../Web.Internal.FFI/index.js":450,"./foreign.js":434}],436:[function(require,module,exports){
"use strict";

exports._read = function (nothing, just, value) {
  var tag = Object.prototype.toString.call(value);
  if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
    return just(value);
  } else {
    return nothing;
  }
};

// ----------------------------------------------------------------------------

exports.title = function (elt) {
  return function () {
    return elt.title;
  };
};

exports.setTitle = function (title) {
  return function (elt) {
    return function () {
      elt.title = title;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.lang = function (elt) {
  return function () {
    return elt.lang;
  };
};

exports.setLang = function (lang) {
  return function (elt) {
    return function () {
      elt.lang = lang;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.dir = function (elt) {
  return function () {
    return elt.dir;
  };
};

exports.setDir = function (dir) {
  return function (elt) {
    return function () {
      elt.dir = dir;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.className = function (elt) {
  return function () {
    return elt.className;
  };
};

exports.setClassName = function (className) {
  return function (elt) {
    return function () {
      elt.className = className;
      return {};
    };
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

// ----------------------------------------------------------------------------

exports.hidden = function (elt) {
  return function () {
    return elt.hidden;
  };
};

exports.setHidden = function (hidden) {
  return function (elt) {
    return function () {
      elt.hidden = hidden;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.tabIndex = function (elt) {
  return function () {
    return elt.tabIndex;
  };
};

exports.setTabIndex = function (tabIndex) {
  return function (elt) {
    return function () {
      elt.tabIndex = tabIndex;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.draggable = function (elt) {
  return function () {
    return elt.draggable;
  };
};

exports.setDraggable = function (draggable) {
  return function (elt) {
    return function () {
      elt.draggable = draggable;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.contentEditable = function (elt) {
  return function () {
    return elt.contentEditable;
  };
};

exports.setContentEditable = function (contentEditable) {
  return function (elt) {
    return function () {
      elt.contentEditable = contentEditable;
      return {};
    };
  };
};

exports.isContentEditable = function (elt) {
  return function () {
    return elt.isContentEditable;
  };
};

// ----------------------------------------------------------------------------

exports.spellcheck = function (elt) {
  return function () {
    return elt.spellcheck;
  };
};

exports.setSpellcheck = function (spellcheck) {
  return function (elt) {
    return function () {
      elt.spellcheck = spellcheck;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.click = function (elt) {
  return function () {
    return elt.click();
  };
};

exports.focus = function (elt) {
  return function () {
    return elt.focus();
  };
};

exports.blur = function (elt) {
  return function () {
    return elt.blur();
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.getBoundingClientRect = function (el) {
  return function () {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      width: rect.width,
      height: rect.height
    };
  };
};

exports._offsetParent = function (el) {
  return function () {
    return el.offsetParent;
  };
};

exports.offsetTop = function (el) {
  return function () {
    return el.offsetTop;
  };
};

exports.offsetLeft = function (el) {
  return function () {
    return el.offsetLeft;
  };
};

exports.offsetWidth = function (el) {
  return function () {
    return el.offsetWidth;
  };
};

exports.offsetHeight = function (el) {
  return function () {
    return el.offsetHeight;
  };
};

},{}],437:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var offsetParent = function ($0) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_offsetParent"]($0));
};
var fromParentNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNonDocumentTypeChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromEventTarget = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromElement = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
module.exports = {
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    offsetParent: offsetParent,
    title: $foreign.title,
    setTitle: $foreign.setTitle,
    lang: $foreign.lang,
    setLang: $foreign.setLang,
    dir: $foreign.dir,
    setDir: $foreign.setDir,
    className: $foreign.className,
    setClassName: $foreign.setClassName,
    classList: $foreign.classList,
    hidden: $foreign.hidden,
    setHidden: $foreign.setHidden,
    tabIndex: $foreign.tabIndex,
    setTabIndex: $foreign.setTabIndex,
    draggable: $foreign.draggable,
    setDraggable: $foreign.setDraggable,
    contentEditable: $foreign.contentEditable,
    setContentEditable: $foreign.setContentEditable,
    isContentEditable: $foreign.isContentEditable,
    spellcheck: $foreign.spellcheck,
    setSpellcheck: $foreign.setSpellcheck,
    click: $foreign.click,
    focus: $foreign.focus,
    blur: $foreign.blur,
    getBoundingClientRect: $foreign.getBoundingClientRect,
    offsetTop: $foreign.offsetTop,
    offsetLeft: $foreign.offsetLeft,
    offsetWidth: $foreign.offsetWidth,
    offsetHeight: $foreign.offsetHeight
};

},{"../Data.Functor/index.js":156,"../Data.Maybe/index.js":197,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"./foreign.js":436}],438:[function(require,module,exports){
"use strict";

exports.accept = function (input) {
  return function () {
    return input.accept;
  };
};

exports.setAccept = function (accept) {
  return function (input) {
    return function () {
      input.accept = accept;
    };
  };
};

// ----------------------------------------------------------------------------

exports.alt = function (input) {
  return function () {
    return input.alt;
  };
};

exports.setAlt = function (alt) {
  return function (input) {
    return function () {
      input.alt = alt;
    };
  };
};

// ----------------------------------------------------------------------------

exports.autocomplete = function (input) {
  return function () {
    return input.autocomplete;
  };
};

exports.setAutocomplete = function (autocomplete) {
  return function (input) {
    return function () {
      input.autocomplete = autocomplete;
    };
  };
};

// ----------------------------------------------------------------------------

exports.autofocus = function (input) {
  return function () {
    return input.autofocus;
  };
};

exports.setAutofocus = function (autofocus) {
  return function (input) {
    return function () {
      input.autofocus = autofocus;
    };
  };
};

// ----------------------------------------------------------------------------

exports.defaultChecked = function (input) {
  return function () {
    return input.defaultChecked;
  };
};

exports.setDefaultChecked = function (defaultChecked) {
  return function (input) {
    return function () {
      input.defaultChecked = defaultChecked;
    };
  };
};

// ----------------------------------------------------------------------------

exports.checked = function (input) {
  return function () {
    return input.checked;
  };
};

exports.setChecked = function (checked) {
  return function (input) {
    return function () {
      input.checked = checked;
    };
  };
};

// ----------------------------------------------------------------------------

exports.dirName = function (input) {
  return function () {
    return input.dirName;
  };
};

exports.setDirName = function (dirName) {
  return function (input) {
    return function () {
      input.dirName = dirName;
    };
  };
};

// ----------------------------------------------------------------------------

exports.disabled = function (input) {
  return function () {
    return input.disabled;
  };
};

exports.setDisabled = function (disabled) {
  return function (input) {
    return function () {
      input.disabled = disabled;
    };
  };
};

// ----------------------------------------------------------------------------

exports._form = function (input) {
  return function () {
    return input.form;
  };
};

// ----------------------------------------------------------------------------

exports._files = function (input) {
  return function () {
    return input.files;
  };
};

// ----------------------------------------------------------------------------

exports.formAction = function (input) {
  return function () {
    return input.formAction;
  };
};

exports.setFormAction = function (formAction) {
  return function (input) {
    return function () {
      input.formAction = formAction;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formEnctype = function (input) {
  return function () {
    return input.formEnctype;
  };
};

exports.setFormEnctype = function (formEnctype) {
  return function (input) {
    return function () {
      input.formEnctype = formEnctype;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formMethod = function (input) {
  return function () {
    return input.formMethod;
  };
};

exports.setFormMethod = function (formMethod) {
  return function (input) {
    return function () {
      input.formMethod = formMethod;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formNoValidate = function (input) {
  return function () {
    return input.formNoValidate;
  };
};

exports.setFormNoValidate = function (formNoValidate) {
  return function (input) {
    return function () {
      input.formNoValidate = formNoValidate;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formTarget = function (input) {
  return function () {
    return input.formTarget;
  };
};

exports.setFormTarget = function (formTarget) {
  return function (input) {
    return function () {
      input.formTarget = formTarget;
    };
  };
};

// ----------------------------------------------------------------------------

exports.height = function (input) {
  return function () {
    return input.height;
  };
};

exports.setHeight = function (height) {
  return function (input) {
    return function () {
      input.height = height;
    };
  };
};

// ----------------------------------------------------------------------------

exports.indeterminate = function (input) {
  return function () {
    return input.indeterminate;
  };
};

exports.setIndeterminate = function (indeterminate) {
  return function (input) {
    return function () {
      input.indeterminate = indeterminate;
    };
  };
};

// ----------------------------------------------------------------------------

exports._list = function (input) {
  return function () {
    return input.list;
  };
};

// ----------------------------------------------------------------------------

exports.max = function (input) {
  return function () {
    return input.max;
  };
};

exports.setMax = function (max) {
  return function (input) {
    return function () {
      input.max = max;
    };
  };
};

// ----------------------------------------------------------------------------

exports.maxLength = function (input) {
  return function () {
    return input.maxLength;
  };
};

exports.setMaxLength = function (maxLength) {
  return function (input) {
    return function () {
      input.maxLength = maxLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.min = function (input) {
  return function () {
    return input.min;
  };
};

exports.setMin = function (min) {
  return function (input) {
    return function () {
      input.min = min;
    };
  };
};

// ----------------------------------------------------------------------------

exports.minLength = function (input) {
  return function () {
    return input.minLength;
  };
};

exports.setMinLength = function (minLength) {
  return function (input) {
    return function () {
      input.minLength = minLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.multiple = function (input) {
  return function () {
    return input.multiple;
  };
};

exports.setMultiple = function (multiple) {
  return function (input) {
    return function () {
      input.multiple = multiple;
    };
  };
};

// ----------------------------------------------------------------------------

exports.name = function (input) {
  return function () {
    return input.name;
  };
};

exports.setName = function (name) {
  return function (input) {
    return function () {
      input.name = name;
    };
  };
};

// ----------------------------------------------------------------------------

exports.pattern = function (input) {
  return function () {
    return input.pattern;
  };
};

exports.setPattern = function (pattern) {
  return function (input) {
    return function () {
      input.pattern = pattern;
    };
  };
};

// ----------------------------------------------------------------------------

exports.placeholder = function (input) {
  return function () {
    return input.placeholder;
  };
};

exports.setPlaceholder = function (placeholder) {
  return function (input) {
    return function () {
      input.placeholder = placeholder;
    };
  };
};

// ----------------------------------------------------------------------------

exports.readOnly = function (input) {
  return function () {
    return input.readOnly;
  };
};

exports.setReadOnly = function (readOnly) {
  return function (input) {
    return function () {
      input.readOnly = readOnly;
    };
  };
};

// ----------------------------------------------------------------------------

exports.required = function (input) {
  return function () {
    return input.required;
  };
};

exports.setRequired = function (required) {
  return function (input) {
    return function () {
      input.required = required;
    };
  };
};

// ----------------------------------------------------------------------------

exports.size = function (input) {
  return function () {
    return input.size;
  };
};

exports.setSize = function (size) {
  return function (input) {
    return function () {
      input.size = size;
    };
  };
};

// ----------------------------------------------------------------------------

exports.src = function (input) {
  return function () {
    return input.src;
  };
};

exports.setSrc = function (src) {
  return function (input) {
    return function () {
      input.src = src;
    };
  };
};

// ----------------------------------------------------------------------------

exports.step = function (input) {
  return function () {
    return input.step;
  };
};

exports.setStep = function (step) {
  return function (input) {
    return function () {
      input.step = step;
    };
  };
};

// ----------------------------------------------------------------------------

exports.type_ = function (input) {
  return function () {
    return input.type;
  };
};

exports.setType = function (type) {
  return function (input) {
    return function () {
      input.type = type;
    };
  };
};

// ----------------------------------------------------------------------------

exports.defaultValue = function (input) {
  return function () {
    return input.defaultValue;
  };
};

exports.setDefaultValue = function (defaultValue) {
  return function (input) {
    return function () {
      input.defaultValue = defaultValue;
    };
  };
};

// ----------------------------------------------------------------------------

exports.value = function (input) {
  return function () {
    return input.value;
  };
};

exports.setValue = function (value) {
  return function (input) {
    return function () {
      input.value = value;
    };
  };
};

// ----------------------------------------------------------------------------

exports.valueAsDate = function (input) {
  return function () {
    return input.valueAsDate;
  };
};

exports.setValueAsDate = function (valueAsDate) {
  return function (input) {
    return function () {
      input.valueAsDate = valueAsDate;
    };
  };
};

// ----------------------------------------------------------------------------

exports.valueAsNumber = function (input) {
  return function () {
    return input.valueAsNumber;
  };
};

exports.setValueAsNumber = function (valueAsNumber) {
  return function (input) {
    return function () {
      input.valueAsNumber = valueAsNumber;
    };
  };
};

// ----------------------------------------------------------------------------

exports.width = function (input) {
  return function () {
    return input.width;
  };
};

exports.setWidth = function (width) {
  return function (input) {
    return function () {
      input.width = width;
    };
  };
};

// ----------------------------------------------------------------------------

exports["stepUp'"] = function (n) {
  return function (input) {
    return function () {
      input.stepUp(n);
    };
  };
};

// ----------------------------------------------------------------------------

exports["stepDown'"] = function (n) {
  return function (input) {
    return function () {
      input.stepDown(n);
    };
  };
};

// ----------------------------------------------------------------------------

exports.willValidate = function (input) {
  return function () {
    return input.willValidate;
  };
};

// ----------------------------------------------------------------------------

exports.validity = function (input) {
  return function () {
    return input.validity;
  };
};

// ----------------------------------------------------------------------------

exports.validationMessage = function (input) {
  return function () {
    return input.validationMessage;
  };
};

// ----------------------------------------------------------------------------

exports.checkValidity = function (input) {
  return function () {
    return input.checkValidity();
  };
};

// ----------------------------------------------------------------------------

exports.reportValidity = function (input) {
  return function () {
    return input.reportValidity();
  };
};

// ----------------------------------------------------------------------------

exports.setCustomValidity = function (value) {
  return function (input) {
    return function () {
      input.setCustomValidity(value);
    };
  };
};

// ----------------------------------------------------------------------------

exports.labels = function (input) {
  return function () {
    return input.labels;
  };
};

// ----------------------------------------------------------------------------

exports.select = function (input) {
  return function () {
    input.select();
  };
};

// ----------------------------------------------------------------------------

exports.selectionStart = function (input) {
  return function () {
    return input.selectionStart;
  };
};

exports.setSelectionStart = function (selectionStart) {
  return function (input) {
    return function () {
      input.selectionStart = selectionStart;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionEnd = function (input) {
  return function () {
    return input.selectionEnd;
  };
};

exports.setSelectionEnd = function (selectionEnd) {
  return function (input) {
    return function () {
      input.selectionEnd = selectionEnd;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionDirection = function (input) {
  return function () {
    return input.selectionDirection;
  };
};

exports.setSelectionDirection = function (selectionDirection) {
  return function (input) {
    return function () {
      input.selectionDirection = selectionDirection;
    };
  };
};

// ----------------------------------------------------------------------------

exports.setRangeText = function (replacement) {
  return function (input) {
    return function () {
      input.setRangeText(replacement);
    };
  };
};
exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
  textarea.setRangeText(replacement, start, end, selectionMode);
};

// ----------------------------------------------------------------------------

exports.setSelectionRange = function (start) {
  return function (end) {
    return function (direction) {
      return function (input) {
        return function () {
          input.setSelectionRange(start, end, direction, input);
        };
      };
    };
  };
};

},{}],439:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_SelectionMode = require("../Web.HTML.SelectionMode/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var stepUp = $foreign["stepUp'"](1);
var stepDown = $foreign["stepDown'"](1);
var setRangeText$prime = function (rpl) {
    return function (s) {
        return function (e) {
            return function (mode) {
                return function (area) {
                    return function () {
                        return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                    };
                };
            };
        };
    };
};
var list = function ($0) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_list"]($0));
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var form = function ($1) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_form"]($1));
};
var files = function ($2) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_files"]($2));
};
module.exports = {
    fromHTMLElement: fromHTMLElement,
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toHTMLElement: toHTMLElement,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    form: form,
    files: files,
    list: list,
    "setRangeText'": setRangeText$prime,
    accept: $foreign.accept,
    setAccept: $foreign.setAccept,
    alt: $foreign.alt,
    setAlt: $foreign.setAlt,
    autocomplete: $foreign.autocomplete,
    setAutocomplete: $foreign.setAutocomplete,
    autofocus: $foreign.autofocus,
    setAutofocus: $foreign.setAutofocus,
    defaultChecked: $foreign.defaultChecked,
    setDefaultChecked: $foreign.setDefaultChecked,
    checked: $foreign.checked,
    setChecked: $foreign.setChecked,
    dirName: $foreign.dirName,
    setDirName: $foreign.setDirName,
    disabled: $foreign.disabled,
    setDisabled: $foreign.setDisabled,
    formAction: $foreign.formAction,
    setFormAction: $foreign.setFormAction,
    formEnctype: $foreign.formEnctype,
    setFormEnctype: $foreign.setFormEnctype,
    formMethod: $foreign.formMethod,
    setFormMethod: $foreign.setFormMethod,
    formNoValidate: $foreign.formNoValidate,
    setFormNoValidate: $foreign.setFormNoValidate,
    formTarget: $foreign.formTarget,
    setFormTarget: $foreign.setFormTarget,
    height: $foreign.height,
    setHeight: $foreign.setHeight,
    indeterminate: $foreign.indeterminate,
    setIndeterminate: $foreign.setIndeterminate,
    max: $foreign.max,
    setMax: $foreign.setMax,
    maxLength: $foreign.maxLength,
    setMaxLength: $foreign.setMaxLength,
    min: $foreign.min,
    setMin: $foreign.setMin,
    minLength: $foreign.minLength,
    setMinLength: $foreign.setMinLength,
    multiple: $foreign.multiple,
    setMultiple: $foreign.setMultiple,
    name: $foreign.name,
    setName: $foreign.setName,
    pattern: $foreign.pattern,
    setPattern: $foreign.setPattern,
    placeholder: $foreign.placeholder,
    setPlaceholder: $foreign.setPlaceholder,
    readOnly: $foreign.readOnly,
    setReadOnly: $foreign.setReadOnly,
    required: $foreign.required,
    setRequired: $foreign.setRequired,
    size: $foreign.size,
    setSize: $foreign.setSize,
    src: $foreign.src,
    setSrc: $foreign.setSrc,
    step: $foreign.step,
    setStep: $foreign.setStep,
    type_: $foreign.type_,
    setType: $foreign.setType,
    defaultValue: $foreign.defaultValue,
    setDefaultValue: $foreign.setDefaultValue,
    value: $foreign.value,
    setValue: $foreign.setValue,
    valueAsDate: $foreign.valueAsDate,
    setValueAsDate: $foreign.setValueAsDate,
    valueAsNumber: $foreign.valueAsNumber,
    setValueAsNumber: $foreign.setValueAsNumber,
    width: $foreign.width,
    setWidth: $foreign.setWidth,
    "stepUp'": $foreign["stepUp'"],
    "stepDown'": $foreign["stepDown'"],
    willValidate: $foreign.willValidate,
    validity: $foreign.validity,
    validationMessage: $foreign.validationMessage,
    checkValidity: $foreign.checkValidity,
    reportValidity: $foreign.reportValidity,
    setCustomValidity: $foreign.setCustomValidity,
    labels: $foreign.labels,
    select: $foreign.select,
    selectionStart: $foreign.selectionStart,
    setSelectionStart: $foreign.setSelectionStart,
    selectionEnd: $foreign.selectionEnd,
    setSelectionEnd: $foreign.setSelectionEnd,
    selectionDirection: $foreign.selectionDirection,
    setSelectionDirection: $foreign.setSelectionDirection,
    setRangeText: $foreign.setRangeText,
    setSelectionRange: $foreign.setSelectionRange
};

},{"../Data.Functor/index.js":156,"../Data.Nullable/index.js":210,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"../Web.HTML.SelectionMode/index.js":444,"../Web.Internal.FFI/index.js":450,"./foreign.js":438}],440:[function(require,module,exports){
"use strict";

exports.back = function(history) {
  return function() {
    return history.back();
  };
};
exports.forward = function(history) {
  return function() {
    return history.forward();
  };
};
exports.go = function(delta) {
  return function(history) {
    return function() {
      return history.go(delta);
    };
  };
};
exports.pushState = function(a) {
  return function(docTitle) {
    return function(url) {
      return function(history) {
        return function() {
          return history.pushState(a, docTitle, url);
        };
      };
    };
  };
};
exports.replaceState = function(a) {
  return function(docTitle) {
    return function(url) {
      return function(history) {
        return function() {
          return history.replaceState(a, docTitle, url);
        };
      };
    };
  };
};
exports.state = function(history) {
  return function() {
    return history.state;
  };
};

},{}],441:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var URL = function (x) {
    return x;
};
var DocumentTitle = function (x) {
    return x;
};
var Delta = function (x) {
    return x;
};
var newtypeURL = new Data_Newtype.Newtype(function (n) {
    return n;
}, URL);
var newtypeDocumentTitle = new Data_Newtype.Newtype(function (n) {
    return n;
}, DocumentTitle);
var newtypeDelta = new Data_Newtype.Newtype(function (n) {
    return n;
}, Delta);
var eqURL = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordURL = new Data_Ord.Ord(function () {
    return eqURL;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqDocumentTitle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordDocumentTitle = new Data_Ord.Ord(function () {
    return eqDocumentTitle;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqDelta = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordDelta = new Data_Ord.Ord(function () {
    return eqDelta;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
module.exports = {
    DocumentTitle: DocumentTitle,
    Delta: Delta,
    URL: URL,
    eqDocumentTitle: eqDocumentTitle,
    ordDocumentTitle: ordDocumentTitle,
    newtypeDocumentTitle: newtypeDocumentTitle,
    eqDelta: eqDelta,
    ordDelta: ordDelta,
    newtypeDelta: newtypeDelta,
    eqURL: eqURL,
    ordURL: ordURL,
    newtypeURL: newtypeURL,
    back: $foreign.back,
    forward: $foreign.forward,
    go: $foreign.go,
    pushState: $foreign.pushState,
    replaceState: $foreign.replaceState,
    state: $foreign.state
};

},{"../Data.Eq/index.js":133,"../Data.Newtype/index.js":207,"../Data.Ord/index.js":214,"./foreign.js":440}],442:[function(require,module,exports){
"use strict";

exports.hash = function (location) {
  return function () {
    return location.hash;
  };
};

exports.setHash = function (hash) {
  return function (location) {
    return function () {
      location.hash = hash;
    };
  };
};

// ----------------------------------------------------------------------------

exports.host = function (location) {
  return function () {
    return location.host;
  };
};

exports.setHost = function (host) {
  return function (location) {
    return function () {
      location.host = host;
    };
  };
};

// ----------------------------------------------------------------------------

exports.hostname = function (location) {
  return function () {
    return location.hostname;
  };
};

exports.setHostname = function (hostname) {
  return function (location) {
    return function () {
      location.hostname = hostname;
    };
  };
};

// ----------------------------------------------------------------------------

exports.href = function (location) {
  return function () {
    return location.href;
  };
};

exports.setHref = function (href) {
  return function (location) {
    return function () {
      location.href = href;
    };
  };
};

// ----------------------------------------------------------------------------

exports.origin = function (location) {
  return function () {
    return location.origin;
  };
};

exports.setOrigin = function (origin) {
  return function (location) {
    return function () {
      location.origin = origin;
    };
  };
};

// ----------------------------------------------------------------------------

exports.pathname = function (location) {
  return function () {
    return location.pathname;
  };
};

exports.setPathname = function (pathname) {
  return function (location) {
    return function () {
      location.pathname = pathname;
    };
  };
};

// ----------------------------------------------------------------------------

exports.port = function (location) {
  return function () {
    return location.port;
  };
};

exports.setPort = function (port) {
  return function (location) {
    return function () {
      location.port = port;
    };
  };
};

// ----------------------------------------------------------------------------

exports.protocol = function (location) {
  return function () {
    return location.protocol;
  };
};

exports.setProtocol = function (protocol) {
  return function (location) {
    return function () {
      location.protocol = protocol;
    };
  };
};

// ----------------------------------------------------------------------------

exports.search = function (location) {
  return function () {
    return location.search;
  };
};

exports.setSearch = function (search) {
  return function (location) {
    return function () {
      location.search = search;
    };
  };
};

// ----------------------------------------------------------------------------

exports.assign = function (url) {
  return function (location) {
    return function () {
      location.assign(url);
    };
  };
};

// ----------------------------------------------------------------------------

exports.replace = function (url) {
  return function (location) {
    return function () {
      location.replace(url);
    };
  };
};

// ----------------------------------------------------------------------------

exports.reload = function (location) {
  return function () {
    location.reload();
  };
};

},{}],443:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    hash: $foreign.hash,
    setHash: $foreign.setHash,
    host: $foreign.host,
    setHost: $foreign.setHost,
    hostname: $foreign.hostname,
    setHostname: $foreign.setHostname,
    href: $foreign.href,
    setHref: $foreign.setHref,
    origin: $foreign.origin,
    setOrigin: $foreign.setOrigin,
    pathname: $foreign.pathname,
    setPathname: $foreign.setPathname,
    port: $foreign.port,
    setPort: $foreign.setPort,
    protocol: $foreign.protocol,
    setProtocol: $foreign.setProtocol,
    search: $foreign.search,
    setSearch: $foreign.setSearch,
    assign: $foreign.assign,
    replace: $foreign.replace,
    reload: $foreign.reload
};

},{"./foreign.js":442}],444:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Preserve = (function () {
    function Preserve() {

    };
    Preserve.value = new Preserve();
    return Preserve;
})();
var Select = (function () {
    function Select() {

    };
    Select.value = new Select();
    return Select;
})();
var Start = (function () {
    function Start() {

    };
    Start.value = new Start();
    return Start;
})();
var End = (function () {
    function End() {

    };
    End.value = new End();
    return End;
})();
var showSelectionMode = new Data_Show.Show(function (v) {
    if (v instanceof Preserve) {
        return "Preserve";
    };
    if (v instanceof Select) {
        return "Select";
    };
    if (v instanceof Start) {
        return "Start";
    };
    if (v instanceof End) {
        return "End";
    };
    throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 17, column 10 - line 23, column 1): " + [ v.constructor.name ]);
});
var print = function (v) {
    if (v instanceof Preserve) {
        return "preserve";
    };
    if (v instanceof Select) {
        return "select";
    };
    if (v instanceof Start) {
        return "start";
    };
    if (v instanceof End) {
        return "end";
    };
    throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 32, column 9 - line 36, column 10): " + [ v.constructor.name ]);
};
var parse = function (v) {
    if (v === "preserve") {
        return new Data_Maybe.Just(Preserve.value);
    };
    if (v === "select") {
        return new Data_Maybe.Just(Select.value);
    };
    if (v === "start") {
        return new Data_Maybe.Just(Start.value);
    };
    if (v === "end") {
        return new Data_Maybe.Just(End.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqSelectionMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Preserve && y instanceof Preserve) {
            return true;
        };
        if (x instanceof Select && y instanceof Select) {
            return true;
        };
        if (x instanceof Start && y instanceof Start) {
            return true;
        };
        if (x instanceof End && y instanceof End) {
            return true;
        };
        return false;
    };
});
var ordSelectionMode = new Data_Ord.Ord(function () {
    return eqSelectionMode;
}, function (x) {
    return function (y) {
        if (x instanceof Preserve && y instanceof Preserve) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Preserve) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Preserve) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Select && y instanceof Select) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Select) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Select) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Start && y instanceof Start) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Start) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Start) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof End && y instanceof End) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 14, column 8 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Preserve: Preserve,
    Select: Select,
    Start: Start,
    End: End,
    parse: parse,
    print: print,
    eqSelectionMode: eqSelectionMode,
    ordSelectionMode: ordSelectionMode,
    showSelectionMode: showSelectionMode
};

},{"../Data.Eq/index.js":133,"../Data.Maybe/index.js":197,"../Data.Ord/index.js":214,"../Data.Ordering/index.js":215,"../Data.Show/index.js":235}],445:[function(require,module,exports){
"use strict";

exports.document = function (window) {
  return function () {
    return window.document;
  };
};

exports.navigator = function (window) {
  return function () {
    return window.navigator;
  };
};

exports.location = function (window) {
  return function () {
    return window.location;
  };
};

exports.history = function(window) {
  return function() {
    return window.history;
  };
};

exports.innerWidth = function (window) {
  return function () {
    return window.innerWidth;
  };
};

exports.innerHeight = function (window) {
  return function () {
    return window.innerHeight;
  };
};

exports.alert = function (str) {
  return function (window) {
    return function () {
      window.alert(str);
      return {};
    };
  };
};

exports.confirm = function (str) {
  return function (window) {
    return function () {
      return window.confirm(str);
    };
  };
};

exports.moveBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.moveBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.moveTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.moveTo(width, height);
        return {};
      };
    };
  };
};

exports._open = function (url) {
  return function (name) {
    return function (features) {
      return function (window) {
        return function () {
          return window.open(url, name, features);
        };
      };
    };
  };
};

exports.outerHeight = function (window) {
  return function () {
    return window.outerHeight;
  };
};

exports.outerWidth = function (window) {
  return function () {
    return window.outerWidth;
  };
};

exports.print = function (window) {
  return function () {
    window.print();
    return {};
  };
};

exports._prompt = function (str) {
  return function (defaultText) {
    return function (window) {
      return function () {
        return window.prompt(str, defaultText);
      };
    };
  };
};

exports.resizeBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.resizeBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.resizeTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.resizeTo(width, height);
        return {};
      };
    };
  };
};

exports.screenX = function (window) {
  return function () {
    return window.screenX;
  };
};

exports.screenY = function (window) {
  return function () {
    return window.screenY;
  };
};

exports.scroll = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scroll(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollBy = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scrollBy(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollX = function (window) {
  return function () {
    return window.scrollX;
  };
};

exports.scrollY = function (window) {
  return function () {
    return window.scrollY;
  };
};

exports.localStorage = function (window) {
  return function () {
    return window.localStorage;
  };
};

exports.sessionStorage = function (window) {
  return function () {
    return window.sessionStorage;
  };
};

exports._requestAnimationFrame = function(fn) {
  return function(window) {
    return function() {
      return window.requestAnimationFrame(fn);
    };
  };
};

exports._cancelAnimationFrame = function(id) {
  return function(window) {
    return function() {
      return window.cancelAnimationFrame(id);
    };
  };
};

exports._requestIdleCallback = function(opts) {
  return function(fn) {
    return function(window) {
      return function() {
        return window.requestIdleCallback(fn, opts);
      };
    };
  };
};

exports._cancelIdleCallback = function(id) {
  return function(window) {
    return function() {
      return window.cancelIdleCallback(id);
    };
  };
};

exports.parent = function(window) {
  return function() {
    return window.parent;
  };
};

exports._opener = function(window) {
  return function() {
    return window.opener;
  };
};

},{}],446:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var RequestIdleCallbackId = function (x) {
    return x;
};
var RequestAnimationFrameId = function (x) {
    return x;
};
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var requestIdleCallback = function (opts) {
    return function (fn) {
        return function ($30) {
            return Data_Functor.map(Effect.functorEffect)(RequestIdleCallbackId)($foreign["_requestIdleCallback"](opts)(fn)($30));
        };
    };
};
var requestAnimationFrame = function (fn) {
    return function ($31) {
        return Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId)($foreign["_requestAnimationFrame"](fn)($31));
    };
};
var promptDefault = function (msg) {
    return function (defaultText) {
        return function (window) {
            return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
        };
    };
};
var prompt = function (msg) {
    return function (window) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
    };
};
var opener = function (window) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
};
var open = function (url$prime) {
    return function (name) {
        return function (features) {
            return function (window) {
                return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
            };
        };
    };
};
var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestIdleCallbackId);
var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestAnimationFrameId);
var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
    return eqRequestIdleCallbackId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
    return eqRequestAnimationFrameId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var cancelIdleCallback = function (idAF) {
    return $foreign["_cancelIdleCallback"](Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
};
var cancelAnimationFrame = function (idAF) {
    return $foreign["_cancelAnimationFrame"](Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
};
module.exports = {
    toEventTarget: toEventTarget,
    open: open,
    prompt: prompt,
    promptDefault: promptDefault,
    requestAnimationFrame: requestAnimationFrame,
    cancelAnimationFrame: cancelAnimationFrame,
    requestIdleCallback: requestIdleCallback,
    cancelIdleCallback: cancelIdleCallback,
    opener: opener,
    newtypeRequestAnimationFrameId: newtypeRequestAnimationFrameId,
    eqRequestAnimationFrameId: eqRequestAnimationFrameId,
    ordRequestAnimationFrameId: ordRequestAnimationFrameId,
    newtypeRequestIdleCallbackId: newtypeRequestIdleCallbackId,
    eqRequestIdleCallbackId: eqRequestIdleCallbackId,
    ordRequestIdleCallbackId: ordRequestIdleCallbackId,
    document: $foreign.document,
    navigator: $foreign.navigator,
    location: $foreign.location,
    history: $foreign.history,
    innerWidth: $foreign.innerWidth,
    innerHeight: $foreign.innerHeight,
    alert: $foreign.alert,
    confirm: $foreign.confirm,
    moveBy: $foreign.moveBy,
    moveTo: $foreign.moveTo,
    outerHeight: $foreign.outerHeight,
    outerWidth: $foreign.outerWidth,
    print: $foreign.print,
    resizeBy: $foreign.resizeBy,
    resizeTo: $foreign.resizeTo,
    screenX: $foreign.screenX,
    screenY: $foreign.screenY,
    scroll: $foreign.scroll,
    scrollBy: $foreign.scrollBy,
    scrollX: $foreign.scrollX,
    scrollY: $foreign.scrollY,
    localStorage: $foreign.localStorage,
    sessionStorage: $foreign.sessionStorage,
    parent: $foreign.parent
};

},{"../Data.Eq/index.js":133,"../Data.Functor/index.js":156,"../Data.Newtype/index.js":207,"../Data.Nullable/index.js":210,"../Data.Ord/index.js":214,"../Effect/index.js":294,"../Unsafe.Coerce/index.js":405,"./foreign.js":445}],447:[function(require,module,exports){
/* global window */
"use strict";

exports.window = function () {
  return window;
};

},{}],448:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    window: $foreign.window
};

},{"./foreign.js":447}],449:[function(require,module,exports){
"use strict";

exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
  if (typeof window !== "undefined") {
    var ty = window[name];
    if (ty != null && value instanceof ty) {
      return just(value);
    }
    return nothing;
  } 
  var obj = value;
  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;
    if (constructorName === name) {
      return just(value);
    } else if (constructorName === "Object") {
      return nothing;
    }
    obj = proto;
  }
  return nothing;
};

},{}],450:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var unsafeReadProtoTagged = function (name) {
    return function (value) {
        return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
    };
};
module.exports = {
    unsafeReadProtoTagged: unsafeReadProtoTagged
};

},{"../Data.Maybe/index.js":197,"./foreign.js":449}],451:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var focusout = "focusout";
var focusin = "focusin";
var focus = "focus";
var blur = "blur";
module.exports = {
    blur: blur,
    focus: focus,
    focusin: focusin,
    focusout: focusout
};

},{}],452:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var keyup = "keyup";
var keydown = "keydown";
module.exports = {
    keydown: keydown,
    keyup: keyup
};

},{}],453:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var mouseup = "mouseup";
var mouseover = "mouseover";
var mouseout = "mouseout";
var mousemove = "mousemove";
var mouseleave = "mouseleave";
var mouseenter = "mouseenter";
var mousedown = "mousedown";
var dblclick = "dblclick";
var click = "click";
module.exports = {
    click: click,
    dblclick: dblclick,
    mousedown: mousedown,
    mouseenter: mouseenter,
    mouseleave: mouseleave,
    mousemove: mousemove,
    mouseout: mouseout,
    mouseover: mouseover,
    mouseup: mouseup
};

},{}],454:[function(require,module,exports){
// Generated by purs version 0.12.5
"use strict";
var wheel = "wheel";
module.exports = {
    wheel: wheel
};

},{}],455:[function(require,module,exports){
require('Main').main();

},{"Main":367}]},{},[455]);
